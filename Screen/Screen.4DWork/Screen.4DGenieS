#platform "uLCD-70DT"

// generated 1/30/2016 11:55:19 AM


#inherit "4DGL_16bitColours.fnc"

#inherit "VisualConst.inc"

#inherit "XYposToDegree.inc"

#inherit "ScreenConst.inc"


#constant IPDatasize 22

#CONST
    CMDLenMAX   80
    seroutX     $serout
    serinX      $serin
#END

#CONST
    ColorBGimage     0x0020
    ACK         0x06
    NAK         0x15
    ReadCmd     0x80
    WriteCmd    0x00
//  IPD_TYPE    0 // offsets are doubled as FLASH is byte addressable
    Ofs_IPD_P1      2
    Ofs_IPD_P2      4
    Ofs_IPD_P3      6
    Ofs_IPD_P4      8
    Ofs_IPD_P5      10
    Ofs_IPD_P6      12
    Ofs_IPD_P7      14
    Ofs_IPD_DOWN    16
    Ofs_IPD_RELEASE 18
    Ofs_IPD_OBJVIDX 20
// object indexes
    tDipSwitch      0
    tKnob           1
    tRockerSwitch   2
    tRotarySwitch   3
    tGSlider        4
    tTrackbar       5
    tWinButton      6
    tAngularmeter   7   // need to implement use of this, inputs must be ordered first
    tCoolgauge      8
    tCustomdigits   9
    tForm           10
    tGauge          11
    tImage          12
    tKeyboard       13  // this is a special input, does not need to be at front
    tLed            14
    tLeddigits      15
    tMeter          16
    tStrings        17  // also need output strings code
//    tStringUNI      0x3f | 0x40
//    tStringANSII    0x3f
    tThermometer    18
    tUserled        19
    tVideo          20
    tStaticText     21
// Remove, check for non visual objects instead
//    MaxVisObjects   21  // objects that have a visual component 
    tSounds         22
    tTimer          23
    tSpectrum       24
    tScope          25
    tTank           26
    tUserImages     27
    tPinOutput      28
    tPinInput       29 
    t4Dbutton       30    // more inputs 
    tAniButton      31
    tColorPicker    32 
    tUserButton     33     
    tMagicObject    34     
// tGradient, tBorder, tScale are not real objects, generated totally within Workshop
    MaxTotObjects   33 // objects in objects array
//    OT_DISPLAY      22
    OT_REPORT       100
    OT_SETCONST     101
    OT_SETANOTHER   102
    OT_ACTIVATE     103
    OT_NEXTFRAME    104
    OT_PREVFRAME    105
    OT_NEXTSTRING   106
    OT_PREVSTRING   107
    OT_MAGIC        108
// other OT_s Form activate,
// Indexes into LedDigits and CustomDigits arrays
    Ofs_Digits_Left           0
    Ofs_Digits_Digits         2
    Ofs_Digits_MinDigits      4
    Ofs_Digits_Widthdigit     6
    Ofs_Digits_LeadingBlanks  8
// indexes to Strings arrays
    Ofs_String_StartH        0
    Ofs_String_StartL        2
    Ofs_String_Size          4
    Ofs_String_x1            6
    Ofs_String_y1            8
    Ofs_String_x2            10
    Ofs_String_y2            12
    Ofs_String_FGColor       14
    Ofs_String_BGColor       16
    Ofs_String_FontAttribs   18
    Ofs_String_Transparent   20 // bit transparent should 'refresh' background, otherwise rectangle out
    Ofs_String_Ansi          22 // bit defines write/draw routine
    Ofs_String_Form          24 // form this string can be seen in
// Command codes
    READ_OBJ        0
    WRITE_OBJ       1
    WRITE_STR       2
    WRITE_STRU      3
    WRITE_CONTRAST  4
    REPORT_OBJ      5
    REPORT_EVENT    7
    WRITE_MAGIC_BYTES 8
    WRITE_MAGIC_DBYTES  9
    REPORT_MAGIC_EVENT_BYTES 10
    REPORT_MAGIC_EVENT_DBYTES 11
// End P1.inc
    nObjects        235
    nInputs         226
    nAniTimers      0
    nScopes         5
#END

#inherit "ColourRoutines.inc"

func ColorpickerArrow(var oldp, var pos, var color)
    gfx_TriangleFilled(pos-6, oldp+6,
                       pos,   oldp,
                       pos,   oldp+12, color) ;
endfunc

var cptop, cpleft, cpheight, cpwidth, cpTpH, cpLpW, cpBGcol ;

func getcpvars(var imgIdx)
    cptop    := img_GetWord(hndl, imgIdx, IMAGE_YPOS);
    cpleft   := img_GetWord(hndl, imgIdx, IMAGE_XPOS);
    cpheight := img_GetWord(hndl, imgIdx, IMAGE_HEIGHT);
    cpwidth  := img_GetWord(hndl, imgIdx, IMAGE_WIDTH);
    cpBGcol  := img_GetWord(hndl, imgIdx, IMAGE_TAG2);
    cpTpH    := cptop+cpheight ;
    cpLpW    := cpleft+cpwidth ;
    cpheight -= 12 ;
endfunc

func setCpHSl(var imgobj, var objobj, var newColor)
    var i, j ;
    getcpvars(imgobj) ;
    img_SetWord(hndl, imgobj, IMAGE_DELAY, newColor); // IMAGE_DELAY is used as current color
    c565toRGBs(newColor) ;
    RGB2HLS() ;
    ColorpickerArrow(cpVars[objobj], cpLpW, cpBGcol) ;          // 'erase' old arrow
    cpVars[objobj] := cpTpH - ( cpheight * l / HLSMAX) - 12;
    ColorpickerArrow(cpVars[objobj], cpLpW, LIGHTGREY) ;
    for (i := 0; i < cpheight; i++)
        j := i * HLSMAX / cpheight ;
        HLS2RGB(h, j, s) ;
        gfx_Hline(cpTpH-7-i,cpLpW-22,cpLpW-7,RGBs2COL(red,green,blue)) ;
    next
    endfunc
#DATA
    word FormStartIndex 0, 26, 41, 50, 65, 0, 68, 81, 89, 100, 0, 132, 134, 136, 160, 170, 182, 214, 222
    word FormEndIndex 26, 41, 50, 65, 68, 0, 81, 89, 100, 132, 0, 134, 136, 160, 170, 182, 214, 222, 235
    word InputControls -1, -1, 0, 66, 132, 198, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 264, 330, -1, -1, -1, -1, -1, 396, -1, -1, -1, -1, -1, -1, -1, -1, -1, 440, -1, -1, -1, -1, -1, -1, -1, -1, 506, -1, 572, 594, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 660, 726, 792, 836, 902, 968, 1012, 1078, 1122, 1188, 1254, 1320, -1, -1, -1, -1, -1, -1, 1386, -1, -1, 1452, 1496, 1540, 1584, 1628, 1672, -1, -1, -1, 1738, -1, 1782, 1848, 1892, 1936, 1980, 2024, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2068, -1, -1, -1, -1, -1, -1, 2112, -1, -1, 2178, 2244, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2310, 2354, 2398, 2442, 2486, 2530, 2574, 2618, 2662, 2706, 2750, 2794, 2838, 2860, -1, 2926, 2970, 3014, 3058, 3102, 3168, 3212, -1, 3256, 3300, 3344, 3388, 3432, 3476, 3520, 3564, 3608, 3652, 3696, 3762, 3806, 3872, -1, -1, 3938, -1, -1, -1, 3982, -1, -1, 4026, 4070, 4114, 4158, 4202, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4246, 4268, 4312, 4356, 4400, 4444, 4488, 4532, 4598, 4642, 4686, 4730, 4774, 4818, 4862, 4906
    word InputData tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 22, 2,
                OT_ACTIVATE, 10, 1, 0, 18, 0, 0, 0, 0, 44, 0,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 88, 6,
                OT_ACTIVATE, 10, 3, 0, 18, 0, 0, 0, 0, 110, 0,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 154, 8,
                OT_ACTIVATE, 10, 6, 0, 18, 0, 0, 0, 0, 176, 0,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 220, 10,
                OT_ACTIVATE, 10, 2, 0, 18, 0, 0, 0, 0, 242, 0,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 286, 90,
                OT_ACTIVATE, 10, 14, 0, 18, 0, 0, 0, 0, 308, 0,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 352, 12,
                OT_ACTIVATE, 10, 0, 0, 18, 0, 0, 0, 0, 374, 0,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 418, 18,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 462, 16,
                OT_ACTIVATE, 10, 0, 0, 18, 0, 0, 0, 0, 484, 0,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 528, 14,
                OT_ACTIVATE, 10, 0, 0, 18, 0, 0, 0, 0, 550, 0,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 0, 20,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 616, 22,
                OT_ACTIVATE, 10, 0, 0, 18, 0, 0, 0, 0, 638, 0,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 682, 28,
                OT_ACTIVATE, 10, 7, 0, 18, 0, 0, 0, 0, 704, 0,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 748, 30,
                OT_ACTIVATE, 10, 9, 0, 18, 0, 0, 0, 0, 770, 0,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 814, 34,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 858, 38,
                OT_ACTIVATE, 10, 16, 0, 18, 0, 0, 0, 0, 880, 0,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 924, 40,
                OT_ACTIVATE, 10, 12, 0, 18, 0, 0, 0, 0, 946, 0,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 990, 42,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 1034, 46,
                OT_ACTIVATE, 10, 0, 0, 18, 0, 0, 0, 0, 1056, 0,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 1100, 48,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 1144, 50,
                OT_ACTIVATE, 10, 8, 0, 18, 0, 0, 0, 0, 1166, 0,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 1210, 106,
                OT_ACTIVATE, 10, 13, 0, 18, 0, 0, 0, 0, 1232, 0,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 1276, 156,
                OT_ACTIVATE, 10, 15, 0, 18, 0, 0, 0, 0, 1298, 0,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 1342, 182,
                OT_ACTIVATE, 10, 18, 0, 18, 0, 0, 0, 0, 1364, 0,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 1408, 60,
                OT_ACTIVATE, 10, 6, 0, 18, 0, 0, 0, 0, 1430, 0,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6,
                tGSlider, 0, 188, 210, 90, 312, -1, -1, 0, 1474, 2,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 1518, 52,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 1562, 54,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 1606, 56,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 1650, 58,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 1694, 62,
                OT_ACTIVATE, 10, 6, 0, 18, 0, 0, 0, 0, 1716, 0,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 1760, 4,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 1804, 64,
                OT_ACTIVATE, 10, 6, 0, 18, 0, 0, 0, 0, 1826, 0,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 1870, 72,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 1914, 74,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 1958, 76,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 2002, 78,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 2046, 80,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 2090, 82,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 2134, 84,
                OT_ACTIVATE, 10, 6, 0, 18, 0, 0, 0, 0, 2156, 0,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 2200, 86,
                OT_ACTIVATE, 10, 6, 0, 18, 0, 0, 0, 0, 2222, 0,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 2266, 108,
                OT_ACTIVATE, 10, 6, 0, 18, 0, 0, 0, 0, 2288, 0,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 2332, 110,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 2376, 112,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 2420, 114,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 2464, 116,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 2508, 118,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 2552, 120,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 2596, 122,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 2640, 124,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 2684, 126,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 2728, 128,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 2772, 130,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 2816, 132,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65,
                tColorPicker, 1, -1, -1, -1, -1, -1, -1, 0, 0, 2,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 2882, 88,
                OT_ACTIVATE, 10, 0, 0, 18, 0, 0, 0, 0, 2904, 0,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 2948, 92,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 2992, 94,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 3036, 96,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 3080, 98,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 3124, 100,
                OT_ACTIVATE, 10, 17, 0, 18, 0, 0, 0, 0, 3146, 0,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 3190, 102,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 3234, 104,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 3278, 134,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 3322, 136,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 3366, 138,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 3410, 140,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 3454, 142,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 70,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 3498, 144,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 71,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 3542, 146,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 3586, 148,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 73,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 3630, 150,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 3674, 152,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 3718, 154,
                OT_ACTIVATE, 10, 6, 0, 18, 0, 0, 0, 0, 3740, 0,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 3784, 36,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17,
                tKnob, 666, 322, 90, 270, 180, 180, 364, 3828, 3850, 2,
                OT_SETANOTHER, 15, 26, 0, 16, 0, 0, 0, 0, 0, 26,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 3894, 44,
                OT_ACTIVATE, 10, 6, 0, 18, 0, 0, 0, 0, 3916, 0,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6,
                t4Dbutton, 0, -1, -1, -1, -1, -1, -1, 0, 3960, 2,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                t4Dbutton, 0, -1, -1, -1, -1, -1, -1, 0, 4004, 4,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 4048, 158,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 4092, 160,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 79,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 4136, 162,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 4180, 164,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 4224, 166,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 82,
                tColorPicker, 1, -1, -1, -1, -1, -1, -1, 0, 0, 4,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 4290, 168,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 83,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 4334, 170,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 4378, 172,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 4422, 174,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 86,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 4466, 176,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 4510, 178,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 88,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 4554, 180,
                OT_ACTIVATE, 10, 14, 0, 18, 0, 0, 0, 0, 4576, 0,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 4620, 184,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 91,
                t4Dbutton, 0, -1, -1, -1, -1, -1, -1, 0, 4664, 6,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 4708, 186,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 92,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 4752, 188,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 93,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 4796, 190,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 94,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 4840, 192,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 95,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 4884, 194,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 4928, 68,
                OT_ACTIVATE, 10, 6, 0, 18, 0, 0, 0, 0, 4950, 0,
                OT_REPORT, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6
    word oDipSwitchs 0
    word oKnobs 1, iKnob0
    word oRockerSwitchs 0
    word oRotarySwitchs 0
    word oGSliders 1, iSlider0
    word oTrackbars 0
    word oWinButtons 97, iWinbutton0, iWinbutton1, iWinbutton2, iWinbutton3, iWinbutton4, iWinbutton5, iWinbutton6, iWinbutton7, iWinbutton8, iWinbutton9, iWinbutton10, -1, -1, iWinbutton13, iWinbutton14, -1, iWinbutton16, iWinbutton17, iWinbutton18, iWinbutton19, iWinbutton20, iWinbutton21, iWinbutton22, iWinbutton23, iWinbutton24, iWinbutton25, iWinbutton26, iWinbutton27, iWinbutton28, iWinbutton29, iWinbutton30, iWinbutton31, -1, iWinbutton33, -1, iWinbutton35, iWinbutton36, iWinbutton37, iWinbutton38, iWinbutton39, iWinbutton40, iWinbutton41, iWinbutton42, iWinbutton43, iWinbutton44, iWinbutton45, iWinbutton46, iWinbutton47, iWinbutton48, iWinbutton49, iWinbutton50, iWinbutton51, iWinbutton52, iWinbutton53, iWinbutton54, iWinbutton55, iWinbutton56, iWinbutton57, iWinbutton58, iWinbutton59, iWinbutton60, iWinbutton61, iWinbutton62, iWinbutton63, iWinbutton64, iWinbutton65, iWinbutton66, iWinbutton67, iWinbutton68, iWinbutton69, iWinbutton70, iWinbutton71, iWinbutton72, iWinbutton73, iWinbutton74, iWinbutton75, iWinbutton76, iWinbutton77, iWinbutton78, iWinbutton79, iWinbutton80, iWinbutton81, iWinbutton82, iWinbutton83, iWinbutton84, iWinbutton85, iWinbutton86, iWinbutton87, iWinbutton88, iWinbutton89, iWinbutton90, iWinbutton91, iWinbutton92, iWinbutton93, iWinbutton94, iWinbutton95, iWinbutton96
    word oAngularmeters 7, iAngularmeter0, iAngularmeter1, iAngularmeter2, iAngularmeter3, iAngularmeter4, iAngularmeter5, iAngularmeter6
    word oCoolgauges 2, iCoolgauge0, iCoolgauge1
    word oCustomdigitss 0
    word oForms 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    word oGauges 1, iGauge0
    word oImages 2, iImage0, iImage1
    word oKeyboards 0
    word oLeds 0
    word oLeddigitss 34, iLeddigits0, iLeddigits1, iLeddigits2, iLeddigits3, iLeddigits4, iLeddigits5, iLeddigits6, -1, -1, iLeddigits9, -1, iLeddigits11, iLeddigits12, -1, iLeddigits14, iLeddigits15, iLeddigits16, -1, -1, iLeddigits19, iLeddigits20, iLeddigits21, iLeddigits22, iLeddigits23, iLeddigits24, iLeddigits25, iLeddigits26, iLeddigits27, iLeddigits28, iLeddigits29, iLeddigits30, iLeddigits31, iLeddigits32, iLeddigits33
    word oMeters 0
    word oStringss 0
    word oThermometers 0
    word oUserleds 6, -1, -1, iUserled2, iUserled3, iUserled4, iUserled5
    word oVideos 0
    word oStaticTexts 71, iStatictext0, iStatictext1, iStatictext2, iStatictext3, iStatictext4, iStatictext5, iStatictext6, iStatictext7, iStatictext8, -1, -1, -1, -1, -1, iStatictext14, iStatictext15, iStatictext16, iStatictext17, iStatictext18, iStatictext19, iStatictext20, iStatictext21, iStatictext22, iStatictext23, iStatictext24, iStatictext25, iStatictext26, iStatictext27, iStatictext28, iStatictext29, -1, iStatictext31, iStatictext32, -1, iStatictext34, iStatictext35, iStatictext36, iStatictext37, iStatictext38, iStatictext39, iStatictext40, iStatictext41, iStatictext42, iStatictext43, iStatictext44, iStatictext45, iStatictext46, iStatictext47, iStatictext48, iStatictext49, iStatictext50, iStatictext51, iStatictext52, iStatictext53, iStatictext54, iStatictext55, iStatictext56, iStatictext57, iStatictext58, iStatictext59, iStatictext60, iStatictext61, iStatictext62, iStatictext63, iStatictext64, iStatictext65, iStatictext66, iStatictext67, iStatictext68, iStatictext69, iStatictext70
    word oSpectrums 0
    word oScopes 5
    word oTanks 0
    word oUserImagess 0
    word oPinInputs 0
    word o4Dbuttons 3, i4Dbutton0, i4Dbutton1, i4Dbutton2
    word oAniButtons 0
    word oColorPickers 2, iColorpicker0, iColorpicker1
    word oUserButtons 0
    word oTimers 0
    word oSoundss 0
    word oPinOutputs 0
    word FormBGcolors 0x7D79, 0x7D79, 0x7D79, 0x7D79, 0x7D79, ColorBGimage, 0x7D79, 0x7D79, 0x7D79, 0x7D79, ColorBGimage, 0x7D79, 0x7D79, 0x7D79, 0x014B, 0x7D79, 0x7D79, 0x014B, 0x7D79
    word kKeyboardKeystrokes -1
    word rKeyboardRoutines -1
    word rColorPickerRoutines SendReport, SendReport
    word oLedDigitsn 664, 4, 1, 30, 0,
                224, 4, 1, 88, 0,
                256, 3, 1, 49, 0,
                424, 3, 1, 49, 0,
                604, 4, 2, 30, 0,
                12, 5, 1, 39, 0,
                232, 5, 1, 39, 0,
                0, 0, 0, 0, 0,
                0, 0, 0, 0, 0,
                452, 4, 3, 36, 0,
                0, 0, 0, 0, 0,
                12, 5, 3, 39, 0,
                232, 5, 3, 39, 0,
                0, 0, 0, 0, 0,
                544, 5, 1, 47, 0,
                28, 3, 1, 52, 0,
                32, 3, 1, 52, 0,
                0, 0, 0, 0, 0,
                0, 0, 0, 0, 0,
                376, 4, 2, 30, 0,
                544, 5, 1, 47, 0,
                40, 4, 1, 46, 0,
                40, 4, 1, 46, 0,
                540, 5, 3, 47, 0,
                540, 5, 3, 47, 0,
                40, 4, 1, 46, 0,
                548, 3, 1, 81, 0,
                32, 4, 1, 42, 0,
                220, 4, 1, 42, 0,
                28, 3, 1, 56, 0,
                224, 3, 1, 56, 0,
                364, 3, 1, 55, 0,
                20, 3, 1, 50, 0,
                344, 3, 1, 50, 0
    word oScopen  BLACK, 0x7D79, 1, 10, 10, 200, 75, 120, LIME, BLUE, RED, FUCHSIA, 2, 575, 4, 120, 270, YELLOW, 1, 7, 774, 419, 115, 269,
                 BLACK, 0x0280, 0, 10, 10, 144, 1, 80, LIME, BLUE, RED, FUCHSIA, 1, 650, 8, 100, 140, YELLOW, 1, 11, 793, 199, 73, 139,
                 BLACK, 0x0280, 1, 10, 10, 144, 1, 204, LIME, BLUE, RED, FUCHSIA, 1, 650, 8, 100, 264, YELLOW, 1, 11, 793, 323, 73, 263,
                 BLACK, 0x0280, 1, 10, 10, 144, 1, 328, LIME, BLUE, RED, FUCHSIA, 1, 650, 8, 100, 388, YELLOW, 1, 11, 793, 447, 73, 387,
                 BLACK, 0x0280, 1, 10, 10, 176, 10, 96, LIME, BLUE, RED, FUCHSIA, 1, 600, 0, 100, 276, YELLOW, 1, 12, 775, 455, 600, 275
#END

var cpVars[2] ;
var scTracebuf[40] ;   // each scope has 8 entries
var scCurpos[5] := [0, 0, 0, 0, 0] ;
var sc0Oldval1[116], sc0Newval1[116]  ;
var sc0Oldval2[116], sc0Newval2[116]  ;
var sc1Oldval1[74], sc1Newval1[74]  ;
var sc2Oldval1[74], sc2Newval1[74]  ;
var sc3Oldval1[74], sc3Newval1[74]  ;
var sc4Oldval1[601], sc4Newval1[601]  ;
// Start P2.inc
var oObjects[MaxTotObjects+1] ;                 // address of objects
var CurrentForm ;
var TouchXpos, TouchYpos ;
var InputType, TouchState, CurInputData, pInputIndex ;
var comRX[40], cmd[CMDLenMAX] ;

var InputCS, OutputCS ;



func seroutCS(var op)
    serout(op) ;
    OutputCS ^= op ;
endfunc

func nak0()
    serout(NAK) ;
    InputCS := 0 ;
endfunc

func seroutOcs()
    serout(OutputCS) ;
    OutputCS := 0 ;
endfunc

func SendReport(var id, var objt, var objn, var val)
    seroutCS(id) ;
    seroutCS(objt) ;
    seroutCS(objn) ;
    seroutCS(val >> 8) ; // first 8 bits
    seroutCS(val) ;
    seroutOcs() ;
endfunc

func TMul(var p1, var p2, var p3)
    var var32[2], var322[2] ;
    umul_1616(var32, p1, *(CurInputData+p2)) ;
    umul_1616(var322, var32[1], *(CurInputData+p3)) ;
    umul_1616(var32, var32[0], *(CurInputData+p3)) ;
    return(var32[1] + var322[0]) ;
endfunc

func ReadObject(var ObjectType, var ObjectIdx)
    var j, k, Objects ;
    Objects := *(oObjects+ObjectType) ;

    j := 2 + ObjectIdx * 2 + Objects ;
     if (ObjectType == tForm)
        k := CurrentForm ;
    else if ((ObjectType == tCustomdigits) || (ObjectType == tLeddigits))
        k := img_GetWord(hndl, *j, IMAGE_TAG2);
    else if (ObjectType == tColorPicker)
        k := img_GetWord(hndl, *j, IMAGE_DELAY);
        else
        k := img_GetWord(hndl, *j, IMAGE_INDEX);
        if (((ObjectType == tWinButton) || (ObjectType == tAniButton) || (ObjectType == tUserButton) || (ObjectType == t4Dbutton)) && (k)) k := 1 ; // this is not correct for blocked buttons and cannot be fixed as we cannot
                                                                                                                                                    // determine if button is momentary or not which is needed for correct answer.
    endif
    SendReport(REPORT_OBJ, ObjectType, ObjectIdx, k) ;
endfunc

func Graticule(var x1, var y1, var x2, var y2, var xinc, var yinc, var color)
    var TouchYpos ;
    x1 += xinc ;
    while (x1 < x2)
        TouchYpos := y1 + yinc ;
        while (TouchYpos < y2)
            gfx_PutPixel(x1, TouchYpos, color) ;
            TouchYpos += yinc ;
        wend
        x1 += xinc ;
    wend
endfunc

#CONST
    scColor
    scGraticuleCol
    scGraticuleVis
    scGraticuleXinc
    scGraticuleYinc
    scLeft
    scRefreshInc
    scTop
    scTrace1Col
    scTrace2Col
    scTrace3Col
    scTrace4Col
    scTraces
    scWidth
    scXmag
    scYamp
    scYLineForm
    scYLineCol
    scYLineVis
    scForm
    scRight
    scBottom
    scDataPoints
    scYZero
    SCOPEENTS
#END
var told[4], tnew[4] ;

func addressTraces(var ObjectIdx, var scopeIdx)
    var i, j ;
    j := ObjectIdx * 8 ;
    for (i := 0; i < 4 ; i++)
        if (i < oScopen[scopeIdx+scTraces])
            told[i] := scTracebuf[2*i+j] ;
            tnew[i] := scTracebuf[2*i+j+1] ;
        else
            told[i] := 0 ;
            tnew[i] := 0 ;
        endif
    next
endfunc

func drawScope(var j)
    if (oScopen[j+scForm] == CurrentForm)
        if (oScopen[j+scGraticuleVis]) Graticule(oScopen[j+scLeft], oScopen[j+scTop], oScopen[j+scRight], oScopen[j+scBottom],
                                                  oScopen[j+scGraticuleXinc], oScopen[j+scGraticuleYinc], oScopen[j+scGraticuleCol]) ;
        gfx_Scope(oScopen[j+scLeft], oScopen[j+scWidth], oScopen[j+scYZero],
                  oScopen[j+scDataPoints], oScopen[j+scXmag],oScopen[j+scYamp], oScopen[j+scColor],
                  told[0],tnew[0],oScopen[j+scTrace1Col], told[1],tnew[1],oScopen[j+scTrace2Col],  told[2],tnew[2],oScopen[j+scTrace3Col],  told[3],tnew[3],oScopen[j+scTrace4Col]
                  );
        if (oScopen[j+scYLineVis]) gfx_Hline(oScopen[j+scYLineForm], oScopen[j+scLeft], oScopen[j+scRight], oScopen[j+scYLineCol]) ;
    endif
endfunc

func doScope(var ObjectIdx, var NewVal)
    var curarr, curtrace, i, j, *p ;
    j := ObjectIdx * SCOPEENTS ;
    curarr   := scCurpos[ObjectIdx] / oScopen[j+scTraces] ;
    curtrace := scCurpos[ObjectIdx] % oScopen[j+scTraces] ;
    addressTraces(ObjectIdx, j) ;
    p := tnew[curtrace] ;
    // move trace
    mem_Copy(&p[1], &p[0], (oScopen[j+scDataPoints]-1)*2);    // this will only work in R35 and above PmmC
    p[oScopen[j+scDataPoints]-1] := NewVal ;
    if (   (curtrace == oScopen[j+scTraces]-1)
        && (curarr == oScopen[j+scRefreshInc]-1 ) )
        drawScope(j) ;
        scCurpos[ObjectIdx] := 0 ;
    else
        scCurpos[ObjectIdx]++ ;
    endif
endfunc

func WriteObject(var ObjectType, var ObjectIdx, var NewVal)
    var i, j, k, Objects ;
    ObjectType &= 0x3f ;
    if (ObjectType == tForm)
        ActivateForm(ObjectIdx) ;
    else if (ObjectType == tScope)
        doScope(ObjectIdx, NewVal) ;
    else
        Objects := *(oObjects+ObjectType)+ObjectIdx*2+2 ;
        i := *(Objects) ;
        switch (ObjectType)
            case tWinButton :
                j := InputControls[oWinButtons[ObjectIdx+1]] ;
                break ;
            case t4Dbutton :
                j := InputControls[o4Dbuttons[ObjectIdx+1]] ;
                break ;
            default : j := -1 ;
        endswitch
        if (j != -1)
            k := img_GetWord(hndl, i , IMAGE_INDEX) ;
            NewVal := NewVal << 1 ;
            if (OVF())      // button group index change
                if (*(j+InputData+Ofs_IPD_P1))
                    k &= 1 ;    // mask off old group index for momentary
                else
                    k &= 3 ;    // mask off old group index for toggle
                endif
            else            // normal set
                if (*(j+InputData+Ofs_IPD_P2) != -1) TurnOffButtons(*(j+InputData+Ofs_IPD_P2)) ;
                k &= 0xfffc ;    // retain only group index for state set
            endif
            NewVal |= k ;
        endif
        if (ObjectType == tColorPicker)
            setCpHSl(i, ObjectIdx, NewVal) ;

        else if (ObjectType == tLeddigits)
            img_SetWord(hndl, i , IMAGE_TAG2, NewVal); // where state is 0 to 2
            ledDigitsDisplay(i, oLeddigitss, oLedDigitsn) ;
        else
            img_SetWord(hndl, i , IMAGE_INDEX, NewVal); // where state is 0 to 2
            img_Show(hndl, i) ; // will only display if form is current
        endif
    endif
endfunc

func TurnOffButtons(var group)
    var j, k, l;
    for (j := 0; j < nInputs; j++)
        k := j*IPDatasize ;
        if (*(InputData+k+Ofs_IPD_P2) == group)
            l := -1 ;
             if (*(InputData+k) == t4Dbutton)
                l := o4Dbuttons[*(InputData+k+Ofs_IPD_OBJVIDX)/2] ;
                img_SetWord(hndl, l, IMAGE_INDEX, 0);
                img_Show(hndl, l);      // only shows on current form
            else if (*(InputData+k) == tWinButton)
                l := oWinButtons[*(InputData+k+Ofs_IPD_OBJVIDX)/2] ;
                img_SetWord(hndl, l, IMAGE_INDEX, 0);
                img_Show(hndl, l);      // only shows on current form
            endif
        endif
    next
endfunc


// WARNING, this code will crash if newval exceeds maximum displayable number
func ledDigitsDisplay(var imgidx, var typeptr, var setptr)
    var i, j, k, l, lb, newval ;
    if (!((img_GetWord(hndl, imgidx, IMAGE_FLAGS) & I_ENABLED))) return ;  // ;img_GetWord(hndl, imgidx, IMAGE_TAG2) ;if diabled then exit
    newval := img_GetWord(hndl, imgidx, IMAGE_TAG2) ;
    i := -1 ;
    j := *(typeptr) ;
    repeat
        typeptr += 2 ;
        i++ ;
        until (*(typeptr) == imgidx);
    j := setptr + i*10 ;

    imgidx++ ;
    l := 1 ;
    for (i := 1; i < *(j+Ofs_Digits_Digits); i++)
        l *= 10 ;
    next
    lb := *(j+Ofs_Digits_LeadingBlanks) ;
    for (i := 0; i < *(j+Ofs_Digits_Digits); i++)
        k := newval / l ;
        newval -= k * l ;
        if ( lb && (i < *(j+Ofs_Digits_Digits) - *(j+Ofs_Digits_MinDigits)) )
            if (k == 0)
                k := 10 ;
            else
                lb := 0 ;
            endif
        endif
        l /= 10 ;
        img_SetWord(hndl, imgidx, IMAGE_INDEX, k);
        img_SetWord(hndl, imgidx, IMAGE_XPOS, *(j+Ofs_Digits_Left)+i* *(j+Ofs_Digits_Widthdigit)) ;
        img_Show(hndl, imgidx);
    next
endfunc


func ActivateForm(var newform)
    var i, j, *p ;

    if (CurrentForm != -1) // deactivate old form, by disabling all inputs
        for (i := FormStartIndex[CurrentForm]; i <= FormEndIndex[CurrentForm]; i++)
            if (img_GetWord(hndl, i, IMAGE_TAG))
                img_Disable(hndl,i) ;
            endif
        next
    endif
    CurrentForm := newform ;
    // display newform image or clear to image color
    if (FormBGcolors[CurrentForm] != ColorBGimage)
        gfx_Set(BACKGROUND_COLOUR,FormBGcolors[CurrentForm]);
        gfx_Cls() ;
        DoGFXObjects() ;                                    // display GFX 'widgets'
    endif

    // enable inputs
    for (i := FormStartIndex[CurrentForm]; i < FormEndIndex[CurrentForm]; i++)
        j := img_GetWord(hndl, i, IMAGE_TAG) ;
        if (j)
            j-- ;
            img_SetAttributes(hndl, i, I_STAYONTOP+I_ENABLED);        // make sure this is on top of form, if applicable
            //if (j != tKeyboard)
            if ((j <= tWinButton) || (j >= t4Dbutton) )               // enable inputs
                img_ClearAttributes(hndl, i, I_TOUCH_DISABLE);        // ensure touch is enabled
            endif
            img_Show(hndl,i) ; // show initialy, if required
            if (j == tForm)
                DoGFXObjects() ;                                    // display GFX 'widgets' for image backgruobds
            else if (j == tLeddigits)
                ledDigitsDisplay(i, oLeddigitss, oLedDigitsn) ;
            endif
        endif
    next
    for (i := 0; i < nScopes; i++)
        j := i * SCOPEENTS ;
        if (oScopen[j+scForm] == CurrentForm)
            addressTraces(i,j) ;
            p := told[0] ;
            p[0] := -1 ; // force init scope
            gfx_RectangleFilled(oScopen[j+scLeft], oScopen[j+scTop], oScopen[j+scRight], oScopen[j+scBottom], oScopen[j+scColor]) ;
            if (oScopen[j+scGraticuleVis]) Graticule(oScopen[j+scLeft], oScopen[j+scTop], oScopen[j+scRight], oScopen[j+scBottom],
                                                      oScopen[j+scGraticuleXinc], oScopen[j+scGraticuleYinc], oScopen[j+scGraticuleCol]) ;
            drawScope(i*SCOPEENTS) ;    // draw scope when activating form, may look a bit first time up....
            if (oScopen[j+scYLineVis]) gfx_Hline(oScopen[j+scYLineForm], oScopen[j+scLeft], oScopen[j+scRight], oScopen[j+scYLineCol]) ;
        endif
    next

endfunc

func UpdateObjects(var newval)
    var IPidx, otherOBJ ;
    if ( ( img_GetWord(hndl, *(pInputIndex), IMAGE_INDEX) != newval) || (TouchState == Ofs_IPD_RELEASE) ) // only bother if values changed, or release

        img_SetWord(hndl, *(pInputIndex), IMAGE_INDEX, newval);
    if (img_GetWord(hndl, *(pInputIndex), IMAGE_TAG) != tColorPicker)
            img_Show(hndl, *(pInputIndex));      // only shows on current form
        endif
        if ((InputType == t4Dbutton) || (InputType == tUserButton) || (InputType == tWinButton))
            if (*(CurInputData+Ofs_IPD_P1))
                newval &= 1;
            else
                newval &= 3;
            endif
            if (newval > 1) newval := 1;
        endif
        IPidx := *(CurInputData+TouchState) ;
        while(IPidx != 0)
            otherOBJ := IPidx + InputData;
            if (*(otherOBJ) == OT_REPORT)
        SendReport(REPORT_EVENT, InputType, *(otherOBJ+Ofs_IPD_OBJVIDX), newval) ;
            else if (*(otherOBJ) == OT_MAGIC)
                IPidx := *(otherOBJ+Ofs_IPD_P5) ;
                IPidx(newval) ;
            else if (TouchState == *(otherOBJ+Ofs_IPD_P4))
                if (*(otherOBJ) == OT_ACTIVATE)
                    ActivateForm(*(otherOBJ+Ofs_IPD_P2) ) ;
                    InputType := tForm ;
                else if (*(otherOBJ) == OT_SETCONST)
                    newval := *(otherOBJ+Ofs_IPD_P3) ;
                    WriteObject(*(otherOBJ+Ofs_IPD_P1), *(otherOBJ+Ofs_IPD_P2), newval) ;
                else if (*(otherOBJ) == OT_SETANOTHER)
                    WriteObject(*(otherOBJ+Ofs_IPD_P1), *(otherOBJ+Ofs_IPD_P2), newval) ;
                else if (*(otherOBJ) == OT_PREVFRAME)
                    if (img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX))
                        WriteObject(*(otherOBJ+Ofs_IPD_P5),*(otherOBJ+Ofs_IPD_P2),img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX)-1) ;
                    endif
                    newval := img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) ;
                else if (*(otherOBJ) == OT_NEXTFRAME)
                    if (img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) < *(otherOBJ+Ofs_IPD_P3))
                        WriteObject(*(otherOBJ+Ofs_IPD_P5),*(otherOBJ+Ofs_IPD_P2),img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX)+1) ;
                    endif
                    newval := img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) ;
                endif
            endif
            IPidx := *(otherOBJ+TouchState) ;
        wend
    endif
endfunc

// End P2.inc
func DoGFXObjects()
    switch (CurrentForm)
        case 0:
            gfx_RectangleFilled(0, 0, 799, 63, 0x014B) ;
            gfx_OutlineColour(WHITE) ;
            gfx_LinePattern(LPFINE) ;
            gfx_RectangleFilled(0, 64, 799, 77, 0xFE81) ;
            gfx_OutlineColour(BLACK) ;
            gfx_Panel(PANEL_RAISED, 4, 215, 217, 194, 0x7D79) ;
            gfx_Panel(PANEL_RAISED, 224, 216, 212, 193, 0x7D79) ;
            gfx_Panel(PANEL_RAISED, 3, 412, 791, 68, 0x7D79) ;
            gfx_Panel(PANEL_RAISED, 440, 188, 354, 220, 0x7D79) ;
        break ;
        case 1:
            gfx_RectangleFilled(0, 0, 799, 63, 0x014B) ;
            gfx_OutlineColour(WHITE) ;
            gfx_LinePattern(LPFINE) ;
            gfx_RectangleFilled(0, 64, 799, 77, 0xFE81) ;
            gfx_OutlineColour(BLACK) ;
            gfx_Panel(PANEL_RAISED, 588, 80, 210, 286, 0x7D79) ;
            gfx_Panel(PANEL_RAISED, 380, 80, 210, 286, 0x7D79) ;
            gfx_Panel(PANEL_RAISED, 168, 80, 210, 286, 0x7D79) ;
            gfx_Panel(PANEL_RAISED, 0, 196, 168, 170, 0x7D79) ;
            gfx_Panel(PANEL_RAISED, 0, 367, 799, 113, 0x7D79) ;
        break ;
        case 2:
            gfx_RectangleFilled(0, 0, 799, 63, 0x014B) ;
            gfx_OutlineColour(WHITE) ;
            gfx_LinePattern(LPFINE) ;
            gfx_Panel(PANEL_RAISED, 0, 64, 800, 14, 0xFE81) ;
            gfx_OutlineColour(BLACK) ;
        break ;
        case 3:
            gfx_OutlineColour(WHITE) ;
            gfx_LinePattern(LPFINE) ;
            gfx_RectangleFilled(0, 64, 799, 77, 0xFE81) ;
            gfx_OutlineColour(BLACK) ;
            gfx_Panel(PANEL_RAISED, 0, 0, 800, 64, 0x014B) ;
        break ;
        case 4:
            gfx_RectangleFilled(0, 0, 799, 63, 0x014B) ;
            gfx_OutlineColour(WHITE) ;
            gfx_LinePattern(LPFINE) ;
            gfx_RectangleFilled(0, 64, 799, 77, 0xFE81) ;
            gfx_OutlineColour(BLACK) ;
        break ;
        case 6:
            gfx_RectangleFilled(0, 0, 799, 81, 0x014B) ;
            gfx_OutlineColour(WHITE) ;
            gfx_LinePattern(LPFINE) ;
            gfx_RectangleFilled(0, 80, 799, 92, 0xFE81) ;
            gfx_OutlineColour(BLACK) ;
        break ;
        case 7:
            gfx_OutlineColour(WHITE) ;
            gfx_LinePattern(LPFINE) ;
            gfx_RectangleFilled(0, 64, 799, 76, 0xFE81) ;
            gfx_OutlineColour(BLACK) ;
            gfx_RectangleFilled(0, 0, 799, 63, 0x014B) ;
        break ;
        case 8:
            gfx_RectangleFilled(0, 0, 799, 63, 0x014B) ;
            gfx_OutlineColour(WHITE) ;
            gfx_LinePattern(LPFINE) ;
            gfx_RectangleFilled(0, 64, 799, 76, 0xFE81) ;
            gfx_OutlineColour(BLACK) ;
        break ;
        case 9:
            gfx_RectangleFilled(0, 0, 799, 63, 0x014B) ;
            gfx_OutlineColour(WHITE) ;
            gfx_LinePattern(LPFINE) ;
            gfx_RectangleFilled(0, 64, 799, 76, 0xFE81) ;
            gfx_OutlineColour(BLACK) ;
        break ;
        case 11:
            gfx_RectangleFilled(0, 0, 799, 63, 0x014B) ;
            gfx_OutlineColour(WHITE) ;
            gfx_LinePattern(LPFINE) ;
            gfx_RectangleFilled(0, 64, 799, 73, 0xFE81) ;
            gfx_OutlineColour(BLACK) ;
        break ;
        case 12:
            gfx_RectangleFilled(0, 0, 799, 63, 0x014B) ;
            gfx_OutlineColour(WHITE) ;
            gfx_LinePattern(LPFINE) ;
            gfx_RectangleFilled(0, 64, 799, 73, 0xFE81) ;
            gfx_OutlineColour(BLACK) ;
        break ;
        case 13:
            gfx_RectangleFilled(0, 0, 799, 63, 0x014B) ;
            gfx_OutlineColour(WHITE) ;
            gfx_LinePattern(LPFINE) ;
            gfx_RectangleFilled(0, 64, 799, 73, 0xFE81) ;
            gfx_OutlineColour(BLACK) ;
        break ;
        case 14:
            gfx_OutlineColour(WHITE) ;
            gfx_LinePattern(LPFINE) ;
            gfx_RectangleFilled(0, 0, 799, 39, 0x014B) ;
            gfx_OutlineColour(BLACK) ;
            gfx_RectangleFilled(0, 32, 799, 51, YELLOW) ;
            gfx_OutlineColour(WHITE) ;
            gfx_LinePattern(LPFINE) ;
            gfx_RectangleFilled(0, 364, 799, 479, 0x014B) ;
            gfx_OutlineColour(BLACK) ;
        break ;
        case 15:
            gfx_RectangleFilled(0, 0, 799, 63, 0x014B) ;
            gfx_OutlineColour(WHITE) ;
            gfx_LinePattern(LPFINE) ;
            gfx_RectangleFilled(0, 64, 799, 77, 0xFE81) ;
            gfx_OutlineColour(BLACK) ;
        break ;
        case 16:
            gfx_RectangleFilled(0, 0, 799, 63, 0x014B) ;
            gfx_OutlineColour(WHITE) ;
            gfx_LinePattern(LPFINE) ;
            gfx_RectangleFilled(0, 64, 799, 77, 0xFE81) ;
            gfx_OutlineColour(BLACK) ;
            gfx_Panel(PANEL_RAISED, 0, 80, 267, 101, 0x7D79) ;
            gfx_Panel(PANEL_RAISED, 268, 80, 267, 101, 0x7D79) ;
            gfx_Panel(PANEL_RAISED, 0, 180, 267, 121, 0x7D79) ;
            gfx_Panel(PANEL_RAISED, 268, 180, 267, 121, 0x7D79) ;
            gfx_Panel(PANEL_RAISED, 0, 301, 535, 179, 0x7D79) ;
            gfx_Panel(PANEL_RAISED, 536, 80, 264, 399, 0x7D79) ;
        break ;
        case 18:
            gfx_RectangleFilled(0, 0, 799, 63, 0x014B) ;
            gfx_OutlineColour(WHITE) ;
            gfx_LinePattern(LPFINE) ;
            gfx_RectangleFilled(0, 60, 799, 73, 0xFE81) ;
            gfx_OutlineColour(BLACK) ;
            gfx_Panel(PANEL_RAISED, 328, 76, 328, 404, 0x7D79) ;
            gfx_Panel(PANEL_RAISED, 0, 76, 328, 404, 0x7D79) ;
        break ;
    endswitch
endfunc

// Start P3.inc
func main()
    var comTX[50], cmdi, i, j, ImageTouched, TouchStatus, oldn ;

    putstr("Mounting...\n");
    if (!(file_Mount()))
        while(!(file_Mount()))
            putstr("Drive not mounted...");
            pause(200);
            gfx_Cls();
            pause(200);
        wend
    endif
//    gfx_MoveTo(0, 0);
//    print(mem_Heap()," ") ;
//    gfx_TransparentColour(0x0020);
//    gfx_Transparency(ON);

    gfx_ScreenMode(LANDSCAPE) ;

    // open image control
    hndl := file_LoadImageControl("SCREEN~1.dat", "SCREEN~1.gci", 1);

    // init 'constants'
// End P3.inc

    oObjects[tDipSwitch] := oDipSwitchs ;
    oObjects[tKnob] := oKnobs ;
    oObjects[tRockerSwitch] := oRockerSwitchs ;
    oObjects[tRotarySwitch] := oRotarySwitchs ;
    oObjects[tGSlider] := oGSliders ;
    oObjects[tTrackbar] := oTrackbars ;
    oObjects[tWinButton] := oWinButtons ;
    oObjects[tAngularmeter] := oAngularmeters ;
    oObjects[tCoolgauge] := oCoolgauges ;
    oObjects[tCustomdigits] := oCustomdigitss ;
    oObjects[tForm] := oForms ;
    oObjects[tGauge] := oGauges ;
    oObjects[tImage] := oImages ;
    oObjects[tKeyboard] := oKeyboards ;
    oObjects[tLed] := oLeds ;
    oObjects[tLeddigits] := oLeddigitss ;
    oObjects[tMeter] := oMeters ;
    oObjects[tStrings] := oStringss ;
    oObjects[tThermometer] := oThermometers ;
    oObjects[tUserled] := oUserleds ;
    oObjects[tVideo] := oVideos ;
    oObjects[tStaticText] := oStaticTexts ;
    oObjects[tSounds] := oSoundss ;
    oObjects[tTimer] := oTimers ;
    oObjects[tSpectrum] := oSpectrums ;
    oObjects[tTank] := oTanks ;
    oObjects[tUserImages] := oUserImagess ;
    oObjects[tPinOutput] := oPinOutputs ;
    oObjects[tPinInput] := oPinInputs ;
    oObjects[t4Dbutton] := o4Dbuttons ;
    oObjects[tAniButton] := oAniButtons ;
    oObjects[tColorPicker] := oColorPickers ;
    oObjects[tUserButton] := oUserButtons ;
    sc0Oldval1[0] := -1 ; // init scope, only needed for first trace
    scTracebuf[0] := sc0Oldval1 ;
    scTracebuf[1] := sc0Newval1 ;
    scTracebuf[2] := sc0Oldval2 ;
    scTracebuf[3] := sc0Newval2 ;
    sc1Oldval1[0] := -1 ; // init scope, only needed for first trace
    scTracebuf[8] := sc1Oldval1 ;
    scTracebuf[9] := sc1Newval1 ;
    sc2Oldval1[0] := -1 ; // init scope, only needed for first trace
    scTracebuf[16] := sc2Oldval1 ;
    scTracebuf[17] := sc2Newval1 ;
    sc3Oldval1[0] := -1 ; // init scope, only needed for first trace
    scTracebuf[24] := sc3Oldval1 ;
    scTracebuf[25] := sc3Newval1 ;
    sc4Oldval1[0] := -1 ; // init scope, only needed for first trace
    scTracebuf[32] := sc4Oldval1 ;
    scTracebuf[33] := sc4Newval1 ;
    WriteObject(tUserled, 2, 1) ;
    WriteObject(tUserled, 4, 1) ;
    WriteObject(t4Dbutton, 2, 1) ;
// Start P4.inc
    // init comms
    com_Init(comRX,CMDLenMAX,0);
    com_SetBaud(COM0,25600);
    com_TXbuffer(comTX, 100, 0);
    // tag 'real' objects
    for (i := 0; i <= MaxTotObjects; i++)
        if (   (i != tSounds)
            && (i != tTimer)
            && (i != tPinOutput)
            && (i != tPinInput) )
            TouchXpos := oObjects[i] ;
            TouchYpos := *(TouchXpos) ;
            for (ImageTouched := 1; ImageTouched <= TouchYpos; ImageTouched++)
                oldn := *(TouchXpos+ImageTouched*2) ;
                img_SetAttributes(hndl, oldn, I_TOUCH_DISABLE);  // ensure touch is enabled
                if (oldn != -1)
                    img_SetWord(hndl, oldn, IMAGE_TAG, i+1);
                    img_Disable(hndl, oldn) ;
                endif
            next
        endif
    next

    // display initial form
    CurrentForm := -1 ;
    ActivateForm(0) ; // need to change this according to first actual form

// End P4.inc
// Start P5.inc
    touch_Set(TOUCH_ENABLE);                            // enable the touch screen
    oldn := -1 ;
    repeat

        // check comms for command, how to NAK invalid command
        if (com_Count() != 0)
            i := serin() ;
            InputCS ^= i ;               // update checksum
                cmd[cmdi++] := i ;
                 if (   (cmd[0] == READ_OBJ)
                         && (cmdi == 4)         )
                    if (InputCS)
                        nak0() ;
                    else
                        ReadObject(cmd[1], cmd[2]) ;
                    endif
                    cmdi := 0 ;
                else if (   (cmd[0] == WRITE_OBJ)    // 6 byte write command (gen option)
                         && (cmdi == 6)          )
                    if (InputCS)
                        nak0() ;
                    else
                        WriteObject(cmd[1], cmd[2], cmd[3] << 8 + cmd[4]) ;
                        serout(ACK) ;
                    endif
                    cmdi := 0 ;
                else if (   (cmd[0] == WRITE_CONTRAST)
                         && (cmdi == 3)         )
                    if (InputCS)
                        nak0() ;
                    else
                        gfx_Contrast(cmd[1]) ;
                        serout(ACK) ;
                    endif
                    cmdi := 0 ;
                else if (cmdi == 6)    // we have 6 bytes and we've gotten here -> something wrong
                    nak0() ;
                    cmdi := 0 ;
                endif
        endif   // a character is available


    // touch code processing

        TouchStatus := touch_Get(TOUCH_STATUS);               // get touchscreen status
        ImageTouched := img_Touched(hndl,-1) ;
        if ((TouchStatus == TOUCH_PRESSED) || (TouchStatus == TOUCH_RELEASED) || (TouchStatus == TOUCH_MOVING))
            if ((TouchStatus != TOUCH_RELEASED) && (ImageTouched != oldn) && (oldn != -1))
                TouchStatus := TOUCH_RELEASED ;       // simulate release if we move off object
            endif
            if (TouchStatus != TOUCH_RELEASED)        // if not released
                if (oldn != -1)
                    ImageTouched := oldn ;
                else
                    if (oldn != ImageTouched)
                oldn := ImageTouched ;
                        TouchStatus := TOUCH_PRESSED ;
                    endif
                endif
                TouchXpos  := touch_Get(TOUCH_GETX);
                TouchYpos  := touch_Get(TOUCH_GETY);
                TouchState := Ofs_IPD_DOWN ;
            else
                ImageTouched := oldn ;                     // simulate release of what we touched
                oldn := -1 ;                    // prevent double release
                TouchState := Ofs_IPD_RELEASE ;
            endif
            if (ImageTouched != -1)
                        CurInputData := InputControls[ImageTouched] + InputData;
                        InputType := *(CurInputData) ;
                        i := InputType ;
                        if (InputType >= t4Dbutton) i -= 23 ; // adjust to ensure next in gosub
                        gosub (i), (cDipswitch, cKnob, cRockerswitch, cRotaryswitch, cSlider, cTrackbar, cWinbutton, c4DButton, cAniButton, cColorPicker, cUserButton) ;
            endif
        endif
 //       if ((n != -1) && (oldn == -1)) oldn := n ;    // save what we touched in case we move off it

        sys_EventsResume() ;
    forever

cDipswitch:

cKnob:
    i := XYposToDegree(TouchXpos-*(CurInputData+Ofs_IPD_P1),      // x - CentreX
                       TouchYpos-*(CurInputData+Ofs_IPD_P2)) ;    // y - centreY
    if (i < *(CurInputData+Ofs_IPD_P3))                   // anything in the first 'dead zone' is minvalue
        i := 0 ;
    else
        if (i > *(CurInputData+Ofs_IPD_P4))               // anything in the last 'dead zone' is maxvalue
            i := *(CurInputData+Ofs_IPD_P5) ;
        else
            i -= *(CurInputData+Ofs_IPD_P3) ;             // offset by -baseangle
        endif
    endif
//  i := i * *(input+IPD_P6) / *(input+IPD_P5) ;   // convert degrees to position
    i := TMul(i, Ofs_IPD_P6, Ofs_IPD_P7) ;   // convert degrees to position
    pInputIndex := oKnobs + *(CurInputData+Ofs_IPD_OBJVIDX) ;
    UpdateObjects(i) ;
endsub ;

cRockerswitch:

cRotaryswitch:

cSlider:
cTrackbar:
    if (*(CurInputData+Ofs_IPD_P1))
        i := TouchXpos - *(CurInputData+Ofs_IPD_P2) ;
        if (i < 0)
            i := 0 ;
        else if (i > *(CurInputData+Ofs_IPD_P3))        // height/width - 17)
            i := *(CurInputData+Ofs_IPD_P4) ;           // maxvalue-minvalue
        else
//            i := *(input+IPD_P4) * i / *(input+IPD_P3) ;    // max-min - (max-min) * posn / (height-17)
            i := TMul(i, Ofs_IPD_P4, Ofs_IPD_P5) ;    // max-min - (max-min) * posn / (height-17)
        endif
    else
        i := TouchYpos - *(CurInputData+Ofs_IPD_P2) ;
        if (i < 0)
            i := *(CurInputData+Ofs_IPD_P4) ;           // maxvalue-minvalue
        else if (i > *(CurInputData+Ofs_IPD_P3))        // height/width - 17)
            i := 0 ;
        else
//            i := *(input+IPD_P4) - *(input+IPD_P4) * i / *(input+IPD_P3) ;    // max-min - (max-min) * posn / (height-17)
            i := *(CurInputData+Ofs_IPD_P4) - TMul(i, Ofs_IPD_P4, Ofs_IPD_P5) ;    // max-min - (max-min) * posn / (height-17)
        endif
    endif
    if (InputType == tGSlider)
        pInputIndex := oGSliders ;
    else
        pInputIndex := oTrackbars ;
    endif
    pInputIndex += *(CurInputData+Ofs_IPD_OBJVIDX) ;
    UpdateObjects(i) ;
endsub ;

c4DButton:
    pInputIndex := o4Dbuttons + *(CurInputData+Ofs_IPD_OBJVIDX) ;
    goto gbutton ;
cUserButton:
cWinbutton:
    pInputIndex := oWinButtons + *(CurInputData+Ofs_IPD_OBJVIDX) ;
gbutton:
    i := img_GetWord(hndl, *(pInputIndex), IMAGE_INDEX) ; // current state
    if (*(CurInputData+Ofs_IPD_P1))                                 // momentary, reports 0, but should report 1
        if (TouchStatus == TOUCH_RELEASED)
            i &= 0xfffe ;
            TouchState == Ofs_IPD_DOWN ;
        else
            i |= 1 ;
            TouchState == Ofs_IPD_RELEASE ;
        endif
    else if (*(CurInputData+Ofs_IPD_P2) == -1)                      // Toggle, reports 0+2, but should report 0+1
        if (TouchStatus == TOUCH_RELEASED)                     // only truly change on release
            if ((i & 3) == 3)
                i &= 0xfffc ;
            else
                i++ ;
            endif
        else
            i |= 1 ;                                      // make down regardless of current state
        endif
    else                        // group action, up all other buttons on touch press, reports 0 for button down
        if (TouchStatus == TOUCH_PRESSED)                     // only truly change on release
            TurnOffButtons(*(CurInputData+Ofs_IPD_P2)) ;
        endif
        i := (i & 0xfffc) | 2 ;
    endif

    UpdateObjects(i) ;
endsub ;

cAniButton:

cColorPicker:
    pInputIndex := oColorPickers + *(CurInputData+Ofs_IPD_OBJVIDX) ;
    getcpvars(*(pInputIndex)) ;
    i := *(CurInputData+Ofs_IPD_OBJVIDX)/2 - 1 ;
    j := gfx_GetPixel(TouchXpos,TouchYpos) ;
    if (((TouchYpos >= cptop + 6) && (TouchYpos < cpTpH - 6)) && (j != img_GetWord(hndl, i, IMAGE_DELAY)) )     // within range on height  and changed
        if ((TouchXpos >= cpleft) && (TouchXpos < cpLpW-32))          // within range of HS picker
            setCpHSl(*(pInputIndex), *(CurInputData+Ofs_IPD_OBJVIDX)/2-1, j) ;
        else if ((TouchXpos >= cpLpW-22) && (TouchXpos < cpLpW-6))    // within range of L picker
            img_SetWord(hndl, *(pInputIndex), IMAGE_DELAY, j);                                       // IMAGE_DELAY is used as current color
            ColorpickerArrow(cpVars[i], cpLpW, cpBGcol) ;          // 'erase' old arrow
            cpVars[i] := TouchYpos-6 ;
            ColorpickerArrow(cpVars[i], cpLpW, LIGHTGREY) ;
        endif

        ImageTouched := rColorPickerRoutines[i] ;
        ImageTouched(REPORT_EVENT, InputType, i, j) ;
    endif
endsub ;

endfunc
// End P5.inc
