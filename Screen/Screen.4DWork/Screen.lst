file C:\Users\Zac\Google Drive\NASA RMC Zips\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS

file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\uLCD-70DT.fnc

000001  000001  #platform "uLCD-70DT"
000002  000001  #platform "uLCD-70DT"
000003  000008  */
000004  000009      #constant ULCD_70DT_DIABLO16_GFX
000005  000009      #constant ULCD_70DT_DIABLO16_GFX
000006  000010        
000007  000011      #IFNOT EXISTS DIABLO16_GFX2_FUNCTIONS
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\Diablo16_Functions.fnc

000008  000012          #inherit "Diablo16_Functions.fnc"          // inherit the generic functions
000009  000012          #inherit "Diablo16_Functions.fnc"          // inherit the generic functions
000010  000001        
000011  000002  // Common inheritance for Diablo16 platforms
000012  000003        
000013  000004  //#constant ULCD_32PT_DIABLO16_GFX
000014  000005        
000015  000006        
000016  000007  // define the compiler dummy preambles
000017  000008  #constant LOCAL $//
000018  000008  #constant LOCAL $//
000019  000009  #constant EXTERN $ /**/
000020  000009  #constant EXTERN $ /**/
000021  000010        
000022  000011  #CONST
000023  000020  #END
000024  000021        
000025  000022  #CONST
000026  000038  #END
000027  000039        
000028  000040        
000029  000041        
000030  000042        
000031  000047  */
000032  000048        
000033  000049        
000034  000050  //------------------------------------------------------------------//
000035  000051  //     EVE  miscellaneous functions                                 //
000036  000052  //------------------------------------------------------------------//
000037  000053        
000038  000054  func to("device"), 0;                // output device redirection
000039  000055  // Syntax: to(outstream);
000040  000056  // Usage : to(APPEND); putstr("TWO ");
000041  000057  // Notes : outstream: A variable or constant specifying destination for putch, putstr, putnum and print functions.
000042  000058  //     :
000043  000059  //     : to() sends the printed output to destinations other than the screen. Normally, print just
000044  000060  //     : sends its output to the display in TEXT mode which is the default, however, the output from
000045  000061  //     : print can be sent to COM0, and MDA (media) 'streams'. The to(...) function can also stream
000046  000062  //     : to a memory array . Note that once the to(...) function has taken effect, the stream reverts
000047  000063  //     : back to the default stream which is TEXT as soon as putch, putstr, putnum or print has
000048  000064  //     : completed its action. The APPEND argument is used to send the printed output to the same
000049  000065  //     : place as the previous redirection. This is most useful for building string arrays, or adding
000050  000066  //     : sequential data to a media stream.
000051  000067  //     :
000052  000068  //     : Predefined Name Constant    putch(), putstr(), putnum(), print() redirection
000053  000069  //     : APPEND         0x0000      Output is directed to the same stream that was previously assigned. Output is
000054  000070  //     :                            appended to user memory if previous redirection was to an array.
000055  000071  //     : COM0           0xFF04      Output is redirected to the COM (serial) port.
000056  000072  //     : TEXT           0xFF08      Output is directed to the screen (default).
000057  000073  //     : MDA            0xFF10      Output is directed to the SD or FLASH media.
000058  000074  //     : I2C1           0xF820      Output is directed to the I2C1 port.
000059  000075  //     : memory pointer             Output is redirect to the memory pointer argument, eg to(myarray); print("HELLO");
000060  000076        
000061  000077  //------------------------------------------------------------------//
000062  000078  // to(..) redirection constants            //
000063  000079  //------------------------------------------------------------------//
000064  000080  #CONST
000065  000093  #END
000066  000094        
000067  000095        
000068  000096  func putch("char"), 0;                // write single char to current output device
000069  000097  // Syntax    : putch("char");
000070  000098  // Usage     : putch("A");
000071  000099  // Notes     : prints single characters to the current output stream, usually the
000072  000100  //           : display unless redirected with the ‘to’ redirection function.
000073  000101  //         : The arguments can be a variable, array element, expression or constant.
000074  000102        
000075  000103        
000076  000104  func putchXY("xpos", "ypos", "char"), 0;
000077  000105  // Syntax  : putchXY(x, y, '0x41'),
000078  000106  // Usage   : putchXY(100, 100, "HELLO");
000079  000107  // Notes   : Print a single character at position x, y.
000080  000108  //         : Char may be a constant or variable.
000081  000109  // Returns : nothing.
000082  000110        
000083  000111  func putstrXY("xpos", "ypos", "string"), 0;
000084  000112  // Syntax  : putstrXY(x, y, "string"),
000085  000113  // Usage   : putstrXY(100, 100, "HELLO");
000086  000114  // Notes   : Print a string at position x, y
000087  000115  //         : "String" may be a string constant, or pointer to a word aligned string.
000088  000116  // Returns : nothing.
000089  000117        
000090  000118        
000091  000119  func putstrCentred("xc", "yc", "string"), 0;
000092  000120  // Syntax  : putstrCentred(x, y, "string"),
000093  000121  // Usage   : putstrCentred(100, 100, "HELLO");
000094  000122  // Notes   : Print a string centred at position x, y
000095  000123  //         : "String" may be a string constant, or pointer to a word aligned string.
000096  000124  // Returns : nothing.
000097  000125        
000098  000126        
000099  000127  func pause("milliseconds"), 0;            // blocking delay
000100  000128  // Syntax: pause(milliseconds);
000101  000129  // Usage : pause(1000);                //pause for 1 second
000102  000130  // Notes : Pause for a number of milli second.Maximum delay could be 65535 milli seconds
000103  000131        
000104  000132        
000105  000133  func putnum("arg1","arg2"), 1;            // print number to current output device
000106  000134  // Syntax: putnum(format, value);
000107  000135  // Usage : var := putnum(HEX, val);
000108  000136  // Notes : prints a 16bit number in various formats to the current output stream, usually the display.
000109  000137  //     : Format: A constant that specifies the number format
000110  000138  //     : Value : The number to be printed
000111  000139  //     : (      DECIMAL   )    (   UNSIGNED DECIMAL )    (    HEX         )     (    BINARY          )
000112  000140  //     : DEC     DECZ     DECZB     UDEC     UDECZ     UDECZB     HEX     HEXZ     HEXZB     BIN     BINZ     BINZB
000113  000141  //     : DEC1 DEC1Z     DEC1ZB     UDEC1     UDEC1Z     UDEC1ZB HEX1     HEX1Z     HEX1ZB     BIN1     BIN1Z     BIN1ZB
000114  000142  //     : DEC2 DEC2Z     DEC2ZB     UDEC2     UDEC2Z     UDEC2ZB HEX2     HEX2Z     HEX1ZB     BIN2     BIN2Z     BIN2ZB
000115  000143  //     : DEC3 DEC3Z     DEC3ZB     UDEC3     UDEC3Z     UDEC3ZB HEX3     HEX3Z     HEX1ZB     BIN3     BIN3Z     BIN3ZB
000116  000144  //     : DEC4 DEC4Z     DEC4ZB     UDEC4     UDEC4Z     UDEC4ZB HEX4     HEX4Z     HEX1ZB     BIN4     BIN4Z     BIN4ZB
000117  000145  //     : DEC5 DEC5Z     DEC5ZB     UDEC5     UDEC5Z     UDEC5ZB             BIN5     BIN5Z     BIN5ZB
000118  000146  //     :                                     BIN6     BIN6Z     BIN6ZB
000119  000147  //     :                                     BIN7     BIN7Z     BIN7ZB
000120  000148  //     :                                     BIN8     BIN8Z     BIN8ZB
000121  000149  //     :                                     BIN9     BIN9Z     BIN9ZB
000122  000150  //     :                                     BIN10     BIN10Z     BIN10ZB
000123  000151  //     :                                     BIN11     BIN11Z     BIN11ZB
000124  000152  //     :                                     BIN12     BIN12Z     BIN12ZB
000125  000153  //     :                                     BIN13     BIN13Z     BIN13ZB
000126  000154  //     :                                     BIN14     BIN14Z     BIN14ZB
000127  000155  //     :                                     BIN15     BIN15Z     BIN15ZB
000128  000156  //     :                                     BIN16     BIN16Z     BIN16ZB
000129  000157  //     : field: Returns the the default width of the numeric field (digit count), usually ignored.
000130  000158  //     : bit 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0
000131  000159  //     : | | | | \___ ___/ \__ __/ \_____ _____/
000132  000160  //     : | | | | V V V
000133  000161  //     : | | | | | | |
000134  000162  //     : | | | | | |
000135  000163  //     : | | | | (nb 0 = 16) | |____BASE (usually 2,10 or 16)
000136  000164  //     : | | | | digit count |
000137  000165  //     : | | | | |___reserved (not used on GOLDELOX)
000138  000166  //     : | | | |
000139  000167  //     : | | | |
000140  000168  //     : | | | |
000141  000169  //     : | | | |
000142  000170  //     : | | | |
000143  000171  //     : | | | |______ 1 = leading zeros included
000144  000172  //     : | | | 0 = leading zeros suppressed
000145  000173  //     : | | |
000146  000174  //     : | | |
000147  000175  //     : | | |_______ 1 = leading zero blanking
000148  000176  //     : | |
000149  000177  //     : | |_____ sign bit (0 = signed, 1 = unsigned)
000150  000178  //     : |
000151  000179  //     : |______ 1 = space before unsigned number
000152  000180        
000153  000181        
000154  000182  func __translate("arg1","arg2","arg3","arg4"), 1; // list translator (*** internal compiler use only, not usable)
000155  000183        
000156  000184        
000157  000185  func putstr("string"), 1;                         // print var (word) aligned string to current output device
000158  000186  // Syntax: putstr(pointer);
000159  000187  // Usage : putstr("HELLO\n");
000160  000188  // Notes : putstr prints a string to the current output stream, usually the display. The argument can be
000161  000189  //       : a string constant, a word aligned pointer to a string, a pointer to an array, or a pointer to
000162  000190  //       : a data statement. Note that string constants and data statement pointers are byte aligned.
000163  000191  //       : The output of putstr can be redirected to the communications port, the media, or memory
000164  000192  //       : using the to(...); function.
000165  000193  //       : A string constant is automatically terminated with a zero.
000166  000194  //       : A string in a data statement is not automatically terminated with a zero.
000167  000195  //       : All variables in 4DGL are 16bit, if an array is used for holding 8 bit characters, each array
000168  000196  //       : element packs 1 or 2 characters.
000169  000197        
000170  000198        
000171  000199  func strlen("varAddress"), 1;                   // return length of a var (word) aligned string in character units
000172  000200  // Syntax: strlen("varAddress);
000173  000201  // Usage : strlen("HELLO\n");
000174  000202  // Notes : gives the length of a string that is packed into regular var array
000175  000203  //       : Use str_Length(ptr)  for string pointer mode
000176  000204        
000177  000205        
000178  000206  func charwidth("char"), 1;
000179  000207  // Syntax  : charwidth(char);
000180  000208  // Usage   : wid := charwidth('W');
000181  000209  // Notes   : calculates width of a character in pixel units.
000182  000210  //         : 'char' may be a constant or variable.
000183  000211  // Returns : Width of character in pixel units.
000184  000212        
000185  000213        
000186  000214  func charheight("char"), 1;
000187  000215  // Syntax  : charheight(char);
000188  000216  // Usage   : ht := charheight('0x41');
000189  000217  // Notes   : Calculates height of a character in pixel units.
000190  000218  //         : 'char' may be a constant or variable.
000191  000219  // Returns : Height of character in pixel units.
000192  000220        
000193  000221        
000194  000222  func strwidth("pointer"), 1;
000195  000223  // Syntax  : strwidth(ptr);
000196  000224  // Usage   : x := strwidth("HELLO");
000197  000225  // Notes   : returns width of a string in pixel units.
000198  000226  //         : 'pointer' may be a constant or pointer to word aligned variable
000199  000227  // Returns : Width of string in pixel units, can be multi line.
000200  000228        
000201  000229        
000202  000230  func strheight(), 1;
000203  000231  // Syntax  : strheight();
000204  000232  // Usage   : h := strheight();
000205  000233  // Notes   : calculates height of a string in pixel units (after a call to strwidth );
000206  000234  //         : pointer may be a constant or pointer to word aligned variable
000207  000235  // Returns : Height of string in pixel units, can be multi line.
000208  000236        
000209  000237        
000210  000238  func unicode_page("charbeg","charend","charoffset"), 1;
000211  000239  // Syntax: unicode_page("charbeg","charend","charoffset");
000212  000240  // Usage : eg:  F_Traditional_0x20_0xFF
000213  000241  // Notes : After selecting a unicode image control with txt_FontID,
000214  000242  //       : this function is called to set the required font within the
000215  000243  //       : unicode set. The file "Unicode.inc" contains wrappers for
000216  000244  //       : this function, and it is not normally called directly.
000217  000245  //       : Returns count of characters in the set.
000218  000246  //       : Refer to "Unicode.inc" for further information.
000219  000247        
000220  000248        
000221  000249  //------------------------------------------------------------------//
000222  000250  //          Text Related Functions                                  //
000223  000251  //------------------------------------------------------------------//
000224  000252        
000225  000253  func txt_MoveCursor("line", "column"), 0;
000226  000254  // Syntax: txt_SetCursor(line, column);
000227  000255  // Usage : txt_SetCursor(arg1, arg2);
000228  000256  // Notes : Moves the text Cursor to a new screen position set by
000229  000257  //       : line,column parameters.
000230  000258        
000231  000259  func txt_Set("function", "value"), 0;
000232  000260  // Syntax: txt_Set(function, value);
000233  000261  // Usage : txt_Set(arg1, arg2);
000234  000262  // Returns : Original value before the change
000235  000263  // Notes : Sets various text related parameters used by other functions
000236  000264  //       : This allows the features to be set programatically with a
000237  000265  //       : single function call.It is strongly recommended to use the
000238  000266  //       : pre-defined constants rather than the mode numbers.
000239  000267  //       : NB:- It is often required to be able to set text
000240  000268  //       : functions with a single function call for graphics engine
000241  000269  //       : related functions, however, there is a complete set of single parameter
000242  000270  //       : shortcut functions that have exactly the same function as
000243  000271  //       : each of the txt_Set modes and saves 1 parameter / uses less memory
000244  000272  //       :
000245  000273  //       : txt_Set(TEXT_COLOUR, colour);        // function 0, TEXT_COLOUR, default colour = LIME
000246  000274  //       : txt_Set(TEXT_HIGHLIGHT, colour);     // function 1, TEXT_HIGHLIGHT)
000247  000275  //       : txt_Set(FONT_ID, fontNumer);         // function 2, FONT_ID)
000248  000276  //       : txt_Set(TEXT_WIDTH, multiplier);     // function 3, TEXT_WIDTH)
000249  000277  //       : txt_Set(TEXT_HEIGHT, multiplier);    // function 4, TEXT_HEIGHT)
000250  000278  //       : txt_Set(TEXT_XGAP, pixels);          // function 5, TEXT_XGAP)
000251  000279  //       : txt_Set(TEXT_YGAP, pixels);          // function 6, TEXT_YGAP)
000252  000280  //       : txt_Set(TEXT_PRINTDELAY, msecs);     // function 7, TEXT_PRINTDELAY)
000253  000281  //       : txt_Set(TEXT_OPACITY, value);        // function 8, TEXT_OPACITY)
000254  000282  //       : txt_Set(TEXT_BOLD, boldness);        // function 9, TEXT_BOLD)
000255  000283  //       : txt_Set(TEXT_ITALIC, slope);         // function 10, TEXT_ITALIC)
000256  000284  //       : txt_Set(TEXT_INVERSE, onoff);        // function 11, TEXT_INVERSE)
000257  000285  //       : txt_Set(TEXT_UNDERLINED, onoff);     // function 12, TEXT_UNDERLINED)
000258  000286  //       : txt_Set(TEXT_ATTRIBUTES, combine);   // function 13, TEXT_ATTRIBUTES)
000259  000287  //       : txt_Set(TEXT_WRAP, column);          // function 14, TEXT_WRAP)
000260  000288  //       : txt_Set(TEXT_ANGLE , degrees);       // function 15, TEXT_ANGLE)
000261  000289  //       :
000262  000290  //       : txt_Set(TEXT_COLOUR, colour);
000263  000291  //       : mode = TEXT_COLOUR (function 0)
000264  000292  //       : txt_Set(TEXT_COLOUR, value);
000265  000293  //       : value = 0 to 0xFFFF, Black to White
000266  000294  //       : Sets the Text colour for the display
000267  000295  //       : Default = LIME.
000268  000296  //       :
000269  000297  //       : mode = TEXT_HIGHLIGHT (function 1)
000270  000298  //       : txt_Set(TEXT_HIGHLIGHT, value);
000271  000299  //       : value = 0 to 0xFFFF, Black to White
000272  000300  //       : Sets the Text background colour for the display. Effective
000273  000301  //       : when text mode is Opaque.
000274  000302  //       : Default = BLACK.
000275  000303  //       :
000276  000304  //       : mode = FONT_ID (function 2)
000277  000305  //       : txt_Set(FONT_ID, value);
000278  000306  //       : value = FONT1 to FONT11 for internal fonts
000279  000307  //       : else this value is the name of a font included
000280  000308  //       : in a users program in a data statement.
000281  000309  //       : Default = FONT SIZE 3.
000282  000310  //       :
000283  000311  //       : mode = TEXT_WIDTH  (function 3)
000284  000312  //       : txt_Set(TEXT_WIDTH, value);
000285  000313  //       : value = 1 to 16
000286  000314  //       : Sets the Text Width multiplier
000287  000315  //       : text will be printed magnified horizontally
000288  000316  //       : by this factor, Default = 1.
000289  000317  //       :
000290  000318  //       : mode = TEXT_HEIGHT  (function 4)
000291  000319  //       : txt_Set(TEXT_HEIGHT, value);
000292  000320  //       : value = 1 to 16
000293  000321  //       : Sets the Text Height multiplier
000294  000322  //       : text will be printed magnified vertically
000295  000323  //       : by this factor, Default = 1.
000296  000324  //       :
000297  000325  //       : mode = TEXT_XGAP  (function 5)
000298  000326  //       : txt_Set(TEXT_XGAP, value);
000299  000327  //       : value = 1 to 32
000300  000328  //       : Sets the horizontal gap between characters
000301  000329  //       : The gap is in pixel units, Default = 0
000302  000330  //       :
000303  000331  //       : mode = TEXT_YGAP  (function 6)
000304  000332  //       : txt_Set(TEXT_YGAP, value);
000305  000333  //       : value = 1 to 32
000306  000334  //       : Sets the vertical gap below characters
000307  000335  //       : The gap is in pixel units, Default = 0
000308  000336  //       :
000309  000337  //       : mode = TEXT_PRINTDELAY  (function 7) DEPRECATED
000310  000338  //       : txt_Set(TEXT_PRINTDELAY, value);
000311  000339  //       : value = 0 to 255
000312  000340  //       : Sets the delay time (in ms) during character
000313  000341  //       : printing to give a 'teletype' like effect.
000314  000342  //       : Often used to attract attention to a string
000315  000343  //       : being printed which can often be missed if
000316  000344  //       : just suddenly appearing or changing.
000317  000345  //       : Default = 0 ms.
000318  000346  //       :
000319  000347  //       : mode = TEXT_OPACITY (function 8)
000320  000348  //       : txt_Set(TEXT_OPACITY, value);
000321  000349  //       : value = TRANSPARENT (0) = Text Trasparent
000322  000350  //       : value = OPAQUE (1) = Text Opaque
000323  000351  //       : Sets the Opacity/Transparency of the text
000324  000352  //       : Default = 0 or TRANSPARENT
000325  000353  //       :
000326  000354  //       : mode = TEXT_BOLD (function 9)
000327  000355  //       : txt_Set(TEXT_BOLD, value);
000328  000356  //       : value = dont care
000329  000357  //       : Sets Bold Text mode for the next string or char
000330  000358  //       : The feature automatically resets after printing
000331  000359  //       : using putstr or print has completed
000332  000360  //       :
000333  000361  //       : mode = TEXT_ITALIC (function10)
000334  000362  //       : txt_Set(TEXT_ITALIC, value);
000335  000363  //       : value = dont care
000336  000364  //       : Sets Italic Text mode for the next string or char
000337  000365  //       : The feature automatically resets after printing
000338  000366  //       : using putstr or print has completed
000339  000367        
000340  000368  //       : mode = TEXT_INVERSE (function 11)
000341  000369  //       : txt_Set(TEXT_INVERSE, value);
000342  000370  //       : value = dont care
000343  000371  //       : Sets Inverse Text mode for the next string or char
000344  000372  //       : The feature automatically resets after printing
000345  000373  //       : using putstr or print has completed
000346  000374  //       :
000347  000375  //       : mode = TEXT_UNDERLINED (function 12)
000348  000376  //       : txt_Set(TEXT_UNDERLINED, value);
000349  000377  //       : value = dont care
000350  000378  //       : Sets Underlined Text mode for the next string or char
000351  000379  //       : The feature automatically resets after printing
000352  000380  //       : using putstr or print has completed
000353  000381  //       :
000354  000382  //       : mode = TEXT_ATTRIBUTES (function 13)
000355  000383  //       : txt_Set(TEXT_ATTRIBUTES, value);
000356  000384  //       : value = bits are defined as:
000357  000385  //       :  BOLD        16          // TEXT_ATTRIBUTES bold text (auto reset)
000358  000386  //       :  ITALIC      32          // TEXT_ATTRIBUTES italic text (auto reset)
000359  000387  //       :  INVERSE     64          // TEXT_ATTRIBUTES inverse text (auto reset)
000360  000388  //       :  UNDERLINED  128         // TEXT_ATTRIBUTES underlined text (auto reset)
000361  000389  //       : Allows a combination of text attributes to be defined together
000362  000390  //       : by 'or'ing the bits together.
000363  000391  //       : Example: txt_Set(TEXT_ATTRIBUTES, BOLD | INVERSE); // bold + inverse
000364  000392  //       : The feature automatically resets after printing
000365  000393  //       : using putstr or print has completed.
000366  000394  //       : Bits 0-3 and 8-15 are reserved for future attributes.
000367  000395  //       :
000368  000396  //       : mode = TEXT_WRAP (function 14)
000369  000397  //       : txt_Set(TEXT_WRAP , value);
000370  000398  //       : Sets the position where text wrap will occur
000371  000399  //       : The feature automatically resets when screen
000372  000400  //       : mode is changed. If the value is set to 0,
000373  000401  //       : text wrap is turned off.
000374  000402  //       : of the current screen. Default value is 0
000375  000403  // Notes : The value is in pixel units.
000376  000404  //       :
000377  000405  //       : mode = TEXT_ANGLE (function 15)
000378  000406  //       : txt_Set(TEXT_ANGLE , value);
000379  000407  //       : Sets the angle of plotted fonts
000380  000408  // Notes : The angle is in degrees.
000381  000409  //       :
000382  000410        
000383  000411  //------------------------------------------------------------------------------
000384  000412  //txt_Set() related constants
000385  000413  //------------------------------------------------------------------------------
000386  000414  #CONST
000387  000433  #END
000388  000434        
000389  000435  //------------------------------------------------------------------------------
000390  000436  //txt_Set() related arguments
000391  000437  //------------------------------------------------------------------------------
000392  000438  #CONST
000393  000464  #END
000394  000465        
000395  000466        
000396  000467  //=====================================================//
000397  000468  // Single parameter short-cuts                         //
000398  000469  // for the txt_Set functions                           //
000399  000470  // These functions return the existing value before    //
000400  000471  // the change is made.                                 //
000401  000472  //=====================================================//
000402  000473  func txt_FGcolour("colour"), 1;             // 0  text foreground colour
000403  000474  func txt_BGcolour("colour"), 1;             // 1  text background colour
000404  000475  func txt_FontID("id"), 1;                   // 2  text font ID (0 = system font)
000405  000476  func txt_Width("multiplier"), 1;            // 3  text width multiplier
000406  000477  func txt_Height("multiplier"), 1;           // 4  text height multiplier
000407  000478  func txt_Xgap("pixelcount"), 1;             // 5  text gap between characters
000408  000479  func txt_Ygap("pixelcount"), 1;             // 6  text gap between lines
000409  000480  func txt_Delay("millisecs"), 1;             // 7  text printing delay factor
000410  000481  func txt_Opacity("mode"), 1;                // 8  text OPAQUE or TRANSPARENT
000411  000482  func txt_Bold("mode"), 1;                   // 9  text bold ON/OFF
000412  000483  func txt_Italic("mode"), 1;                 // 10 text italic ON/OFF
000413  000484  func txt_Inverse("mode"), 1;                // 11 text inverse ON/OFF
000414  000485  func txt_Underline("mode"), 1;              // 12 text underline ON/OFF
000415  000486  func txt_Attributes("value"), 1;            // 13 text combined bold|italic|inverse|underline
000416  000487  func txt_Wrap("value"), 1;                  // 14 text set text wrap position
000417  000488  func txt_Angle("value"), 1;                 // 15 text set angle of plotted font
000418  000489        
000419  000490        
000420  000491        
000421  000492  //------------------------------------------------------------------//
000422  000493  // Memory Access Functions                                          //
000423  000494  //------------------------------------------------------------------//
000424  000495                                                  //
000425  000496  func peekW("address"), 1;                       // read a word from system memory
000426  000497  func pokeW("address", "wordvalue"), 0;          // write a word to system memory
000427  000498  // refer to address map of internal variables   //
000428  000499        
000429  000500        
000430  000501  //------------------------------------------------------------------//
000431  000502  //        CTYPE Function Prototypes
000432  000503  //------------------------------------------------------------------//
000433  000504        
000434  000505  func isdigit("char"), 1;    //Returns a 1 if the character is an ascii digit else returns a 0
000435  000506  // Syntax: isdigit("char");
000436  000507  // Usage : Var := isdigit(ch);
000437  000508  // Notes : char specifies the ascii character for the test
000438  000509  //     : 0 : char is not an ascii digit.
000439  000510  //     : 1 : char is an ascii digit..
000440  000511  //     : Valid range is "0123456789"
000441  000512        
000442  000513  func isxdigit("char"), 1;    //Returns a 1 if the character is an ascii hexadecimal digit else returns a 0
000443  000514  // Syntax: isxdigit("char");
000444  000515  // Usage : Var := isxdigit(ch);
000445  000516  // Notes : char specifies the ascii character for the test
000446  000517  //     : 0 : char is not an ascii hexadecimal digit.
000447  000518  //     : 1 : char is an ascii hexadecimal digit..
000448  000519  //     : Valid range is "0123456789ABCDEF"
000449  000520        
000450  000521  func isupper("char"), 1;    //Returns a 1 if the character is an ascii upper case letter else returns a 0
000451  000522  // Syntax: isupper("char");
000452  000523  // Usage : Var := isupper(ch);
000453  000524  // Notes : char specifies the ascii character for the test
000454  000525  //     : 0 : char is not an ascii upper-case letter.
000455  000526  //     : 1 : char is an ascii upper-case letter.
000456  000527  //     : Valid range is "ABCD....WXYZ"
000457  000528        
000458  000529  func islower("char"), 1;    //Returns a 1 if the character is an ascii lower case letter else returns a 0
000459  000530  // Syntax: islower("char");
000460  000531  // Usage : Var := islower(ch);
000461  000532  // Notes : char specifies the ascii character for the test
000462  000533  //     : 0 : char is not an ascii lower-case letter.
000463  000534  //     : 1 : char is an ascii lower-case letter.
000464  000535  //     : Valid range is "abcd....wxyz"
000465  000536        
000466  000537  func isalpha("char"), 1;    //Returns a 1 if the character is an ascii lower or upper case letter else returns a 0
000467  000538  // Syntax: isalpha("char");
000468  000539  // Usage : Var := isalpha(ch);
000469  000540  // Notes : char specifies the ascii character for the test
000470  000541  //     : 0 : char is not an ascii lower or upper case letter.
000471  000542  //     : 1 : char is an ascii lower or upper case letter.
000472  000543  //     : Valid range is "ABCD...XYZ", "abcd....wxyz"
000473  000544        
000474  000545  func isalnum("char"), 1;    //Returns a 1 if the character is an ascii alpha numeric else returns a 0
000475  000546  // Syntax: isalnum("char");
000476  000547  // Usage : Var := isalnum(ch);
000477  000548  // Notes : char specifies the ascii character for the test
000478  000549  //     : 0 : char is not an ascii alphanumeric character.
000479  000550  //     : 1 : char is an ascii alphanumeric character.
000480  000551  //     : Valid range is "ABCD...XYZ", "abcd....wxyz", "0123456789"
000481  000552        
000482  000553  func isprint("char"), 1;    //Returns a 1 if the character is a printible ascii char else returns a 0
000483  000554  // Syntax: isprint("char");
000484  000555  // Usage : Var := isprint(ch);
000485  000556  // Notes : char specifies the ascii character for the test
000486  000557  //     : 0 : char is not a printable ascii character.
000487  000558  //     : 1 : char is a printable ascii character.
000488  000559  //     : Valid range is "0x20...0x7F"
000489  000560        
000490  000561  func isspace("char"), 1;    //Returns a 1 if the character is any one of the space type chars else returns a 0
000491  000562  // Syntax: isspace("char");
000492  000563  // Usage : Var := isspace(ch);
000493  000564  // Notes : char specifies the ascii character for the test
000494  000565  //     : 0 : char is not a space type character.
000495  000566  //     : 1 : char is a space type character.
000496  000567  //     : Valid range is space, formfeed, newline, carriage return, tab, vertical tab
000497  000568        
000498  000569  //unformatted
000499  000570  func iswhite("char"), 1;    //
000500  000571  // Syntax: iswhite("char");
000501  000572  // Usage : Var := iswhite(ch);
000502  000573  // Notes : char specifies the ascii character for the test
000503  000574  //     : 0 : char is not a space or tab character.
000504  000575  //     : 1 : char is not a space or tab character.
000505  000576  //     : Valid range is space or tab
000506  000577        
000507  000578  func toupper("char"), 1; //if character is lower case it returns the upper case equivalent else returns the passed char
000508  000579  // Syntax: toupper("char");
000509  000580  // Usage : Var := toupper(ch);
000510  000581  // Notes : char specifies the ascii character for the test
000511  000582  //     : "ABCD....XYZ" : if character is a lower case letter.
000512  000583  //     : char : if character is not a lower case letter.
000513  000584  //     : Valid range is "abcd....wxyz"
000514  000585        
000515  000586  func tolower("char"), 1; //if character is upper case it returns the lower case equivalent else returns the passed char
000516  000587  // Syntax: tolower("char");
000517  000588  // Usage : Var := tolower(ch);
000518  000589  // Notes : char specifies the ascii character for the test
000519  000590  //     : "abcd....xyz" : if character is an upper case letter.
000520  000591  //     : char : if character is not an upper case letter.
000521  000592  //     : Valid range is "ABCD....WXYZ"
000522  000593        
000523  000594  func LObyte("var"), 1;        //Returns the lower byte (lower 8 bits) of a 16 bit variable.
000524  000595  // Syntax: LObyte(var);
000525  000596  // Usage : myVar := LObyte(myvar2);
000526  000597  // Notes : var specifies the user variable
000527  000598  //     : Returns the lower byte (lower 8 bits) of a 16 bit variable
000528  000599        
000529  000600  func HIbyte("var"), 1;        //Returns the High byte (upper 8 bits) of a 16 bit variable.
000530  000601  // Syntax: HIbyte(var);
000531  000602  // Usage : myVar := HIbyte(myvar2);
000532  000603  // Notes : var specifies the user variable
000533  000604  //     : Returns the high byte (upper 8 bits) of a 16 bit variable
000534  000605        
000535  000606        
000536  000607  func ByteSwap("var"), 1;    //Returns the swapped upper and lower bytes of a 16 bit variable.
000537  000608  // Syntax: ByteSwap(var);
000538  000609  // Usage : myVar := ByteSwap(myvar2);
000539  000610  // Notes : var specifies the user variable
000540  000611  //     : Returns the endian swapped value of a 16 bit variable
000541  000612        
000542  000613        
000543  000614  func NybleSwap("var"), 1;    //Returns the swapped lower bytes nybles, upper byte retained.
000544  000615  // Syntax: NybleSwap(var);
000545  000616  // Usage : myVar := NybleSwap(myvar2);
000546  000617  // Notes : var specifies the user variable
000547  000618  //     : Returns the 16 bit variable with swapped lower nybles
000548  000619        
000549  000620  func putnumXY("xpos", "ypos", "arg1","arg2"), 1;            // print number at the specified position
000550  000621  // Syntax: putnumXY(x, y, format, value);
000551  000622  // Usage : var := putnumXY(100, 100, HEX, val);
000552  000623  // Notes : prints a 16bit number in various formats at the specified XY coordinates.
000553  000624  //     : Format: A constant that specifies the number format
000554  000625  //     : Value : The number to be printed
000555  000626        
000556  000627  func txt_FontBank("flashbank", "address"), 1;               // use a font located in another bank
000557  000628  // Syntax: txt_FontBank(bank, offset);
000558  000629  // Usage : txt_FontBank(FLASHBANK_2, arg2);
000559  000630  // Returns : Current font before the change, or 0 if invalid or bank is protected
000560  000631  // Notes : Sets the current font to a font held in another bank
000561  000632        
000562  000633  //------------------------------------------------------------------//
000563  000634  // 16bit signed Math Functions                                      //
000564  000635  //------------------------------------------------------------------//
000565  000636                                                  //
000566  000637  func ABS("value"), 1;                           // return a positive number
000567  000638  // Syntax: ABS(value);
000568  000639  // Usage : var := ABS(arg);
000569  000640  // Notes : Returns the absolute value of an argument
000570  000641        
000571  000642  func MIN("value1", "value2"), 1;                // return the smaller of 2 numbers
000572  000643  // Syntax: MIN(value1, value2);
000573  000644  // Usage : var := MIN(arg1, arg2);
000574  000645  // Notes : Returns the minimum of 2 arguments
000575  000646        
000576  000647  func MAX("value1", "value2"), 1;                // return the larger of 2 numbers
000577  000648  // Syntax: MAX(value1, value2);
000578  000649  // Usage : var := MAX(arg1, arg2);
000579  000650  // Notes : Returns the maximum of 2 arguments
000580  000651        
000581  000652  func SWAP("&var", "&var"), 0;                   // swap 2 variables, arguments must point to variables
000582  000653  // Syntax: SWAP(&var1, &var2);
000583  000654  // Usage : SWAP(&var1, &var2);
000584  000655  // Notes : Swaps the contents of 2 variables or memory locations
000585  000656        
000586  000657  func SIN("angle"), 1;                           // return SIN of angle
000587  000658  // Syntax: SIN(angle);
000588  000659  // Usage : var := SIN(arg);
000589  000660  // Notes : Returns the sine in radians of an argument in degrees
000590  000661  //       : the returned value range is from 127 to -127. The real
000591  000662  //       : cosine values vary from 1.0 to -1.0 so appropriate
000592  000663  //       : scaling must be done in user code.
000593  000664        
000594  000665  func COS("angle"), 1;                           // return COS of angle
000595  000666  // Syntax: COS(angle);
000596  000667  // Usage : var := COS(arg);
000597  000668  // Notes : Returns the cosine in radians of an argument in degrees
000598  000669  //       : the returned value range is from 127 to -127. The real
000599  000670  //       : cosine values vary from 1.0 to -1.0 so appropriate
000600  000671  //       : scaling must be done in user code.
000601  000672        
000602  000673  func RAND(), 1;                                 // return a pseudo random number
000603  000674  // Syntax: RAND();
000604  000675  // Usage : var := RAND();
000605  000676  // Notes : Returns a random number between 0 and 0xFFFF.
000606  000677  //       : The random number generator must first be seeded
000607  000678  //       : by using the SEED(number) function.
000608  000679        
000609  000680  func RANDVAL("low", "high"), 1;                 // return a ranged pseudo random number
000610  000681  // Syntax: RANDVAL("low", "high");
000611  000682  // Usage : var := RANDVAL(low, high);
000612  000683  // Notes : Returns a random number between low and high limits
000613  000684  //       : such that low <= N < high
000614  000685  //       : The random number generator may first be seeded
000615  000686  //       : by using the SEED(number) function.
000616  000687  //       : RANDVAL is the equivalent of aggregate functions:-
000617  000688  //       :     myvar = ABS( (RAND()%(high-low)+low) );
000618  000689  //       : Note that the lower limit is inclusive, but the upper limit is exclusive.
000619  000690        
000620  000691  func SEED("number"), 0;                         // re-seed the pseudo random number generator
000621  000692  // Syntax: SEED(number);
000622  000693  // Usage : SEED(arg);
000623  000694  // Notes : Seeds the random number generator.
000624  000695        
000625  000696  func SQRT("number"), 1;                         // return square root of a number
000626  000697  // Syntax: SQRT(number);
000627  000698  // Usage : SQRT(arg);
000628  000699  // Notes : Returns the integer square root of a number.
000629  000700        
000630  000701  func OVF(), 1;                                  // returns upper 16bits of 32bit results
000631  000702  // Syntax: OVF();
000632  000703  // Usage : loWord := 0x2710 * 0x2710;           // (10000 * 10000 in hex format)
000633  000704  //       : hiWord := OVF();
000634  000705  // Notes : This function returns the high order 16 bits from certain math and shift functions..
000635  000706        
000636  000707  func CY(), 1;
000637  000708  // Syntax: CY();
000638  000709  // Usage : myvar := 0xFFF8 + 9;                 // result = 1
000639  000710  //       : print(myvar," "CY(),"\n");           // carry = 1
000640  000711  // Notes : This function returns the carry status of an
000641  000712  // unsigned overflow from any 16 or 32bit additions or sutractions.
000642  000713        
000643  000714  func EVE_SP(), 1;
000644  000715  // Syntax: EVE_SP();
000645  000716  // Usage : eg:  print(EVE_SP());
000646  000717  // Notes : Used for debugging to assess the current stack level,
000647  000718  //       : mainly for checking stack leaks, see example EVE_SP.4dg
000648  000719        
000649  000720  func EVE_SSIZE(), 1;
000650  000721  // Syntax: EVE_SSIZE();
000651  000722  // Usage : eg:  print(EVE_SSIZE());
000652  000723  // Notes : Used to get the stack size,
000653  000724  //       : mainly for debugging purposes, EVE_SP.4dg
000654  000725        
000655  000726        
000656  000727  //------------------------------------------------------------------//
000657  000728  //
000658  000729  //------------------------------------------------------------------//
000659  000730  func mem_ArrayOp1("memarray", "count", "op", "value"), 0;                     // single array functions
000660  000731        
000661  000732        
000662  000733  // single word array operations
000663  000734  #CONST
000664  000755  #END
000665  000756        
000666  000757        
000667  000758  func mem_ArrayOp2("memarray1", "memarray2", "count", "op", "value"), 0;         // dual array functions
000668  000759        
000669  000760  // dual word array operations
000670  000761  #CONST
000671  000773  #END
000672  000774        
000673  000775        
000674  000776  func __reserved3(), 0; // do not remove
000675  000777  func __reserved4(), 0; // do not remove
000676  000778        
000677  000779        
000678  000780  //------------------------------------------------------------------//
000679  000781  // unsigned long (32 bit) operations                                //
000680  000782  //------------------------------------------------------------------//
000681  000783        
000682  000784  func uadd_3232("res32", "val1", "val2"), 1;
000683  000785  // Syntax   : cmp_3232(res32, varA, varB);
000684  000786  // Input    : DWORD res32 points to optional result (or zero for compare)
000685  000787  //          : DWORD val1 points to 32bit augend
000686  000788  //          : DWORD val2 points to 32bit addend
000687  000789  // Usage    : var res32[2];
000688  000790  //          : res := cmp_3232(res32, val1, val2);
000689  000791  // Notes    : performs an unsigned addition of 2 x 32bit values
000690  000792  //          : placing the 32bit result in a 2 word array.
000691  000793  // Returns  : returns 1 on 32bit unsigned overflow (carry).
000692  000794  //          ; carry flag is also set on 32bit unsigned overflow
000693  000795  //          ; and can be read with the CY() function.
000694  000796        
000695  000797        
000696  000798  func usub_3232("res32", "val1", "val2"), 1;
000697  000799  // Syntax   : cmp_3232(res32, varA, varB);
000698  000800  // Input    : DWORD res32 points to optional result (or zero for compare)
000699  000801  //          : DWORD val1 points to first 32bit minuend
000700  000802  //          : DWORD val2 points to 32bit subtrahend
000701  000803  // Usage    : var res32[2];
000702  000804  //          : res := cmp_3232(res32, val1, val2);
000703  000805  // Notes    : performs an unsigned subtraction of 2 x 32bit values
000704  000806  //          : placing the 32bit result in a 2 word array.
000705  000807  // Returns  : returns 1 on 32bit unsigned overflow (borrow).
000706  000808  //          ; carry flag is also set on 32bit unsigned underflow
000707  000809  //          ; and can be read with the CY() function.
000708  000810        
000709  000811        
000710  000812  func umul_1616("&res32", "val1", "val2"), 1;
000711  000813  // Syntax   : umul_1616(&res32, varA, varB);
000712  000814  // Input    : DWORD result   points to 32bit result register.
000713  000815  //          : VAR   val1  16bit register or constant
000714  000816  //          : VAR   val2  16bit register or constant
000715  000817  // Usage    : var res32[2];
000716  000818  //          : umul_1616(&res32, myvar, 50000);
000717  000819  // Notes    : performs an unsigned multiply of 2 x 16bit values
000718  000820  //          : placing the 32bit result in a 2 word array.
000719  000821  // Returns  : the pointer to the 32bit result.
000720  000822  //          : carry and overflow are not affected.
000721  000823        
000722  000824        
000723  000825  func udiv_3232("res32", "val1", "val2"), 1;
000724  000826  // Syntax   : udiv_1616(res32, varA, varB);
000725  000827  // Input    : DWORD *result   points to 32bit result register.
000726  000828  //          : DWORD   val1  pointer to 32bit value (dividend)
000727  000829  //          : DWORD   val2  pointer to 32bit value (divisor)
000728  000830  // Usage    : var res32[2];
000729  000831  //          : umul_1616(res32, myvar, 50000);
000730  000832  // Notes    : performs an unsigned division of 2 x 32bit values
000731  000833  //          : placing the 32bit result in a 2 word array.
000732  000834  // Returns  : the pointer to the 32bit result.
000733  000835  //          : carry and overflow are not affected.
000734  000836        
000735  000837        
000736  000838  func ucmp_3232("val1", "val2"), 1;
000737  000839  // Syntax   : cmp_3232(varA, varB);
000738  000840  // Input    : DWORD val1 points to 32bit minuend
000739  000841  //          : DWORD val2 points to 32bit sutrahend
000740  000842  // Usage    : res := cmp_3232(val1, val2);
000741  000843  // Notes    : performs an unsigned comparison of 2 x 32bit values.
000742  000844  //          : The result of the subtraction is returned.
000743  000845  // Returns  : 0  if equal
000744  000846  //          : 1  if val1 > val2
000745  000847  //          : -1 if val1 < val2
000746  000848  //          : This function does not affect the carry flag.
000747  000849        
000748  000850  func __reserved5(), 0; // do not remove
000749  000851  func __reserved6(), 0; // do not remove
000750  000852        
000751  000853  //------------------------------------------------------------------//
000752  000854  // Floating point operations                                        //
000753  000855  // Note that source arguments may be a pointer to a float variable, //
000754  000856  // or a numeric text string.                                        //
000755  000857  // A string argument is converted at run-time by calling            //
000756  000858  // flt_Val for a string argument.                                   //
000757  000859  // Note that a float variable is a 2 word array, eg var myfloat[2]; //
000758  000860  //------------------------------------------------------------------//
000759  000861  func flt_VAL("fresult", "numstring"), 1;
000760  000862  // Syntax   : flt_VAL(float1, mystring);
000761  000863  // Input    : FLOAT  fresult  points to float result register
000762  000864  //          : numstring       a string constant or string variable
000763  000865  //          : that is holds valid floating point number.
000764  000866  // Usage    : var float1[2];
000765  000867  //          : flt_VAL(float1, "1.0594631");
000766  000868  // Notes    : The string argument can be a string constant, a pointer
000767  000869  //          : to a string variable, or a pointer to a data statement.
000768  000870  //          : The string may be a float, or a hex or binary integer value (no decimal point allowed).
000769  000871  //          : For hex or binary, the number is preceeded with 0x or 0b
000770  000872  // Returns  : the pointer to the float result.
000771  000873  //          : carry and overflow are not affected.
000772  000874        
000773  000875        
000774  000876  func flt_ITOF("fresult", "var16"), 1;
000775  000877  // Syntax   : flt_ITOF(resf, intval);
000776  000878  // Input    : FLOAT  fresult  points to float result register
000777  000879  //          : var16           a 16bit signed integer variable or string constant
000778  000880  // Usage    : var float1[2];
000779  000881  //          : var myvar := 30000;
000780  000882  //          : flt_VAL(float1, myvar);
000781  000883  // Notes    : Converts a 16bit signed integer value to a signed floating point number.
000782  000884  // Returns  : the pointer to the float result.
000783  000885        
000784  000886        
000785  000887  func flt_UITOF("fresult", "uvar16"), 1;
000786  000888  // Syntax   : flt_ITOF(resf, intval);
000787  000889  // Input    : FLOAT  fresult  points to float result register
000788  000890  //          : var16           a 16bit integer variable or constant (treated as unsigned)
000789  000891  // Usage    : var float1[2];
000790  000892  //          : var myuvar := 30000;
000791  000893  //          : flt_UITOF(float1, myuvar);
000792  000894  // Notes    : Converts a 16bit unsigned integer value to a positive floating point number.
000793  000895  // Returns  : the pointer to the float result.
000794  000896        
000795  000897  func flt_LTOF("fresult", "var32"), 1;
000796  000898  // Syntax   : flt_LTOF(resf, var32);
000797  000899  // Input    : FLOAT  fresult  points to float result register
000798  000900  //          : var32           points to a 32bit (long) signed variable or string constant
000799  000901  // Usage    : var float1[2];
000800  000902  //          : var mylong[2];
000801  000903  //          : flt_VAL(float1, mylong);
000802  000904  // Notes    : Converts a 32bit signed integer value to a signed floating point number.
000803  000905  // Returns  : the pointer to the float result.
000804  000906        
000805  000907        
000806  000908  func flt_ULTOF("fresult", "uvar32"), 1;
000807  000909  // Syntax   : flt_ITOF(resf, uvar32);
000808  000910  // Input    : FLOAT  fresult  points to float result register
000809  000911  //          : var32           points to a 32bit (unsigned long) unsigned variable or string constant
000810  000912  // Usage    : var float1[2];
000811  000913  //          : var myulong[2];
000812  000914  //          : flt_VAL(float1, myulong);
000813  000915  // Notes    : Converts a 32bit unsigned integer value to a positive floating point number.
000814  000916  // Returns  : the pointer to the float result.
000815  000917        
000816  000918        
000817  000919  func flt_PRINT("fvalue", "formatstring"), 1;
000818  000920  // Syntax   : flt_PRINT(resf, formatstr);
000819  000921  // Input    : FLOAT  fresult  points to float result register
000820  000922  //          : formatstring    zero, null string, of valid format string
000821  000923  // Usage    : var float1[2];
000822  000924  //          : flt_PRINT(float1, "");
000823  000925  // Notes    : The string argument can be a string constant, a pointer
000824  000926  //          : to a string variable, or a pointer to a data statement.
000825  000927  //          : If it is zero or an empty string, the number is
000826  000928  //          : automatically formatted for the best presentation.
000827  000929  //          : The format string is similar to the C language, but only
000828  000930  //          : a single '%' may be used to print a single variable.
000829  000931  // Returns  : zero if success.
000830  000932        
000831  000933        
000832  000934  func flt_ABS("result", "floatval"), 1;
000833  000935  // Syntax   : flt_ABS(&result, &fval);
000834  000936  // Input    : FLOAT  result   points to float result register
000835  000937  //          : numstring       a string that is a valid number
000836  000938  // Usage    : var float1[2];
000837  000939  //          : flt_VAL(float1, float1); // convert float1 to its ABS value
000838  000940  // Returns  : the pointer to the float result.
000839  000941  //          : carry and overflow are not affected.
000840  000942        
000841  000943        
000842  000944  func flt_ACOS("result", "floatval"), 1;
000843  000945  // Syntax   : flt_ACOS(result, fval);
000844  000946  // Input    : FLOAT  result (in radians) points to float result register
000845  000947  //          : FLOAT  floatval points to the float value to get arccos of
000846  000948  // Usage    : var float1[2];
000847  000949  //          : flt_ACOS(result, float1); // get the arccos of float1
000848  000950  // Notes    : the result is in radians.
000849  000951  // Returns  : the pointer to the float result.
000850  000952  //          : carry and overflow are not affected.
000851  000953        
000852  000954        
000853  000955  func flt_ASIN("result", "floatval"), 1;
000854  000956  // Syntax   : flt_ASIN(result, fval);
000855  000957  // Input    : FLOAT  result (in radians) points to float result register
000856  000958  //          : FLOAT  floatval points to the float value to get arcsin of
000857  000959  // Usage    : var float1[2];
000858  000960  //          : flt_ASIN(result, float1); // get the Arcsin of float1
000859  000961  // Notes    : the result is in radians.
000860  000962  // Returns  : the pointer to the float result.
000861  000963  //          : carry and overflow are not affected.
000862  000964        
000863  000965        
000864  000966  func flt_ATAN("result", "floatval"), 1;
000865  000967  // Syntax   : flt_ATAN(result, fval);
000866  000968  // Input    : FLOAT  result (in radians) points to float result register
000867  000969  //          : FLOAT  floatval points to the float value to get arctan of
000868  000970  // Usage    : var float1[2];
000869  000971  //          : flt_ATAN(result, float1); // get the Arctan of float1
000870  000972  // Notes    : the result is in radians.
000871  000973  // Returns  : the pointer to the float result.
000872  000974  //          : carry and overflow are not affected.
000873  000975        
000874  000976        
000875  000977  func flt_COS("result", "floatval"), 1;
000876  000978  // Syntax   : flt_COS(result, fval);
000877  000979  // Input    : FLOAT  result   points to float result register
000878  000980  //          : FLOAT  floatval (in radians) points to the float value to get Cos of
000879  000981  // Usage    : var float1[2];
000880  000982  //          : flt_COS(result, float1); // get the Cosine of float1
000881  000983  // Notes    : the result is in radians.
000882  000984  // Returns  : the pointer to the float result.
000883  000985  //          : carry and overflow are not affected.
000884  000986        
000885  000987        
000886  000988  func flt_EXP("result", "floatval"), 1;
000887  000989  // Syntax   : flt_EXP(result, fval);
000888  000990  // Input    : FLOAT  result   points to float result register
000889  000991  //          : FLOAT  floatval points to the float value to get Exponent of
000890  000992  // Usage    : var float1[2];
000891  000993  //          : flt_EXP(result, float1); // get the Exponent of float1
000892  000994  // Returns  : the pointer to the float result.
000893  000995  //          : carry and overflow are not affected.
000894  000996        
000895  000997        
000896  000998  func flt_CEIL("result", "floatval"), 1;
000897  000999  // Syntax   : flt_CEIL(result, floatval);
000898  001000  // Input    : FLOAT  floatval points to the float value to integerize up
000899  001001  // Usage    : var float1[2];
000900  001002  //          : n := flt_INT(float1, float1); // round value up to the integer value
000901  001003  // Notes    : Removes fractional part, rounding up correctly.
000902  001004  // Returns  : the pointer to the float result.
000903  001005  //          : carry and overflow are not affected.
000904  001006        
000905  001007        
000906  001008  func flt_FLOOR("result", "floatval"), 1;
000907  001009  // Syntax   : flt_FLOOR(result, floatval);
000908  001010  // Input    : FLOAT  floatval points to the float value to integerize down
000909  001011  // Usage    : var float1[2];
000910  001012  //          : n := flt_INT(float1, float1); // round value down to the integer value
000911  001013  // Notes    : Removes fractional part, rounding down correctly.
000912  001014  // Returns  : the pointer to the float result.
000913  001015  //          : carry and overflow are not affected.
000914  001016        
000915  001017        
000916  001018  func flt_SIN("result", "floatval"), 1;
000917  001019  // Syntax   : flt_SIN(result, fval);
000918  001020  // Input    : FLOAT  result   points to float result register
000919  001021  //          : FLOAT  floatval (in radians) points to the float value to get Sine of
000920  001022  // Usage    : var float1[2];
000921  001023  //          : flt_SIN(result, float1); // get the Sin of float1
000922  001024  // Notes    : the result is in radians.
000923  001025  // Returns  : the pointer to the float result.
000924  001026  //          : carry and overflow are not affected.
000925  001027        
000926  001028        
000927  001029  func flt_LOG("result", "floatval"), 1;
000928  001030  // Syntax   : flt_LOG(&result, &fval);
000929  001031  // Input    : FLOAT  result   points to float result register
000930  001032  //          : FLOAT  floatval points to the float value to get Log of
000931  001033  // Usage    : var float1[2];
000932  001034  //          : flt_LOG(result, float1); // get the natural Log of float1
000933  001035  // Returns  : the pointer to the float result.
000934  001036  //          : carry and overflow are not affected.
000935  001037        
000936  001038        
000937  001039  func flt_SQR("result", "floatval"), 1;
000938  001040  // Syntax   : flt_SQR(result, fval);
000939  001041  // Input    : FLOAT  result   points to float result register
000940  001042  //          : FLOAT  floatval points to the float value to get Log of
000941  001043  // Usage    : var float1[2];
000942  001044  //          : flt_SQR(result, float1); // get the square root of float1
000943  001045  // Returns  : the pointer to the float result, or zero if number was negative.
000944  001046  //          : carry and overflow are not affected.
000945  001047        
000946  001048        
000947  001049  func flt_TAN("result", "floatval"), 1;
000948  001050  // Syntax   : flt_TAN(result, fval);
000949  001051  // Input    : FLOAT  result   points to float result register
000950  001052  //          : FLOAT  floatval (in radians) points to the float value to get Tangent of
000951  001053  // Usage    : var float1[2];
000952  001054  //          : flt_TAN(result, float1); // get the Tangent of float1
000953  001055  // Returns  : the pointer to the float result.
000954  001056  //          : carry and overflow are not affected.
000955  001057        
000956  001058        
000957  001059  func flt_POW("result", "floatx", "floaty"), 1;
000958  001060  // Syntax   : flt_POW(result, fval1, fval2);
000959  001061  // Input    : FLOAT  result   points to float result register
000960  001062  //          : FLOAT  floatx   points to the float value to raise
000961  001063  //          : FLOAT  floaty   points to the float value for power
000962  001064  // Usage    : flt_POW(result, floatx, floaty); // raise x to power y
000963  001065  // Returns  : the pointer to the float result, or zero if error occurs.
000964  001066  //          : carry and overflow are not affected.
000965  001067        
000966  001068        
000967  001069  func flt_ADD("result", "floatA", "floatB"), 1;
000968  001070  // Syntax   : flt_ADD(result, floatA, floatB);
000969  001071  // Input    : FLOAT  result   points to float result register
000970  001072  //          : FLOAT  floatval points to the float value A
000971  001073  //          : FLOAT  floatval points to the float value B
000972  001074  // Usage    : flt_ADD(result, floatx, floaty); // add B to A
000973  001075  // Returns  : the pointer to the float result, or zero if error occurs.
000974  001076  //          : carry and overflow are not affected.
000975  001077        
000976  001078        
000977  001079  func flt_SUB("&result", "&floatA", "&floatB"), 1;
000978  001080  // Syntax   : flt_SUB(result, floatA, floatB);
000979  001081  // Input    : FLOAT  result   points to float result register
000980  001082  //          : FLOAT  floatval points to the float value A
000981  001083  //          : FLOAT  floatval points to the float value B
000982  001084  // Usage    : flt_SUB(&result, &floatx, &floaty); // subtract B from A
000983  001085  // Returns  : the pointer to the float result, or zero if error occurs.
000984  001086  //          : carry and overflow are not affected.
000985  001087        
000986  001088        
000987  001089  func flt_MUL("result", "floatA", "floatB"), 1;
000988  001090  // Syntax   : flt_MUL(result, floatA, floatB);
000989  001091  // Input    : FLOAT  result   points to float result register
000990  001092  //          : FLOAT  floatval points to the float value A
000991  001093  //          : FLOAT  floatval points to the float value B
000992  001094  // Usage    : flt_MUL(result, floatA, floatB); // multiply A by B
000993  001095  // Returns  : the pointer to the float result, or zero if error occurs.
000994  001096  //          : carry and overflow are not affected.
000995  001097        
000996  001098        
000997  001099  func flt_DIV("result", "floatA", "floatB"), 1;
000998  001100  // Syntax   : flt_DIV(result, floatA, floatB);
000999  001101  // Input    : FLOAT  result   points to float result register
001000  001102  //          : FLOAT  floatval points to the float value A
001001  001103  //          : FLOAT  floatval points to the float value B
001002  001104  // Usage    : flt_DIV(result, floatA, floatB); // divide A by B
001003  001105  // Returns  : the pointer to the float result, or zero if error occurs.
001004  001106  //          : carry and overflow are not affected.
001005  001107        
001006  001108        
001007  001109  //------------------------------------------------------------------//
001008  001110  // The following float functions all return integer values.
001009  001111  //------------------------------------------------------------------//
001010  001112  func flt_EQ("floatA", "floatB"), 1;
001011  001113  // Syntax   : flt_EQ(floatA, floatB);
001012  001114  // Input    : FLOAT  floatval points to the float value A
001013  001115  //          : FLOAT  floatval points to the float value B
001014  001116  // Usage    : if (flt_EQ(floatA, floatB)) // compare A to B, true if A == B
001015  001117  // Returns  : True if numbers are equal, false otherwise.
001016  001118        
001017  001119        
001018  001120  func flt_NE("floatA", "floatB"), 1;
001019  001121  // Syntax   : flt_NE(floatA, floatB);
001020  001122  // Input    : FLOAT  floatval points to the float value A
001021  001123  //          : FLOAT  floatval points to the float value B
001022  001124  // Usage    : if (flt_NE(floatA, floatB)) // compare A to B, true if A != B
001023  001125  // Returns  : True if numbers are not equal, false otherwise.
001024  001126        
001025  001127        
001026  001128        
001027  001129  func flt_GT("floatA", "floatB"), 1;
001028  001130  // Syntax   : flt_GT(floatA, floatB);
001029  001131  // Input    : FLOAT  floatval points to the float value A
001030  001132  //          : FLOAT  floatval points to the float value B
001031  001133  // Usage    : if (flt_GT(floatA, floatB)) // compare A to B, true if A > B
001032  001134  // Returns  : True if A > B, false otherwise.
001033  001135        
001034  001136        
001035  001137  func flt_GE("floatA", "floatB"), 1;
001036  001138  // Syntax   : flt_GE(floatA, floatB);
001037  001139  // Input    : FLOAT  floatval points to the float value A
001038  001140  //          : FLOAT  floatval points to the float value B
001039  001141  // Usage    : if (flt_GE(floatA, floatB)) // compare A to B, true if A >= B
001040  001142  // Returns  : True if A >= B, false otherwise.
001041  001143        
001042  001144        
001043  001145  func flt_LT("floatA", "floatB"), 1;
001044  001146  // Syntax   : flt_LT(floatA, floatB);
001045  001147  // Input    : FLOAT  floatval points to the float value A
001046  001148  //          : FLOAT  floatval points to the float value B
001047  001149  // Usage    : if (flt_LT(floatA, floatB)) // compare A to B, true if A < B
001048  001150  // Returns  : True if A < B, false otherwise.
001049  001151        
001050  001152        
001051  001153  func flt_LE("floatA", "floatB"), 1;
001052  001154  // Syntax   : flt_LE(floatA, floatB);
001053  001155  // Input    : FLOAT  floatval points to the float value A
001054  001156  //          : FLOAT  floatval points to the float value B
001055  001157  // Usage    : if (flt_LE(floatA, floatB )) // compare A to B, true if A <= B
001056  001158  // Returns  : True if A <= B, false otherwise.
001057  001159        
001058  001160        
001059  001161  func flt_SGN("floatval"), 1;
001060  001162  // Syntax   : flt_SGN(fval);
001061  001163  // Input    : FLOAT  floatval   points to the float value examine sign
001062  001164  // Usage    : var float1[2];
001063  001165  //          : n := flt_SGN(float1); // return -1 if float number negative
001064  001166  // Notes    : returns 0 if sign is positive or zero.
001065  001167  // Returns  : returns 16bit integer -1 if float sign is negative, or zero if positive.
001066  001168  //          : carry and overflow are not affected.
001067  001169        
001068  001170        
001069  001171  func flt_FTOI("floatvar"), 1;
001070  001172  // Syntax   : flt_FTOI(myfloat);
001071  001173  // Input    : FLOAT  fresult  points to float result register
001072  001174  // Usage    : var float1[2];
001073  001175  //          : myvar := flt_VAL(&float1, myvar);
001074  001176  // Notes    : Converts a floating point number to a 16bit integer.
001075  001177  //          : The floating point number is rounded up or down accordingly.
001076  001178  // Returns  : the integer value of the float.
001077  001179        
001078  001180  func flt_PRINTxy("xpos", "ypos", "fvalue", "formatstring"), 1;
001079  001181  // Syntax   : flt_PRINT(x, y, resf, formatstr);
001080  001182  // Input    : FLOAT  fresult  points to float result register
001081  001183  //          : formatstring    zero, null string, of valid format string
001082  001184  // Usage    : var float1[2];
001083  001185  //          : flt_PRINT(float1, "");
001084  001186  // Notes    : The string argument can be a string constant, a pointer
001085  001187  //          : to a string variable, or a pointer to a data statement.
001086  001188  //          : If it is zero or an empty string, the number is
001087  001189  //          : automatically formatted for the best presentation.
001088  001190  //          : The format string is similar to the C language, but only
001089  001191  //          : a single '%' may be used to print a single variable.
001090  001192  // Returns  : zero if success.
001091  001193        
001092  001194  func __reserved9(), 0; // do not remove
001093  001195  func __reserved10(), 0; // do not remove
001094  001196        
001095  001197  //------------------------------------------------------------------//
001096  001198  //------------------------------------------------------------------//
001097  001199  //------------------------------------------------------------------//
001098  001200  //------------------------------------------------------------------//
001099  001201  //------------------------------------------------------------------//
001100  001202  func pin_Set("mode", "pin"), 1;            // set pin to required mode
001101  001203  // Syntax: pin_Set(mode, pin);
001102  001204  // Usage : pin_Set(PIN_OUT,);
001103  001205  // Notes : Sets the selected pin to the desired mode. Refer to the manual
001104  001206  //       : for pin function compatitblilites.
001105  001207  //       : returns true if the pin number and mode is legal (usually ignored)
001106  001208  //       :    available pin modes
001107  001209  //       :    PIN_INP                 0        // pin is input, no pullup or pulldown
001108  001210  //       :    PIN_INP_HI              1        // pin is input with pullup to Vcc
001109  001211  //       :    PIN_INP_LO              2        // pin is input with pulldown to Gnd
001110  001212  //       :    PIN_OUT                 3        // pin is output
001111  001213  //       :    PIN_OUT_OD              4        // pin is output with open drain
001112  001214  //       :    PIN_AN                  5        // pin is analogue (PA0 to PA3 only)
001113  001215  //       :    PIN_ANAVG               6        // pin is analogue (PA0 to PA3 only), averaged - 16 samples
001114  001216  //       :
001115  001217        
001116  001218  func pin_HI("pin"), 1;                    // set pin to logic '1'
001117  001219  // Syntax: pin_HI(pin);
001118  001220  // Usage : pin_HI(PA4);        // make PA4 HI level
001119  001221  // Notes : Outputs a logic "High" to the pin latch
001120  001222  //       : The pin is automatically made an output.
001121  001223  //       : pullup, pulldown, and change notification will be disable for the selected pin.
001122  001224  //       : returns true if the pin number is legal (usually ignored)
001123  001225  //       :
001124  001226        
001125  001227  func pin_LO("pin"), 1;                    // set pin to logic '0'
001126  001228  // Syntax: pin_LO(pin);
001127  001229  // Usage : pin_LO(PA3);
001128  001230  // Notes : Outputs a logic "Low" to the pin latch
001129  001231  //       : The pin is automatically made an output.
001130  001232  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001131  001233  //       : returns true if the pin number is legal (usually ignored)
001132  001234  //       :
001133  001235        
001134  001236  func pin_Val("pin", "value"), 0;                    // set pin to to state of variable
001135  001237  // Syntax: pin_Var(pin, value);
001136  001238  // Usage : pin_Var(IO3, myvar);
001137  001239  // Notes : Outputs a logic state on a pin depending on the value of bit 0 of a variable
001138  001240  //       : The pin is automatically made an output.
001139  001241  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001140  001242  //       : returns true if the pin number is legal (usually ignored)
001141  001243        
001142  001244  func pin_Read("pin"), 1;                // read pin, logic or analogue
001143  001245  // Syntax: pin_Read(PA0);
001144  001246  // Usage : arg1 := pin_Read(arg2);
001145  001247  // Notes : Read a pin in various ways. If the pin is
001146  001248  //       : set to an input, read the state of the input pin.
001147  001249  //       : If set to an output, read the state of the output latch.
001148  001250  //       : If set to analogue, read the 12 bit analogue value.
001149  001251        
001150  001252  func bus_Read(), 1;
001151  001253  // Syntax: bus_Read();
001152  001254  // Usage : arg1 := pin_ReadBus();
001153  001255  // Notes : Read the 16 bit port regardless of pin configurations.
001154  001256  //       : If a pin is configured as input or analogue, the pin is read directly as
001155  001257  //       : if it were a digital input. If a pin is configured as an output, the pin
001156  001258  //       : is also read directly, giving the output latch state.
001157  001259  //       : Bit 0 coresponds to PA0 through to bit15 which coresponds to PA15
001158  001260  //       : (Refer to 'port bit position masks')
001159  001261  //Returns: Returns the 16 bit value of the bus.
001160  001262        
001161  001263  func bus_SetPins("value"), 0;
001162  001264  // Syntax: bus_SetPins(value);
001163  001265  // Usage : arg1 := bus_SetPins(15); // set PA0 to PA3 to output bits, making them HI
001164  001266  // Notes : Any '1' bits in "value" set the coresponding port pin to an output
001165  001267  //       : and forces its state to a '1'. The state of its previous open drain
001166  001268  //       : configuration is not altered. Any zero bits in "value" will not affect the pin.
001167  001269  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001168  001270  //       : Bit 0 coresponds to PA0 through to bit13 which coresponds to PA13
001169  001271        
001170  001272  func bus_ClearPins("value"), 0;
001171  001273  // Syntax: bus_ClearPins(value);
001172  001274  // Usage : bus_ClearPins(0x03F0); // set PA0 to PA5 to output bits, making them LO
001173  001275  // Notes : Any '1' bits in "value" set the coresponding port pin to an output
001174  001276  //       : and forces its state to a '0. The state of its previous open drain
001175  001277  //       : configuration is not altered. Any zero bits in "value" will not affect the pin.
001176  001278  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001177  001279  //       : Bit 0 coresponds to PA0 through to bit13 which coresponds to PA13
001178  001280        
001179  001281  func bus_SetChangeInterrupt("function", "portmask"), 1;
001180  001282  // Syntax: bus_SetChangeInterrupt(value);
001181  001283  // Usage : bus_SetChangeInterrupt(scanKeypad, 0x00F0); // set PA4 to PA7 to interrupt on change
001182  001284  // Notes : Any '1' bits in "portmask" marks that pin to generate an interrupt on change.
001183  001285  //       : A level change on that pin will cause "function" to be executed. If "function" is
001184  001286  //       : zero, the display may be put into sleep mode, and any change will cause a wakeup reset.
001185  001287  //       : Wakeup will always re-start code running in FLASHBANK_0
001186  001288  //       : Bit 0 coresponds to PA0 through to bit15 which coresponds to PA15
001187  001289  //       : (Refer to 'port bit position masks')
001188  001290  //       : Once armed, "function" will only be executed once, it is necessary to
001189  001291  //       : re-arm for any further events.
001190  001292  //Returns: Return the current state of the pins that are selected in "portmask"
001191  001293  //       : This can be saved and later used in "function" to see which pin(s) actually changed.
001192  001294        
001193  001295  func bus_Write8("var"), 0;
001194  001296  // Syntax: bus_Write8(var);
001195  001297  // Usage : bus_Write8(arg1);
001196  001298  // Notes : The lower 8 bits of arg1 are placed on the BUS, then, after
001197  001299  //       : a settling delay of approx 50nsec, the BUS_WR(PA2) pin is strobed
001198  001300  //       : LO for approx 50nsec then set back HI.
001199  001301  //       : The upper 8 bits of arg1 are ignored.
001200  001302  //       : NB:- the BUS_WR(PA2) pin must be preset to the desired output state
001201  001303  //       : as must the bus pins to ensure BUS write integrity.
001202  001304  //       :
001203  001305  //       : BUS_0 is PA4
001204  001306  //       : BUS_1 is PA5
001205  001307  //       : BUS_2 is PA6
001206  001308  //       : BUS_3 is PA7
001207  001309  //       : BUS_4 is PA8
001208  001310  //       : BUS_5 is PA9
001209  001311  //       : BUS_6 is PA10
001210  001312  //       : BUS_7 is PA11
001211  001313        
001212  001314  func bus_Read8(), 1;
001213  001315  // Syntax: bus_Read();
001214  001316  // Usage : arg1 := bus_Read8();
001215  001317  // Notes : The BUS_RD(PA3) pin set to LO, then, after a settling delay
001216  001318  //       : of approx 50nsec, the BUS is read into the lower 8 bits of arg
001217  001319  //       : (the upper 8 bits being set to 0)
001218  001320  //       : the BUS_RD(PA3) pin is then set back to a HI level.
001219  001321  //       : NB:- the BUS_RD(PA3) pin must be preset to the desired output state
001220  001322  //       : as must the bus pins to ensure BUS read integrity.
001221  001323  //       :
001222  001324  //       : BUS_0 is PA4
001223  001325  //       : BUS_1 is PA5
001224  001326  //       : BUS_2 is PA6
001225  001327  //       : BUS_3 is PA7
001226  001328  //       : BUS_4 is PA8
001227  001329  //       : BUS_5 is PA9
001228  001330  //       : BUS_6 is PA10
001229  001331  //       : BUS_7 is PA11
001230  001332        
001231  001333  func __reserved13(), 0; // do not remove
001232  001334  func __reserved14(), 0; // do not remove
001233  001335  //------------------------------------------------------------------//
001234  001336  // Pin related constants                                            //
001235  001337  //------------------------------------------------------------------//
001236  001338        
001237  001339  // pin_Set(...) pin modes
001238  001340  #CONST
001239  001348  #END
001240  001349        
001241  001350        
001242  001351  // pin name             constant    connector H1 I/O Pin referencesnumbers
001243  001352  #CONST
001244  001372  #END
001245  001373        
001246  001374  // bit position masks
001247  001375  #CONST
001248  001392  #END
001249  001393        
001250  001394        
001251  001395        
001252  001396  //------------------------------------------------------------------//
001253  001397  //   Graphics Functions
001254  001398  //------------------------------------------------------------------//
001255  001399  func gfx_Set("mode", "value"), 0;            // set various graphics functions
001256  001400  // Syntax: gfx_Set(mode, value);
001257  001401  // Usage : gfx_Set(arg1, arg2);
001258  001402  // Notes : Sets various graphics parameters used by other functions
001259  001403  //       : This allows the features to be set programatically with a
001260  001404  //       : single function call.It is strongly recommended to use the
001261  001405  //       : pre-defined constants rather than the mode numbers.
001262  001406  //       : NB:- Although it is often required to be able to set graphics
001263  001407  //       : functions with a single function call for graphics engine
001264  001408  //       : related functions, there is a complete set of single parameter
001265  001409  //       : shortcut functions that have exactly the same function as
001266  001410  //       : each of the gfx_Set modes and saves 1 parameter / uses less memory
001267  001411  //       :
001268  001412  //       : mode = PEN_SIZE (mode 16)
001269  001413  //       : gfx_Set(PEN_SIZE, value);
001270  001414  //       : value = SOLID (value 0) rectangle and circle objects are solid
001271  001415  //       : value = OUTLINE (value 1) rectangle and circle objects are outlines
001272  001416  //       : Sets the mode of the Pen used by most graphics objects
001273  001417  //       :
001274  001418  //       : mode = BACKGROUND_COLOUR (mode 17)
001275  001419  //       : gfx_Set(BACKGROUND_COLOUR, value);
001276  001420  //       : value = 0 to 0xFFFF, Black to White
001277  001421  //       : Sets the Background colour of the screen
001278  001422  //       :
001279  001423  //       : mode = OBJECT_COLOUR (mode 18)
001280  001424  //       : gfx_Set(OBJECT_COLOUR, value);
001281  001425  //       : value = 0 to 0xFFFF, Black to White
001282  001426  //       : Sets the Object colour used in various functions
001283  001427  //       : LineTo(,,); LineRel(,,); BoxTo(,,); Dot(); etc.
001284  001428  //       :
001285  001429  //       : mode = CLIPPING (mode 19)
001286  001430  //       : gfx_Set(CLIPPING, value);
001287  001431  //       : value = OFF (value 0) Clipping disabled
001288  001432  //       : value = ON (value 1) Clipping enabled
001289  001433  //       : Enables/Disables the Clipping feature
001290  001434  //       :
001291  001435  //       : mode = TRANSPARENT_COLOUR (mode 20) : Image or Animation Transparency Colour.
001292  001436  //       : gfx_Set(TRANSPARENT_COLOUR, value);
001293  001437  //       : value = 0 to 0xFFFF Black to White
001294  001438  //       : Sets Bitmap, Image or Animation Transparency Colour.
001295  001439  //       : NB not implemented
001296  001440  //       :
001297  001441  //       : mode = TRANSPARENCY (mode 21) : Bitmap/Image/Animation Transparency
001298  001442  //       : gfx_Set(5, value);
001299  001443  //       : value = OFF (value 0) Transparency disabled
001300  001444  //       : value = ON (value 1) Transparency enabled
001301  001445  //       : Enables/Disables the Transparency feature
001302  001446  //       : NB not implemented
001303  001447  //       :
001304  001448  //       : mode = FRAME_DELAY (mode 22) : Inter-Frame Delay
001305  001449  //       : gfx_Set(FRAME_DELAY, value);
001306  001450  //       : value = 0 to 65535 ms
001307  001451  //       : Sets the Video/Animation clip inter-frame delay. This setting will
001308  001452  //       : over-ride the embedded frame delay of the clip. After the event,
001309  001453  //       : the setting will auto disable and if further inter-frame delays need
001310  001454  //       : overriding the setting must be re-issued.
001311  001455  //       :
001312  001456  //       : mode = SCREEN_MODE (mode 23) : Set required screen behaviour
001313  001457  //       : gfx_Set(SCREEN_MODE, value);
001314  001458  //       : value = LANDSCAPE   (value 0)
001315  001459  //       : value = LANDSCAPE_R (value 1)
001316  001460  //       : value = PORTRAIT    (value 2)
001317  001461  //       : value = PORTRAIT_R  (value 3)
001318  001462  //       :
001319  001463  //       : mode = OUTLINE_COLOUR (mode 24) : Outline Colour
001320  001464  //       : gfx_Set(OUTLINE_COLOUR, value);
001321  001465  //       : value = 1 to 0xFFFF, if 0, featre is OFF
001322  001466  //       : Sets the filled Rectangle or Circle objects outline colour
001323  001467  //       : If outline colour, is 0, OUTLINE_COLOUR feature is disabled
001324  001468  //       : gfx_Set(OUTLINE_COLOUR, OFF); may be used for this
001325  001469  //       :
001326  001470  //       : Only supports variable contrast for uOLED Modules
001327  001471  //       : mode = CONTRAST (mode 25) : Contrast
001328  001472  //       : gfx_Set(CONTRAST, value);
001329  001473  //       : value = 0 to 9, 0=off, 1=lowest, 8=highest contrast
001330  001474  //       : when contrast=0, display is placed in low power mode.
001331  001475  //       : This function should be called with contrast=0 when
001332  001476  //       : powering down the module.
001333  001477  //       :
001334  001478  //       : mode = LINE_PATTERN (mode 26) : Line Pattern
001335  001479  //       : gfx_Set(LINE_PATTERN, value);
001336  001480  //       : gfx_Set(LINE_PATTERN, 0b1111000011110000); // draw dotted line
001337  001481  //       : gfx_Set(LINE_PATTERN, OFF); // line patterning OFF
001338  001482  //       : a value of 0 turns the feature off
001339  001483  //       :
001340  001484  //       : mode = COLOUR_MODE (mode 27) : 8/16 bit colour mode
001341  001485  //       : gfx_Set(COLOUR_MODE , COLOUR16);   // set 16bit colour mode
001342  001486  //       : gfx_Set(COLOUR_MODE , COLOUR8);   // set 8bit colour mode
001343  001487  //       : NB not implemented, default is COLOUR16
001344  001488  //       :
001345  001489  //       : mode = BEVEL_WIDTH (mode 28) : set button and slider bevel width
001346  001490  //       : gfx_Set(BEVEL_WIDTH , 5);   // set bevel lines to 5 pixels wide
001347  001491  //       : sets the button and slider objects bevel width
001348  001492  //       :
001349  001493  //       : mode = BEVEL_SHADOW (mode 29) : set bevel shadowing depth for buttons and sliders
001350  001494  //       : gfx_Set(BEVEL_SHADOW , 5);
001351  001495  //       : sets the button and slider objects darken and lighten depth for the bevel colour
001352  001496  //       :
001353  001497  //       : mode = X_ORIGIN (mode 29) : set x offset for screen
001354  001498  //       : gfx_Set(X_ORIGIN , 25);  // object are offset 25 pixels from LHS
001355  001499  //       : sets the origin of drawn objects to a position other than 0,0
001356  001500  //       :
001357  001501  //       : mode = Y_ORIGIN (mode 29) : set y offset for screen
001358  001502  //       : gfx_Set(Y_ORIGIN , 30);  // object are offset 30 pixels from TOP
001359  001503  //       : sets the origin of drawn objects to a position other than 0,0
001360  001504        
001361  001505  //------------------------------------------------------------------------------
001362  001506  //gfx_Set() related constants
001363  001507  //------------------------------------------------------------------------------
001364  001508  #CONST
001365  001525  #END
001366  001526        
001367  001527        
001368  001528  func gfx_Cls(), 0;                    // clear the screen
001369  001529  // Syntax: gfx_Cls();
001370  001530  // Usage : gfx_Cls();
001371  001531  // Notes : Clears the screen with current background colour
001372  001532        
001373  001533  func gfx_MoveTo("x", "y"), 0;                // set glb_X1 and glb_Y1 to required co-ordinate
001374  001534  // Syntax: gfx_MoveTo(x, y);
001375  001535  // Usage : gfx_MoveTo(arg1, arg2);
001376  001536  // Notes : Moves the origin to a new x,y position
001377  001537        
001378  001538  func gfx_MoveRel("x", "y"), 0;                // set glb_X1 and glb_Y1 to new relative offset
001379  001539  // Syntax: gfx_MoveRel(x, y);
001380  001540  // Usage : gfx_MoveRel(arg1, arg2);
001381  001541  // Notes : Moves the origin to a new x,y position
001382  001542  //       : relative to the current origing
001383  001543        
001384  001544  func gfx_LineTo("x1", "y1"), 0;                     // draw line from current origin to new point
001385  001545  // Syntax: gfx_LineTo(x1, y1);
001386  001546  // Usage : gfx_LineTo(arg1, arg2);
001387  001547  // Notes : Draws a Line from the origin x,y to x1,y1.
001388  001548  //       : The new origin is then set to x1, y1. Line colour needs
001389  001549  //       : to be preset with "Set Object colour" using gfx_Set(mode=2, colour);
001390  001550        
001391  001551  func gfx_LineRel("x1", "y1"), 0;                    // draw line from current origin to new relative offset
001392  001552  // Syntax: gfx_LineRel(x1, y1);
001393  001553  // Usage : gfx_LineRel(arg1, arg2);
001394  001554  // Notes : Draws a Line from the origin x,y to x1,y1.
001395  001555  //       : Unlike gfx_MoveTo() the origin is not updated with x1, y1. Line colour needs
001396  001556  //       : to be preset with "Set Object colour" using gfx_Set(OBJECT_COLOUR, colour);
001397  001557        
001398  001558  func gfx_Line("x1", "y1", "x2", "y2", "colr"), 0;   // draw line, can be patterned
001399  001559  // Syntax: gfx_Line(x1, x2, y2, colr);
001400  001560  // Usage : gfx_Line(arg1, arg2, arg3, arg4, arg5);
001401  001561  // Notes : Plots a coloured Line from x1,y1 to x2,y2 on the screen
001402  001562        
001403  001563  func gfx_Hline("y", "x1", "x2", "colr"), 1;         // draw Hline, can be patterned
001404  001564  // Syntax: gfx_Line(x1, x2, y, colr);
001405  001565  // Usage : gfx_Line(arg1, arg2, arg3, arg4);
001406  001566  // Notes : Plots a coloured Horizontal line from x1,y to x2,y on the screen
001407  001567        
001408  001568  func gfx_Vline("x", "y1", "y2", "colr"), 1;         // draw Vline, can be patterned
001409  001569  // Syntax: gfx_Line(y1, y2, x, colr);
001410  001570  // Usage : gfx_Line(arg1, arg2, arg3, arg4);
001411  001571  // Notes : Plots a coloured Vertical line from x,y1 to x,y2 on the screen
001412  001572        
001413  001573  func gfx_Rectangle("x1" ,"y1", "x2", "y2", "colr"), 0;    // draw open rectangle,line can be patterned
001414  001574  // Syntax: gfx_Rectangle(x1, y1, x2, y2, colr);
001415  001575  // Usage : gfx_Rectangle(arg1, arg2, arg3, arg4, arg5);
001416  001576  // Notes : Plots a coloured Outline Rectangle from top corner (x1,y1) to
001417  001577  //       : bottom corner (x2,y2) on the screen.
001418  001578        
001419  001579  func gfx_RectangleFilled("x1","y1","x2","y2","colr"), 0;    // draw filled rectangle
001420  001580  // Syntax: gfx_Rectangle(x1, y1, x2, y2, colour);
001421  001581  // Usage : gfx_Rectangle(arg1, arg2, arg3, arg4, arg5);
001422  001582  // Notes : Plots a coloured Solid Rectangle from top corner (x1,y1) to
001423  001583  //       : bottom corner (x2,y2) on the screen.
001424  001584        
001425  001585  func gfx_Circle("x", "y", "rad", "colr"), 0;        // draw open circle
001426  001586  // Syntax: gfx_Circle(x, y, rad, colr);
001427  001587  // Usage : gfx_Circle(arg1, arg2, arg3, arg4);
001428  001588  // Notes : Plots a coloured outline Circle on the screen at centre x,y with radius = rad
001429  001589        
001430  001590  func gfx_CircleFilled("x", "y", "rad", "colr"), 0;    // draw filled circle
001431  001591  // Syntax: gfx_Circle(x, y, rad, colr);
001432  001592  // Usage : gfx_Circle(arg1, arg2, arg3, arg4);
001433  001593  // Notes : Plots a coloured Solid Circle on the screen at centre x,y with radius = rad
001434  001594        
001435  001595  func gfx_PutPixel("x", "y", "colr"), 0;            // set point at x y
001436  001596  // Syntax: gfx_PutPixel(x, y, colr);
001437  001597  // Usage : gfx_PutPixel(arg1, arg2, arg3);
001438  001598  // Notes : Plots a coloured pixel on the screen at x,y location
001439  001599        
001440  001600  func gfx_GetPixel("x", "y"), 1;                // read colour at point x y
001441  001601  // Syntax: gfx_GetPixel(x, y);
001442  001602  // Usage : var := gfx_GetPixel(arg1, arg2);
001443  001603  // Notes : Reads and returns the colour value of a pixel at location x,y
001444  001604        
001445  001605  func gfx_Triangle("x1","y1","x2","y2","x3","y3","colr"), 0; // draw an open triangle
001446  001606  // Syntax: gfx_Triangle(x1, y1, x2, y2, x3, y3, colr);
001447  001607  // Usage : gfx_Triangle(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
001448  001608  // Notes : Plots a coloured outline Triangle from between 3 vertices: x1,y1 x2,y2 x3,y3
001449  001609  //       : Vertices must be specified in an anti-clockwise fashion
001450  001610        
001451  001611  func gfx_OrbitInit("&x_orb", "&y_orb"), 0;        // set result holders for orbit command
001452  001612  // Syntax: gfx_OrbitInit(&x_orb, &y_orb);
001453  001613  // Usage : gfx_OrbitInit(&arg1, &arg2);
001454  001614  // Notes : Sets up the Orbit function parameters.
001455  001615  //       : &x_orb, &y_orb: calcualted Orbit coordiantes. These are pointers to local
001456  001616  //       : variables that get updated after calling gfx_Orbit(,,) function.
001457  001617  //       : The coordiantaes are calculated relative to the origin
001458  001618  //       : obtained by using the gfx_MoveTo(x, y) function.
001459  001619        
001460  001620  func gfx_Orbit("angle", "distance"), 0;            // calculate point at angle, distance
001461  001621  // Syntax: gfx_Orbit(angle, distance);
001462  001622  // Usage : gfx_Orbit(arg1, arg2);
001463  001623  // Notes : The Orbit function calcualtes the x, y coordinates of a distant point whose
001464  001624  //       : only known parameters are the angle and the distance from the current origin.
001465  001625        
001466  001626  func gfx_Polyline("n", "&vx", "&vy", "colr"), 0;    // draw a polyline from a table of vertices
001467  001627  // Syntax: gfx_Polyline(numbVertices, &vertices_x, &vertices_y, colour);
001468  001628  // Usage : gfx_Polyline(arg1, x[array], y[array], arg2);
001469  001629  // Notes : This function is very similar to the Ploygon function
001470  001630  //       : with the exception of the 1st and the last vertices not joined.
001471  001631        
001472  001632  func gfx_Polygon("n", "&vx", "&vy", "colr"), 0;        // draw a polygon from a table of vertices
001473  001633  // Syntax: gfx_Polygon(numbVertices, &vx, &y, colour);
001474  001634  // Usage : gfx_Polygon(arg1, x[array], y[array], arg2);
001475  001635  // Notes : Plots a coloured outline Polygon between specified vertices: x1,y1 x2,y2 .. xn,yn
001476  001636  //       : Vertices must be minimum of 3 and can be specified in any fashion
001477  001637        
001478  001638  func gfx_Dot(), 0;                    // set point at glb_X glb_Y, default colour
001479  001639  // Syntax: gfx_Dot();
001480  001640  // Usage : gfx_Dot();
001481  001641  // Notes : Places a coloured dot at the origin
001482  001642        
001483  001643        
001484  001644  func gfx_Bullet("r"), 0;                // draw circle at glb_X glb_Y, default colour
001485  001645  // Syntax: gfx_Bullet();
001486  001646  // Usage : gfx_Bullet();
001487  001647  // Notes : Places a coloured circle at the origin
001488  001648  //       : filled or unfilled state is controlled by PenSize
001489  001649        
001490  001650  func gfx_IncX(), 1;                    // increment global origin glb_X, returning new value
001491  001651  // Syntax: gfx_IncX();
001492  001652  // Usage : var := gfx_IncX();
001493  001653  // Notes : Increments the x coordinate of the origin
001494  001654        
001495  001655  func gfx_IncY(), 1;                    // increment global origin glb_Y, returning new value
001496  001656  // Syntax: gfx_IncY();
001497  001657  // Usage : var := gfx_IncY();
001498  001658  // Notes : Increments the y coordinate of the origin
001499  001659        
001500  001660  func gfx_BoxTo("x1", "y1"), 0;                // draw rectangle from current origin to x1 y1
001501  001661  // Syntax: gfx_BoxTo(x1, y1);
001502  001662  // Usage : gfx_BoxTo(arg1, arg2);
001503  001663  // Notes : Draws a Rectangle from the origin x,y to x1,y1.
001504  001664  //       : The new origin is then set to x1,y1. Rectangle colour needs
001505  001665  //       : to be preset with "Set Object colour" using gfx_Set(mode=2, colour);
001506  001666  //       : and the PenSize setting determines if Box is solid or outline.
001507  001667        
001508  001668  func gfx_ClipWindow("x1" ,"y1", "x2", "y2"), 0;         // set the cipping area
001509  001669  // Syntax: gfx_ClipWindow(x1, y1, x2, y2);
001510  001670  // Usage : gfx_ClipWindow(arg1, arg2, arg3, arg4);
001511  001671  // Notes : Specifies a clipping window region on the screen such that any objects
001512  001672  //       : and text placed onto the screen will be clipped and displayed only
001513  001673  //       : within that region. For the clipping window to take effect, "Clipping"
001514  001674  //       : must be enabled seperately using the gfx_Set(CLIPPING, ON) command.
001515  001675        
001516  001676        
001517  001677  func gfx_ChangeColour("oldcolr", "newcolr"), 0;         // change pixel colour in clipping area
001518  001678  // Syntax: gfx_ChangeColour(oldcolr, newcolr);
001519  001679  // Usage : gfx_ChangeColour(0xFF00, 0XFFFF);
001520  001680  // *Notes:
001521  001681        
001522  001682  func gfx_SetClipRegion(), 0;                            // set clipping area to the most recent extents
001523  001683  // Syntax: gfx_SetClipRegion();
001524  001684  // Usage : var := gfx_SetClipRegion();
001525  001685  // *Notes:
001526  001686        
001527  001687  func gfx_Ellipse("x", "y", "xrad", "yrad", "colour"), 0;
001528  001688  // Syntax: gfx_Ellipse(x, y, xrad, yrad, colour);
001529  001689  // Usage : gfx_Ellipse(arg1, arg2, arg3, arg4, arg5);
001530  001690  // Notes : Plots a coloured Ellipse on the screen at centre x,y
001531  001691  //       : with xradius = xrad and yradius = yrad.
001532  001692  //       : if PenSize = 0 Ellipse is Solid
001533  001693  //       : if PenSize = 1 Ellipse is Outline
001534  001694        
001535  001695        
001536  001696  func gfx_EllipseFilled("x", "y", "xrad", "yrad", "colour"), 0;
001537  001697  // Syntax: gfx_EllipseFilled(x, y, xrad, yrad, colour);
001538  001698  // Usage : gfx_EllipseFilled(arg1, arg2, arg3, arg4, arg5);
001539  001699  // Notes : Plots a coloured Ellipse on the screen at centre x,y
001540  001700  //       : with xradius = xrad and yradius = yrad.
001541  001701        
001542  001702        
001543  001703  func gfx_Button("state", "x", "y", "buttonColour", "textColour", "font", "textWidth", "textHeight", "text"), 1;
001544  001704  // Syntax: gfx_Button(mode, x, y, buttonColour, textColour, font, textWidth, textHeight, text);
001545  001705  // Usage : gfx_Button(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
001546  001706  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001547  001707  //       : x,y arguments (top left corner). The size of the button depends on
001548  001708  //       : the font, width, height and length of the text.
001549  001709  //       : The button appearance will depend on the state parameter setting:
001550  001710  //       :         state = 0 : Button Pressed
001551  001711  //       :         state = 1 : Button Raised
001552  001712  //       : The button is automatically sized, determined by text.
001553  001713        
001554  001714        
001555  001715  func gfx_Button2("state", "x", "y", "Width", "Height", "buttonColour", "textColour", "text"), 0;
001556  001716  // Syntax: gfx_Button2(mode, x, y, width, height, buttoncolour, textcolour, text);
001557  001717  // Usage : gfx_Button2(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001558  001718  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001559  001719  //       : x,y arguments (top left corner). The size of the button is defined by the width
001560  001720  //       : and height parameters. The text is centered within those bounds.
001561  001721  //       : The button appearance will depend on the state parameter setting:
001562  001722  //       :         state = 0 : Button Pressed
001563  001723  //       :         state = 1 : Button Raised
001564  001724  //       : The button has square corners.
001565  001725        
001566  001726  func gfx_Button3("state", "x", "y", "Width", "Height", "buttonColour", "textColour", "text"), 0;
001567  001727  // Syntax: gfx_Button3(mode, x, y, width, height, buttoncolour, textcolour, text);
001568  001728  // Usage : gfx_Button3(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001569  001729  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001570  001730  //       : x,y arguments (top left corner). The size of the button is defined by the width
001571  001731  //       : and height parameters. The text is centered within those bounds.
001572  001732  //       : The button appearance will depend on the state parameter setting:
001573  001733  //       :         state = 0 : Button Pressed
001574  001734  //       :         state = 1 : Button Raised
001575  001735  //       : The button has rounded corners depending upon gfx_BevelRadius.
001576  001736        
001577  001737  func gfx_CheckBox("state", "x", "y", "Width", "Height", "boxColour", "textColour", "text"), 0;
001578  001738  // Syntax: gfx_CheckBox(state, x, y, Width, Height, boxColour, textColour, text);
001579  001739  // Usage : gfx_CheckBox(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001580  001740  // Notes : Draws a CheckBox at screen location defined by x,y arguments (top left corner).
001581  001741  //       : The size of the button is defined by the width and height parameters.
001582  001742  //       : The text is to the right of the checkbox and truncated if necessary.
001583  001743  //       : The check appearance will depend on the state parameter setting:
001584  001744  //       :         state = 0 = CHECKED    : Checkbox Checked
001585  001745  //       :         state = 1 = UNCHECKED  : CheckBox Unchecked
001586  001746        
001587  001747  func gfx_RadioButton("state", "x", "y", "Width", "Height", "boxColour", "textColour", "text"), 0;
001588  001748  // Syntax: gfx_RadioButton(state, x, y, Width, Height, boxColour, textColour, text);
001589  001749  // Usage : gfx_RadioButton(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001590  001750  // Notes : Draws a RadioButton at screen location defined by x,y arguments (top left corner).
001591  001751  //       : The size of the button is defined by the width and height parameters.
001592  001752  //       : The text is to the right of the radiobutton and truncated if necessary.
001593  001753  //       : The check appearance will depend on the state parameter setting:
001594  001754  //       :         state = 0 = CHECKED    : Radiobutton Checked
001595  001755  //       :         state = 1 = UNCHECKED  : Radiobutton Unchecked
001596  001756        
001597  001757  func gfx_Slider2("mode", "x1", "y1", "width", "height", "colour", "scale", "value"), 1;
001598  001758  // Syntax: gfx_Slider2(mode, x, y, width, height, colour, scale, value);
001599  001759  // Usage : gfx_Slider(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001600  001760  // Notes : Draws a 3 dimensional Slider Bar on the screen.
001601  001761  //       : Slider parameters are as follows:
001602  001762  //       :         mode = 0 : Slider recessed
001603  001763  //       :         mode = 1 : Slider raised
001604  001764  //       :         x1, y1 = top left corner
001605  001765  //       :         x2, y2 = bottom right corner
001606  001766  //       :         scale = n : sets the full scale range from 0 to n
001607  001767  //       :         value = m : sets the relative position of the thumb 0 <= m <= n
001608  001768  //returns: scaled value of thumb position
001609  001769        
001610  001770        
001611  001771        
001612  001772        
001613  001773  func gfx_Panel("state", "x", "y", "width", "height", "colour"), 0;
001614  001774  // Syntax: gfx_Panel(style, x, y, width, height, colour);
001615  001775  // Usage : gfx_Panel(PANEL_RAISED, x, y, w, h, GRAY);
001616  001776  // Notes : Draws a panel (groupbox) at screen location defined by
001617  001777  //       : x, y, width and height with colour "colour".
001618  001778  //       :         state = 0 : sunken
001619  001779  //       :         state = 1 : raised
001620  001780  //       :         state = 2 : hide (draw object in background colour)
001621  001781  //returns: nothing
001622  001782        
001623  001783        
001624  001784        
001625  001785  func gfx_Slider("mode", "x1", "y1", "x2", "y2", "colour", "scale", "value"), 1;
001626  001786  // Syntax: gfx_Slider(mode, x1, y1, x2, y2, colour, scale, value);
001627  001787  // Usage : gfx_Slider(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001628  001788  // Notes : Draws a 3 dimensional Slider Bar on the screen.
001629  001789  //       : Slider parameters are as follows:
001630  001790  //       :         mode = 0 : Slider recessed
001631  001791  //       :         mode = 1 : Slider raised
001632  001792  //       :         x1, y1 = top left corner
001633  001793  //       :         x2, y2 = bottom right corner
001634  001794  //       :         scale = n : sets the full scale range from 0 to n
001635  001795  //       :         value = m : sets the relative position of the thumb 0 <= m <= n
001636  001796  //returns: scaled value of thumb position
001637  001797        
001638  001798        
001639  001799        
001640  001800  func gfx_ScreenCopyPaste("xs", "ys", "xd", "yd", "width", "height"), 0;
001641  001801  // Syntax: gfx_ScreenCopyPaste(xs, ys, xd, yd, width, height);
001642  001802  // Usage : gfx_ScreenCopyPaste(arg1, arg2, arg3, arg4, arg5, arg6);
001643  001803  // Notes : Copies an area of a screen from xs,ys of size given by width and height
001644  001804  //       : and pastes it to another location determined by xd, yd.
001645  001805        
001646  001806  func gfx_RGBto565("RED", "GREEN", "BLUE"), 1;
001647  001807  // Syntax: gfx_RGBto565(red, green, blue);
001648  001808  // Usage : gfx_RGBto565(arg1, arg2, arg3);
001649  001809  // Notes : Returns the 16bit (565 format) colour value of a 24bit (R,G,B format) colour
001650  001810        
001651  001811  func gfx_332to565("COLOUR8BIT"), 1;
001652  001812  // Syntax: gfx_332to565(colour);
001653  001813  // Usage : gfx_332to565(arg);
001654  001814  // Notes : Returns the 16bit (565 format) colour value of an 8 bit (332 format) colour
001655  001815        
001656  001816  func gfx_565to332("COLOUR16BIT"), 1;
001657  001817  // Syntax: gfx_565to332(colour);
001658  001818  // Usage : clor332 := gfx_565to332(arg);
001659  001819  // Notes : Returns the 8bit (332 format) colour value of an 16 bit (565 format) colour
001660  001820        
001661  001821  func gfx_TriangleFilled("x1","y1","x2","y2","x3","y3","colr"), 0; // draw a filled triangle
001662  001822  // Syntax: gfx_TriangleFilled(x1, y1, x2, y2, x3, y3, colr);
001663  001823  // Usage : gfx_TriangleFilled(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
001664  001824  // Notes : Plots a coloured Solid Triangle from between 3 vertices: x1,y1 x2,y2 x3,y3
001665  001825  //       : Vertices must be specified in an anti-clockwise fashion
001666  001826        
001667  001827        
001668  001828  func gfx_PolygonFilled("n", "&vx", "&vy", "colr"), 0;        // draw a filled polygon from a table of vertices
001669  001829  // Syntax: gfx_PolygonFilled(numbVertices, &vx, &y, colour);
001670  001830  // Usage : gfx_PolygonFilled(arg1, x[array], y[array], arg2);
001671  001831  // Notes : Plots a solid Polygon between specified vertices: x1,y1 x2,y2 .. xn,yn
001672  001832  //       : Vertices must be minimum of 3 and can be specified in any fashion
001673  001833        
001674  001834        
001675  001835  func gfx_Origin("x", "y"), 0;            // set relative screen offset for graphics objects
001676  001836  // Syntax: gfx_Offset(x, y);
001677  001837  // Usage : gfx_Offset(arg1, arg2);
001678  001838  // Notes : Set the screen offset
001679  001839        
001680  001840        
001681  001841        
001682  001842  func gfx_FillPattern("patptr", "mode"), 1;
001683  001843  // Syntax  : gfx_FillPattern(patternpointer);
001684  001844  // Usage   : gfx_FillPattern(PTN_BRICKS);
001685  001845  //         : Provides graphics fill pattern, (8 linear bytes, 1=pixel off)
001686  001846  // Notes   : "patptr" points to an 8x8 tile for rendering filled areas.
001687  001847  //         : Rendering is turned off with gfx_FillPattern(0);
001688  001848  //         : or gfx_FillPattern(OFF);
001689  001849  //         : "mode" maybe TRANSPARENT or OPAQUE (0 or 1), for OPAQUE
001690  001850  //         : mode, the current screen colour is used for the 'off'
001691  001851  //         : pixels, for transparent mode, the 'off' pixels are not drawn.
001692  001852  //         : gfx_FillPattern affects all filled object, including polygons.
001693  001853  //         : There are 32 builtin patterns, these are obtained using the
001694  001854  //         : pre-defined constants FILLPATTERN_0 to FILLPATTERN_31, or the
001695  001855  //         : names, eg PTN_BRICKS, PTN_CARGONET, PTN_CIRCUITS, etc.
001696  001856  //         : Note that the constants range from 0xFFE0 to 0xFFFF, any
001697  001857  //         : other value is assumed to be a pointer to a users 8 byte
001698  001858  //         : block pattern.
001699  001859  // Returns : returns the handle of the previous pattern.
001700  001860        
001701  001861        
001702  001862  func gfx_PieSlice("cx", "cy", "spread", "radius", "step", "startangle", "endangle", "mode", "colour"), 0;
001703  001863  // Syntax  : gfx_PieSlice(cx, cy, spread, radius, step, startangle, endangle, mode, colour);
001704  001864  // Usage   : gfx_PieSlice(120, 120, 0, 100, 8, 75, 145, 0, YELLOW);
001705  001865  // Notes   : Draws a 'pie slice' (filled arc) at "cx":"cy" with radius "radius", starting at "startangle"
001706  001866  //         : and ending at "endangle". "spread" is used to offset the centrepoint of the pieslice
001707  001867  //         : to shift a pie chart piece away from the centrepoint.
001708  001868  //         : Rendering can be obtained with gfx_FillPattern(PATTRN);
001709  001869  //         : or gfx_FillPattern(OFF); for no fill pattern.
001710  001870  //         : Step is the stepping angle increment for the fineness of the pie Slice.
001711  001871  //         : "mode" has the following effect
001712  001872  //         :   if mode = 0, no outline
001713  001873  //         :   if mode = 1, outer circumference line (using current object colour)
001714  001874  //         :   if mode = 2, outer circumference and slice lines ( (using current object colour)
001715  001875  // Returns : nothing.
001716  001876        
001717  001877        
001718  001878  func gfx_Arc("xc", "yc", "radius", "step", "startangle", "endangle", "mode"), 0;
001719  001879  // Syntax  : gfx_Arc(cx, cy, radius, step, startangle, endangle, mode);
001720  001880  // Usage   : gfx_Arc(120, 120, 0, 100, 8, 75, 145, 0);
001721  001881  // Notes   : Draws an arc at "cx":"cy" with radius "radius", starting at "startangle"
001722  001882  //         : and ending at "endangle". Colour is determined by curent object colour.
001723  001883  //         : Step is the stepping angle increment for the fineness of the arc.
001724  001884  //         : "mode" has the following effect
001725  001885  //         :   if mode = 0, outer circumference line only
001726  001886  //         :   if mode = 1, outer circumference and lines back to cy:cy
001727  001887  // Returns : nothing.
001728  001888        
001729  001889        
001730  001890  func gfx_RoundRect("x1", "y1", "x2", "y2", "rad", "color"), 0;
001731  001891  // Syntax  : gfx_RoundRect(x1, y1, x2, y2, radius, colour);
001732  001892  // Usage   : gfx_RoundRect(120, 120, 160, 160, 8, GRAY); // draw a tab like object
001733  001893  // Notes   : Draws a filled rectangle at the given co-ordinates with rounded corners
001734  001894  //         : determined by "radius".
001735  001895  //         : Bounding rectangle is x1-rad, y1-rad, x2+rad, y2+rad.
001736  001896  // Returns : nothing.
001737  001897        
001738  001898        
001739  001899  func gfx_Surround("x1", "y1", "x2", "y2", "rad1", "rad2", "color"), 0;
001740  001900  // Syntax  : gfx_Surround(x1, y1, x2, y2, radius1, radius1, colour);
001741  001901  // Usage   : gfx_Surround(120, 120, 160, 160, 8, 0, GRAY); // rounded surround frame
001742  001902  // Notes   : Draws a outline rectangle at the given co-ordinates with rounded corners
001743  001903  //         : determined by "radius1". "radius2" sets the radius of the outer rounded rectangle.
001744  001904  //         : If "radius1" is zero, the inner rectangle will have square corners.
001745  001905  //         : Bounding rectangle is x1-rad1-rad2, y1-rad1-rad2, x2+rad1+rad2, y2+rad1+rad2.
001746  001906  // Returns : nothing.
001747  001907        
001748  001908        
001749  001909  func gfx_RoundPanel("state", "x", "y", "width", "height", "radius", "bevelwidth", "colour"), 0;
001750  001910  // Syntax  : gfx_RoundPanel(style, x, y, width, height, radius, bevelwidth, colour);
001751  001911  // Usage   : gfx_RoundPanel(PANEL_RAISED, 100, 100, 30, 20, GRAY);
001752  001912  // Notes   : Draws a rounded panel at x, y, width and height may be zero allowing the function
001753  001913  //         : to be used for rounded panels, rounded buttons, circular buttons.
001754  001914  //         :         state = 0 : sunken
001755  001915  //         :         state = 1 : raised
001756  001916  //         :         state = 2 : hide (draw object in background colour)
001757  001917  //         : Bounding rectangle is x1-radius-bevelwidth, y1-radius-bevelwidth, x2+radius+bevelwidth, y2+radius+bevelwidth.
001758  001918  // Returns : nothing.
001759  001919        
001760  001920        
001761  001921  func gfx_Gradient("style", "left", "top", "right", "bottom", "color1", "color2"), 0;
001762  001922  // Syntax  : gfx_Gradient(style, x1, y1, x2, y2, colr1, colr2);
001763  001923  // Usage   : gfx_Gradient(GRAD_WAVE_VER, 100, 100, 230, 120, BLACK, WHITE);
001764  001924  // Notes   : Draws a graduated colour rectangle at the specified co-ordinate.
001765  001925  //         : "style" specifies the drawing mode
001766  001926  //         :     GRAD_DOWN         // gradient changes in the vertical direction
001767  001927  //         :     GRAD_RIGHT        // gradient change in the horizontal direction
001768  001928  //         :     GRAD_UP           // gradient changes in the vertical direction
001769  001929  //         :     GRAD_LEFT         // gradient change in the horizontal direction
001770  001930  //         :     GRAD_WAVE_VER     // gradient wave in the vertical direction
001771  001931  //         :     GRAD_WAVE_HOR     // gradient wave in the horizontal direction
001772  001932  // Returns : nothing.
001773  001933        
001774  001934        
001775  001935  func gfx_RoundGradient("style", "left", "top", "right", "bottom", "radius", "color1", "color2"), 0;
001776  001936  // Syntax  : gfx_Gradient(style, x1, y1, x2, y2, radius, colr1, colr2);
001777  001937  // Usage   : gfx_Gradient(GRAD_WAVE_VER, 100, 100, 230, 120, BLACK, WHITE);
001778  001938  // Notes   : Draws a graduated colour rounded rectangle at the specified co-ordinate.
001779  001939  //         : X1 may equal X2, and Y1 = Y2 allowing allowing the function
001780  001940  //         : to be used for rounded panels, rounded buttons, circular buttons.
001781  001941  //         : "style" specifies the drawing mode
001782  001942  //         :     GRAD_DOWN         // gradient changes in the vertical direction
001783  001943  //         :     GRAD_RIGHT        // gradient change in the horizontal direction
001784  001944  //         :     GRAD_UP           // gradient changes in the vertical direction
001785  001945  //         :     GRAD_LEFT         // gradient change in the horizontal direction
001786  001946  //         :     GRAD_WAVE_VER     // gradient wave in the vertical direction
001787  001947  //         :     GRAD_WAVE_HOR     // gradient wave in the horizontal direction
001788  001948  //         : Bounding rectangle is x1-radius, y1-radius, x2+radius, y2+radius.
001789  001949  // Returns : nothing.
001790  001950        
001791  001951        
001792  001952  func gfx_ReadBresLine("x1", "y1", "x2", "y2", "ptr"), 1;
001793  001953  // Syntax  : gfx_readBrezLine(x1, y1, x2, y2, ptr);
001794  001954  // Usage   : anArrayPtr := gfx_readBrezLine(10, 10, 50, 50, 0);  // read arbitrary line to array, let the function make the array for me
001795  001955  // Notes   : reads an arbitrary line from the display to an array.
001796  001956  //         : If "ptr" is 0, the correctly sized array is created, in which case
001797  001957  //         : it is up to the caller to eventually destroy it. Otherwise "ptr"
001798  001958  //         : is expected to point to a correctly sized array.
001799  001959  //         : NB if an array is supplied, its size must be large enough, and may
001800  001960  //         : be calculated:-
001801  001961  //         : bytecount := (MAX(ABS(x2-x1), ABS(y2-y1) + 1) * 2; // calc array size for mem_Alloc (which allocates byte storage)
001802  001962  //         : wordcount := (MAX(ABS(x2-x1), ABS(y2-y1) + 1);     // calc array size for fixed word array
001803  001963  // Returns : A pointer to the created aray, or the users array.
001804  001964  //         : In the case of ptr=0, if there is insufficient
001805  001965  //         : memory to create the array, zero is returned
001806  001966        
001807  001967        
001808  001968  func gfx_WriteBresLine("x1", "y1", "x2", "y2", "ptr"), 0;
001809  001969  // Syntax  : gfx_writeBrezLine(x1, y1, x2, y2, ptr), 0;
001810  001970  // Usage   : gfx_writeBrezLine(20, 20, 50, 50, anArrayPtr);   // write an array back to the arbitrary line
001811  001971  // Notes   : cast pixel values from array to arbitrary line "x1", "y1", "x2", "y2"
001812  001972  //         : "ptr" points to the array to be written.
001813  001973  // Returns : nothing
001814  001974        
001815  001975        
001816  001976  func gfx_ReadGRAMarea("x1", "y1", "x2", "y2", "ptr"), 1;
001817  001977  // Syntax  : gfx_ReadGRAMarea(x1, y1, x2, y2, ptr);
001818  001978  // Usage   : anArrayPtr := gfx_ReadGRAMarea(10, 10, 50, 50, 0);  // read rectangular area to array, let the function make the array for me
001819  001979  // Notes   : reads an arbitrary rectangular area from the display to an array.
001820  001980  //         : If "ptr" is 0, the correctly sized array is created, in which case
001821  001981  //         : it is up to the caller to eventually destroy it. Otherwise "ptr"
001822  001982  //         : is expected to point to a correctly sized array.
001823  001983  //         : NB if an array is supplied, its size must be large enough, and may
001824  001984  //         : be calculated:-
001825  001985  //         : bytecount := ( (ABS(x2-x1)+1) * (ABS(y2-y1) + 1)) * 2;     // calc array size for mem_Alloc (which allocates byte storage)
001826  001986  //         : wordcount := ( (ABS(x2-x1)+1) *  ABS(y2-y1);             // calc array size for fixed word array
001827  001987  // Returns : A pointer to the created aray, or the users array.
001828  001988  //         : In the case of ptr=0, if there is insufficient
001829  001989  //         : memory to create the array, zero is returned
001830  001990        
001831  001991        
001832  001992  func gfx_WriteGRAMarea("x1", "y1", "x2", "y2", "ptr"), 0;
001833  001993  // Syntax  : gfx_WriteGRAMarea(x1, y1, x2, y2, ptr), 0;
001834  001994  // Usage   : gfx_WriteGRAMarea(20, 20, 50, 50, anArrayPtr);   // write an array back to the rectangular area
001835  001995  // Notes   : "ptr" points to the array to be written.
001836  001996  // Returns : nothing
001837  001997        
001838  001998        
001839  001999  func gfx_Get("mode"), 1;
001840  002000  // Syntax: gfx_Get(mode);
001841  002001  // Usage : arg1 := gfx_Get(arg);
001842  002002  // Notes : Returns various parameters to caller
001843  002003  //       :
001844  002004  //       : mode = X_MAX (mode 0) : current orientations maximum X value
001845  002005  //       : var := gfx_Get(X_MAX);
001846  002006  //       : Returns the maximum horizontal value of the display
001847  002007  //       :
001848  002008  //       : mode = Y_MAX (mode 1) : Vcurrent orientations maximum Y value
001849  002009  //       : var := gfx_Get(Y_MAX);
001850  002010  //       : Returns the maximum vertical value of the display
001851  002011  //       :
001852  002012  //       : mode = LEFT_POS (mode 2) : Left location of last Object
001853  002013  //       : var := gfx_Get(LEFT_POS);
001854  002014  //       : Returns the left location of the last drawn object
001855  002015  //       : such as a slider or button or an image/video
001856  002016  //       :
001857  002017  //       : mode = TOP_POS (mode 3) : Top location of Object
001858  002018  //       : var := gfx_Get(TOP_POS);
001859  002019  //       : Returns the top location of the last drawn object
001860  002020  //       : such as a slider or button or an image/video
001861  002021  //       :
001862  002022  //       : mode = RIGHT_POS (mode 4) : Right location of last Object
001863  002023  //       : var := gfx_Get(RIGHT_POS);
001864  002024  //       : Returns the right location of the last drawn object
001865  002025  //       : such as a slider or button or an image/video
001866  002026  //       :
001867  002027  //       : mode = BOTTOM_POS  (mode 5) : Bottom location of Object
001868  002028  //       : var := gfx_Get(BOTTOM_POS );
001869  002029  //       : Returns the bottom location of the last drawn object
001870  002030  //       : such as a slider or button or an image/video
001871  002031  //       :
001872  002032  //       : mode = X_ORG (mode 6) : get current internal X position
001873  002033  //       : var := gfx_Get(X_ORG);
001874  002034  //       : Returns the internal X position that was set with
001875  002035  //       : gfx_MoveTo(x, y); or gfx_Set(X_ORG, pos);
001876  002036  //       :
001877  002037  //       : mode = Y_ORG (mode 7) : get current internal Y position
001878  002038  //       : var := gfx_Get(Y_ORG);
001879  002039  //       : Returns the internal X position that was set with
001880  002040  //       : gfx_MoveTo(x, y); or gfx_Set(Y_ORG, pos);
001881  002041  //       :
001882  002042        
001883  002043        
001884  002044  //------------------------------------------------------------------//
001885  002045  // Single parameter short-cuts                                      //
001886  002046  // for the gfx_Set functions                                        //
001887  002047  // These functions return the existing value before                 //
001888  002048  // the change is made.                                              //
001889  002049  //------------------------------------------------------------------//
001890  002050  func gfx_PenSize("mode"), 1;                        // 0  graphics pen size, SOLD or OUTLINE
001891  002051  func gfx_BGcolour("colour"), 1;                     // 1  graphics background colour
001892  002052  func gfx_ObjectColour("colour"), 1;                 // 2  graphics object colour
001893  002053  func gfx_Clipping("mode"), 1;                       // 3  graphics clipping ON/OFF
001894  002054  func gfx_TransparentColour("colour"), 1;            // 4  graphics image transparent mask colour
001895  002055  func gfx_Transparency("mode"), 1;                   // 5  graphics image transparent mode ON/OFF
001896  002056  func gfx_FrameDelay("milliseconds"), 1;             // 6  graphics animation frame delay
001897  002057  func gfx_ScreenMode("mode"), 1;                     // 7  graphics orientation LANDSCAPE, LANDSCAPE_R, PORTRAIT, PORTRAIT_R
001898  002058  func gfx_OutlineColour("colour"), 1;                // 8  graphics rectangle/circle outline colour
001899  002059  func gfx_Contrast("value"), 1;                      // 9  graphics hardware value 0 to 9, 0=off, 1=lowest, 8=highest (only for AMOLED devices)
001900  002060  func gfx_LinePattern("value"), 1;                   // 10 graphics line draw tesselation pattern (16 linear bits, 1=pixel off)
001901  002061  func gfx_BevelRadius("radius"), 1;                  // 11 graphics button bevel radius
001902  002062  func gfx_BevelWidth("value"), 1;                    // 12 graphics button bevel width
001903  002063  func gfx_BevelShadow("value"), 1;                   // 13 graphics button bevel shadow depth
001904  002064  func gfx_Xorigin("offset"), 1;                      // 14 graphics  X origin
001905  002065  func gfx_Yorigin("offset"), 1;                      // 15 graphics  Y origin
001906  002066        
001907  002067        
001908  002068  func gfx_PointWithinBox("x", "y", "&rectr"), 1;
001909  002069  // Syntax   : gfx_PointWithinBox(x, y, rect);
001910  002070  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=20; r[3]:=30;
001911  002071  //          : result := gfx_PointWithinBox(x, y, r); // check area at 100,200,119,229
001912  002072  // Notes    : rect is an array of 4 vars, x1, y1, width, height - using width co-ordinates
001913  002073  // returns  : Returns true if last touch co-ordinates are within the box test area.
001914  002074        
001915  002075        
001916  002076  func gfx_PointWithinRectangle("x", "y", "&recta"), 1;
001917  002077  // Syntax   : gfx_PointWithinRectangle(x, y, recta);
001918  002078  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=119; r[3]:=129;
001919  002079  //          : result := gfx_PointWithinRectangle(x, y, r); // check if point within area at 100,200,119,229
001920  002080  // Notes    : rect is an array of 4 vars, x1, y1, x2, y2 using absolute co-ordinates
001921  002081  // returns  : Returns true if x:y co-ordinates are within the rectangle test area.
001922  002082        
001923  002083        
001924  002084  func __reserved17(), 0; // do not remove
001925  002085  func __reserved18(), 0; // do not remove
001926  002086  func __reserved19(), 0; // do not remove
001927  002087  func __reserved20(), 0; // do not remove
001928  002088  func __reserved21(), 0; // do not remove
001929  002089  func __reserved22(), 0; // do not remove
001930  002090        
001931  002091        
001932  002092  // built in fill pattern constants for function gfx_FillPattern
001933  002093  #CONST
001934  002126  #END
001935  002127        
001936  002128  #CONST
001937  002161  #END
001938  002162        
001939  002163  //------------------------------------------------------------------//
001940  002164  //     gradient control constants                                   //
001941  002165  //------------------------------------------------------------------//
001942  002166  #constant GRAD_DOWN         0x20    // gradient changes in the vertical direction
001943  002166  #constant GRAD_DOWN         0x20    // gradient changes in the vertical direction
001944  002167  #constant GRAD_RIGHT        0x30    // gradient change in the horizontal direction
001945  002167  #constant GRAD_RIGHT        0x30    // gradient change in the horizontal direction
001946  002168  #constant GRAD_UP           0x40    // gradient changes in the vertical direction
001947  002168  #constant GRAD_UP           0x40    // gradient changes in the vertical direction
001948  002169  #constant GRAD_LEFT         0x50    // gradient change in the horizontal direction
001949  002169  #constant GRAD_LEFT         0x50    // gradient change in the horizontal direction
001950  002170  #constant GRAD_WAVE_VER     0x60    // gradient wave in the vertical direction
001951  002170  #constant GRAD_WAVE_VER     0x60    // gradient wave in the vertical direction
001952  002171  #constant GRAD_WAVE_HOR     0x70    // gradient wave in the horizontal direction
001953  002171  #constant GRAD_WAVE_HOR     0x70    // gradient wave in the horizontal direction
001954  002172        
001955  002173        
001956  002174        
001957  002175        
001958  002176  //------------------------------------------------------------------//
001959  002177  // uSD/FLASH Function Prototypes                                    //
001960  002178  //------------------------------------------------------------------//
001961  002179  func media_Video("x", "y"), 0;                      // display movie at position x y
001962  002180  // Syntax: media_Video(x, y);
001963  002181  // Usage : media_Video(arg1, arg2);
001964  002182  // Notes : Play a Video/Animation clip from the uSD card at screen location
001965  002183  //       : specified by x,y (top left corner). The location of the clip in the
001966  002184  //       : uSD card must be specified by media_setSector(Video_Sector_Add) function.
001967  002185        
001968  002186  func media_VideoFrame("x", "y","framenumber"), 0;   // display required frame from a movie at x y
001969  002187  // Syntax: media_VideoFrame(Frame_number);
001970  002188  // Usage : arg1 := media_VideoFrame();
001971  002189  // Notes : After a pointer to a valid video has been set with media_SetSector,
001972  002190  //       : calling this function shows each fram sequentially, returning
001973  002191  //       : the number of frames remaining. The position of the image is
001974  002192  //     : at the current origin as set with gfx_MoveTo(...);
001975  002193        
001976  002194  func media_SetAdd("HiWord", "LoWord"), 0;           // set stream byte address
001977  002195  // Syntax: media_SetAdd(AddHiWord, AddLoWord);
001978  002196  // Usage : media_SetAdd(arg1, arg2);
001979  002197  // Notes : Set uSD internal Address pointer for bytewise access
001980  002198        
001981  002199  func media_SetSector("HiWord", "LoWord"), 0;        // set stream sector address
001982  002200  // Syntax: media_SetSector(SectHiWord, SectLoWord);
001983  002201  // Usage : media_SetSector(arg1, arg2);
001984  002202  // Notes : Set uSD internal Sector pointer for sector block access
001985  002203        
001986  002204  func media_RdSector("*destination"), 1;
001987  002205  // Syntax: media_RdSector(*destination);
001988  002206  // Usage : media_RdSector(rdblock);
001989  002207  // Notes : Reads and Returns 512 bytes (256 words) into a destination
001990  002208  //       : block (eg rdblock[256]) pointed to by the internal Sector pointer.
001991  002209  //       : After the read the Sector pointer is automatically incremented by 1.
001992  002210  //       : Returns TRUE if uSD response was TRUE
001993  002211        
001994  002212  func media_WrSector("*source"), 1;
001995  002213  // Syntax: media_WrSector(*source);
001996  002214  // Usage : media_WrSector(wrblock);
001997  002215  // Notes : Writes 512 bytes (256 words) from a source memory block
001998  002216  //       : (eg wrblock[256]) into the uSD card. After the write the Sector
001999  002217  //       : pointer is automatically incremented by 1.
002000  002218  //       : Returns TRUE if uSD response was TRUE
002001  002219        
002002  002220  func media_ReadByte(), 1;                // read a byte at the current stream position
002003  002221  // Syntax: media_RdByte();
002004  002222  // Usage : var := media_RdByte();
002005  002223  // Notes : Reads and Returns a single byte of data from the
002006  002224  //       : uSD card pointed to by the internal Address pointer.
002007  002225  //       : After the read the Address pointer is automatically
002008  002226  //       : incremented by 1.
002009  002227        
002010  002228  func media_ReadWord(), 1;                // read a word at the current stream position
002011  002229  // Syntax: media_ReadWord();
002012  002230  // Usage : var := media_ReadWord();
002013  002231  // *Notes : Reads and Returns a single word of data from the
002014  002232  //       : uSD card pointed to by the internal Address pointer.
002015  002233  //       : After the read the Address pointer is automatically
002016  002234  //       : incremented by 2.
002017  002235        
002018  002236  func media_WriteByte("byte"), 1;              // write a byte to the current stream position
002019  002237  // Syntax: media_WriteByte(arg1);
002020  002238  // Usage : var := media_WriteByte(arg1);
002021  002239  // *Notes : Writes and Returns xxxxx
002022  002240  //       : After the write the Address pointer is automatically
002023  002241  //       : incremented by 1.
002024  002242        
002025  002243  func media_WriteWord("word"), 1;            // write a word to the current stream position
002026  002244  // Syntax: media_WriteWord(arg1);
002027  002245  // Usage : var := media_WriteWord(arg1);
002028  002246  // *Notes : Writes and Returns xxxxx
002029  002247  //       : After the write the Address pointer is automatically
002030  002248  //       : incremented by 2.
002031  002249        
002032  002250  func media_Image("x", "y"), 0;            // display image at position x y
002033  002251  // Syntax: media_Image(x, y);
002034  002252  // Usage : media_Image(arg1, arg2);
002035  002253  // Notes : Display an image from the uSD card at screen location
002036  002254  //       : specified by x,y (top left corner). The location of the
002037  002255  //       : Image in the uSD card must be specified by
002038  002256  //       : media_setSector(Image_Sector_Add) function.
002039  002257        
002040  002258  func media_Flush(), 1;                    // after writing to media, flush the sector and write
002041  002259  // Syntax: media_Flush();
002042  002260  // Usage : var := media_Flush();
002043  002261  // *Notes : After writing any data to a sector, media_Flush() should be called to ensure that the current sector that
002044  002262  //       : is being written is correctly stored back to the media else write operations may be unpredictable.
002045  002263        
002046  002264  func media_Init(), 1;                    // initialize uSD card
002047  002265  // Usage : media_Init();
002048  002266  // Notes : Initialise uSD CARD
002049  002267  //       : Response: 0 = No Card
002050  002268  //       :           1 = Card Initialised
002051  002269        
002052  002270  func __reserved23(), 0; // do not remove
002053  002271  func __reserved24(), 0; // do not remove
002054  002272  func __reserved25(), 0; // do not remove
002055  002273  func __reserved26(), 0; // do not remove
002056  002274        
002057  002275  //==============================================//
002058  002276  // Communications Function Prototypes           //
002059  002277  // NB Primary COM port has fixed pins,          //
002060  002278  // COM1, COM2 and COM3 must have pins assigned. //
002061  002279  //==============================================//
002062  002280  func setbaud("baudnum"), 0;            // set baud rate of COM0
002063  002281  // Syntax: setbaud(baud_number);
002064  002282  // Usage : setbaud(BAUD_128000);        //Set baud rate to 128000bps
002065  002283  // *Notes : argument specifies the baud rate using pre-defined constant.
002066  002284  //       : The pre-defined constant is a value of 0-19 , and internally
002067  002285  //       : this is used as a table pointer to get the baud rate divisor
002068  002286  //       : value for one of the 20 selected baud rates, control is then
002069  002287  //       : passed to com_SetBaud(COM0, baudlookup[baud_number]);
002070  002288  //       : The pre-defined constants equate to a value of 0-19.
002071  002289  //       : If a value other than 0-19 is used, a run time error (eror 25)
002072  002290  //       : will occur.
002073  002291        
002074  002292  // baud divisor rates for legacy setbaud(n);
002075  002293  #CONST
002076  002315  #END
002077  002316        
002078  002317        
002079  002318  func com_SetBaud("comport","baudrate/10"), 1;
002080  002319  // Syntax: com_SetBaud("comport","baudrate/10");
002081  002320  // Usage : com_SetBaud(COM1, 960);   // set COM1 to 9600 baud
002082  002321  // Notes : sets to any viable baud rate from 160 to 655350
002083  002322  // return true if baud rate was acceptable
002084  002323        
002085  002324        
002086  002325  func COM1_RX_pin("pin"), 1;        // select the hardware pin for the COM1 receive line
002087  002326  // Usage : COM1_RX_pin(PA0); // set COM1 RX to PA0 pin
002088  002327  // Notes : Selects the hardware pin for COM1 receive line.
002089  002328  //       : Note that only a single pin can be mapped to COM1 RX.
002090  002329  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002091  002330  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002092  002331  //       : If the pin argument is 0 the function has no effect
002093  002332  //       : The pin is automatically set to an input.
002094  002333  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002095  002334  //       : it is necessary to configure the input pin first, eg
002096  002335  //       :     COM1_RX_pin(PA7);     // configure COM1 RX to PA7 (this disconnects anything else)
002097  002336  //       :     COM1_TX_pin(PA7));    // configure COM1 TX to PA7
002098  002337  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002099  002338        
002100  002339  func COM2_RX_pin("pin"), 1;        // select the hardware pin for the COM2 receive line
002101  002340  // Usage : COM2_RX_pin(PA0); // set COM2 RX to PA0 pin
002102  002341  // Notes : Selects the hardware pin for COM2 receive line.
002103  002342  //       : Note that only a single pin can be mapped to COM2 RX.
002104  002343  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002105  002344  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002106  002345  //       : If the pin argument is 0 the function has no effect
002107  002346  //       : The pin is automatically set to an input.
002108  002347  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002109  002348  //       : it is necessary to configure the input pin first, eg
002110  002349  //       :     COM2_RX_pin(PA7);     // configure COM2 RX to PA7 (this disconnects anything else)
002111  002350  //       :     COM2_TX_pin(PA7));    // configure COM2 TX to PA7
002112  002351  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002113  002352        
002114  002353  func COM3_RX_pin("pin"), 1;        // select the hardware pin for the COM3 receive line
002115  002354  // Usage : COM3_RX_pin(PA0); // set COM3 RX to PA0 pin
002116  002355  // Notes : Selects the hardware pin for COM3 receive line.
002117  002356  //       : Note that only a single pin can be mapped to COM3 RX.
002118  002357  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002119  002358  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002120  002359  //       : If the pin argument is 0 the function has no effect
002121  002360  //       : The pin is automatically set to an input.
002122  002361  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002123  002362  //       : it is necessary to configure the input pin first, eg
002124  002363  //       :     COM3_RX_pin(PA7);     // configure COM3 RX to PA7 (this disconnects anything else)
002125  002364  //       :     COM3_TX_pin(PA7));    // configure COM3 TX to PA7
002126  002365  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002127  002366        
002128  002367        
002129  002368  func COM1_TX_pin("pin"), 1;        // select the hardware pin for COM1 transmit line
002130  002369  // Syntax: COM1_TX_pin(pin);
002131  002370  // Usage : COM1_TX_pin(PA2); // set COM1 TX to PA2 pin
002132  002371  // Notes : Select the hardware pin for COMx transmit line.
002133  002372  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002134  002373  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002135  002374  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002136  002375  //       : The pin is automatically set to an output.
002137  002376  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002138  002377        
002139  002378  func COM2_TX_pin("pin"), 1;        // select the hardware pin for COM2 transmit line
002140  002379  // Syntax: COM2_TX_pin(pin);
002141  002380  // Usage : COM2_TX_pin(PA2); // set COM2 TX to PA2 pin
002142  002381  // Notes : Select the hardware pin for COMx transmit line.
002143  002382  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002144  002383  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002145  002384  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002146  002385  //       : The pin is automatically set to an output.
002147  002386  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002148  002387        
002149  002388  func COM3_TX_pin("pin"), 1;        // select the hardware pin for COM3 transmit line
002150  002389  // Syntax: COM3_TX_pin(pin);
002151  002390  // Usage : COM3_TX_pin(PA2); // set COM3 TX to PA2 pin
002152  002391  // Notes : Select the hardware pin for COMx transmit line.
002153  002392  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002154  002393  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002155  002394  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002156  002395  //       : The pin is automatically set to an output.
002157  002396  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002158  002397        
002159  002398  func com_Init("buf","bufsize","qualifier"), 0;  // set up a interrupt driven ring buffer for comms
002160  002399  // Syntax: com_Init(buffer, bufsize, qualifier);
002161  002400  // Usage1: com_Init(mybuf, 20, 0);
002162  002401  // Usage2: com_Init(mybuf, 20, ':');
002163  002402  // Notes : initialize a serial capture buffer for the comms input
002164  002403  //       : The program must declare a var array as a circular buffer.
002165  002404  //       : Usage1 declares a circular buffer which will continually
002166  002405  //       : buffer characters.
002167  002406  //       : Usage2 must receive ':' before any characters will
002168  002407  //       : accumulate in the buffer.
002169  002408        
002170  002409  func com1_Init("buf","bufsize","qualifier"), 0;
002171  002410  // Syntax: com1_Init(buffer, bufsize, qualifier);
002172  002411  // Usage1: com1_Init(mybuf, 20, 0);
002173  002412  // Usage2: com1_Init(mybuf, 20, ':');
002174  002413  // Notes : initialize a serial capture buffer for the comms input
002175  002414  //       : The program must declare a var array as a circular buffer.
002176  002415  //       : Usage1 declares a circular buffer which will continually
002177  002416  //       : buffer characters.
002178  002417  //       : Usage2 must receive ':' before any characters will
002179  002418  //       : accumulate in the buffer.
002180  002419        
002181  002420  func com2_Init("buf","bufsize","qualifier"), 0;
002182  002421  // Syntax: com2_Init(buffer, bufsize, qualifier);
002183  002422  // Usage1: com2_Init(mybuf, 20, 0);
002184  002423  // Usage2: com2_Init(mybuf, 20, ':');
002185  002424  // Notes : initialize a serial capture buffer for the comms input
002186  002425  //       : The program must declare a var array as a circular buffer.
002187  002426  //       : Usage1 declares a circular buffer which will continually
002188  002427  //       : buffer characters.
002189  002428  //       : Usage2 must receive ':' before any characters will
002190  002429  //       : accumulate in the buffer.
002191  002430        
002192  002431  func com3_Init("buf","bufsize","qualifier"), 0;
002193  002432  // Syntax: com3_Init(buffer, bufsize, qualifier);
002194  002433  // Usage1: com3_Init(mybuf, 20, 0);
002195  002434  // Usage2: com3_Init(mybuf, 20, ':');
002196  002435  // Notes : initialize a serial capture buffer for the comms input
002197  002436  //       : The program must declare a var array as a circular buffer.
002198  002437  //       : Usage1 declares a circular buffer which will continually
002199  002438  //       : buffer characters.
002200  002439  //       : Usage2 must receive ':' before any characters will
002201  002440  //       : accumulate in the buffer.
002202  002441        
002203  002442        
002204  002443  func serin(), 1;                // read a byte from primary com port COM0
002205  002444  // Syntax: serin();
002206  002445  // Usage : char := serin();
002207  002446  // Notes : Receives a character from the Serial Port COM0. The transmission format is:
002208  002447  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002209  002448  //     : The default Baud Rate for COM0 is 115,200 bits per second or 115,200 baud.
002210  002449  //     : The baud rate can be changed under program control by using the setbaud(...)
002211  002450  //     : or the com_SetBaud(...) function.
002212  002451  //     : COM0 pins cannot be mapped, and are fixed as pins 42 and 33 (host adaptor / programming)
002213  002452  //     : serin may be buffered (refer to com_Init function above)
002214  002453  //     : Returns: -1 if no character is available
002215  002454  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002216  002455  //     : Returns: positive value 0 to 255 for a valid character received
002217  002456        
002218  002457  func serin1(), 1;
002219  002458  // Syntax: serinx();
002220  002459  // Usage : char := serinx();
002221  002460  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002222  002461  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002223  002462  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002224  002463  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002225  002464  //     : serinx may be buffered (refer to comx_Init function above)
002226  002465  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002227  002466  //     : Returns: -1 if no character is available
002228  002467  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002229  002468  //     : Returns: positive value 0 to 255 for a valid character received
002230  002469        
002231  002470  func serin2(), 1;
002232  002471  // Syntax: serinx();
002233  002472  // Usage : char := serinx();
002234  002473  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002235  002474  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002236  002475  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002237  002476  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002238  002477  //     : serinx may be buffered (refer to comx_Init function above)
002239  002478  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002240  002479  //     : Returns: -1 if no character is available
002241  002480  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002242  002481  //     : Returns: positive value 0 to 255 for a valid character received
002243  002482        
002244  002483  func serin3(), 1;
002245  002484  // Syntax: serinx();
002246  002485  // Usage : char := serinx();
002247  002486  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002248  002487  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002249  002488  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002250  002489  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002251  002490  //     : serinx may be buffered (refer to comx_Init function above)
002252  002491  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002253  002492  //     : Returns: -1 if no character is available
002254  002493  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002255  002494  //     : Returns: positive value 0 to 255 for a valid character received
002256  002495        
002257  002496  func serout("char"), 0;                // write a byte to COM0
002258  002497  // Syntax: serout1("char");
002259  002498  // Usage : serout1(ch);
002260  002499  // Notes : send character to COM0
002261  002500        
002262  002501  func serout1("char"), 0;
002263  002502  // Syntax: seroutx("char");
002264  002503  // Usage : serout1(ch);
002265  002504  // Notes : send character to COMx
002266  002505        
002267  002506  func serout2("char"), 0;
002268  002507  // Syntax: seroutx("char");
002269  002508  // Usage : serout1(ch);
002270  002509  // Notes : send character to COMx
002271  002510        
002272  002511  func serout3("char"), 0;
002273  002512  // Syntax: seroutx("char");
002274  002513  // Usage : serout1(ch);
002275  002514  // Notes : send character to COMx
002276  002515        
002277  002516  func com_Reset(), 0;                 // reset the comms receiver
002278  002517  // Syntax: com_Reset();
002279  002518  // Usage : com_Reset();
002280  002519  // Notes : reset comms to default polled mode
002281  002520        
002282  002521  func com1_Reset(), 0;
002283  002522  // Syntax: com_Reset();
002284  002523  // Usage : com_Reset();
002285  002524  // Notes : reset comms to default polled mode
002286  002525        
002287  002526  func com2_Reset(), 0;
002288  002527  // Syntax: com_Reset();
002289  002528  // Usage : com_Reset();
002290  002529  // Notes : reset comms to default polled mode
002291  002530        
002292  002531  func com3_Reset(), 0;
002293  002532  // Syntax: com_Reset();
002294  002533  // Usage : com_Reset();
002295  002534  // Notes : reset comms to default polled mode
002296  002535        
002297  002536  func com_Count(), 1;                // return count of characters in receive buffer
002298  002537  // Syntax: com_Count();
002299  002538  // Usage : arg := com_Count();
002300  002539  // Notes : return count of buffered characters in buffer attachment
002301  002540        
002302  002541  func com1_Count(), 1;
002303  002542  // Syntax: com_Count();
002304  002543  // Usage : arg := com_Count();
002305  002544  // Notes : return count of buffered characters in buffer attachment
002306  002545        
002307  002546  func com2_Count(), 1;
002308  002547  // Syntax: com_Count();
002309  002548  // Usage : arg := com_Count();
002310  002549  // Notes : return count of buffered characters in buffer attachment
002311  002550        
002312  002551  func com3_Count(), 1;
002313  002552  // Syntax: com_Count();
002314  002553  // Usage : arg := com_Count();
002315  002554  // Notes : return count of buffered characters in buffer attachment
002316  002555        
002317  002556  func com_Full(), 1;                // return TRUE if receiver buffer filled to capcity
002318  002557  // Syntax: com_Full();
002319  002558  // Usage : if (com_Full() ,,,, go read buffer;
002320  002559  // Notes : return true if buffer full (not necessarily an error if
002321  002560  //       : buffer is sized to a packet size)
002322  002561        
002323  002562  func com1_Full(), 1;
002324  002563  // Syntax: com_Full();
002325  002564  // Usage : if (com_Full() ,,,, go read buffer;
002326  002565  // Notes : return true if buffer full (not necessarily an error if
002327  002566  //       : buffer is sized to a packet size)
002328  002567        
002329  002568  func com2_Full(), 1;
002330  002569  // Syntax: com_Full();
002331  002570  // Usage : if (com_Full() ,,,, go read buffer;
002332  002571  // Notes : return true if buffer full (not necessarily an error if
002333  002572  //       : buffer is sized to a packet size)
002334  002573        
002335  002574  func com3_Full(), 1;
002336  002575  // Syntax: com_Full();
002337  002576  // Usage : if (com_Full() ,,,, go read buffer;
002338  002577  // Notes : return true if buffer full (not necessarily an error if
002339  002578  //       : buffer is sized to a packet size)
002340  002579        
002341  002580  func com_Error(), 1;                // return comms errors comms error occurred
002342  002581  // Syntax: comx_Error();
002343  002582  // Usage : if (com_Error() ) ...... take recovery action;
002344  002583  // Notes : return non zero if any errors low level comms errors occured
002345  002584  // returns :
002346  002585  // bit0 = Receiver Overflow Error
002347  002586  // bit1 = Receiver Framing Error
002348  002587  // bit2 = Transmit Buffer Overflow
002349  002588        
002350  002589  func com1_Error(), 1;
002351  002590  // Syntax: comx_Error();
002352  002591  // Usage : if (com_Error() ) ...... take recovery action;
002353  002592  // Notes : return non zero if any errors low level comms errors occured
002354  002593  // returns :
002355  002594  // bit0 = Receiver Overflow Error
002356  002595  // bit1 = Receiver Framing Error
002357  002596  // bit2 = Transmit Buffer Overflow
002358  002597        
002359  002598  func com2_Error(), 1;
002360  002599  // Syntax: comx_Error();
002361  002600  // Usage : if (com_Error() ) ...... take recovery action;
002362  002601  // Notes : return non zero if any errors low level comms errors occured
002363  002602  // returns :
002364  002603  // bit0 = Receiver Overflow Error
002365  002604  // bit1 = Receiver Framing Error
002366  002605  // bit2 = Transmit Buffer Overflow
002367  002606        
002368  002607  func com3_Error(), 1;
002369  002608  // Syntax: comx_Error();
002370  002609  // Usage : if (com_Error() ) ...... take recovery action;
002371  002610  // Notes : return non zero if any errors low level comms errors occured
002372  002611  // returns :
002373  002612  // bit0 = Receiver Overflow Error
002374  002613  // bit1 = Receiver Framing Error
002375  002614  // bit2 = Transmit Buffer Overflow
002376  002615        
002377  002616  func com_Sync(), 1;                // returns TRUE if qualifier has been received
002378  002617  // Usage : comx_Sync();
002379  002618  // return true if sync character has been received in com_Init("...") mode
002380  002619        
002381  002620  func com1_Sync(), 1;
002382  002621  // Usage : comx_Sync();
002383  002622  // return true if sync character has been received in com_Init("...") mode
002384  002623        
002385  002624  func com2_Sync(), 1;
002386  002625  // Usage : comx_Sync();
002387  002626  // return true if sync character has been received in com_Init("...") mode
002388  002627        
002389  002628  func com3_Sync(), 1;
002390  002629  // Usage : comx_Sync();
002391  002630  // return true if sync character has been received in com_Init("...") mode
002392  002631        
002393  002632        
002394  002633  func com_TXbuffer("buf", "bufsize", "pin"), 0;    // sets the buffer location for buffered transmission
002395  002634  // Usage : com_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002396  002635  // Usage : com_TXbuffer(0, 0, 0);             // revert to non buffered service
002397  002636  // Notes : initialize a serial buffer for the COM0 output.
002398  002637  //       : The program must declare a var array as a circular buffer.
002399  002638  //       : When a TX buffer is declared for comms, the transmission
002400  002639  //       : of characters becomes non blocking. If the buffer has
002401  002640  //       : insufficient space to accept the next character from a
002402  002641  //       : serout_x() function, the excess characters will be ignored,
002403  002642  //       : and the com_Full_x() error will be asserted.   If the
002404  002643  //       : TX buffer is no longer required, just set the buffer pointer
002405  002644  //       : to zero, the size in this case doesnt matter and is ignored.
002406  002645  //       : The function can resize or reallocated to another buffer at
002407  002646  //       : any time. The buffer is flushed before any changes are made.
002408  002647  //       : "pin" designates an IO pin to control a bi-directional
002409  002648  //       : control device for half duplex mode. "pin" will go HI at the
002410  002649  //       : start of a transmission, and will return low after the final
002411  002650  //       : byte is transmitted. If not required, just set "pin" to zero.
002412  002651        
002413  002652  func com1_TXbuffer("buf", "bufsize", "pin"), 0;
002414  002653  // Usage : com1_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002415  002654  // Usage : com1_TXbuffer(0, 0, 0);              // revert to non buffered service
002416  002655  // Notes : initialize a serial buffer for the COM0 output.
002417  002656  //       : The program must declare a var array as a circular buffer.
002418  002657  //       : When a TX buffer is declared for comms, the transmission
002419  002658  //       : of characters becomes non blocking. If the buffer has
002420  002659  //       : insufficient space to accept the next character from a
002421  002660  //       : serout_x() function, the excess characters will be ignored,
002422  002661  //       : and the com_Full_x() error will be asserted.   If the
002423  002662  //       : TX buffer is no longer required, just set the buffer pointer
002424  002663  //       : to zero, the size in this case doesnt matter and is ignored.
002425  002664  //       : The function can resize or reallocated to another buffer at
002426  002665  //       : any time. The buffer is flushed before any changes are made.
002427  002666  //       : "pin" designates an IO pin to control a bi-directional
002428  002667  //       : control device for half duplex mode. "pin" will go HI at the
002429  002668  //       : start of a transmission, and will return low after the final
002430  002669  //       : byte is transmitted. If not required, just set "pin" to zero.
002431  002670        
002432  002671  func com2_TXbuffer("buf", "bufsize", "pin"), 0;
002433  002672  // Usage : com2_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002434  002673  // Usage : com2_TXbuffer(0, 0, 0);              // revert to non buffered service
002435  002674  // Notes : initialize a serial buffer for the COM0 output.
002436  002675  //       : The program must declare a var array as a circular buffer.
002437  002676  //       : When a TX buffer is declared for comms, the transmission
002438  002677  //       : of characters becomes non blocking. If the buffer has
002439  002678  //       : insufficient space to accept the next character from a
002440  002679  //       : serout_x() function, the excess characters will be ignored,
002441  002680  //       : and the com_Full_x() error will be asserted.   If the
002442  002681  //       : TX buffer is no longer required, just set the buffer pointer
002443  002682  //       : to zero, the size in this case doesnt matter and is ignored.
002444  002683  //       : The function can resize or reallocated to another buffer at
002445  002684  //       : any time. The buffer is flushed before any changes are made.
002446  002685  //       : "pin" designates an IO pin to control a bi-directional
002447  002686  //       : control device for half duplex mode. "pin" will go HI at the
002448  002687  //       : start of a transmission, and will return low after the final
002449  002688  //       : byte is transmitted. If not required, just set "pin" to zero.
002450  002689        
002451  002690  func com3_TXbuffer("buf", "bufsize", "pin"), 0;
002452  002691  // Usage : com3_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002453  002692  // Usage : com3_TXbuffer(0, 0, 0);              // revert to non buffered service
002454  002693  // Notes : initialize a serial buffer for the COM0 output.
002455  002694  //       : The program must declare a var array as a circular buffer.
002456  002695  //       : When a TX buffer is declared for comms, the transmission
002457  002696  //       : of characters becomes non blocking. If the buffer has
002458  002697  //       : insufficient space to accept the next character from a
002459  002698  //       : serout_x() function, the excess characters will be ignored,
002460  002699  //       : and the com_Full_x() error will be asserted.   If the
002461  002700  //       : TX buffer is no longer required, just set the buffer pointer
002462  002701  //       : to zero, the size in this case doesnt matter and is ignored.
002463  002702  //       : The function can resize or reallocated to another buffer at
002464  002703  //       : any time. The buffer is flushed before any changes are made.
002465  002704  //       : "pin" designates an IO pin to control a bi-directional
002466  002705  //       : control device for half duplex mode. "pin" will go HI at the
002467  002706  //       : start of a transmission, and will return low after the final
002468  002707  //       : byte is transmitted. If not required, just set "pin" to zero.
002469  002708        
002470  002709        
002471  002710  func com_TXcount(), 1;                // return count of characters in COM0 TX buffer
002472  002711  // Syntax: com_TXcount();
002473  002712  // Usage : arg := com_Count();
002474  002713  // Notes : return count of characters remaining in COM0 transmit buffer
002475  002714  //       : that was previously allocated with com_TXbuffer(...);
002476  002715        
002477  002716  func com1_TXcount(), 1;
002478  002717  // Syntax: com_TXcount();
002479  002718  // Usage : arg := com_Count();
002480  002719  // Notes : return count of characters remaining in COM0 transmit buffer
002481  002720  //       : that was previously allocated with com_TXbuffer(...);
002482  002721        
002483  002722  func com2_TXcount(), 1;
002484  002723  // Syntax: com_TXcount();
002485  002724  // Usage : arg := com_Count();
002486  002725  // Notes : return count of characters remaining in COM0 transmit buffer
002487  002726  //       : that was previously allocated with com_TXbuffer(...);
002488  002727        
002489  002728  func com3_TXcount(), 1;
002490  002729  // Syntax: com_TXcount();
002491  002730  // Usage : arg := com_Count();
002492  002731  // Notes : return count of characters remaining in COM0 transmit buffer
002493  002732  //       : that was previously allocated with com_TXbuffer(...);
002494  002733        
002495  002734  func com_TXemptyEvent("function"), 1;  // sets a function to be called when COM0 TX buffer empty
002496  002735  // Usage : arg := com_TXemptyEvent();
002497  002736  // Notes : If a comms TX buffer that was previously allocated with
002498  002737  //       : com_TXbuffer(...);, this function can be used to set up
002499  002738  //       : a function to be called when the COM0 TX buffer is empty.
002500  002739  //       : This is useful for either reloading the TX buffer, setting
002501  002740  //       : or clearing a pin to change the direction of eg a RS485
002502  002741  //       : line driver, or any other form of traffic control.
002503  002742  //       : The event function must not have any parameters.
002504  002743  //       : To disable the event, simply call com_TXemptyEvent(0).
002505  002744  //       : com_TXbuffer(...); also resets any active event.
002506  002745  //       : com_TXemptyEvent returns any previous event function
002507  002746  //       : address, or zero if there was no previous function.
002508  002747        
002509  002748  func com1_TXemptyEvent("function"), 1;
002510  002749  // Usage : arg := com1_TXemptyEvent();
002511  002750  // Notes : If a comms TX buffer that was previously allocated with
002512  002751  //       : com_TXbuffer(...);, this function can be used to set up
002513  002752  //       : a function to be called when the COM0 TX buffer is empty.
002514  002753  //       : This is useful for either reloading the TX buffer, setting
002515  002754  //       : or clearing a pin to change the direction of eg a RS485
002516  002755  //       : line driver, or any other form of traffic control.
002517  002756  //       : The event function must not have any parameters.
002518  002757  //       : To disable the event, simply call com_TXemptyEvent(0).
002519  002758  //       : com_TXbuffer(...); also resets any active event.
002520  002759  //       : com_TXemptyEvent returns any previous event function
002521  002760  //       : address, or zero if there was no previous function.
002522  002761        
002523  002762  func com2_TXemptyEvent("function"), 1;
002524  002763  // Usage : arg := com2_TXemptyEvent();
002525  002764  // Notes : If a comms TX buffer that was previously allocated with
002526  002765  //       : com_TXbuffer(...);, this function can be used to set up
002527  002766  //       : a function to be called when the COM0 TX buffer is empty.
002528  002767  //       : This is useful for either reloading the TX buffer, setting
002529  002768  //       : or clearing a pin to change the direction of eg a RS485
002530  002769  //       : line driver, or any other form of traffic control.
002531  002770  //       : The event function must not have any parameters.
002532  002771  //       : To disable the event, simply call com_TXemptyEvent(0).
002533  002772  //       : com_TXbuffer(...); also resets any active event.
002534  002773  //       : com_TXemptyEvent returns any previous event function
002535  002774  //       : address, or zero if there was no previous function.
002536  002775        
002537  002776  func com3_TXemptyEvent("function"), 1;
002538  002777  // Usage : arg := com3_TXemptyEvent();
002539  002778  // Notes : If a comms TX buffer that was previously allocated with
002540  002779  //       : com_TXbuffer(...);, this function can be used to set up
002541  002780  //       : a function to be called when the COM0 TX buffer is empty.
002542  002781  //       : This is useful for either reloading the TX buffer, setting
002543  002782  //       : or clearing a pin to change the direction of eg a RS485
002544  002783  //       : line driver, or any other form of traffic control.
002545  002784  //       : The event function must not have any parameters.
002546  002785  //       : To disable the event, simply call com_TXemptyEvent(0).
002547  002786  //       : com_TXbuffer(...); also resets any active event.
002548  002787  //       : com_TXemptyEvent returns any previous event function
002549  002788  //       : address, or zero if there was no previous function.
002550  002789        
002551  002790  func com_TXbufferHold("state"), 1; // hold or release a com_TXbuffer
002552  002791  // Usage : arg := com_TXbufferHold(OFF);  // start sending the buffer
002553  002792  // Notes : Expecting that a comms TX buffer that was previously allocated with
002554  002793  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002555  002794  //       : the buffer being sent wile it is being loaded. Mormally, when
002556  002795  //       : using buffered comms, the transmit process will begin
002557  002796  //       : immediately. This is often undesirable for 2 reasons,
002558  002797  //       : 1] you may wish to build a packet then send it later
002559  002798  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002560  002799  //       : as the FIFO buffer is constantly trying to empty while
002561  002800  //       : you are busy tring to fill it.
002562  002801  // return -1 if function is called illegally when TX comms is not buffered.
002563  002802  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002564  002803  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002565  002804        
002566  002805  func com1_TXbufferHold("state"), 1;
002567  002806  // Usage : arg := com1_TXbufferHold(OFF);  // start sending the buffer
002568  002807  // Notes : Expecting that a comms TX buffer that was previously allocated with
002569  002808  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002570  002809  //       : the buffer being sent wile it is being loaded. Mormally, when
002571  002810  //       : using buffered comms, the transmit process will begin
002572  002811  //       : immediately. This is often undesirable for 2 reasons,
002573  002812  //       : 1] you may wish to build a packet then send it later
002574  002813  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002575  002814  //       : as the FIFO buffer is constantly trying to empty while
002576  002815  //       : you are busy tring to fill it.
002577  002816  // return -1 if function is called illegally when TX comms is not buffered.
002578  002817  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002579  002818  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002580  002819        
002581  002820  func com2_TXbufferHold("state"), 1;
002582  002821  // Usage : arg := com2_TXbufferHold(OFF);  // start sending the buffer
002583  002822  // Notes : Expecting that a comms TX buffer that was previously allocated with
002584  002823  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002585  002824  //       : the buffer being sent wile it is being loaded. Mormally, when
002586  002825  //       : using buffered comms, the transmit process will begin
002587  002826  //       : immediately. This is often undesirable for 2 reasons,
002588  002827  //       : 1] you may wish to build a packet then send it later
002589  002828  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002590  002829  //       : as the FIFO buffer is constantly trying to empty while
002591  002830  //       : you are busy tring to fill it.
002592  002831  // return -1 if function is called illegally when TX comms is not buffered.
002593  002832  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002594  002833  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002595  002834        
002596  002835  func com3_TXbufferHold("state"), 1;
002597  002836  // Usage : arg := com3_TXbufferHold(OFF);  // start sending the buffer
002598  002837  // Notes : Expecting that a comms TX buffer that was previously allocated with
002599  002838  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002600  002839  //       : the buffer being sent wile it is being loaded. Mormally, when
002601  002840  //       : using buffered comms, the transmit process will begin
002602  002841  //       : immediately. This is often undesirable for 2 reasons,
002603  002842  //       : 1] you may wish to build a packet then send it later
002604  002843  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002605  002844  //       : as the FIFO buffer is constantly trying to empty while
002606  002845  //       : you are busy tring to fill it.
002607  002846  // return -1 if function is called illegally when TX comms is not buffered.
002608  002847  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002609  002848  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002610  002849        
002611  002850  func com_Mode("8" ,"N", "1", "comport"), 1 ;
002612  002851  // Syntax   : comx_Mode("databits", "parity", "Stopbits", "comport");
002613  002852  // Usage    : comx_Mode(8, 'N', 1, COM0);                        // set COM0 to 8N1
002614  002853  // *Notes   : Data Bits must be 8
002615  002854  //          : Parity may be 'N', 'O' or 'E'.
002616  002855  //          : Stop Bits may be 1 or 2.
002617  002856  // returns true if mode was acceptable
002618  002857        
002619  002858  func com_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
002620  002859  // Syntax   : com_TXblock("buf", "bufsize");
002621  002860  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
002622  002861  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
002623  002862  //          : if a transmit buffer is active and space is available this function will return almost
002624  002863  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
002625  002864        
002626  002865  func com_RXblock("buf", "bufsize"), 0;                       // commence a block reception
002627  002866  // Syntax   : com_RXblock("buf", "bufsize");
002628  002867  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
002629  002868  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
002630  002869  //          : if a receive buffer is active and bufsize characters are available this function will return almost
002631  002870  //          : immediately otherwise it will block until until the required bytes are received.
002632  002871        
002633  002872  func __reserved30(), 0; // do not remove
002634  002873        
002635  002874  //------------------------------------------------------------------//
002636  002875  //        Function Prototypes for I2C
002637  002876  //------------------------------------------------------------------//
002638  002877  func I2C1_Open("speed", "SCLpin", "SDApin"), 1;
002639  002878  // Syntax : I2C1_Openx(speed, SCLpin, SDApin),
002640  002879  // Usage  : I2C1_Open(I2C_MED, PA2, PA3);
002641  002880  // Notes  : configures the required I2C module
002642  002881  //        : see 'I2C timing related constants' and 'pin constants'
002643  002882  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002644  002883  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002645  002884  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002646  002885  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002647  002886  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002648  002887  // Returns: True if successful
002649  002888        
002650  002889        
002651  002890  func I2C2_Open("speed", "SCLpin", "SDApin"), 1;
002652  002891  // Syntax : I2C2_Openx(speed, SCLpin, SDApin),
002653  002892  // Usage  : I2C2_Open(I2C_MED, PA2, PA3);
002654  002893  // Notes  : configures the required I2C module
002655  002894  //        : see 'I2C timing related constants' and 'pin constants'
002656  002895  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002657  002896  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002658  002897  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002659  002898  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002660  002899  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002661  002900  // Returns: True if successful
002662  002901        
002663  002902        
002664  002903  func I2C3_Open("speed", "SCLpin", "SDApin"), 1;
002665  002904  // Syntax : I2C3_Openx(speed, SCLpin, SDApin),
002666  002905  // Usage  : I2C3_Open(I2C_MED, PA2, PA3);
002667  002906  // Notes  : configures the required I2C module
002668  002907  //        : see 'I2C timing related constants' and 'pin constants'
002669  002908  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002670  002909  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002671  002910  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002672  002911  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002673  002912  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002674  002913  // Returns: True if successful
002675  002914        
002676  002915        
002677  002916  func I2C1_Close(), 0;
002678  002917  // Usage : I2C1_Close();
002679  002918  // Notes : disables the I2C1 module.
002680  002919        
002681  002920  func I2C2_Close(), 0;
002682  002921  // Usage : I2C2_Close();
002683  002922  // Notes : disables the I2C2 module.
002684  002923        
002685  002924  func I2C3_Close(), 0;
002686  002925  // Usage : I2C3_Close();
002687  002926  // Notes : disables the I2C3 module.
002688  002927        
002689  002928  func I2C1_Start(), 1;
002690  002929  // Syntax: I2C1_Start();
002691  002930  // Usage : I2C1_Start();
002692  002931  // Notes : generates a Start condition.
002693  002932  //       : returns true if successful (usually ignored)
002694  002933        
002695  002934  func I2C2_Start(), 1;
002696  002935  // Syntax: I2C2_Start();
002697  002936  // Usage : I2C2_Start();
002698  002937  // Notes : generates a Start condition.
002699  002938  //       : returns true if successful (usually ignored)
002700  002939        
002701  002940  func I2C3_Start(), 1;
002702  002941  // Syntax: I2C3_Start();
002703  002942  // Usage : I2C3_Start();
002704  002943  // Notes : generates a Start condition.
002705  002944  //       : returns true if successful (usually ignored)
002706  002945        
002707  002946  func I2C1_Stop(), 1;
002708  002947  // Syntax: I2C1_Stop();
002709  002948  // Usage : I2C1_Stop();
002710  002949  // Notes : generates a Stop condition.
002711  002950  //       : returns true if successful (usually ignored)
002712  002951        
002713  002952  func I2C2_Stop(), 1;
002714  002953  // Syntax: I2C2_Stop();
002715  002954  // Usage : I2C2_Stop();
002716  002955  // Notes : generates a Stop condition.
002717  002956  //       : returns true if successful (usually ignored)
002718  002957        
002719  002958  func I2C3_Stop(), 1;
002720  002959  // Syntax: I2C3_Stop();
002721  002960  // Usage : I2C3_Stop();
002722  002961  // Notes : generates a Stop condition.
002723  002962  //       : returns true if successful (usually ignored)
002724  002963        
002725  002964  func I2C1_Restart(), 1;
002726  002965  // Syntax: I2C1_Restart();
002727  002966  // Usage : I2C1_Restart();
002728  002967  // Notes : generates a Restart condition.
002729  002968  //       : returns true if successful (usually ignored)
002730  002969        
002731  002970  func I2C2_Restart(), 1;
002732  002971  // Syntax: I2C2_Restart();
002733  002972  // Usage : I2C2_Restart();
002734  002973  // Notes : generates a Restart condition.
002735  002974  //       : returns true if successful (usually ignored)
002736  002975        
002737  002976  func I2C3_Restart(), 1;
002738  002977  // Syntax: I2C3_Restart();
002739  002978  // Usage : I2C3_Restart();
002740  002979  // Notes : generates a Restart condition.
002741  002980  //       : returns true if successful (usually ignored)
002742  002981        
002743  002982  func I2C1_Read(), 1;
002744  002983  // Syntax: I2C1_Read();
002745  002984  // Usage : ch := I2C1_Read();
002746  002985  // Notes : reads a single byte from the I2C Bus.
002747  002986        
002748  002987  func I2C2_Read(), 1;
002749  002988  // Syntax: I2C2_Read();
002750  002989  // Usage : ch := I2C2_Read();
002751  002990  // Notes : reads a single byte from the I2C Bus.
002752  002991        
002753  002992  func I2C3_Read(), 1;
002754  002993  // Syntax: I2C3_Read();
002755  002994  // Usage : ch := I2C3_Read();
002756  002995  // Notes : reads a single byte from the I2C Bus.
002757  002996        
002758  002997  func I2C1_Write("byte"), 1;
002759  002998  // Syntax: I2C1_Write(byte);
002760  002999  // Usage : r := I2C1_Write(ch);
002761  003000  // Notes : is used to write a byte to the I2C bus.
002762  003001  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002763  003002        
002764  003003  func I2C2_Write("byte"), 1;
002765  003004  // Syntax: I2C2_Write(byte);
002766  003005  // Usage : r := I2C2_Write(ch);
002767  003006  // Notes : is used to write a byte to the I2C bus.
002768  003007  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002769  003008        
002770  003009  func I2C3_Write("byte"), 1;
002771  003010  // Syntax: I2C3_Write(byte);
002772  003011  // Usage : r := I2C3_Write(ch);
002773  003012  // Notes : is used to write a byte to the I2C bus.
002774  003013  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002775  003014        
002776  003015  func I2C1_Ack(), 0;
002777  003016  // Syntax: I2C1_Ack();
002778  003017  // Usage : I2C1_Ack();
002779  003018  // Notes : generates the acknowledge condition.
002780  003019        
002781  003020  func I2C2_Ack(), 0;
002782  003021  // Syntax: I2C2_Ack();
002783  003022  // Usage : I2C2_Ack();
002784  003023  // Notes : generates the acknowledge condition.
002785  003024        
002786  003025  func I2C3_Ack(), 0;
002787  003026  // Syntax: I2C3_Ack();
002788  003027  // Usage : I2C3_Ack();
002789  003028  // Notes : generates the acknowledge condition.
002790  003029        
002791  003030  func I2C1_Nack(), 0;
002792  003031  // Syntax: I2C1_Nack();
002793  003032  // Usage : I2C1_Nack();
002794  003033  // Notes : generates the negative acknowledge condition.
002795  003034        
002796  003035  func I2C2_Nack(), 0;
002797  003036  // Syntax: I2C2_Nack();
002798  003037  // Usage : I2C2_Nack();
002799  003038  // Notes : generates the negative acknowledge condition.
002800  003039        
002801  003040  func I2C3_Nack(), 0;
002802  003041  // Syntax: I2C3_Nack();
002803  003042  // Usage : I2C3_Nack();
002804  003043  // Notes : generates the negative acknowledge condition.
002805  003044        
002806  003045  func I2C1_AckStatus(), 1;
002807  003046  // Syntax: I2C1_AckStatus();
002808  003047  // Usage : r := I2C1_AckStatus();
002809  003048  // Notes : returns the ACK status from the device.
002810  003049        
002811  003050  func I2C2_AckStatus(), 1;
002812  003051  // Syntax: I2C2_AckStatus();
002813  003052  // Usage : r := I2C2_AckStatus();
002814  003053  // Notes : returns the ACK status from the device.
002815  003054        
002816  003055  func I2C3_AckStatus(), 1;
002817  003056  // Syntax: I2C3_AckStatus();
002818  003057  // Usage : r := I2C3_AckStatus();
002819  003058  // Notes : returns the ACK status from the device.
002820  003059        
002821  003060  func I2C1_AckPoll("control"), 1;
002822  003061  // Syntax: I2C1_AckPoll();
002823  003062  // Usage : r := I2C1_AckPoll(0xA0);
002824  003063  // Notes : waits for a device to return from ACK polling.
002825  003064        
002826  003065  func I2C2_AckPoll("control"), 1;
002827  003066  // Syntax: I2C2_AckPoll();
002828  003067  // Usage : r := I2C2_AckPoll(0xA0);
002829  003068  // Notes : waits for a device to return from ACK polling.
002830  003069        
002831  003070  func I2C3_AckPoll("control"), 1;
002832  003071  // Syntax: I2C3_AckPoll();
002833  003072  // Usage : r := I2C3_AckPoll(0xA0);
002834  003073  // Notes : waits for a device to return from ACK polling.
002835  003074        
002836  003075  func I2C1_Idle(), 1;
002837  003076  // Syntax : I2C1_Idle();
002838  003077  // Usage  : r := I2C1_Idle();
002839  003078  // Notes  : waits until the I2C Bus is Inactive.
002840  003079  //        : Times out if bus not idle within 1 second
002841  003080  // Returns: TRUE if successful, else failed (timed out)
002842  003081        
002843  003082  func I2C2_Idle(), 1;
002844  003083  // Syntax : I2C2_Idle();
002845  003084  // Usage  : r := I2C2_Idle();
002846  003085  // Notes  : waits until the I2C Bus is Inactive.
002847  003086  //        : Times out if bus not idle within 1 second
002848  003087  // Returns: TRUE if successful, else failed (timed out)
002849  003088        
002850  003089  func I2C3_Idle(), 1;
002851  003090  // Syntax : I2C3_Idle();
002852  003091  // Usage  : r := I2C3_Idle();
002853  003092  // Notes  : waits until the I2C Bus is Inactive.
002854  003093  //        : Times out if bus not idle within 1 second
002855  003094  // Returns: TRUE if successful, else failed (timed out)
002856  003095        
002857  003096        
002858  003097  func I2C1_Gets("buffer", "size"), 1;
002859  003098  // Syntax: I2C1_Gets("buffer", "size");
002860  003099  // Usage : r := I2C1_Gets(mybuf, 16);
002861  003100  // Notes : only reads up to "size" characters into "buffer"
002862  003101  //       : Reads up to asciiz terminator including terminator
002863  003102        
002864  003103  func I2C2_Gets("buffer", "size"), 1;
002865  003104  // Syntax: I2C2_Gets("buffer", "size");
002866  003105  // Usage : r := I2C2_Gets(mybuf, 16);
002867  003106  // Notes : only reads up to "size" characters into "buffer"
002868  003107  //       : Reads up to asciiz terminator including terminator
002869  003108        
002870  003109  func I2C3_Gets("buffer", "size"), 1;
002871  003110  // Syntax: I2C3_Gets("buffer", "size");
002872  003111  // Usage : r := I2C3_Gets(mybuf, 16);
002873  003112  // Notes : only reads up to "size" characters into "buffer"
002874  003113  //       : Reads up to asciiz terminator including terminator
002875  003114        
002876  003115  func I2C1_Getn("buffer", "size"), 1;
002877  003116  // Syntax: I2C1_Gets("buffer", "size");
002878  003117  // Usage : r := I2C1_Gets(mybuf, 16);
002879  003118  // Notes : reads "size" bytes into "buffer"
002880  003119  //       :
002881  003120        
002882  003121  func I2C2_Getn("buffer", "size"), 1;
002883  003122  // Syntax: I2C2_Gets("buffer", "size");
002884  003123  // Usage : r := I2C2_Gets(mybuf, 16);
002885  003124  // Notes : reads "size" bytes into "buffer"
002886  003125  //       :
002887  003126        
002888  003127  func I2C3_Getn("buffer", "size"), 1;
002889  003128  // Syntax: I2C3_Gets("buffer", "size");
002890  003129  // Usage : r := I2C3_Gets(mybuf, 16);
002891  003130  // Notes : reads "size" bytes into "buffer"
002892  003131  //       :
002893  003132        
002894  003133  func I2C1_Puts("buffer"), 1;
002895  003134  // Syntax: I2C1_Puts("buffer");
002896  003135  // Usage : r := I2C1_Puts(mybuf);
002897  003136  // Notes : writes an asciiz string to the I2C device
002898  003137  //       : returns count of characters written
002899  003138        
002900  003139  func I2C2_Puts("buffer"), 1;
002901  003140  // Syntax: I2C2_Puts("buffer");
002902  003141  // Usage : r := I2C2_Puts(mybuf);
002903  003142  // Notes : writes an asciiz string to the I2C device
002904  003143  //       : returns count of characters written
002905  003144        
002906  003145  func I2C3_Puts("buffer"), 1;
002907  003146  // Syntax: I2C3_Puts("buffer");
002908  003147  // Usage : r := I2C3_Puts(mybuf);
002909  003148  // Notes : writes an asciiz string to the I2C device
002910  003149  //       : returns count of characters written
002911  003150        
002912  003151  func I2C1_Putn("buffer", "count"), 1;
002913  003152  // Syntax: I2C1_Putn("buffer","count");
002914  003153  // Usage : r := I2C1_Puts(mybuf,10);
002915  003154  // Notes : writes up to "size" bytes to the I2C device
002916  003155  //       : returns number of bytes written
002917  003156        
002918  003157  func I2C2_Putn("buffer", "count"), 1;
002919  003158  // Syntax: I2C2_Putn("buffer","count");
002920  003159  // Usage : r := I2C2_Puts(mybuf,10);
002921  003160  // Notes : writes up to "size" bytes to the I2C device
002922  003161  //       : returns number of bytes written
002923  003162        
002924  003163  func I2C3_Putn("buffer", "count"), 1;
002925  003164  // Syntax: I2C3_Putn("buffer","count");
002926  003165  // Usage : r := I2C3_Puts(mybuf,10);
002927  003166  // Notes : writes up to "size" bytes to the I2C device
002928  003167  //       : returns number of bytes written
002929  003168        
002930  003169        
002931  003170  func spi_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002932  003171  // Syntax   : spi_ReadBlock("buf", "bufsize");
002933  003172  // Usage    : spi_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002934  003173  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002935  003174        
002936  003175  func spi1_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002937  003176  // Syntax   : spi1_ReadBlock("buf", "bufsize");
002938  003177  // Usage    : spi1_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002939  003178  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002940  003179        
002941  003180  func spi2_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002942  003181  // Syntax   : spi2_ReadBlock("buf", "bufsize");
002943  003182  // Usage    : spi2_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002944  003183  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002945  003184        
002946  003185  func spi3_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002947  003186  // Syntax   : spi3_ReadBlock("buf", "bufsize");
002948  003187  // Usage    : spi3_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002949  003188  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002950  003189        
002951  003190  // I2C timing related constants
002952  003191  #CONST
002953  003199  #END
002954  003200        
002955  003201        
002956  003202        
002957  003203  //------------------------------------------------------------------//
002958  003204  // Direct uSD (SPI0) card SPI functions                             //
002959  003205  //------------------------------------------------------------------//
002960  003206  func spi_Init("speed","ip_mode","op_mode"), 0;  // set the SPI port, not used if uSD active
002961  003207  func spi_Read(), 1;                             // read a raw byte from SPI (lowers CS)
002962  003208  func spi_Write("byte"), 0;                      // write a raw byte to SPI (lowers CS)
002963  003209  func spi_Disable(), 0;                          // disable SPI reading or writing (raise CS)
002964  003210                                                  //
002965  003211        
002966  003212  //------------------------------------------------------------------//
002967  003213  // Function prototypes for SPI1, SPI2 and SPI3                      //
002968  003214  //------------------------------------------------------------------//
002969  003215  func SPI1_SDO_pin("pin"), 1;                // select the hardware pin for SPI1 transmit line
002970  003216  // Syntax: SPI_SDO_pin(pin);
002971  003217  // Usage : SPI_SDO_pin(PA1); // set SPI SDO to PA1 pin
002972  003218  // Notes : Select the hardware pin for SPIx transmit line.
002973  003219  //       : Note that multiple pins can be connected simmultaneously.
002974  003220  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002975  003221  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002976  003222  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002977  003223  //       : The pin is automatically set to an output.
002978  003224  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002979  003225        
002980  003226  func SPI2_SDO_pin("pin"), 1;                // select the hardware pin for SPI2 transmit line
002981  003227  // Syntax: SPI2_SDO_pin(pin);
002982  003228  // Usage : SPI2_SDO_pin(PA1); // set SPI2 SDO to PA1 pin
002983  003229  // Notes : Select the hardware pin for SPIx transmit line.
002984  003230  //       : Note that multiple pins can be connected simmultaneously.
002985  003231  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002986  003232  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002987  003233  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002988  003234  //       : The pin is automatically set to an output.
002989  003235  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002990  003236        
002991  003237  func SPI3_SDO_pin("pin"), 1;                // select the hardware pin for SPI3 transmit line
002992  003238  // Syntax: SPI3_SDO_pin(pin);
002993  003239  // Usage : SPI3_SDO_pin(PA1); // set SPI3 SDO to PA1 pin
002994  003240  // Notes : Select the hardware pin for SPIx transmit line.
002995  003241  //       : Note that multiple pins can be connected simmultaneously.
002996  003242  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002997  003243  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002998  003244  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002999  003245  //       : The pin is automatically set to an output.
003000  003246  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003001  003247        
003002  003248  func SPI1_SDI_pin("pin"), 1;                // select the hardware pin for SPI1 receive line
003003  003249  // Syntax: SPI1_SDI_pin(pin);
003004  003250  // Usage : SPI1_SDI_pin(PA3); // set SPI1 SDI to PA3 pin
003005  003251  // Notes : Selects the hardware pin for SPIx receive line.
003006  003252  //       : Note that only a single pin can be mapped to SPI SDI.
003007  003253  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003008  003254  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003009  003255  //       : If the pin argument is 0 the function has no effect
003010  003256  //       : The pin is automatically set to an input.
003011  003257  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003012  003258  //       : it is necessary to configure the SDI pin first, eg
003013  003259  //       :     SPI1_SDI_pin(PA3);     // configure SPI1 SDI to PA3 (this disconnects anything else)
003014  003260  //       :     SPI1_SDO_pin(PA3));    // configure SPI1 SDO to PA3
003015  003261  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003016  003262        
003017  003263  func SPI2_SDI_pin("pin"), 1;                // select the hardware pin for SPI2 receive line
003018  003264  // Syntax: SPI2_SDI_pin(pin);
003019  003265  // Usage : SPI2_SDI_pin(PA3); // set SPI2 SDI to PA3 pin
003020  003266  // Notes : Selects the hardware pin for SPIx receive line.
003021  003267  //       : Note that only a single pin can be mapped to SPI SDI.
003022  003268  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003023  003269  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003024  003270  //       : If the pin argument is 0 the function has no effect
003025  003271  //       : The pin is automatically set to an input.
003026  003272  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003027  003273  //       : it is necessary to configure the SDI pin first, eg
003028  003274  //       :     SPI2_SDI_pin(PA3);     // configure SPI2 SDI to PA3 (this disconnects anything else)
003029  003275  //       :     SPI2_SDO_pin(PA3));    // configure SPI2 SDO to PA3
003030  003276  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003031  003277        
003032  003278  func SPI3_SDI_pin("pin"), 1;                // select the hardware pin for SPI2 receive line
003033  003279  // Syntax: SPI3_SDI_pin(pin);
003034  003280  // Usage : SPI3_SDI_pin(PA3); // set SPI3 SDI to PA3 pin
003035  003281  // Notes : Selects the hardware pin for SPIx receive line.
003036  003282  //       : Note that only a single pin can be mapped to SPI SDI.
003037  003283  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003038  003284  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003039  003285  //       : If the pin argument is 0 the function has no effect
003040  003286  //       : The pin is automatically set to an input.
003041  003287  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003042  003288  //       : it is necessary to configure the SDI pin first, eg
003043  003289  //       :     SPI3_SDI_pin(PA3);     // configure SPI3 SDI to PA3 (this disconnects anything else)
003044  003290  //       :     SPI3_SDO_pin(PA3));    // configure SPI3 SDO to PA3
003045  003291  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003046  003292        
003047  003293  func SPI1_SCK_pin("pin"), 1;                // select the hardware pin for SPI1 clock line
003048  003294  // Syntax: SPI1_SCK_pin(pin);
003049  003295  // Usage : SPI1_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003050  003296  // Notes : Selects the hardware pin for SPI clock line.
003051  003297  //       : Note that only a single pin should be mapped to spi SCK.
003052  003298  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003053  003299  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003054  003300  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003055  003301  //       : The pin is automatically set to an output.
003056  003302  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003057  003303        
003058  003304  func SPI2_SCK_pin("pin"), 1;                // select the hardware pin for SPI2 clock line
003059  003305  // Syntax: SPI2_SCK_pin(pin);
003060  003306  // Usage : SPI2_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003061  003307  // Notes : Selects the hardware pin for SPI clock line.
003062  003308  //       : Note that only a single pin should be mapped to spi SCK.
003063  003309  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003064  003310  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003065  003311  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003066  003312  //       : The pin is automatically set to an output.
003067  003313  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003068  003314        
003069  003315  func SPI3_SCK_pin("pin"), 1;                // select the hardware pin for SPI3 clock line
003070  003316  // Syntax: SPI3_SCK_pin(pin);
003071  003317  // Usage : SPI3_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003072  003318  // Notes : Selects the hardware pin for SPI clock line.
003073  003319  //       : Note that only a single pin should be mapped to spi SCK.
003074  003320  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003075  003321  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003076  003322  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003077  003323  //       : The pin is automatically set to an output.
003078  003324  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003079  003325        
003080  003326        
003081  003327  func SPI1_Init("speed","mode"), 1;              // set the SPI1 port
003082  003328  func SPI2_Init("speed","mode"), 1;              // set the SPI2 port
003083  003329  func SPI3_Init("speed","mode"), 1;              // set the SPI3 port
003084  003330        
003085  003331        
003086  003332  //------------------------------------------------------------------------------
003087  003333  // Constants for SPI1, SPI2 an SPI3 "mode"
003088  003334  //------------------------------------------------------------------------------
003089  003335  #CONST
003090  003352  #END
003091  003353        
003092  003354  //------------------------------------------------------------------------------
003093  003355  // Constants for SPI1, SPI2 an SPI3 "speed"
003094  003356  //------------------------------------------------------------------------------
003095  003357  #CONST
003096  003374  #END
003097  003375        
003098  003376        
003099  003377  func SPI1_Read(), 1;                                 // read a raw byte from SPI1
003100  003378  func SPI2_Read(), 1;                                 // read a raw byte from SPI2
003101  003379  func SPI3_Read(), 1;                                 // read a raw byte from SPI3
003102  003380        
003103  003381  func SPI1_Write("byte"), 1;                          // write a raw byte to SPI1
003104  003382  func SPI2_Write("byte"), 1;                          // write a raw byte to SPI2
003105  003383  func SPI3_Write("byte"), 1;                          // write a raw byte to SPI3
003106  003384        
003107  003385  func spi_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003108  003386  // Syntax   : spi_WriteBlock("buf", "bufsize");
003109  003387  // Usage    : spi_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003110  003388  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003111  003389        
003112  003390  func spi1_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003113  003391  // Syntax   : spi1_WriteBlock("buf", "bufsize");
003114  003392  // Usage    : spi1_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003115  003393  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003116  003394        
003117  003395  func spi2_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003118  003396  // Syntax   : spi2_WriteBlock("buf", "bufsize");
003119  003397  // Usage    : spi2_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003120  003398  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003121  003399        
003122  003400  func spi3_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003123  003401  // Syntax   : spi3_WriteBlock("buf", "bufsize");
003124  003402  // Usage    : spi3_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003125  003403  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003126  003404        
003127  003405  //------------------------------------------------------------------//
003128  003406  // Display Access                                                   //
003129  003407  //------------------------------------------------------------------//
003130  003408  func disp_SetReg("register", "data"), 0;
003131  003409  // Syntax: display_SetReg(register, data);
003132  003410  // Usage : display_SetReg(arg1, arg2);
003133  003411  // Notes : Sets uLCD specific display driver registers. Refer
003134  003412  //       : to appropriate display driver data sheet.
003135  003413        
003136  003414  func disp_setGRAM("x1","y1","x2","y2"), 0;    // set GRAM window
003137  003415  // Syntax: disp_setGRAM(x1, y1, x2, y2);
003138  003416  // Usage : disp_setGRAM(arg1, arg2, arg3, arg4);
003139  003417  // Notes : Prepares the GRAM area for user access.
003140  003418  //       : Data can now be written with disp_GRAM.
003141  003419  //       : GRAM will be set accordingly for the correct screen mode.
003142  003420  //       : the LO word of the 32 bit pixel count is returned. This is
003143  003421  //       : usually all that is needed unlse GRAM area exceeds 256^2
003144  003422  //       : A copy of the 32bit value can be found in
003145  003423  //       : GRAM_PIXEL_COUNT_LO and GRAM_PIXEL_COUNT_HI
003146  003424        
003147  003425  func disp_WrGRAM("colour"), 0;
003148  003426  // Syntax: display_WrGRAM(colour);
003149  003427  // Usage : display_WrGRAM(arg);
003150  003428  // Notes : Data can be written to the GRAM consecutively using
003151  003429  //       : this function once the GRAM access window has been setup.
003152  003430        
003153  003431  func disp_WriteControl("value"), 0;             // write a control byte to the display
003154  003432        
003155  003433  func disp_WriteWord("value"), 0;                // write a word to the display
003156  003434        
003157  003435        
003158  003436  func disp_ReadWord(), 1;                        // read a word from the display
003159  003437  // Syntax: disp_ReadWord();
003160  003438  // Usage : x:=disp_ReadWord();
003161  003439  // Notes : Read a word from the controller
003162  003440  // Eg:   : disp_WriteControl(0);         // select Ilitek ID register
003163  003441  //       : print(disp_ReadWord());        // print ID
003164  003442  //       : (Many displays are write only)
003165  003443        
003166  003444        
003167  003445  // NB only available on certain displays, check individual data sheets
003168  003446  func sys_StoreTouchCalibration(), 1;
003169  003447  // Syntax: sys_StoreTouchCalibration();
003170  003448  // Usage : r := sys_StoreTouchCalibration();
003171  003449  // Notes : Store the touch calibration values in non-volatile memory.
003172  003450  //       : Returns true if the values have been accepted and stored,
003173  003451  //       : else returns false if write could not be performed, or
003174  003452  //       : touch calibration values are improbable.
003175  003453  //       : The values that are stored are obtained from:-
003176  003454  //       : TOUCH_XMINCAL             78  // touch calibration value
003177  003455  //       : TOUCH_YMINCAL             79  // touch calibration value
003178  003456  //       : TOUCH_XMAXCAL             80  // touch calibration value
003179  003457  //       : TOUCH_YMAXCAL             81  // touch calibration value
003180  003458  //       : refer to the 4DGL example touchCalibrate.4DG for further information.
003181  003459  //       : This function is not supported on uVGA, Capacitive touch
003182  003460  //       : and 4.3" resistive touch modules.
003183  003461        
003184  003462  // NB only available on certain displays, check individual data sheets
003185  003463  func disp_Sync("line"), 0;                      //  (uVGA only)  wait till scanline reaches "line"
003186  003464  // Syntax: disp_Sync(line);
003187  003465  // Usage : disp_Sync(480);
003188  003466  // Notes : Waits till the hardware gets to a certain line.
003189  003467  //       : Allows the program to synchronise writing to the hardware for flicker free operation.
003190  003468  //       : Some experimentation may be needed to find an optimum line for disp_Sync
003191  003469  //       : depending on the graphics operation. The higher the value, the slower
003192  003470  //       : the throughput. A cetain point will be reached (number of scanlines + blanking lines
003193  003471  //       : within the vertical retrace period) where it will just 'hang up' stopping the
003194  003472  //       : entire process. Eg, in 640x480 mode, if the 'lines' value is 507, operation will
003195  003473  //       : be slowest (as its actually right at the end of the blanking period) and 508
003196  003474  //       : will cause a hangup situation as it is above the highes scanline value.
003197  003475  //       : Currently, this function is only supported on displays with SSD1963 driver.
003198  003476        
003199  003477  func disp_Init(), 0;                           // initialize display with required tables. New in v0.7
003200  003478  // Syntax: disp_Init();                        New in v0.7
003201  003479  // Usage : disp_Init();
003202  003480  // Notes : Initialises or reinitialises the display.
003203  003481  //       : Normally used after restoration of peripheral power
003204  003482  //       : and after DeepSleep.
003205  003483        
003206  003484  func disp_Disconnect(), 0;                     // Disconnect display to ensure reduced power after disabling peripheral power. New in v0.7
003207  003485  // Syntax: disp_Disconnect();                  New in v0.7
003208  003486  // Usage : disp_Disconnect();
003209  003487  // Notes : Disconnects the display driver pins and/or reconfigures it to achieve
003210  003488  //       : its lowest possible power consumption. Use after disabling peripheral power
003211  003489  //       : to ensure the minimal power usage by the display.
003212  003490  //       : disp_Init() should be used to reinitialise the display.
003213  003491        
003214  003492  func disp_BlitPixelsFromCOM0(), 0;                     // Writes current GRAM window pixels to the display from the COM port
003215  003493  // Syntax: disp_BlitPixelsFromCOM0();                  New in v1.1
003216  003494  // Usage : disp_BlitPixelsFromCOM0();
003217  003495  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
003218  003496  //       : display from the specified com port.
003219  003497        
003220  003498  func __reserved42(), 0; // do not remove
003221  003499        
003222  003500        
003223  003501  //------------------------------------------------------------------//
003224  003502  //        Image Control Function Prototypes                         //
003225  003503  //------------------------------------------------------------------//
003226  003504  func img_SetPosition("handle", "index", "xpos", "ypos"), 1;
003227  003505  // Syntax: img_SetPosition(handle, index, xpos, ypos);
003228  003506  // Usage : r := img_SetPosition(hImageList, imagenum, x, y);
003229  003507  // Notes : set the position where the image will be displayed
003230  003508  //       : returns true if index was ok and function was successful.
003231  003509  //       : you may turn off an image so when img_Refresh is called,
003232  003510  //       : the image will not be shown
003233  003511        
003234  003512  func img_Enable("handle", "index"), 1;
003235  003513  // Syntax: img_Enable(handle, index);
003236  003514  // Usage : r := img_Enable(hImageList, imagenum);
003237  003515  // Notes : enable image in a image list
003238  003516  //       : returns true if index was ok and function was successful.
003239  003517  //       : this is the default state so when img_Refresh is called,
003240  003518  //       : all the images in the list will be shown
003241  003519  //       : if index is set to -1, all of the images are enabled
003242  003520        
003243  003521  func img_Disable("handle", "index"), 1;
003244  003522  // Syntax: img_Disable(handle, index);
003245  003523  // Usage : r := img_Disable(hImageList, imagenum);
003246  003524  // Notes : disable image in a image list
003247  003525  //       : returns true if index was ok and function was successful.
003248  003526  //       : you must turn off an image so when img_Refresh is called,
003249  003527  //       : the image will not be shown.
003250  003528  //       : if index is set to -1, all of the images are disabled
003251  003529        
003252  003530        
003253  003531  func img_Darken("handle", "index"), 1;
003254  003532  // Syntax: img_Darken(handle, index);
003255  003533  // Usage : r := img_Darken(hImageList, imagenum);
003256  003534  // Notes : darken image in a image list
003257  003535  //       : returns true if index was ok and function was successful.
003258  003536  //       : if index is set to -1, all of the images are darkened
003259  003537  //       : NB:- this feature will only work for the next refresh, then
003260  003538  //       : the image reverts back to normal when displayed again.
003261  003539        
003262  003540        
003263  003541  func img_Lighten("handle", "index"), 1;
003264  003542  // Syntax: img_Lighten(handle, index);
003265  003543  // Usage : r := img_Lighten(hImageList, imagenum);
003266  003544  // Notes : lighten image in a image list
003267  003545  //       : returns true if index was ok and function was successful.
003268  003546  //       : if index is set to -1, all of the images are lightened
003269  003547  //       : NB:- this feature will only work for the next refresh, then
003270  003548  //       : the image reverts back to normal when displayed again.
003271  003549        
003272  003550  func img_SetWord("handle", "index", "offset", "word"), 1;
003273  003551  // Syntax: img_SetWord(handle, index, offset, word);
003274  003552  // Usage : img_SetWord(hndl, 5, IMAGE_XPOS, 10);
003275  003553  // Notes : set specified word (0-7) in a image entry
003276  003554  //       : returns TRUE if successful, return value usually ignored.
003277  003555        
003278  003556  func img_GetWord("handle", "index", "offset"), 1;
003279  003557  // Syntax: myvar := img_GetWord("handle", "index", "offset");
003280  003558  // Usage : myvar := img_GetWord(hndl, 5, IMAGE_YPOS);
003281  003559  // Notes : returns specified word (0-14) from an image entry
003282  003560  //       : refer to image control entry offsets.
003283  003561        
003284  003562  func img_Show("handle", "index"), 1;
003285  003563  // Syntax: img_Show(handle, index);
003286  003564  // Usage : display image entry (regardless of enable/disable)
003287  003565  //       : returns TRUE if successful, return value usually ignored.
003288  003566        
003289  003567  func img_SetAttributes("handle", "index","value"), 1;
003290  003568  // Syntax: img_SetAttributes("handle", "index","offset");
003291  003569  // Usage : img_SetAttributes(hndl, 5, I_TOPMOST);
003292  003570  // Notes : This function SETS one or more bits in the IMAGE_FLAGS field
003293  003571  //       : of an image control entry. "value" refers to various bits in
003294  003572  //       : the image control entry (see image attribute flags).
003295  003573  //       : A '1' bit in the "value" field SETS the respective bit
003296  003574  //       : in the IMAGE_FLAGS field of the image control entry.
003297  003575  //       : returns TRUE if successful, return value usually ignored.
003298  003576        
003299  003577  func img_ClearAttributes("handle", "index","value"), 1;
003300  003578  // Syntax: img_ClearAttributes("handle", "index","offset");
003301  003579  // Usage : img_ClearAttributes(hndl, 5, I_TOPMOST);
003302  003580  // Notes : This function CLEARS one or more bits in the IMAGE_FLAGS field
003303  003581  //       : of an image control entry. "value" refers to various bits in
003304  003582  //       : the image control entry (see image attribute flags)
003305  003583  //       : a '1' bit in the "value" field CLEARS the respective bit
003306  003584  //       : in the IMAGE_FLAGS field of the image control entry.
003307  003585  //       : returns TRUE if successful, return value usually ignored.
003308  003586        
003309  003587  func img_Touched("handle", "index"), 1;
003310  003588  // Syntax: r := img_Touched(handle, index);
003311  003589  // Usage : img_Touched(hndl, 17);
003312  003590  //       : returns -1 if image not touched, or returns index
003313  003591  // Notes : if index is passed as -1, function tests all images,
003314  003592  //       : and returns -1 if image not touched, or returns index.
003315  003593        
003316  003594        
003317  003595  func img_SelectReadPosition("handle", "index", "frame", "x", "y"), 1;
003318  003596  // Syntax: img_SelectReadPosition(handle, index, frame, xpos, ypos);
003319  003597  // Usage : r := img_SelectReadPosition(hImageList, imagenum, frame, x, y);
003320  003598  // Notes : set a position in an image control for sequential reading
003321  003599  //       : of pixels from the uSD card (fat16 or raw modes supported)
003322  003600  //       : No image window area is set, the image will not be shown
003323  003601  //       : This function provides a means of preparing to load an image,
003324  003602  //       : or part of an image, to an array. (see img_SequentialRead)
003325  003603  //Returns: returns true if index was ok and function was successful.
003326  003604        
003327  003605        
003328  003606  func img_SequentialRead("count", "ptr"), 1;  // read pixels from selected read position of an image
003329  003607  // Syntax: img_SequentialRead(count, ptr);
003330  003608  // Usage1: r := img_SequentialRead(imgwidth, myArray);    // read 1 line from image control to array
003331  003609  // Usage2: r := img_SequentialRead(123, 0);            // skip 123 words from sequential stream
003332  003610  // Usage3: r := img_SequentialRead(20, 1);            // write 20 pixels to current GRAM position from stream
003333  003611  // Notes : once a position has ben set with the img_SelectReadPosition function,
003334  003612  //       : this function can then used for sequential reading of pixels from
003335  003613  //       : image storage.
003336  003614  //       : if "ptr" is 0, "count" pixels from the stream are simply skipped.
003337  003615  //       : if "ptr" is 1, "count" pixels are written to the GRAM area,
003338  003616  //       : else "ptr" must point to a valid array that is at least
003339  003617  //       : the size of "count".
003340  003618  //       : or part of an image, to an array. (see img_SequentialRead)
003341  003619  //       : returns TRUE if function succeded.
003342  003620        
003343  003621  func __reserved43(), 0; // do not remove
003344  003622  func __reserved44(), 0; // do not remove
003345  003623  func __reserved45(), 0; // do not remove
003346  003624  func __reserved46(), 0; // do not remove
003347  003625        
003348  003626  // image control header offsets
003349  003627  #CONST
003350  003634  #END
003351  003635        
003352  003636  // image control entry offsets
003353  003637  #CONST
003354  003652  #END
003355  003653        
003356  003654  // image attribute flags (in IMAGE_FLAGS)
003357  003655  // for img_SetAttributes(...) and img_ClearAttributes(...)
003358  003656  #CONST
003359  003670  #END
003360  003671        
003361  003672        
003362  003673  //------------------------------------------------------------------//
003363  003674  //        Timer Function Prototypes
003364  003675  //------------------------------------------------------------------//
003365  003676  func sys_T(), 1;
003366  003677  // Syntax: sys_T();
003367  003678  // Usage : t := sys_T();
003368  003679  // Notes : return the current value of the rolling system timer (1msec) LO word
003369  003680        
003370  003681  func sys_T_HI(), 1;
003371  003682  // Syntax: sys_T_HI();
003372  003683  // Usage : t := sys_T_HI();
003373  003684  // Notes : return the current value of the rolling system timer (1msec) HI word
003374  003685        
003375  003686  func sys_SetTimer("timernum","value"), 0;
003376  003687  // Syntax: sys_SetTimer("timernum", "value");
003377  003688  // Usage : sys_SetTimer(TIMER5, 10000);
003378  003689  // Notes : set a countdown on the selected timer, or 'top up' if required.
003379  003690  //       : There ar 8 timers TIMER0 to TIMER7 which stop at the count of 0
003380  003691  //       : Maximum timeout period is 65.535 seconds
003381  003692  //       : A timer can be read with the sys_GetTimer("timernum") function
003382  003693        
003383  003694  func sys_GetTimer("timernum"), 1;
003384  003695  // Syntax: t := sys_GetTimer("timernum");
003385  003696  // Usage : t := sys_GetTimer(TIMER3);
003386  003697  // Notes : returns 0 if timer has expired, or the current countdown value.
003387  003698  //       : There ar 8 timers TIMER0 to TIMER7 which stop at the count of 0
003388  003699  //       : Maximum timeout period is 65.535 seconds
003389  003700  //       : A timer must be set with the sys_SetTimer("timernum","value") function
003390  003701        
003391  003702  func sys_SetTimerEvent("timernum","function"), 1;
003392  003703  // Syntax: sys_SetTimerFunction("timernum", "function");
003393  003704  // Usage : sys_SetTimer(TIMER5, myfunc);
003394  003705  // Notes : set a function to be called for selected timer.
003395  003706  //       : When the timer reaches zero, the function is called.
003396  003707  //       : The called function must not have any parameters
003397  003708  //       : sys_SetTimerEvent returns any previous event function
003398  003709  //       : address, or zero if there was no previous function.
003399  003710        
003400  003711  func sys_EventQueue(), 1;
003401  003712  // Syntax: sys_EventQueue();
003402  003713  // Usage : tasks := sys_EventQueue();
003403  003714  // Notes : returns the max number of events that were pending
003404  003715  //       : in the timer queue since the last call to this function.
003405  003716  //       : This can be used to assess timer event overhead burden,
003406  003717  //       : especially after or during a sys_EventsPostpone action.
003407  003718        
003408  003719  func sys_EventsPostpone(), 0;
003409  003720  // Syntax: sys_EventPostpone();
003410  003721  // Usage : sys_EventPostpone();   // postpone the event queue
003411  003722  // Notes : postpone any events until the sys_EventResume function is executed
003412  003723  //       : The timer event queue will continue to queue events, but no action
003413  003724  //       : will take place untill a sys_EventResume function is encountered.
003414  003725  //       : The queue will continue to receive up to 32 events before discarding
003415  003726  //       : any further events. This function is required to allow a sequence of
003416  003727  //       : instructions or functions to occur that would otherwise be corrupted
003417  003728  //       : by an event occuring during the sequence of instructions or functions.
003418  003729  //       : A good example of this is when you set a position to print, if there
003419  003730  //       : was no way of locking the current sequence, an event may occur which
003420  003731  //       : does a similar thing, and a contention would occur - printing to
003421  003732  //       : the wrong position. This function should be used wisely, if any action
003422  003733  //       : that is required would take considerable time, it is better to disable
003423  003734  //       : any conflicting event functions with a bypass flag, then restart the
003424  003735  //       : conflicting event by re-issuing a timer value.
003425  003736        
003426  003737  func sys_EventsResume(), 0;
003427  003738  // Syntax: sys_EventsResume();
003428  003739  // Usage : sys_EventsResume();   // resume the event queue
003429  003740  // Notes : resume any postponed events. The queue will try to execute any timer
003430  003741  //       : events that were incurred during the postponed period.
003431  003742        
003432  003743        
003433  003744  func sys_GetTime(), 0;
003434  003745  // Syntax: sys_GetTime();
003435  003746  // Usage : to(mystring); sys_GetTime();   // save current time string to buffer
003436  003747  // Notes : print the system time in the format eg "6:10:45"
003437  003748  //       : Can be captured to a buffer using the to( function
003438  003749  //       : Returns nothing.
003439  003750        
003440  003751  func sys_SetTime("hours", "mins", "secs"), 1;
003441  003752  // Syntax: sys_SetTime(h, m, s);
003442  003753  // Usage : sys_SetTime(10, 0, 0);   // set the system time
003443  003754  // Notes : Used to set clock to correct time after power up or suspension
003444  003755  //Returns: Returns true if valid time.
003445  003756        
003446  003757  func sys_GetDate(), 0;
003447  003758  // Syntax: sys_GetDate();
003448  003759  // Usage : to(mystring); sys_GetDate();   // save current time string to buffer
003449  003760  // Notes : print the system date in the format eg "25-09-2012"
003450  003761  //       : Can be captured to a buffer using the to( function
003451  003762  //       : Returns nothing.
003452  003763        
003453  003764  func sys_SetDate("year", "month", "day"), 1;
003454  003765  // Syntax: sys_SetDate(y, m, d);
003455  003766  // Usage : sys_SetDate(10, 0, 0);   // set the system time
003456  003767  // Notes : Used to set clock to correct date after power up or suspension
003457  003768  //Returns: Returns true if valid date.
003458  003769        
003459  003770  func sys_Sleep("units"), 1;
003460  003771  // Syntax: t := sys_Sleep("units");
003461  003772  // Usage : t := sys_Sleep(10);
003462  003773  // Notes : sets the display into low power mode for a period of time.
003463  003774  //       : Touching the touch screen will also wake from sleep.
003464  003775  //       : as will bus Change Interrupts.
003465  003776  //       : Returns remaining sleep units.
003466  003777        
003467  003778  func iterator("offset"), 0;
003468  003779  // Syntax: t :=  iterator("offset");
003469  003780  // Usage : t :=  iterator(10);
003470  003781  // Notes : set the iterator size for ++/--
003471  003782  //       : The next postinc,postdec,preinc of predec will alter
003472  003783  //       : by the specified value.
003473  003784  //       : The offset will return to 1 after the next operation.
003474  003785        
003475  003786  func sys_DeepSleep("units"), 1;               // put the module into its lowest power consumption mode. New in v0.7
003476  003787  // Syntax: t := sys_DeepSleep("units");    New in v0.7
003477  003788  // Usage : t := sys_DeepSleep(10);
003478  003789  // Notes : sets the display and processor into lowest power mode for a period of time.
003479  003790  //       : When returning from DeepSleep the display should be reinitialised
003480  003791  //       : with disp_Init().
003481  003792  //       : Touching the touch screen will also wake from sleep.
003482  003793  //       : Returns remaining sleep units.
003483  003794        
003484  003795  //------------------------------------------------------------------//
003485  003796  //         Touch Screen Function Prototypes
003486  003797  //------------------------------------------------------------------//
003487  003798        
003488  003799  func touch_DetectRegion("x1" ,"y1", "x2", "y2"), 0;
003489  003800  // Syntax: touch_DetectRegion(x1, y1, x2, y2);
003490  003801  // Usage : touch_DetectRegion(arg1, arg2, arg3, arg4);
003491  003802  // Notes : Specifies a new touch detect region on the screen
003492  003803  //       : such that only touch activity in that region will
003493  003804  //       : be reported by the status poll touch_Get(TOUCH_STATUS);
003494  003805        
003495  003806  func touch_Set("mode"), 0;
003496  003807  // Syntax: touch_Set(mode);
003497  003808  // Usage : touch_Set(arg);
003498  003809  // Notes : Sets various Touch Screen related parameters
003499  003810  //       :
003500  003811  //       : mode = TOUCH_ENABLE (mode 0)  Enable Touch Screen
003501  003812  //       : touch_Set(TOUCH_ENABLE);
003502  003813  //       : Enables and initialises Touch Screen hardware
003503  003814  //       :
003504  003815  //       : mode = TOUCH_DISABLE (mode 1)  Disable Touch Screen
003505  003816  //       : touch_Set(TOUCH_DISABLE );
003506  003817  //       : Disables the Touch Screen
003507  003818  //       : Note: Touch Screen runs in the background and disabling
003508  003819  //       : it when not in use will free up extra resources
003509  003820  //       : such as 4DVM CPU cycles.
003510  003821  //       :
003511  003822  //       : mode = TOUCH_REGIONDEFAULT (mode 2)  Default Touch Region
003512  003823  //       : touch_Set(TOUCH_REGIONDEFAULT);
003513  003824  //       : This will reset the current active region to default
003514  003825  //       : to the full screen without the application having to
003515  003826  //       : set a new active region for the full screen.
003516  003827  //       : (NB for 'no touch' devices - like uVGAII or OLED's/LCD's
003517  003828  //       : that requre to be interfaced with an external pointing
003518  003829  //       : device, values that are poked into TOUCH_DRIVE will be
003519  003830  //       : read with the touch_Get() function)
003520  003831        
003521  003832        
003522  003833  func touch_Get("mode"), 1;
003523  003834  // Syntax: touch_Get(mode);
003524  003835  // Usage : arg1 := touch_Get(arg);
003525  003836  // Notes : Returns various Touch Screen parameters to caller
003526  003837  //       :
003527  003838  //       : mode = TOUCH_STATUS  (mode 0)
003528  003839  //       : var := touch_Get(TOUCH_STATUS);
003529  003840  //       : Returns the various states of the touch screen
003530  003841  //       : 0 = NOTOUCH
003531  003842  //       : 1 = TOUCH_PRESSED
003532  003843  //       : 2 = TOUCH_RELEASED
003533  003844  //       : 3 = TOUCH_MOVING
003534  003845  //       :
003535  003846  //       : mode = TOUCH_GETX   (mode 1)
003536  003847  //       : var := touch_Get(TOUCH_GETX);
003537  003848  //       : Returns the X coordinates of the touch
003538  003849  //       :
003539  003850  //       : mode = TOUCH_GETY   (mode 2)
003540  003851  //       : var := touch_Get(TOUCH_GETY);
003541  003852  //       : Returns the Y coordinates of the touch
003542  003853        
003543  003854        
003544  003855  //touch_Set() related constants
003545  003856  #CONST
003546  003860  #END
003547  003861        
003548  003862  //touch_Get() related constants
003549  003863  #CONST
003550  003871  #END
003551  003872        
003552  003873  func touch_TestBox("&rect"), 1;
003553  003874  // Syntax   : touch_Test(rect);
003554  003875  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=20; r[3]:=30;
003555  003876  //          : result := touch_Test(r); // check area at 100,200,119,229
003556  003877  // Notes    : rect is an array of 4 vars, x1, y1, width, height (using boxed co-ordinates)
003557  003878  // returns  : Returns true if last touch co-ordinates are within the boxed test area.
003558  003879        
003559  003880  func touch_TestArea("&rect"), 1;
003560  003881  // Syntax   : touch_Test(rect);
003561  003882  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=119; r[3]:=129;
003562  003883  //          : result := touch_Test(r); // check area at 100,200,119,229
003563  003884  // Notes    : rect is an array of 4 vars, x1, y1, x2, y2 (using absolute co-ordinates)
003564  003885  // returns  : Returns true if last touch co-ordinates are within the absolute co-ordinate test area.
003565  003886        
003566  003887        
003567  003888  func __reserved51(), 0; // do not remove
003568  003889  func __reserved52(), 0; // do not remove
003569  003890        
003570  003891  //------------------------------------------------------------------//
003571  003892  //        Memory Allocation Function Prototypes
003572  003893  //------------------------------------------------------------------//
003573  003894        
003574  003895  func mem_Alloc("size"), 1;
003575  003896  // Syntax: mem_Alloc(bytesize);
003576  003897  // Usage : myvar := mem_Alloc(100);
003577  003898  // Notes : Allocate a block of memory to pointer myvar
003578  003899  //       : The allocated memory contains garbage but is a fast allocation.
003579  003900  //       : The block must later be released with mem_Free();
003580  003901  //       : returns 0 if function fails
003581  003902        
003582  003903  func mem_AllocV("size"), 1;
003583  003904  // Syntax: mem_AllocV(bytesize);
003584  003905  // Usage : myvar := mem_AllocV(100);
003585  003906  // Notes : Allocate a block of memory to pointer myvar
003586  003907  //       : The block of memory is filled with signature values
003587  003908  //       : the block starts with A5,5A then fills with incrementing
003588  003909  //       : number eg:- A5,5A,00,01,02,03...FF,00,11....
003589  003910  //       : This can be helpful when debugging
003590  003911  //       : The block must later be released with mem_Free();
003591  003912  //       : returns 0 if function fails
003592  003913        
003593  003914  func mem_AllocZ("size"), 1;
003594  003915  // Syntax: mem_AllocZ(bytesize);
003595  003916  // Usage : myvar := mem_AllocC(100);
003596  003917  // Notes : Allocate a zeroed block of memory to pointer myvar
003597  003918  //       : The block of memory is filled with zeroes
003598  003919  //       : The block must later be released with mem_Free();
003599  003920  //       : returns 0 if function fails
003600  003921        
003601  003922  func mem_Realloc("ptr", "size"), 1;
003602  003923  // Syntax: myvar := mem_Realloc("ptr", "size");
003603  003924  // Usage : myvar := mem_Realloc(ptr, size);
003604  003925  // Notes : The function may move the memory block to a new location,
003605  003926  //       : in which case the new location is returned.
003606  003927  //       : The content of the memory block is preserved up to the lesser
003607  003928  //       : of the new and old sizes, even if the block is moved.
003608  003929  //       : If the new size is larger, the value of the newly allocated
003609  003930  //       : portion is indeterminate. In case that ptr is NULL,
003610  003931  //       : the function behaves exactly as mem_Alloc, assigning a new block
003611  003932  //       : of size bytes and returning a pointer to the beginning of it.
003612  003933  //       : In case that the size is 0, the memory previously allocated in
003613  003934  //       : ptr is deallocated as if a call to mem_Free()was made, and a NULL
003614  003935  //       : pointer is returned.
003615  003936        
003616  003937  func mem_Free("allocation"), 1;
003617  003938  // Syntax: myvar := mem_Free(allocation);
003618  003939  // Usage : myvar := mem_Free(myvar);
003619  003940  // Notes : De-allocate a block of memory previously created with
003620  003941  //       : mem_Alloc(...), mem_AllocV(...); or mem_AllocZ(...);
003621  003942  //       : returns 0 if function fails
003622  003943        
003623  003944  func mem_Heap(), 1;
003624  003945  // Syntax: myvar := mem_Heap();
003625  003946  // Usage : myvar := mem_Heap();
003626  003947  // Notes : returns bytecount available in heap
003627  003948  //       :
003628  003949        
003629  003950  func mem_Set("ptr","char","size"), 1;
003630  003951  // Syntax: mem_Set(ptr,char,bytesize);
003631  003952  // Usage : mem_Set(p, 'A', 100);
003632  003953  // Notes : fill a block of memory with a byte value
003633  003954  //       : Note that count is a byte count, this facilitates
003634  003955  //       : clearing word aligned byte arrays when using word
003635  003956  //       : aligned packed strings.
003636  003957  //       : returns ptr
003637  003958        
003638  003959  func mem_Copy("src", "dest", "bytecount"), 1;
003639  003960  // Syntax: myvar := mem_Copy(src, dest, bytesize);
003640  003961  // Usage : myvar := mem_Copy(p1, p2, 100);
003641  003962  // Notes : copy a word aligned block of memory from src to dest
003642  003963  //       : Note that count is a byte count, this facilitates
003643  003964  //       : copying word aligned byte arrays when using word
003644  003965  //       : aligned packed strings.
003645  003966  //       : returns src
003646  003967        
003647  003968  func mem_Compare("ptr1","ptr2","count"), 1;
003648  003969  // Syntax: myvar := mem_Compare(ptr1,ptr2,bytesize);
003649  003970  // Usage : myvar := mem_Compare(p1, p2, 100);
003650  003971  // Notes : compare word aligned blocks of memory at src, dest
003651  003972  //       : Note that count is a byte count, this facilitates
003652  003973  //       : comparing word aligned byte arrays when using word
003653  003974  //       : aligned packed strings.
003654  003975  //       : returns 0 if we have a match
003655  003976        
003656  003977  func __reserved53(), 0; // do not remove
003657  003978  func __reserved54(), 0; // do not remove
003658  003979        
003659  003980  //------------------------------------------------------------------//
003660  003981  //        FAT16 Function Prototypes
003661  003982  //------------------------------------------------------------------//
003662  003983        
003663  003984  func file_Error(), 1;
003664  003985  // Syntax: myvar := file_Error();
003665  003986  // Usage : e := file_Error();
003666  003987  // Notes : return the most recent file error.
003667  003988  //       :
003668  003989        
003669  003990  func file_Count("filename"), 1;
003670  003991  // Syntax: count := file_Count("filename");
003671  003992  // Usage : count := file_Count("*.4dg");
003672  003993  // Notes : returns number of files found that match the criteria
003673  003994        
003674  003995  func file_Dir("filename"), 1;
003675  003996  // Syntax: count := file_Dir("filename");
003676  003997  // Usage : count := file_Dir("*.4dg");
003677  003998  // Notes : streams a string of filenames that agree with the search key
003678  003999  //       : returns number of files found that match the criteria
003679  004000        
003680  004001  func file_FindFirst("fname"), 1;
003681  004002  // Syntax: res := file_FindFirst("fname");
003682  004003  // Usage : if (file_FindFirst("*.4xe") ....
003683  004004  // Notes : returns true if at least 1 file exists
003684  004005  //       : that satisfies the file argument.
003685  004006  //       : Wildcards are usually used so if
003686  004007  //       : file_FindFirst returns true, further
003687  004008  //       : tests can be made using file_FindNext();
003688  004009  //       : to find all the files that match the
003689  004010  //       : wildcard class. Note that the stream behaviour
003690  004011  //       : is the same as file_Dir.
003691  004012  //       :
003692  004013        
003693  004014  func file_FindNext(), 1;
003694  004015  // Syntax: res := file_FindNext();
003695  004016  // Usage : while ((file_FindNext()) ....
003696  004017  // Notes : returns true if more file exists
003697  004018  //       : that satisfies the file argument
003698  004019  //       : that was given for  file_FindFirst.
003699  004020  //       : Wildcards must be used for
003700  004021  //       : file_FindFirst, else this function will
003701  004022  //       : always return zero as the only occurence
003702  004023  //       : will have already been found.
003703  004024  //       : Note that the stream behaviour
003704  004025  //       : is the same as file_Dir.
003705  004026  //       :
003706  004027        
003707  004028  func file_Exists("fname"), 1;
003708  004029  // Syntax: res := file_Exists("fname"),
003709  004030  // Usage : if(file_Exists("myfile") ....
003710  004031  // Notes : returns true if file exists
003711  004032  //       :
003712  004033        
003713  004034  func file_Open("fname", "mode"), 1;
003714  004035  // Syntax: handle := file_Open("fname","mode"),
003715  004036  // Usage : handle := file_Open("myfile.txt", 'r');
003716  004037  // Notes : returns handle if file exists
003717  004038  //       :
003718  004039        
003719  004040  func file_Close("handle"), 1;
003720  004041  // Syntax: res := file_Close("handle");
003721  004042  // Usage : res := file_Close(hnd1);
003722  004043  // Notes : returns true if file closed ok
003723  004044  //       :
003724  004045        
003725  004046  func file_Read("*dest", "size", "handle"), 1;
003726  004047  // Syntax: res := file_Read("*dest", "size", "handle"),
003727  004048  // Usage : res := file_Read(memblock,20,hnd1);
003728  004049  // Notes : returns number of characters read
003729  004050  //       : if "dest" is zero, data is read direct to GRAM window
003730  004051  //       :
003731  004052        
003732  004053        
003733  004054  func file_Seek("handle", "HiWord", "LoWord"), 1;
003734  004055  // Syntax: res := file_Seek("handle", "HiWord", "LoWord")
003735  004056  // Usage : res := file_Seek(hSource, 0, 0x1234);
003736  004057  // Notes : set file position to 0x00001234 (byte position 4660)
003737  004058  //       : for the file handle so subsequent data may be read
003738  004059  //       : from that position onwards with file_GetC(...),
003739  004060  //       : file_GetW(...) or file_GetS(...), or an image
003740  004061  //       : can be displayed with file_Image(...)
003741  004062  // Notes : returns true if ok, usually ignored
003742  004063        
003743  004064  func file_Index("handle", "HiSize", "LoSize","recordnum"), 1;
003744  004065  // Syntax: file_Index("handle", "HiSize", "LoSize","recordnum"), 1;
003745  004066  // Usage : res := file_Index(hsource, 0, 1000, 123), 1;
003746  004067  // Notes : set file seek position to 123000
003747  004068  //       : for the file handle so subsequent data may be read
003748  004069  //       : from that record position onwards with file_GetC(...),
003749  004070  //       : file_GetW(...) or file_GetS(...), or an image
003750  004071  //       : can be displayed with file_Image(...)
003751  004072  // Notes : returns true if ok, usually ignored
003752  004073        
003753  004074  func file_Tell("handle", "&HiWord", "&LoWord"), 1;
003754  004075  // Syntax: file_Tell("handle", &HiWord, &LoWord);
003755  004076  // Usage : file_Tell(fhndl, &SizeHi, &SizeLo);
003756  004077  // Notes : Reads the 32 bit file pointer and stores it into 2 variables.
003757  004078  //       : returns true if function succeeded
003758  004079        
003759  004080  func file_Write("*source", "size", "handle"), 1;
003760  004081  // Syntax: res := fwrite("*source", "size", "handle"),
003761  004082  // Usage : res := fwrite(memblock, 20, hnd1);
003762  004083  // Notes : returns number of bytes written
003763  004084  //       :
003764  004085        
003765  004086  func file_Size("handle", "&HiWord", "&LoWord"), 1;
003766  004087  // Syntax: file_Size("handle", &HiWord, &LoWord);
003767  004088  // Usage : file_Size(fhndl, &SizeHi, &SizeLo);
003768  004089  // Notes : Reads the 32 bit file size and stores it into 2 variables.
003769  004090  //       : returns true if function succeeded
003770  004091        
003771  004092  func file_Image("x", "y", "handle"), 1;
003772  004093  // Syntax: file_Image(x, y, handle);
003773  004094  // Usage : file_Image(10, 10, hnd1);
003774  004095  // Notes : Display an image from a file at the current file position.
003775  004096  //       : The image is displayed at x,y (with respect to top left corner).
003776  004097  //       : If there is more than 1 image in the file, it can be
003777  004098  //       : accessed with file_Seek(...)
003778  004099        
003779  004100  func file_ScreenCapture("x", "y", "width", "height", "handle"), 1;
003780  004101  // Syntax: file_ScreenCapture(x, y, w, h, handle);
003781  004102  // Usage : file_ScreenCapture(10, 10, 50,50, hnd1);
003782  004103  // Notes : Save a image from screen to file at the current file position.
003783  004104  //       : The image can later be displayed with file_Image(...);
003784  004105  //       : The file may be opened in append mode to accumulate multiple
003785  004106  //       : images. Later, the images can be accessed with file_Seek(...);
003786  004107  //       : Note that the image will be sector aligned.
003787  004108  //       : All image headers must start on a sector boundary.
003788  004109  //       : The image is saved from x, y (with respect to top left corner)
003789  004110  //       : and the capture area is determined by "width" and "height".
003790  004111  //       : returns 0 if function succeeded
003791  004112        
003792  004113  func file_PutC("char","handle"), 1;
003793  004114  // Syntax: file_PutC("char", "handle");
003794  004115  // Usage : file_PutC('x', hndl);
003795  004116  // Notes : returns true if function succeeded
003796  004117        
003797  004118  func file_GetC("handle"), 1;
003798  004119  // Syntax: file_GetC("handle");
003799  004120  // Usage : mychar := fgetC("handle");
003800  004121  // Notes : returns next char from file
003801  004122        
003802  004123  func file_PutW("word","handle"), 1;
003803  004124  // Syntax: file_PutW("word","handle");
003804  004125  // Usage : file_PutW(0x1234, hndl);
003805  004126  // Notes : returns true if function succeeded
003806  004127        
003807  004128  func file_GetW("handle"), 1;
003808  004129  // Syntax: file_GetW("handle");
003809  004130  // Usage : myword := fgetW("handle");
003810  004131  // Notes : returns next word in file
003811  004132        
003812  004133  func file_PutS("*source", "handle"), 1;
003813  004134  // Syntax: res := file_Puts("*source", "handle"),
003814  004135  // Usage : res := file_Puts(mystring, hnd1);
003815  004136  // Notes : returns number of characters written
003816  004137  //       :
003817  004138        
003818  004139  func file_GetS("*string", "size", "handle"), 1;
003819  004140  // Syntax: res := file_Gets("*string", "size", "handle");
003820  004141  // Usage : res := file_Gets(mystr , 81, hnd1); // read up to 80 chars
003821  004142  // Notes : get a string from a file
003822  004143  //       : returns pointer to string or null if failed.
003823  004144  //       : file_GetS(...) automatically appends a null-terminator to the data read.
003824  004145  //       : NB:- only reads up to "size-1" characters into "string"
003825  004146  //       : file_GetS(...) will stop reading when any of the following conditions are true:
003826  004147  //       : A] It has read n-1 bytes (one character is reserved for the null-terminator)
003827  004148  //       : B] It encounters a newline character (a line-feed in the compilers tested here), or
003828  004149  //       : C] It reaches the end of file
003829  004150  //       : D] A read error occurs.
003830  004151        
003831  004152        
003832  004153  func file_Erase("fname"), 1;
003833  004154  // Syntax: res := file_Erase("fname");
003834  004155  // Usage : res := file_Erase("myfile.txt");
003835  004156  // Notes : returns true if successful
003836  004157  //       :
003837  004158        
003838  004159  func file_Rewind("handle"), 1;
003839  004160  // Syntax: res := file_Rewind("handle");
003840  004161  // Usage : res := file_Rewind(hnd1);
003841  004162  // Notes : returns true if file rewound ok (usually ignored)
003842  004163  //       : resets the file pointer the the beginning of the open file.
003843  004164        
003844  004165  func file_LoadFunction("fname.4xe"), 1;
003845  004166  // Syntax: res := file_LoadFunction("fname.4fn");
003846  004167  // Usage : myfunc := file_LoadFunction(myfuncname);
003847  004168  // Notes : Load a function or program from disk and
003848  004169  //       : return a function pointer to the allocation.
003849  004170  //       : The function can then be invoked just like any other
003850  004171  //       : function would be called via a function pointer.
003851  004172  //       : Parameters may be passed to it in a conventional way.
003852  004173  //       : The function may be discarded at any time when no
003853  004174  //       : longer required, thus freeing its memory resources.
003854  004175  //       : The loaded function can be discarded with mem_Free(..)
003855  004176  //       : eg:
003856  004177  //       : popupWindow := file_LoadFunction("popupWindow1.4fn");
003857  004178  //       : if(!popupWindow) goto LoadFunctionFailed; // could not load the function !!!
003858  004179  //       : then elsewhere in your program:-
003859  004180  //       : res := popupWindow(MYMODE,"My Title","My Popup Text");
003860  004181  //       : if(res == QUIT_APPLICATION) goto exitApp;
003861  004182  //       : Later in your program, when popupWindow is no longer
003862  004183  //       : required for the application:-
003863  004184  //       : res := mem_Free(popupWindow);
003864  004185  //       : if(!res) goto FreeFunctionFailed; // should never happen if memory not corrupted
003865  004186  //       : The callers stack is shared by the loaded function,
003866  004187  //       : however any global variables in the loaded function
003867  004188  //       : are private to that function.
003868  004189  //
003869  004190        
003870  004191  func file_Run("fname.4xe", "arglistptr"), 1;
003871  004192  // Syntax: res := file_Run("fname.4xe","arglistptr");
003872  004193  // Usage : res := file_Run(fname, argptr);
003873  004194  // Notes : current program releases any allocated memory but
003874  004195  //       : retains the stack and global memory.
003875  004196  //       : If arglistptr is 0, no arguments are passed, else
003876  004197  //       : arglist points to an array, the first element being
003877  004198  //       : the number of elements in the array.
003878  004199  //       : func 'main' in the called program accepts
003879  004200  //       : the arguments, if any. The arguments can only
003880  004201  //       : be passed by value, no pointers or references can be
003881  004202  //       : used as all memory is cleared before the file
003882  004203  //       : is loaded. Refer to file_Exec and file_LoadFunction
003883  004204  //       : for functions that can pass by reference.
003884  004205        
003885  004206  func file_Exec("fname.4xe", "arglistptr"), 1;
003886  004207  // Syntax: res := file_Exec("fname.4xe","arglistptr");
003887  004208  // Usage : res := file_Exec("fname.4xe","arglistptr");
003888  004209  // Notes : returns like a function, current program
003889  004210  //       : calling program is kept active and control returns to it.
003890  004211  //       : If arglistptr is 0, no arguments are passed, else
003891  004212  //       : arglist points to an array, the first element being
003892  004213  //       : the number of elements in the array.
003893  004214  //       : func 'main' in the called program accepts the arguments.
003894  004215  //       : This function is similar to file_LoadFunction(...), however,
003895  004216  //       : the function argument list is passed by pointer, and
003896  004217  //       : the memory consumed by the function is released as
003897  004218  //       : soon as the function completes.
003898  004219        
003899  004220  func file_LoadImageControl("fname1", "fname2", "mode"), 1;
003900  004221  // Syntax: hImagelist := file_LoadImageControl ("controlfile", "imagefile", "mode"),
003901  004222  // Usage : hImagelist := file_LoadImageControl ("resource.dat", "resource.gci", 0);
003902  004223  // Notes : Reads a control file to create an image list.
003903  004224  //       : Returns NULL if function fails.
003904  004225  //       : Returns a handle (pointer to the memory allocation) to the
003905  004226  //       : image control list that has been created.
003906  004227  //       : "fname1" is the control list filename "*.dat"
003907  004228  //       : "fname2" is the image filename "*.gci"
003908  004229        
003909  004230  // Notes : This function Calculates the size of a chunk of memory required for
003910  004231  //       : a image list and populates it from the image control file ("*.dat")
003911  004232  //       : therefore, when imagelist is no longer required, you must de-allocate
003912  004233  //       : the image list memory by using eg:- mem_Free(hImagelist);
003913  004234  //       : to restore the heap.
003914  004235  //       :
003915  004236  //       : mode 0:- it is assumed that there is a graphics file with the
003916  004237  //       : file extension "fname2.gci". In this case, the images have been stored
003917  004238  //       : in a FAT16 file concurrently, and the offsets that ar derived from the
003918  004239  //       : "fname1.dat" file are saved in the image control so that the image control
003919  004240  //       : can open the file (*.gci) and us file_Seek to get to the position of the
003920  004241  //       : image which can then automatically be displayed using file_Image(xpos, ypos, hSource);
003921  004242  //       : mode 0 builds the image control quickly as it only scans the *.dat file
003922  004243  //       : for the file offsets and save them in the relevant entries in the image control.
003923  004244  //       : The penalty is that images take longer to find when displayed due to file_Seek
003924  004245  //       : overheads.
003925  004246  //
003926  004247  //       : mode 1:- it is assumed that there is a graphics file with the
003927  004248  //       : file extension "fname2.gci". In this case, the images have been stored
003928  004249  //       : in a FAT16 file concurrently, and the offset of the images are saved
003929  004250  //       : in the image control so that image file (*.gci) can be mapped to directly.
003930  004251  //       : The absolute cluster/sector is mapped so file seek does not need to be called
003931  004252  //       : internally. This means that there is no seek time penalty, however, the
003932  004253  //       : image list takes a lot longer to build, as all the seeking is done at control
003933  004254  //       : build time.
003934  004255        
003935  004256  //       : mode 2:- the graphics file with the is placed in a partitioned area
003936  004257  //       : In this case, the images have been stored in a in a known raw area of the FAT16
003937  004258  //       : disk, and the absolute address of the images are saved in the DAT file
003938  004259  //       : This is the fastest operation of the image control as there is no seeking
003939  004260  //       : or other disk activity taking place.
003940  004261        
003941  004262  func file_Mount(), 1;
003942  004263  // Syntax: r := file_Mount();
003943  004264  // Usage : r := file_Mount();
003944  004265  // Notes : Create a control block for FAT16 and mount the File System
003945  004266        
003946  004267  func file_Unmount(), 0;
003947  004268  // Syntax: file_Unmount();
003948  004269  // Usage : file_Unmount();
003949  004270  // Notes : release any control block and buffers for FAT16
003950  004271  //       : and unmount the File System
003951  004272        
003952  004273  func file_PlayWAV("fname1"), 1;
003953  004274  // Syntax: file_PlayWAV("fname1");
003954  004275  // Usage : file_PlayWAV("ding.wav");
003955  004276  // Notes : Play a wave file with filename "fname1"
003956  004277  //       : This function automatically grabs a chunk
003957  004278  //       : of memory for a file buffer, and a wave
003958  004279  //       : buffer. The minimum memory requirement is
003959  004280  //       : about 580 bytes for the disk io service and
003960  004281  //       : a minimum wave buffer size of 1024. The siz
003961  004282  //       : of the wave buffer allocation
003962  004283  //       : can be increased by the snd_BufSize function.
003963  004284  //       : The default size 1024 bytes.
003964  004285  //       : NB the memory is only required during the
003965  004286  //       : duration of play, and is automatically
003966  004287  //       : released while not in use.
003967  004288  //       : See the Sound Class services for other associated controls.
003968  004289  //       : If there are no errors, returns number of blocks to play (1 to 32767)
003969  004290  //       : If errors occured, the folling is returned
003970  004291  //       : -7  : Insufficient memory available for WAV buffer and file
003971  004292  //       : -6  : cant play this rate
003972  004293  //       : -5  : no data chunk found in first rsector
003973  004294  //       : -4  : no format data
003974  004295  //       : -3  : no wave chunk signature
003975  004296  //       : -2  : bad wave file format
003976  004297  //       : -1  : file not found
003977  004298        
003978  004299  func file_Rename("fname1", "fname2"), 1;     // rename a file
003979  004300  // Syntax: file_Rename ("oldname", "newname"),
003980  004301  // Usage : file_Rename ("file.txt", "file.bak");
003981  004302  // Notes : Renames a file on uSD.
003982  004303  //       : Returns FALSE if function fails. (file does not exist, or new filename already exists)
003983  004304  //       : Returns TRUE, if successful.
003984  004305        
003985  004306  func file_SetDate("handle", "year", "month", "day", "hour", "Minute", "Second") , 1; // Sets date and time for an open file
003986  004307  // Syntax: res := file_SetDate("handle", "year", "month", "day", "hour", "Minute", "Second) ;
003987  004308  // Usage : res := file_SetDate(hndl, 2014, 10, 31, 10, 0, 0)
003988  004309  // Notes : year is a 4 digit year
003989  004310  //       : Due to limitations of FAT16 only even seconds are stored
003990  004311  //       : The handle must be closed before the file information is updated
003991  004312  //       : returns TRUE if date + time + handle valid
003992  004313  //       : returns FLAST if handle invalid, or date or time not valid (only simple checking performed).
003993  004314        
003994  004315  func __reserved57(), 0; // do not remove
003995  004316  func __reserved58(), 0; // do not remove
003996  004317        
003997  004318        
003998  004319  //------------------------------------------------------------------------------
003999  004320  // FILEIO Error Code Constants
004000  004321  //------------------------------------------------------------------------------
004001  004322  #CONST
004002  004348  #END
004003  004349        
004004  004350  //------------------------------------------------------------------------------
004005  004351  // DISK struct offsets
004006  004352  //------------------------------------------------------------------------------
004007  004353  #CONST
004008  004370  #END
004009  004371        
004010  004372  //------------------------------------------------------------------------------
004011  004373  // FILE struct offsets
004012  004374  //------------------------------------------------------------------------------
004013  004375  #CONST
004014  004394  #END
004015  004395        
004016  004396        
004017  004397  //------------------------------------------------------------------//
004018  004398  //        Sound Class Services
004019  004399  //------------------------------------------------------------------//
004020  004400        
004021  004401  func snd_Volume("var"), 0;
004022  004402  // Syntax: snd_Volume("var");
004023  004403  // Usage : snd_Volume(30);
004024  004404  // Notes : set sound playback volume.  Var must
004025  004405  //       : be in the range from 8 (min volume)
004026  004406  //       : to 127 (max volume). If var is less
004027  004407  //       : than 8 volume is set to 8, and if
004028  004408  //       : var > 127 it is set to 127.
004029  004409        
004030  004410  func snd_Pitch("pitch"), 1;
004031  004411  // func snd_Pitch("freq"), 1;
004032  004412  // func snd_Pitch(7000), 1; // play the wave file with a sample frequency of 7khz
004033  004413  // Notes : sets the samples playback rate to a different frequency
004034  004414  //       : The minimum value is 4khz
004035  004415  //       : Setting the pitch to zero restores the original sample rate
004036  004416  //       : Return value is the samples original sample rate.
004037  004417        
004038  004418  func snd_BufSize("var"), 0;
004039  004419  // Syntax: snd_BufSize("var");
004040  004420  // Usage : snd_BufSize(2);
004041  004421  // Notes : specify the a memory chunk size for the wavefile buffer.
004042  004422  //       : default size 1024 bytes.
004043  004423  //       : 0 = 1024 bytes (default)
004044  004424  //       : 1 = 2048 bytes
004045  004425  //       : 2 = 4096 bytes
004046  004426  //       : 3 = 8192 bytes
004047  004427        
004048  004428  func snd_Stop(), 0;
004049  004429  // Syntax: snd_Stop();
004050  004430  // Usage : snd_Stop();
004051  004431  // Notes : stop any sound that is playing, releasing
004052  004432  //       : buffers and closes any open wav file.
004053  004433        
004054  004434  func snd_Pause(), 0;
004055  004435  // Syntax: snd_Pause();
004056  004436  // Usage : snd_Pause();
004057  004437  // Notes : pauses any sound that is playing, does nothing
004058  004438  //       : until sound is resumed with snd_Continue().
004059  004439  //       : The sample cam be terminated with snd_Stop.
004060  004440  //       : buffers and closes any open wav file.
004061  004441        
004062  004442  func snd_Continue(), 0;
004063  004443  // Syntax: snd_Continue();
004064  004444  // Usage : snd_Continue();
004065  004445  // Notes : resume any sound that is paused by snd_Pause.
004066  004446        
004067  004447  func snd_Playing(), 1;
004068  004448  // Syntax: snd_Playing();
004069  004449  // Usage : r := snd_Playing();
004070  004450  // Notes : returns 0 if sound has finished playing,
004071  004451  //       : else return number of 512 byte blocks to go.
004072  004452        
004073  004453  func snd_Freq("Freq", "Duration"), 1;
004074  004454  // Syntax: snd_Freq("Freq", "Duration");
004075  004455  // Usage : r := snd_Freq(1000, 2000);
004076  004456  // Notes : Returns 0 if note cannot be played because a wav file is playing
004077  004457  //       : else return True.
004078  004458  //       : Minimum Freq is 20
004079  004459  //       : This will produce a pure Square wave and is designed for driving
004080  004460  //       : Piezo transducers which require this sort of drive. It can also be
004081  004461  //       : used to drive the amp on displays with audio.
004082  004462        
004083  004463        
004084  004464  func __reserved60(), 0; // do not remove
004085  004465  func __reserved61(), 0; // do not remove
004086  004466  func __reserved62(), 0; // do not remove
004087  004467        
004088  004468  //=========================================================================================================
004089  004469  // String functions
004090  004470  //=========================================================================================================
004091  004471        
004092  004472  func str_Ptr("&var"), 1;
004093  004473  // Syntax: str_Ptr(&var);
004094  004474  // Usage : p := str_Ptr(&var);
004095  004475  // Notes : return a byte pointer to a word region
004096  004476        
004097  004477  func str_GetD("&ptr", "&var"), 1;
004098  004478  // Syntax: str_GetD(&ptr, &var);
004099  004479  // Usage : ok := str_GetD(&ptr, &var);
004100  004480  // Notes : convert number in a string to DWORD ( myvar[2] )
004101  004481  //       : returns true if function succeeds, advancing ptr
004102  004482        
004103  004483  func str_GetW("&ptr", "&var"), 1;
004104  004484  // Syntax: str_GetW(&ptr, &var);
004105  004485  // Usage : ok := str_GetW(&ptr, &var);
004106  004486  // Notes : convert number in a string to WORD ( myvar )
004107  004487  //       : returns true if function succeeds, advancing ptr
004108  004488        
004109  004489  func str_GetHexW("&ptr", "&var"), 1;
004110  004490  // Syntax: str_GetHexW(&ptr, &var);
004111  004491  // Usage : ok := str_GetHexW(&ptr, &var);
004112  004492  // Notes : convert HEX number in a string to WORD ( myvar )
004113  004493  //       : returns true if function succeeds, advancing ptr
004114  004494        
004115  004495  func str_GetC("&ptr", "&var"), 1;
004116  004496  // Syntax: str_GetC(&ptr, &var);
004117  004497  // Usage : ok := str_GetC(&ptr, &var);
004118  004498  // Notes : get a valid ascii char in a string to WORD ( myvar )
004119  004499  //       : returns true if function succeeds, advancing ptr
004120  004500        
004121  004501  func str_GetByte("ptr"), 1;
004122  004502  // Syntax: str_GetByte(ptr);
004123  004503  // Usage : myvar := str_GetByte(ptr);
004124  004504  // Notes : get a byte to myvar
004125  004505  //       : returns value
004126  004506        
004127  004507  func str_GetWord("ptr"), 1;
004128  004508  // Syntax: GetWord(ptr);
004129  004509  // Usage : GetWord(ptr);
004130  004510  // Notes : get a word to myvar
004131  004511  //       : returns value
004132  004512        
004133  004513  func str_PutByte("ptr","val"), 0;
004134  004514  // Syntax: str_PutByte(ptr);
004135  004515  // Usage : myvar := str_PutByte(ptr);
004136  004516  // Notes : put a byte at ptr
004137  004517  //       : returns value
004138  004518        
004139  004519  func str_PutWord("ptr","val"), 0;
004140  004520  // Syntax: str_PutWord("ptr","val");
004141  004521  // Usage : str_PutWord(p,100);
004142  004522  // Notes : put word 100 at current pointer location
004143  004523  //       : returns value
004144  004524        
004145  004525  func str_Match("&ptr", "*str"), 1;
004146  004526  // Syntax: str_Match(&ptr, *str);
004147  004527  // Usage : r := str_Match(&p, "hello");
004148  004528  // Notes : Case sensitive match
004149  004529  //       : returns true if function succeded, andvancing pointer to position past
004150  004530  //       : the matched item. Note that any whitespace characters are skipped
004151  004531  //       : in the source string prior to the test.
004152  004532        
004153  004533  func str_MatchI("&ptr", "*str"), 1;
004154  004534  // Syntax: str_MatchI(&ptr, *str);
004155  004535  // Usage : r := str_MatchI(&p, "hello");
004156  004536  // Notes : Case insensitive match
004157  004537  //       : returns true if function succeded, andvancing pointer to position past
004158  004538  //       : the matched item. Note that any whitespace characters are skipped
004159  004539  //       : in the source string prior to the test.
004160  004540        
004161  004541  func str_Find("&ptr", "*str"), 1;
004162  004542  // Syntax: str_Find(&ptr, *str);
004163  004543  // Usage : n := str_Find(&p, "hello");
004164  004544  // Notes : given the address of a pointer to a source string as the
004165  004545  //       : first argument, and a pointer to a test string as the second
004166  004546  //       : argument, attempt to find the position of the matching string
004167  004547  //       : in the source string. The test is performed with case sensitivity.
004168  004548  //       : return 0 if not found, else returns the address of the first
004169  004549  //       : character of the match. NB:- The source pointer is not altered.
004170  004550        
004171  004551  func str_FindI("&ptr", "*str"), 1;
004172  004552  // Syntax: str_Find(&ptr, *str);
004173  004553  // Usage : n := str_Find(&p, "hello");
004174  004554  // Notes : given the address of a pointer to a source string as the
004175  004555  //       : first argument, and a pointer to a test string as the second
004176  004556  //       : argument, attempt to find the position of the matching string
004177  004557  //       : in the source string. The test is performed with no case
004178  004558  //       : sensitivity, eg upper and lower case chars are accepted.
004179  004559  //       : return 0 if not found, else returns the address of the first
004180  004560  //       : character of the match. NB:- The source pointer is not altered.
004181  004561        
004182  004562  func str_Length("ptr"), 1;
004183  004563  // Syntax: str_Length(ptr);
004184  004564  // Usage : len := str_Ptr(mystring);
004185  004565  // Notes : return the length of a byte aligned string excluding terminator
004186  004566        
004187  004567  func str_Printf("&ptr", "*format"), 1;
004188  004568  // Syntax: str_Printf("&ptr", "*format");
004189  004569  // Usage : r := str_Printf(&p, "hello");
004190  004570  // Notes : refer to documentation
004191  004571  //       :
004192  004572        
004193  004573  func str_Cat("dest","src"), 1;
004194  004574  // Syntax: str_Append("&dest","&src");
004195  004575  // Usage : str_Append(&buf,"Hello");
004196  004576  // Notes : Appends a copy of the source string to the destination string.
004197  004577  //       : The terminating null character in destination is overwritten by
004198  004578  //       : the first character of source, and a new null-character is appended
004199  004579  //       : at the end of the new string formed by the concatenation of both in destination.
004200  004580  //       : returns destination.
004201  004581        
004202  004582  func str_CatN("dest","src","count"), 1;
004203  004583  // Syntax: str_Append("&dest","&src","count");
004204  004584  // Usage : str_Append(&buf,"Monday",3);
004205  004585  // Notes : Appends a copy of the source string to the destination string.
004206  004586  //       : The number of characters copied is limited by "count".
004207  004587  //       : The terminating null character in destination is overwritten by
004208  004588  //       : the first character of source, and a new null-character is appended
004209  004589  //       : at the end of the new string formed by the concatenation of both in destination.
004210  004590  //       : returns destination.
004211  004591        
004212  004592        
004213  004593  func str_ByteMove("src", "dest", "count"), 1;
004214  004594  // Syntax   : str_ByteMove(src, dest, bytecount);
004215  004595  // Input    : STR *source points to byte aligned source.
004216  004596  //          : STR *dest   points to byte aligned destination.
004217  004597  //          : VAR count   number of bytes to transfer.
004218  004598  // Usage    : nextpos := str_ByteMove(s, d, 100);
004219  004599  // Notes    : copy bytes from "src" to "dest", stopping only
004220  004600  //          : when "count" is exhausted.
004221  004601  //          : No terminator is appended, it is purely a
004222  004602  //          : byte copy, and any zeroes encountered will
004223  004603  //          : also be copied.
004224  004604  // Returns  : returns a pointer to the end of the destination
004225  004605  //          : (which is "dest" + "count")
004226  004606        
004227  004607        
004228  004608  func str_Copy("dest", "src"), 1;
004229  004609  // Syntax   : str_Copy(dest, src);
004230  004610  // Input    : STR *dest   points to byte aligned destination.
004231  004611  //          : STR *source points to byte aligned source.
004232  004612  // Usage    : nextplace := str_Copy(d, s);
004233  004613  // Notes    : copy a string from "src" to "dest", stopping only
004234  004614  //          : when the end of source string "src" is encountered
004235  004615  //          : (0x00 terminator).
004236  004616  //          : The terminator is always appended, even if "src" is
004237  004617  //          : an empty string.
004238  004618  // Returns  : returns a pointer to the 0x00 string terminator at
004239  004619  //          : end of "dest" (which is "dest" + str_Length(src); )
004240  004620        
004241  004621        
004242  004622  func str_CopyN("dest", "src", "count"), 1;
004243  004623  // Syntax   : str_CopyN(dest, src, bytecount);
004244  004624  // Input    : STR *dest   points to byte aligned destination.
004245  004625  //          : STR *source points to byte aligned source.
004246  004626  //          : VAR count   max number of chars to copy.
004247  004627  // Usage    : nextplace := str_CopyN(d, s, 100);
004248  004628  // Notes    : copy a string from "src" to "dest", stopping only
004249  004629  //          : when "count" is exhausted, or end of source
004250  004630  //          : string "str" is encountered (0x00 string terminator).
004251  004631  //          : The terminator is always appended, even if
004252  004632  //          : "count" is zero, or "src" is a null string.
004253  004633  // Returns  : returns a pointer to the 0x00 string terminator
004254  004634  //          : (which is "dest" + whatever was copied)
004255  004635        
004256  004636        
004257  004637  func __reserved63(), 0; // do not remove
004258  004638  func __reserved64(), 0; // do not remove
004259  004639  func __reserved65(), 0; // do not remove
004260  004640  func __reserved66(), 0; // do not remove
004261  004641        
004262  004642  //=========================================================================================================
004263  004643  // FLASH memory functions
004264  004644  //=========================================================================================================
004265  004645  func flash_GetByte("bank", "ptr"), 1;
004266  004646  // Syntax   : flash_GetByte(bank, ptr);
004267  004647  // Usage    : myvar := flash_GetByte(FLASHBANK_2, 0x0017); // read first byte in data statement of bank 2
004268  004648  // Notes    : Reads a single byte from any flash location.
004269  004649  //          : If the bank is read protected, only the first 2 bytes can be read (0x55, 0xAA)
004270  004650  //          : which is the header signature for a valid program.
004271  004651  // Returns  : the byte value from the location
004272  004652        
004273  004653        
004274  004654  func flash_GetWord("bank", "ptr"), 1;
004275  004655  // Syntax   : flash_GetWord(bank, ptr);
004276  004656  // Usage    : myvar := flash_GetWord(FLASHBANK_2, 0x0000); // read first word in flash bank  (0xAA55)
004277  004657  // Notes    : Reads a single word from any flash location.
004278  004658  //          : The pointer is byte aligned.
004279  004659  //          : If the bank is read protected, only the first word can be read
004280  004660  //          : which is the header signature for a valid program (0xAA55).
004281  004661  // Returns  : the byte value from the location
004282  004662        
004283  004663        
004284  004664  func flash_Copy("bank", "ptr", "dest", "count"), 1;
004285  004665  // Syntax   : flash_Copy(bank, ptr);
004286  004666  // Usage    : myvar := flash_Copy(FLASHBANK_2, 0x1234, mybuf, 20); // read 20 bytes from FLASHBANK_2 starting from 0x1234
004287  004667  // Notes    : Copies bytes from any flash locations to a user buffer.
004288  004668  //          : The destination pointer is byte aligned, so a str_Ptr must be raised to get correct address.
004289  004669  //          : If the bank is read protected, 0 bytes will be read
004290  004670  //          : which is the header signature for a valid program (0xAA55).
004291  004671  // Returns  : the count of bytes transferred.
004292  004672        
004293  004673        
004294  004674  func flash_Run("bank"), 1;
004295  004675  // Syntax    : flash_Run(bankx);
004296  004676  // Usage     : res := flash_Run(FLASHBANK_5);
004297  004677  // Notes     : Restarts the processor, running code from the required
004298  004678  //           : flash bank. bank may be a variable, or one of the
004299  004679  //           : pre-defined constants:-
004300  004680  //           :    FLASHBANK_0                 //0x00
004301  004681  //           :    FLASHBANK_1                 //0x01
004302  004682  //           :    FLASHBANK_2                 //0x02
004303  004683  //           :    FLASHBANK_3                 //0x03
004304  004684  //           :    FLASHBANK_4                 //0x04
004305  004685  //           :    FLASHBANK_5                 //0x05
004306  004686  // returns    : This function should net return as it restarts
004307  004687  //        : the processor and jumps to the required bank,
004308  004688  //        : If it does return, -1 indicates incorrect/invalid
004309  004689  //        : bank number, and -2 indicates no valid program
004310  004690  //        : in the selected bank.
004311  004691        
004312  004692  func flash_Bank(), 1;
004313  004693  // Syntax   : flash_Bank();
004314  004694  // Usage    : myvar := flash_Bank();
004315  004695  // Notes    : Identifies which flash bank the code is running from.
004316  004696  // Returns  : The FLASH bank that code is currently running from, 0-5.
004317  004697        
004318  004698        
004319  004699  func flash_EraseBank("bank", "confirmation"), 1;
004320  004700  // Syntax   : flash_EraseBank(bank, confirmation);
004321  004701  // Usage    : result := flash_EraseBank(FLASHBANK_3, 0xDEAD); // erase an entire flash bank, confirm overwrite of protected program
004322  004702  // Notes    : This function should be used with extreme caution.
004323  004703  //          : The selected bank will be completely erased regardless of FLASH_WRITE_PROTECT status
004324  004704  //          : if the confirmation value is set to hex 0xDEAD. If confirmation is any other value,
004325  004705  //          : a protected bank will not be erased, and function will return with 0
004326  004706  //          : If the destination bank is the same as the execution bank, the processor will reset
004327  004707  //          : upon completion of erase. If the "bank" argument is set to ALL (-1) and confirmation is set to 0xDEAD
004328  004708  //          : FLASHBANK_0 thru FLASHBANK_5 are cleared.
004329  004709  //          : Used with caution, this is a good way to 'clean up' the entire flash when starting new projects.
004330  004710  // Returns  : returns true if the function succeeded
004331  004711  //          : NB:- reset processor if program is erasing itself, or the ALL bank option is selected.
004332  004712        
004333  004713  func flash_LoadFile("bank", "filename"), 1;
004334  004714  // Syntax   : flash_LoadFile(bank, ptr);
004335  004715  // Usage    : result := flash_LoadFile(FLASHBANK_2, "TETRIS10.EXE"); // load the file from disk into FLASHBANK_2
004336  004716  // Notes    : Copies a file from uSD to the required flashbank.
004337  004717  //          : The destination bank cannont be the execution bank, or a bank that is write protected
004338  004718  // Returns  : returns true if the function succeeded.
004339  004719        
004340  004720        
004341  004721  func flash_WriteBlock("sourceptr", "bank", "page"), 1;
004342  004722  // Syntax   : flash_WriteBlock(pbuf, bank, page);
004343  004723  // Usage    : result := flash_WriteBlock(buffer, FLASHBANK_5, 8); // store the 2k buffer to FLASHBANK_5, location 16384
004344  004724  // Notes    : Copies a 2kbyte buffer to the required flashbank in block 0-15.
004345  004725  //          : The address of each block is 0, 2048, 4096 etc, determined by the page number 0-15.
004346  004726  //          : The destination bank cannot be an execution bank, or a program bank that is write protected.
004347  004727  // Returns  : returns true if the function succeeded.
004348  004728        
004349  004729        
004350  004730  func flash_putstr("bank", "ptr"), 1;
004351  004731  // Syntax   : flash_putstr(bank, ptr);
004352  004732  // Usage    : flash_Copy(FLASHBANK_2, 350); // print a string from FLASHBANK_2, location 350
004353  004733  // Notes    : Works the same as putstr, however, the source of the asciiz string is in FLASH storage
004354  004734  //          : Output may be redirected with the to(..) function. Bit15 of ptr is assumed 0.
004355  004735  // Returns  : True if function succeeds, usually ignored. 0 if bank is read protected
004356  004736        
004357  004737  func flash_Blit16("bank", "offset", "count"), 1;
004358  004738  // Syntax   : flash_Blit16(bank, offset, pixelcount);
004359  004739  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit16(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (800 bytes)
004360  004740  // Notes    : Blit an image to a GRAM window from FLASH storage.
004361  004741  //          : Image is stored 16bits per pixel (565) in a linear fashion to suit the GRAM mechanism
004362  004742  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004363  004743        
004364  004744  func flash_Blit8("bank", "offset", "count"), 1;
004365  004745  // Syntax   : flash_Blit8(bank, offset, pixelcount);
004366  004746  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit8(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (400 bytes)
004367  004747  // Notes    : Blit an image to a GRAM window from FLASH storage.
004368  004748  //          : Image is stored 8 bits per pixel (332 format) in a linear fashion to suit the GRAM mechanism
004369  004749  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004370  004750        
004371  004751  func flash_Blit4("bank", "offset", "count", "palette16colour"), 1;
004372  004752  // Syntax   : flash_Blit16(bank, offset, pixelcount, pal16);
004373  004753  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit4(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (200 bytes packed 4:4)
004374  004754  // Notes    : Blit an image to a GRAM window from FLASH storage.
004375  004755  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 16 x 16bit colours
004376  004756  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004377  004757        
004378  004758  func flash_Blit2("bank", "offset", "count", "palette4colour"), 1;
004379  004759  // Syntax   : flash_Blit16(bank, offset, pixelcount, pal4);
004380  004760  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit2(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (100 bytes packed 2:2:2:2)
004381  004761  // Notes    : Blit an image to a GRAM window from FLASH storage.
004382  004762  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 4 x 16bit colours
004383  004763  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004384  004764        
004385  004765  func flash_Blit1("bank", "offset", "count", "pallete2colour"), 1;
004386  004766  // Syntax   : flash_Blit1(bank, offset, pixelcount, pal2);
004387  004767  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit1(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (50 bytes packed 1:1:1:1:1:1:1:1)
004388  004768  // Notes    : Blit an image to a GRAM window from FLASH storage.
004389  004769  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 2 x 16bit colours
004390  004770  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004391  004771        
004392  004772  func flash_Exec("bank", "arglistptr"), 1;
004393  004773  // Syntax: res := flash_Exec("bank","arglistptr");
004394  004774  // Usage : res := flash_Exec("bank","arglistptr");
004395  004775  // Notes : returns like a function, current program
004396  004776  //       : calling program is kept active and control returns to it.
004397  004777  //       : If arglistptr is 0, no arguments are passed, else
004398  004778  //       : arglist points to an array, the first element being
004399  004779  //       : the number of elements in the array.
004400  004780  //       : func 'main' in the called bank accepts the arguments.
004401  004781  // WARNING Not currently implemented!
004402  004782        
004403  004783        
004404  004784  func __reserved68(), 0; // do not remove
004405  004785  func __reserved69(), 0; // do not remove
004406  004786  func __reserved70(), 0; // do not remove
004407  004787        
004408  004788  //=========================================================================================================
004409  004789  // I/O and hardware functions
004410  004790  //=========================================================================================================
004411  004791        
004412  004792        
004413  004793        
004414  004794        
004415  004795  func pin_Pulseout("pin", "value"), 1;        // non blocking (program execution continues during pulse)
004416  004796  func pin_PulseoutB("pin", "value"), 1;    // blocking (program execution suspended during pulse)
004417  004797  // Syntax: pin_Pulseout(pin, value);
004418  004798  // Usage : pin_Pulseout(PA3, 100);                 // output 100msec pulse on PA3
004419  004799  // Notes : only available on PA0 to PA9
004420  004800  //       : Invert the state of an output for "value" milliseconds.
004421  004801  //       : pulseout is non blocking, that is, code execution may continue while
004422  004802  //       : a pulse is occuring, and pulses can occur on multiple pins simultaneously.
004423  004803  //       : If not already an output, pin is automatically made a push/pull output,
004424  004804  //       : and the last state of its output latch will determine pulse polarity.
004425  004805  //       : It's its open drain state is not altered if the pin was already an output.
004426  004806  //       : If pulseout is called while pulseout is still active, the pulse timer
004427  004807  //       : will simply be updated with the new "value" and the pulse will continue
004428  004808  //       : with the extended value.
004429  004809  //       : returns true if the pin number is legal (usually ignored)
004430  004810        
004431  004811        
004432  004812  func pin_Counter("pin", "mode", "OVFfunction"), 1;
004433  004813  // Syntax: pin_Counter(pin, mode, userfunc);
004434  004814  // Usage : pin_Counter(PA5, 1, stopfunc);         // count rising edge pulses on pin PA5, call stopfunc on overflow
004435  004815  // Notes : only available on PA4 to PA9
004436  004816  //       : Connect a counter to a pin to count transistions, and optionally call an event function
004437  004817  //       : when the 16bit counter wraps from 0xFFFF to zero. The counter can be read or written
004438  004818  //       : to at any time with peekW and pokeW, therefore, the count may be set to eg 0xFFF0 so that eg:
004439  004819  //       : user function "OVFfuction" will be called after 16 pulses. If "OVFfunction" is set to zero, only the
004440  004820  //       : counter will increment, and simply wrap back to zero from 0xFFFF. If "OVFfunction" points to a user
004441  004821  //       : function, wnen the event fires, pin_Counter will be disabled, and will need to be re-armed (ie '1shot' operation)
004442  004822  //       : The pin may be configured as an input or output, the function behaves the same.
004443  004823  //       : All six pin counters may be active simultaneously, and the maximum frequency of pin transistions
004444  004824  //       : should not exceed a few Khz in mode 1 and 2and are usually used for simple process control counting.
004445  004825  //       : "mode" has the following effect:-
004446  004826  //       : mode COUNT_OFF(0)  = disconnect the counter from the pin, "OVFfunction" therefore ignored, and counting is inhibited.
004447  004827  //       : mode COUNT_RISE(1) = increment on every rising edge
004448  004828  //       : mode COUNT_FALL(2) = increment on every falling edge
004449  004829  //       : mode COUNT_EDGE(3) = increment on every rising and falling edge
004450  004830        
004451  004831  //------------------------------------------------------------------//
004452  004832  // pin counter mode constants                                       //
004453  004833  //------------------------------------------------------------------//
004454  004834  #CONST
004455  004839  #END
004456  004840        
004457  004841  func Qencoder1("PHApin", "PHBpin", "mode"), 1;
004458  004842  // Syntax: Qencoder1(pinA, pinB, mode);
004459  004843  // Usage : Qencoder1(PA4, PA5, stopfunc);         // connect PA4 and PA5 pins to qudrature encoder module #1
004460  004844  // Notes : not available on pins PA14 and PA15
004461  004845  //       : Connect a quadrature encoder to a pair of pins The position counter and delta can be read
004462  004846  //       : or written to at any time with peekW and pokeW using the following constants:-
004463  004847  //       : It is necessary to configure the pins first, depending on your requirements, eg
004464  004848  //       :           pin_Set(PIN_INP_HI, PA4);     // PA4 as input, with pullup to Vcc
004465  004849  //       : or maybe  pin_Set(PIN_INP, PA4);        // PA4 as input, no pullup or pulldown
004466  004850  //       : Returns true if the pin numbers are legal (usually ignored)
004467  004851  //    QEN1_COUNTER_LO
004468  004852  //    QEN1_COUNTER_HI
004469  004853  //    QEN1_DELTA This is reset to 0 when read
004470  004854        
004471  004855  func Qencoder2("PHApin", "PHBpin", "mode"), 1;
004472  004856  // Syntax: Qencoder2(pinA, pinB, mode);
004473  004857  // Usage : Qencoder2(PA4, PA5, stopfunc);         // connect PA4 and PA5 pins to qudrature encoder module #2
004474  004858  // Notes : not available on pins PA14 and PA15
004475  004859  //       : Connect a quadrature encoder to a pair of pins The position counter and delta can be read
004476  004860  //       : or written to at any time with peekW and pokeW using the following constants:-
004477  004861  //       : It is necessary to configure the pins first, depending on your requirements, eg
004478  004862  //       :           pin_Set(PIN_INP_HI, PA4);     // PA4 as input, with pullup to Vcc
004479  004863  //       : or maybe  pin_Set(PIN_INP, PA4);        // PA4 as input, no pullup or pulldown
004480  004864  //       : Returns true if the pin numbers are legal (usually ignored)
004481  004865  //    QEN2_COUNTER_LO
004482  004866  //    QEN2_COUNTER_HI
004483  004867  //    QEN2_DELTA This is reset to 0 when read
004484  004868        
004485  004869        
004486  004870  func Qencoder1Reset(), 0;
004487  004871  // Syntax: Qencoder1Reset();
004488  004872  // Usage : Qencoder1Reset();     // reset the counter and delta value for encoder #1
004489  004873  // Notes :
004490  004874  //    QEN1_COUNTER_LO is reset to zero
004491  004875  //    QEN1_COUNTER_HI is reset to zero
004492  004876  //    QEN1_DELTA is reset to zero
004493  004877        
004494  004878  func Qencoder2Reset(), 0;
004495  004879  // Syntax: Qencoder2Reset();
004496  004880  // Usage : Qencoder2Reset();     // reset the counter and delta value for encoder #2
004497  004881  // Notes :
004498  004882  //    QEN2_COUNTER_LO is reset to zero
004499  004883  //    QEN2_COUNTER_HI is reset to zero
004500  004884  //    QEN2_DELTA is reset to zero
004501  004885        
004502  004886        
004503  004887  func pin_PulseoutCount("pin", "freq", "count", "function"), 1;        // pulse pin at freq count times calling function when complete
004504  004888  // Syntax: pin_PulseoutCount(pin, freq, count, function);
004505  004889  // Usage : pin_PulseoutCount(PA4, 1000, 5000, 0);            // output 5000 1msec pulses on PA3
004506  004890  // Notes : only available on PA4 to PA9, maximum 3 active at any one time
004507  004891  //       : Invert the state of an output at a "freq" freuency "count" times.
004508  004892  //       : PulseoutCount is non blocking, that is, code execution may continue while
004509  004893  //       : pulses are occuring, and pulses can occur on multiple pins simultaneously.
004510  004894  //       : If not already an output, pin is automatically made a push/pull output,
004511  004895  //       : and the last state of its output latch will determine pulse polarity.
004512  004896  //       : It's its open drain state is not altered if the pin was already an output.
004513  004897  //       : If PulseoutCount is called while PulseoutCount is still active, the pulse counter
004514  004898  //       : will simply have the new "value" added to it.
004515  004899  //       : returns false if the pin number is illegal, freq is < 10, or all counters in use
004516  004900  //       : returns true if the pin number is legal (usually ignored)
004517  004901        
004518  004902  func __reserved72(), 0; // do not remove
004519  004903        
004520  004904  func pwm_Init("pin", "mode", "value"), 1;    // set pin PA4-PA9 for the required PWM mode and select its source
004521  004905  // Syntax: pwm_Init(pin, value);
004522  004906  // Usage : pwm_Init(PA4, 1, 500);                 // output 50% duty cycle on PA4
004523  004907  // Notes : only available on PA4 to PA9
004524  004908  //       : Mode PWM_OFF(0)    : Turn off the PWM (pin is left as output)
004525  004909  //       : Mode PWM_PLAIN(1)  : Plain PWM value is 0-1000, corresponding to 0-100% duty cycle.
004526  004910  //       :                    : Raw frequency ~70khz. A value of 1 is not valid
004527  004911  //       : Mode PWM_SERVO(2)  : Servo PWM value is 100-200, corresponding to 1.00 to 2.00 ms
004528  004912  //       :                    : Values of 0 to 600 are valid (0-6ms), but should be used with caution.
004529  004913  //       :                    : Repetition rate ~50hz or 20ms
004530  004914  //       : Mode PWM_BINARY(3) : Binary PWM value is 0-1024, corresponding to 0-100% duty cycle.
004531  004915  //       :                    : Raw frequency ~68khz. A value of 1 is not valid
004532  004916  //       : pwm_Init is non blocking and the pwm continues until turn off
004533  004917  //       : Returns true if the pin number is legal (usually ignored)
004534  004918        
004535  004919  //------------------------------------------------------------------------------
004536  004920  // PWM Constants
004537  004921  //------------------------------------------------------------------------------
004538  004922  #CONST
004539  004927  #END
004540  004928        
004541  004929  func OW_Reset("pin"), 1;                             // issue 1wire reset command
004542  004930  // Syntax   : OW_Reset(PA0);
004543  004931  // Usage    : OW_Reset(PA0);
004544  004932  // Notes    : Only available on PA0 to PA13
004545  004933  //          : Resets  ONEWIRE device
004546  004934  //          : Returns the status, 0 = ACK.
004547  004935  //          :
004548  004936        
004549  004937  func OW_Read("pin"), 1;                              // read data from 1wire bus
004550  004938  // Syntax   : OW_Read(PA0);
004551  004939  // Usage    : arg1 := OW_Read(PA0);
004552  004940  // Notes    : Only available on PA0 to PA13
004553  004941  //          : Reads value of the ONEWIRE pin
004554  004942  //          : that was previously selected for ONEWIRE comms.
004555  004943  //          :
004556  004944  //          : pin = 0 : the next byte from the ONEWIRE bus
004557  004945        
004558  004946  func OW_Read9("pin"), 1;                             // read data from 1wire bus, 9bit mode
004559  004947  // Syntax   : OW_Read9(PA0);
004560  004948  // Usage    : OW_Read9(PA0);
004561  004949  // Notes    : Only available on PA0 to PA13
004562  004950  //          : Reads 9 bit value of the appropriate ONEWIRE pin
004563  004951  //          : that was previously selected for ONEWIRE comms.
004564  004952  //          :
004565  004953  //          : read the 9 bits from the ONEWIRE bus
004566  004954        
004567  004955  func OW_Write("pin", "value"), 0;                      // write value to 1wire device
004568  004956  // Syntax   : OW_Write(PA0, arg);
004569  004957  // Usage    : OW_Write(PA0, arg);
004570  004958  // Notes    : Only available on PA0 to PA13
004571  004959  //          : Sends ONEWIRE data on the appropriate
004572  004960  //          : pin that was previously  selected as ONEWIRE comms.
004573  004961  //          :
004574  004962  //          : write arg to the ONEWIRE bus
004575  004963        
004576  004964  func __reserved77(), 0; // do not remove
004577  004965  func __reserved78(), 0; // do not remove
004578  004966        
004579  004967  func sys_GetDateVar("&year", "&month", "&day"), 0;              // get year, month, day into variables
004580  004968  // Syntax: sys_GetDateVar(&year, &month, &day);
004581  004969  // Usage : sys_GetDateVar(&year, &month, &day);
004582  004970  // Notes : Retrieves the date values into variables
004583  004971        
004584  004972  func sys_GetTimeVar("&hour", "&minute", "&second", "&msecs"), 0;              // get hour, minute, second, millseconds into variables
004585  004973  // Syntax: sys_GetTimeVar(&hour, &minute, &second, &msecs);
004586  004974  // Usage : sys_GetTimeVar(&hour, &minute, &second, &msecs);
004587  004975  // Notes : Retrieves the time values into variables
004588  004976        
004589  004977  func sys_PmmC(), 0;
004590  004978  // Syntax: sys_PmmC();
004591  004979  // Usage : to(mystring); sys_PmmC();   // save PmmC name and revision string to buffer
004592  004980  // Notes : print the system PmmC name and revision eg "Diablo16\n1.0"
004593  004981  //       : Can be captured to a buffer using the to( function
004594  004982  //       : Returns nothing.
004595  004983        
004596  004984  func sys_Driver(), 0;
004597  004985  // Syntax: sys_Driver();
004598  004986  // Usage : to(mystring); sys_Driver();   // save Driver name and date string to buffer
004599  004987  // Notes : print the system PmmC name and revision eg "uLCD-32WDTU-A\n130411"
004600  004988  //       : Can be captured to a buffer using the to( function
004601  004989  //       : Returns nothing.
004602  004990        
004603  004991  func gfx_Scope("left", "width", "yzero", "n", "xstep", "Yamp", "colorbg", "&old_y1", "&new_y1", "color1", "&old_y2", "&new_y2", "color2", "&old_y3", "&new_y3", "color3", "&old_y4", "&new_y4", "color4"), 0;
004604  004992  // Notes : Draws up to 4 waveforms from table(s) of vertices at the specified origin.
004605  004993  //       : "Left" is the left margin, "Width" is the width, "yzero" is the y position
004606  004994  //       : that corresponds to a y value of zero, normally "Top" + "Height" for
004607  004995  //       : a graph, or "Top" + "Height"/2 for a scope. "n" is the number of
004608  004996  //       : elements in each buffer. This will need to be greater than "width" for negative
004609  004997  //       : "xstep" values. "Yamp" is for amplification in the Y direction, 100 is unity.
004610  004998  //       : pass 0 as the address for any unused traces
004611  004999  //       : X position is incremented each point by "xstep" pixels.
004612  005000  //       : Y values are derived from a Y buffer "newy" (signed values).
004613  005001  //       : 2 buffers need to be supplied, "newy" contains new
004614  005002  //       : points to be drawn, "oldy" contains most recent set
004615  005003  //       : of points to be un-drawn. After the waveform is drawn,
004616  005004  //       : "newy" buffer is automatically copied to "oldy" buffer.
004617  005005        
004618  005006        
004619  005007  func ana_HS("rate", "samples", "&IO1", "&IO2", "&IO3", "&IO4", "COMPLETEfunction"), 0;
004620  005008  // Syntax: ana_HS(rate, samples, IO1buf, IO2buf, IO3buf, IO4buf, userFunction);
004621  005009  // Usage : ana_HS(1000, 10, IO1buf, 0, 0, 0, myFunc);
004622  005010  // Notes : Collects "samples" samples at "rate" frequency for 0 to 4 analogue pins
004623  005011  //       : and calls "COMPLETEfunction" when done.
004624  005012  //       : "rate" is samples in 100 of samples per second
004625  005013  //       : Any unused IOx pins should have their buffer addresses set to 0
004626  005014  //       : For performance reasons samples are taken in chunks of 32, thus if you
004627  005015  //       : request 33 samples there will be a delay of 31 samples before
004628  005016  //       : "COMPLETEfunction" is called
004629  005017  //       : If Touch is enabled this function should be called no more than once per
004630  005018  //       : millisecond, otherwise touch behaviour could be eratic.
004631  005019        
004632  005020        
004633  005021  func sys_ErrorMessage("msgnum"), 1;
004634  005022        
004635  005023  //==============================//
004636  005024  // NeoPixel specific functions  //
004637  005025  //==============================//
004638  005026        
004639  005027  func NP_Write("pin", "data", "size", "Options", "RepeatFirst", "Repeat", "RepeatLast"), 1;    // Write a string of colours to a NeoPixel 'display'
004640  005028  // Syntax: NP_Write(pin, data, size, Options, RepeatFirst, Repeat, RepeatLast);
004641  005029  // Usage : NP_Write(PA4, data, 50, NP_565, 10, 0, 0);                 
004642  005030  // Notes : pin         : The I/O pin for the operation PA0 to PA13
004643  005031  //       : data        : Address of data to be sent
004644  005032  //       : size        : number of colour 'sets' to follow
004645  005033  //       : Options     : format of colour data to be sent, NP_565, NP_RGB, or NP_XRGB. i.e. 2, 3 or 4 bytes per colour
004646  005034  //       : RepeatFirst : Number of times to repeat the first colour (0 means first colour is not considered 'special')
004647  005035  //       : Repeat      : Number of times to repeat the colours between first and last
004648  005036  //       : RepeatLast  : Number of times to repeat the last colour (0 means last colour is not considered 'special')
004649  005037  //       : Returns true if the pin number is legal (usually ignored)
004650  005038  //       : Due to the critical timing requirements of the NeoPixel, the system Timer is disabled during this operation.
004651  005039  //       : Comms Interrupts should also be disabled by the user, otherwise errors may occur.
004652  005040        
004653  005041  // NeoPixel related constants
004654  005042  #CONST
004655  005046  #END
004656  005047        
004657  005048  func __reserved85(), 0; // do not remove
004658  005049  func __reserved86(), 0; // do not remove
004659  005050        
004660  005051  //==============================================//
004661  005052  // spi flash device specific functions          //
004662  005053  //==============================================//
004663  005054        
004664  005055  func spiflash_SIG("spi#", "enablepin"), 1;         // read Jedec signature from SPI Flash device
004665  005056  // Syntax   : spiflash_SIG("spi#","enablepin");
004666  005057  // Usage    : var := spiflash_SIG(SPI1, PA0);
004667  005058  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004668  005059  //          : spi_Init(...) function, the Electronic Signature of the device can be read using this function. The only
004669  005060  //          : devices supported so far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004670  005061  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004671  005062  //          : Release from Deep Power-down, and Read Electronic Signature. Only the low order byte is valid, the upper
004672  005063  //          : byte is ignored.
004673  005064        
004674  005065  func spiflash_ID("spi#", "enablepin"), 1;          // read ID code from FLASH device
004675  005066  // Syntax   : spiflash_ID("spi#","enablepin");
004676  005067  // Usage    : var := spiflash_ID(SPI1, PA0);
004677  005068  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004678  005069  //          : spi_Init(...) function, the memory type and capacity from the flash device can be read using this function
004679  005070  //          : The only devices supported so far M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004680  005071  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004681  005072  //          : Reads the memory type and capacity from the serial FLASH device. Hi byte contains type, and low byte
004682  005073  //          : contains capacity. Refer to the device data sheet for further information.
004683  005074        
004684  005075  func spiflash_BulkErase("spi#", "enablepin"), 0;    // erase the entire FLASH device
004685  005076  // Syntax   : spiflash_BulkErase("spi#","enablepin");
004686  005077  // Usage    : spiflash_BulkErase(SPI1, PA0);
004687  005078  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004688  005079  //          : spi_Init(...) function, the FLASH device can be completely erased using this function. The only devices
004689  005080  //          : supported so far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004690  005081  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004691  005082  //          : Erases the entire flash media device. The function returns no value, and the operation can take up to 80
004692  005083  //          : seconds depending on the size of the flash device. Note that not all devices support this command.
004693  005084        
004694  005085  func spiflash_BlockErase("spi#", "enablepin", "block"), 0;            // erase the required 64k flash block
004695  005086  // Syntax   : spiflash_BlockErase("spi#", "enablepin", "block")
004696  005087  // Usage    : var := spiflash_BlockErase(SPI1, PA0, block_num)
004697  005088  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004698  005089  //          : spi_Init(...) function, the FLASH block can be erased using this function. The only devices supported so
004699  005090  //          : far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004700  005091  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004701  005092  //          : E.g. there are 32 x 64K blocks on a 2Mb flash device.
004702  005093  //          : blockAddress The address of the 64k FLASH block to be erased.
004703  005094  //          : Erases the required block in a FLASH media device. The function returns no value, and the operation
004704  005095  //          : can take up to 3 milliseconds.
004705  005096        
004706  005097  func spiflash_SetAdd("spi#", "HiWord", "LoWord"), 0;           // set stream byte address
004707  005098  // Syntax: spiflash_SetAdd(AddHiWord, AddLoWord);
004708  005099  // Usage : spiflash_SetAdd(SPI1, arg1, arg2);
004709  005100  // Notes : Set FLASH internal Address pointer for bytewise access on the specified SPI port
004710  005101        
004711  005102  func spiflash_Read("*dest", "size", "spi#", "enablepin"), 1;
004712  005103  // Syntax: res := spiflash_Read("*dest", "size", "spi#", "enablepin"),
004713  005104  // Usage : res := spiflash_Read(memblock, 20, SPI1, PA0);
004714  005105  // Notes : Reads the specified number of bytes from the FLASH memory device on the specified SPI port and enable pin
004715  005106  //       : into the specified destination. The destination is a string pointer (i.e. BYTE aligned). The source
004716  005107  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004717  005108  //       : returns number of characters read
004718  005109  //       : if "dest" is zero, data is read direct to GRAM window
004719  005110  //       :
004720  005111        
004721  005112  func spiflash_Write("*source", "size", "spi#", "enablepin"), 1;
004722  005113  // Syntax: res := fwrite("*source", "size", "spi#", "enablepin"),
004723  005114  // Usage : res := fwrite(memblock, 20, SPI1, PA0);
004724  005115  // Notes : Writes the specified number of bytes to the FLASH memory device on the specified SPI port and enable pin
004725  005116  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004726  005117  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004727  005118  //       : returns number of bytes written
004728  005119  //       :
004729  005120        
004730  005121  func spiflash_Image("x", "y", "spi#", "enablepin"), 1;
004731  005122  // Syntax: spiflash_Image(x, y, "spi#", "enablepin");
004732  005123  // Usage : spiflash_Image(10, 10, SPI1, PA0);
004733  005124  // Notes : Display an image from a file at the current FLASH position set by spiflash_SetAdd()
004734  005125  //       : The image is displayed at x,y (with respect to top left corner).
004735  005126        
004736  005127  func spiflash_PutC("char", "spi#", "enablepin"), 0;
004737  005128  // Syntax: spiflash_PutC("char", "spi#", "enablepin");
004738  005129  // Usage : spiflash_PutC('x', SPI1, PA0);
004739  005130  // Notes : Writes a character (or byte) to the FLASH memory device on the specified SPI port and enable pin
004740  005131  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004741  005132  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004742  005133        
004743  005134  func spiflash_GetC("spi#", "enablepin"), 1;
004744  005135  // Syntax: spiflash_GetC("spi#", "enablepin");
004745  005136  // Usage : mychar := fgetC(SPI1, PA0);
004746  005137  // Notes : Reads a character (or byte) from the FLASH memory device on the specified SPI port and enable pin
004747  005138  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004748  005139  //       : by subsequent reads or writes.
004749  005140  //       : returns next char from file
004750  005141        
004751  005142  func spiflash_PutW("word", "spi#", "enablepin"), 0;
004752  005143  // Syntax: spiflash_PutW("word", "spi#", "enablepin");
004753  005144  // Usage : spiflash_PutW(0x1234, SPI1, PA0);
004754  005145  // Notes : Writes a word to the FLASH memory device on the specified SPI port and enable pin
004755  005146  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004756  005147  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004757  005148        
004758  005149  func spiflash_GetW("spi#", "enablepin"), 1;
004759  005150  // Syntax: spiflash_GetW("spi#", "enablepin");
004760  005151  // Usage : myword := fgetW(SPI1, PA0);
004761  005152  // Notes : Reads a word from the FLASH memory device on the specified SPI port and enable pin
004762  005153  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004763  005154  //       : by subsequent reads or writes.
004764  005155  // Notes : returns next word in file
004765  005156        
004766  005157  func spiflash_PutS("*source", "spi#", "enablepin"), 1;
004767  005158  // Syntax: res := spiflash_Puts("*source", "spi#", "enablepin"),
004768  005159  // Usage : res := spiflash_Puts(mystring, SPI1, PA0);
004769  005160  // Notes : Writes a string to the FLASH memory device on the specified SPI port and enable pin
004770  005161  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004771  005162  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004772  005163  //       : returns number of characters written
004773  005164  //       :
004774  005165        
004775  005166  func spiflash_GetS("*string", "size", "spi#", "enablepin"), 1;
004776  005167  // Syntax: res := spiflash_Gets("*string", "size", "spi#", "enablepin");
004777  005168  // Usage : res := spiflash_Gets(mystr , 81, SPI1, PA0); // read up to 80 chars
004778  005169  // Notes : Reads a string from the FLASH memory device on the specified SPI port and enable pin
004779  005170  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004780  005171  //       : by subsequent reads or writes.
004781  005172  //       : returns pointer to string or null if failed.
004782  005173  //       : spiflash_GetS(...) automatically appends a null-terminator to the data read.
004783  005174  //       : NB:- only reads up to "size-1" characters into "string"
004784  005175  //       : spiflash_GetS(...) will stop reading when any of the following conditions are true:
004785  005176  //       : A] It has read n-1 bytes (one character is reserved for the null-terminator)
004786  005177  //       : B] It encounters a newline character (a line-feed in the compilers tested here), or
004787  005178  //       : C] It reaches the end of file
004788  005179  //       : D] A read error occurs.
004789  005180        
004790  005181  func spiflash_LoadFunction("spi#", "enablepin"), 1;
004791  005182  // Syntax: res := spiflash_LoadFunction("spi#", "enablepin");
004792  005183  // Usage : myfunc := spiflash_LoadFunction(SPI1, PA0);
004793  005184  // Notes : Load a function or program from the FLASH memory device on the specified SPI port and enable pin at
004794  005185  //       : the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes and
004795  005186  //       : return a function pointer to the allocation.
004796  005187  //       : The function can then be invoked just like any other
004797  005188  //       : function would be called via a function pointer.
004798  005189  //       : Parameters may be passed to it in a conventional way.
004799  005190  //       : The function may be discarded at any time when no
004800  005191  //       : longer required, thus freeing its memory resources.
004801  005192  //       : The loaded function can be discarded with mem_Free(..)
004802  005193  //       : eg:
004803  005194  //       : popupWindow := spiflash_LoadFunction("popupWindow1.4fn");
004804  005195  //       : if(!popupWindow) goto LoadFunctionFailed; // could not load the function !!!
004805  005196  //       : then elsewhere in your program:-
004806  005197  //       : res := popupWindow(MYMODE,"My Title","My Popup Text");
004807  005198  //       : if(res == QUIT_APPLICATION) goto exitApp;
004808  005199  //       : Later in your program, when popupWindow is no longer
004809  005200  //       : required for the application:-
004810  005201  //       : res := mem_Free(popupWindow);
004811  005202  //       : if(!res) goto FreeFunctionFailed; // should never happen if memory not corrupted
004812  005203  //       : The callers stack is shared by the loaded function,
004813  005204  //       : however any global variables in the loaded function
004814  005205  //       : are private to that function.
004815  005206  //
004816  005207        
004817  005208  func spiflash_Run("spi#", "enablepin", "arglistptr"), 1;
004818  005209  // Syntax: res := spiflash_Run("spi#", "enablepin", "arglistptr");
004819  005210  // Usage : res := spiflash_Run(SPI1, PA0, argptr);
004820  005211  // Notes : current program releases any allocated memory but
004821  005212  //       : retains the stack and global memory.
004822  005213  //       : If arglistptr is 0, no arguments are passed, else
004823  005214  //       : arglist points to an array, the first element being
004824  005215  //       : the number of elements in the array.
004825  005216  //       : func 'main' in the called program accepts
004826  005217  //       : the arguments, if any. The arguments can only
004827  005218  //       : be passed by value, no pointers or references can be
004828  005219  //       : used as all memory is cleared before the file
004829  005220  //       : is loaded. Refer to spiflash_Exec and spiflash_LoadFunction
004830  005221  //       : for functions that can pass by reference.
004831  005222        
004832  005223  func spiflash_Exec("spi#", "enablepin", "arglistptr"), 1;
004833  005224  // Syntax: res := spiflash_Exec("spi#", "enablepin", "arglistptr");
004834  005225  // Usage : res := spiflash_Exec(SPI1, PA0, "arglistptr");
004835  005226  // Notes : returns like a function, current program
004836  005227  //       : calling program is kept active and control returns to it.
004837  005228  //       : If arglistptr is 0, no arguments are passed, else
004838  005229  //       : arglist points to an array, the first element being
004839  005230  //       : the number of elements in the array.
004840  005231  //       : func 'main' in the called program accepts the arguments.
004841  005232  //       : This function is similar to spiflash_LoadFunction(...), however,
004842  005233  //       : the function argument list is passed by pointer, and
004843  005234  //       : the memory consumed by the function is released as
004844  005235  //       : soon as the function completes.
004845  005236        
004846  005237  func spiflash_LoadImageControl("spi#", "enablepin"), 1;
004847  005238  // Syntax: hImagelist := spiflash_LoadImageControl ("spi#", "enablepin"),
004848  005239  // Usage : hImagelist := spiflash_LoadImageControl (SPI1, PA0);
004849  005240  // Notes : Reads a control file to create an image list from the FLASH memory device on the specified SPI port
004850  005241  //       : and enable pin. The source is the address set by spiflash_SetAdd(), or incremented by subsequent reads
004851  005242  //       : or writes. The ".dat" file is first and is immediately followed a ^Z and then by the ".gci' file.
004852  005243  //       : Returns NULL if function fails.
004853  005244  //       : Returns a handle (pointer to the memory allocation) to the
004854  005245  //       : image control list that has been created.
004855  005246        
004856  005247  // Notes : This function Calculates the size of a chunk of memory required for
004857  005248  //       : a image list and populates it from the image control file ("*.dat")
004858  005249  //       : therefore, when imagelist is no longer required, you must de-allocate
004859  005250  //       : the image list memory by using eg:- mem_Free(hImagelist);
004860  005251  //       : to restore the heap.
004861  005252  //       :
004862  005253        
004863  005254  func spiflash_PlayWAV("spi#", "enablepin"), 1;
004864  005255  // Syntax: spiflash_PlayWAV("spi#", "enablepin");
004865  005256  // Usage : spiflash_PlayWAV(SPI1, PA0);
004866  005257  // Notes : Play a wave file from the FLASH memory device on the specified SPI port and enable pin.
004867  005258  //       : The source is the address set by spiflash_SetAdd(), or incremented by subsequent reads
004868  005259  //       : or writes.
004869  005260  //       : This function automatically grabs a chunk
004870  005261  //       : of memory for a file buffer, and a wave
004871  005262  //       : buffer. The minimum memory requirement is
004872  005263  //       : about 580 bytes for the disk io service and
004873  005264  //       : a minimum wave buffer size of 1024. The size
004874  005265  //       : of the wave buffer allocation
004875  005266  //       : can be increased by the snd_BufSize function.
004876  005267  //       : The default size 1024 bytes.
004877  005268  //       : NB the memory is only required during the
004878  005269  //       : duration of play, and is automatically
004879  005270  //       : released while not in use.
004880  005271  //       : See the Sound Class services for other associated controls.
004881  005272  //       : If there are no errors, returns number of blocks to play (1 to 32767)
004882  005273  //       : If errors occured, the folling is returned
004883  005274  //       : -7  : Insufficient memory available for WAV buffer and file
004884  005275  //       : -6  : cant play this rate
004885  005276  //       : -5  : no data chunk found in first rsector
004886  005277  //       : -4  : no format data
004887  005278  //       : -3  : no wave chunk signature
004888  005279  //       : -2  : bad wave file format
004889  005280  //       : -1  : file not found
004890  005281        
004891  005282  //==============================================//
004892  005283  // more com functions                           //
004893  005284  //==============================================//
004894  005285        
004895  005286  func com1_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004896  005287  // Syntax   : com1_TXblock("buf", "bufsize");
004897  005288  // Usage    : com1_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004898  005289  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004899  005290  //          : if a transmit buffer is active and space is available this function will return almost
004900  005291  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004901  005292        
004902  005293  func com1_RXblock("buf", "bufsize"), 0;                       // commence a block reception
004903  005294  // Syntax   : com1_RXblock("buf", "bufsize");
004904  005295  // Usage    : com1_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004905  005296  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004906  005297  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004907  005298  //          : immediately otherwise it will block until until the required bytes are received.
004908  005299        
004909  005300  func com2_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004910  005301  // Syntax   : com_TXblock("buf", "bufsize");
004911  005302  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004912  005303  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004913  005304  //          : if a transmit buffer is active and space is available this function will return almost
004914  005305  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004915  005306        
004916  005307  func com2_RXblock("buf", "bufsize"), 0;                       // commence an block reception
004917  005308  // Syntax   : com_RXblock("buf", "bufsize");
004918  005309  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004919  005310  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004920  005311  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004921  005312  //          : immediately otherwise it will block until until the required bytes are received.
004922  005313        
004923  005314  func com3_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004924  005315  // Syntax   : com_TXblock("buf", "bufsize");
004925  005316  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004926  005317  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004927  005318  //          : if a transmit buffer is active and space is available this function will return almost
004928  005319  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004929  005320        
004930  005321  func com3_RXblock("buf", "bufsize"), 0;                       // commence an block reception
004931  005322  // Syntax   : com_RXblock("buf", "bufsize");
004932  005323  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004933  005324  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004934  005325  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004935  005326  //          : immediately otherwise it will block until until the required bytes are received.
004936  005327        
004937  005328  func disp_BlitPixelsFromCOM1(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004938  005329  // Syntax: disp_BlitPixelsFromCOM1();                  New in v1.1
004939  005330  // Usage : disp_BlitPixelsFromCOM1();
004940  005331  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004941  005332  //       : display from the specified com port.
004942  005333        
004943  005334  func disp_BlitPixelsFromCOM2(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004944  005335  // Syntax: disp_BlitPixelsFromCOM2();                  New in v1.1
004945  005336  // Usage : disp_BlitPixelsFromCOM2();
004946  005337  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004947  005338  //       : display from the specified com port.
004948  005339        
004949  005340  func disp_BlitPixelsFromCOM3(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004950  005341  // Syntax: disp_BlitPixelsFromCOM3();                  New in v1.1
004951  005342  // Usage : disp_BlitPixelsFromCOM3();
004952  005343  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004953  005344  //       : display from the specified com port.
004954  005345        
004955  005346        
004956  005347  //==============================================//
004957  005348  // crc generation functions                     //
004958  005349  //==============================================//
004959  005350        
004960  005351  func crc_CSUM_8("buf","count"), 1;                      // given a pointer to a buffer and a byte count, calculate the 8bit LRC
004961  005352  // *Notes   : (if you calculate all of the incoming data
004962  005353  //          : INCLUDING the CRC, the result should be 0x00
004963  005354  //          : This is equivalent to simple addition of all bytes
004964  005355  //          : and returning the negated sum an 8 bit value.
004965  005356  //          : For the standard test string "123456789",
004966  005357  //          : crc_CSUM_8 will return 0x0023.
004967  005358        
004968  005359        
004969  005360  func crc_16("buf","count"), 1;                      // given a pointer to a buffer and a byte count, calculate CRC16
004970  005361  // *Notes   : The "mode" argument may be READ, WRITE or CHECK
004971  005362  //          : (if you calculate all of the incoming data
004972  005363  //          : INCLUDING the CRC, the result should be 0x0000
004973  005364  //          : For the standard test string "123456789",
004974  005365  //          : crc_16 will return 0xBB3D.
004975  005366        
004976  005367        
004977  005368  func crc_MODBUS("buf","count"), 1;                  // given a pointer to a buffer and a byte count, calculate CRC16 for MODBUS
004978  005369  // *Notes   : (if you calculate all of the incoming data
004979  005370  //          : INCLUDING the CRC, the result should be 0x0000
004980  005371  //          : For the standard test string "123456789",
004981  005372  //          : crc_MODBUS will return 0x4B37.
004982  005373        
004983  005374        
004984  005375  func crc_CCITT("buf","count","seed"), 1;            // given a pointer to a buffer, byte count and seed, calculate the 16bit CRC for seed
004985  005376  // *Notes   : (if you calculate all of the incoming data
004986  005377  //          : INCLUDING the CRC, the result should be 0x0000
004987  005378  //          : For the standard test string "123456789",
004988  005379  //          : crc_CCITT will return the following:-
004989  005380  //          : seed = 0 (XMODEM protocol) result = 0x31C3
004990  005381  //          : seed = 0xFFFF, result = 0x29B1
004991  005382  //          : seed = 0x1D0F, result = 0xE5CC
004992  005383        
004993  005384        
004994  005385  //------------------------------------------------------------------//
004995  005386  // CONSTANTS
004996  005387  //------------------------------------------------------------------//
004997  005388        
004998  005389  #CONST
004999  005393  #END
005000  005394        
005001  005395  // timebase constants for timebase_init
005002  005396  // NB only TB2 and TB4 can be used for synchronous A2D sampling.
005003  005397  #CONST
005004  005408  #END
005005  005409        
005006  005410        
005007  005411  // generic constants
005008  005412  #CONST
005009  005420  #END
005010  005421        
005011  005422        
005012  005423        
005013  005424  //gfx_Get() related constants
005014  005425  #CONST
005015  005434  #END
005016  005435        
005017  005436        
005018  005437        
005019  005438        
005020  005439  #CONST
005021  005452  #END
005022  005453        
005023  005454        
005024  005455  #CONST
005025  005480  #END
005026  005481        
005027  005482        
005028  005483        
005029  005484        
005030  005485  // timer control  related constants
005031  005486  #CONST
005032  005495  #END
005033  005496        
005034  005497        
005035  005498        
005036  005499  //------------------------------------------------------------------------------
005037  005500  // system WORD variables accesible with peekW and pokeW or pointer access
005038  005501  // Note that the txt_Set variables (0-15) and gfx_set variables (16-31)
005039  005502  // can also be accessed with peekW and pokeW
005040  005503  //------------------------------------------------------------------------------
005041  005504        
005042  005505  #CONST
005043  005600  #END
005044  005601        
005045  005602  #CONST
005046  005767  #END
005047  005768        
005048  005769        
005049  005770        
005050  005771  //==================================================================================================
005051  005772        
005052  005773        
005053  005774        
005054  000013      #ENDIF
005055  000014        
005056  000015      #CONST
005057  000094      #END
005058  000095        
005059  000096  //===========================================================================================
005060  000097        
005061  000098        
005062  000002        
005063  000003  // generated 1/30/2016 11:55:19 AM
005064  000004        
005065  000005        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\4DGL_16bitColours.fnc

005066  000006  #inherit "4DGL_16bitColours.fnc"
005067  000006  #inherit "4DGL_16bitColours.fnc"
005068  000004  */
005069  000005        
005070  000006        
005071  000007        
005072  000008  #CONST
005073  000149  #END
005074  000150        
005075  000007        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\VisualConst.inc

005076  000008  #inherit "VisualConst.inc"
005077  000008  #inherit "VisualConst.inc"
005078  000001  // Line Patterns
005079  000002  #constant  LPCOARSE    0xF0F0
005080  000002  #constant  LPCOARSE    0xF0F0
005081  000003  #constant  LPMEDIUM    0x3333
005082  000003  #constant  LPMEDIUM    0x3333
005083  000004  #constant  LPFINE      0xAAAA
005084  000004  #constant  LPFINE      0xAAAA
005085  000005  #constant  LPDASHDOT   0x03CF
005086  000005  #constant  LPDASHDOT   0x03CF
005087  000006  #constant  LPDASHDOTDOT 0x0333
005088  000006  #constant  LPDASHDOTDOT 0x0333
005089  000007  #constant  LPSOLID     0x0000
005090  000007  #constant  LPSOLID     0x0000
005091  000009        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\XYposToDegree.inc

005092  000010  #inherit "XYposToDegree.inc"
005093  000010  #inherit "XYposToDegree.inc"
005094  000001  //
005095  000002  // Routine to convert X/Y (Relative to 0,0) position into Degrees
005096  000003  // 0 Degrees is straight down to suit rotary objects
005097  000004  //
005098  000005        
005099  000017  #END
5100  006B
5101  006C
5102  006D
5103  006E
5104  006F
5105  0070
5106  0071
5107  0072
5108  0073
5109  0074
5110  0075
5111  0076
5112  0077
5113  0078
5114  0079
5115  007A
5116  007B
5117  007C
5118  007D
5119  007E
5120  007F
5121  0080
5122  0081
5123  0082
5124  0083
5125  0084
5126  0085
5127  0086
5128  0087
5129  0088
5130  0089
5131  008A
5132  008B
5133  008C
5134  008D
5135  008E
5136  008F
5137  0090
5138  0091
5139  0092
5140  0093
5141  0094
5142  0095
5143  0096
5144  0097
5145  0098
5146  0099
5147  009A
5148  009B
5149  009C
5150  009D
5151  009E
5152  009F
5153  00A0
5154  00A1
5155  00A2
5156  00A3
5157  00A4
5158  00A5
5159  00A6
5160  00A7
5161  00A8
5162  00A9
5163  00AA
5164  00AB
5165  00AC
5166  00AD
5167  00AE
5168  00AF
5169  00B0
5170  00B1
5171  00B2
5172  00B3
5173  00B4
5174  00B5
5175  00B6
5176  00B7
5177  00B8
5178  00B9
5179  00BA
5180  00BB
5181  00BC
5182  00BD
5183  00BE
5184  00BF
5185  00C0
5186  00C1
5187  00C2
5188  00C3
5189  00C4
5190  00C5
5191  00C6
5192  00C7
5193  00C8
5194  00C9
5195  00CA
5196  00CB
5197  00CC
5198  00CD
5199  00CE
5200  00CF
005201  000018        
005202  000019  func XYposToDegree(var curX, var curY)
005203  000020      var delta, deg, adj ;
005204  000021      if (curY < 0)
005205  000022          if (curX < 0)
005206  000023              adj := 1 ;
005207  000024              deg := 90 ;
005208  000025          else
005209  000026              adj := 2 ;
005210  000027              deg := 180 ;
005211  000028          endif
005212  000029      else
005213  000030          if (curX < 0)
005214  000031              deg := 0 ;
005215  000032              adj := 2 ;
005216  000033          else
005217  000034              deg := 270 ;
005218  000035              adj := 1 ;
005219  000036          endif
005220  000037      endif
005221  000038        
005222  000039      curX := ABS(curX) ;
005223  000040      curY := ABS(curY) ;
005224  000041      if (curX < curY)
005225  000042          adj &= 1 ;
005226  000043      else
005227  000044          adj &= 2 ;
005228  000045          SWAP(&curX, &curY) ;
005229  000046      endif
005230  000047      delta := arctan[(curX * 100) / curY] ;
005231  000048      if (adj)
005232  000049          deg += 90 - delta ;
005233  000050      else
005234  000051          deg += delta ;
005235  000052      endif
005236  000053        
005237  000054      return deg ;
005238  000055  endfunc
005239  000056        
005240  000011        
file C:\Users\Zac\Google Drive\NASA RMC Zips\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\ScreenConst.inc

005241  000012  #inherit "ScreenConst.inc"
005242  000012  #inherit "ScreenConst.inc"
005243  000001  // File generated 1/30/2016 11:54:02 AM
005244  000002  // Warning! This is a generated file, any manual changes will be
005245  000003  // lost during the next generation.
005246  000004        
005247  000005  // object indexes into ImageControl
005248  000006  #CONST
005249  000242  #END
005250  000243        
005251  000244  #IFNOT EXISTS NOGLOBALS
005252  000245  var hndl ;
005253  000246  #ENDIF
005254  000013        
005255  000014        
005256  000015  #constant IPDatasize 22
005257  000015  #constant IPDatasize 22
005258  000016        
005259  000017  #CONST
005260  000021  #END
005261  000022        
005262  000023  #CONST
005263  000130  #END
005264  000131        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\ColourRoutines.inc

005265  000132  #inherit "ColourRoutines.inc"
005266  000132  #inherit "ColourRoutines.inc"
005267  000001  // color conversion routines seem to be based on http://support.microsoft.com/kb/29240
005268  000002  // My copy seem to have been around since the MSDOS days, I don't know if it came from another source
005269  000003  #CONST
005270  000019  #END
005271  000020        
005272  000021  var red, green, blue ;
005273  000022  var h, l, s ;
005274  000023        
005275  000024  func RGBs2COL(var r, var g, var b)
005276  000025      return (b >> 2) | (g & 0x7E) << 4 | (r & 0x7c) << 9  ;
005277  000026  endfunc
005278  000027        
005279  000028  func c565toRGBs(var i565)
005280  000029      red   := (i565 & 0xF800) >> 9 ;
005281  000030      green := (i565 & 0x07E0) >> 4 ;
005282  000031      blue  := (i565 & 0x001F) << 2 ;
005283  000032  endfunc
005284  000033        
005285  000034  func RGB2HLS()
005286  000035      var  cMax, cMin, Rdelta, Gdelta, Bdelta, cMpM, cMmM ;
005287  000036      // calculate lightness
005288  000037      cMax := MAX( MAX(red,green), blue);
005289  000038      cMin := MIN( MIN(red,green), blue);
005290  000039      cMpM := cMax+cMin ;
005291  000040      cMmM := cMax-cMin ;
005292  000041        
005293  000042      l := ( (cMpM*HLSMAX) + RGBMAX ) / RGBMAXm2;
005294  000043        
005295  000044      if (cMax == cMin) // r=g=b --> achromatic case
005296  000045          s := 0;
005297  000046          h := UNDEFINED;
005298  000047      else // chromatic case
005299  000048          // saturation
005300  000049          if (l <= (HLSMAX/2))
005301  000050              s := ( (cMmM*HLSMAX) + (cMpM / 2) ) / cMpM ;
005302  000051          else
005303  000052              s := ( (cMmM*HLSMAX) + ((RGBMAXm2-cMpM) / 2) ) / (RGBMAXm2-cMpM);
005304  000053          endif
005305  000054        
005306  000055          // hue
005307  000056          Rdelta := ( ((cMax-red)* HLSMAXd6) + (cMmM / 2) ) / cMmM;
005308  000057          Gdelta := ( ((cMax-green)* HLSMAXd6) + (cMmM / 2) ) / cMmM;
005309  000058          Bdelta := ( ((cMax-blue)* HLSMAXd6) + (cMmM / 2) ) / cMmM;
005310  000059        
005311  000060          if (red == cMax)
005312  000061              h := Bdelta - Gdelta ;
005313  000062          else if (green == cMax)
005314  000063              h := HLSMAXd3 + Rdelta - Bdelta ;
005315  000064          else
005316  000065              h := HLSMAXm2d3 + Gdelta - Rdelta;
005317  000066          endif
005318  000067        
005319  000068          if (h < 0) h += HLSMAX;
005320  000069          if (h > HLSMAX) h -= HLSMAX;
005321  000070      endif
005322  000071   endfunc
005323  000072        
005324  000073  func hue_RGB(var Hin, var M1, var M2)
005325  000074      var Value ;
005326  000075      if (Hin < 0)
005327  000076          Hin += HLSMAX ;
005328  000077      else if (Hin > HLSMAX)
005329  000078          Hin -= HLSMAX ;
005330  000079      endif
005331  000080        
005332  000081      if (Hin < HLSMAXd6)
005333  000082          Value := M1 + ( (M2 - M1) * Hin + HLSMAXd12 ) / HLSMAXd6 ;
005334  000083      else if (Hin < HLSMAXd2 )
005335  000084          Value := M2 ;
005336  000085      else if (Hin < HLSMAXm2d3)
005337  000086          Value := M1 + ( (M2 - M1) * (HLSMAXm2d3 - Hin) + HLSMAXd12) / HLSMAXd6 ;
005338  000087      else
005339  000088          Value := M1 ;
005340  000089      endif
005341  000090      return Value ;
005342  000091  endfunc
005343  000092        
005344  000093  func HLS2RGB(var H, var L, var S)
005345  000094      var M1, M2 ;
005346  000095        
005347  000096      if (S == 0)
005348  000097          red   := L ;
005349  000098          green := L ;
005350  000099          blue  := L ;
005351  000100      else
005352  000101          if (L <= HLSMAXd2)
005353  000102              M2 := (L * (HLSMAX + S) + HLSMAXd2) / HLSMAX ;
005354  000103          else
005355  000104              M2 := L + S - ((L * S + HLSMAXd2) / HLSMAX) ;
005356  000105          endif
005357  000106        
005358  000107          M1 := 2 * L - M2 ;
005359  000108          // Determine levels of primary colours.
005360  000109          if ((H > HLSMAX ) || (H < 0)) h := 0 ;
005361  000110          red   := hue_RGB( H+HLSMAXd3, M1, M2 ) ;
005362  000111          green := hue_RGB( H,          M1, M2 ) ;
005363  000112          blue  := hue_RGB( H-HLSMAXd3, M1, M2 ) ;
005364  000113      endif
005365  000114        
005366  000115   endfunc
005367  000133        
005368  000134  func ColorpickerArrow(var oldp, var pos, var color)
005369  000135      gfx_TriangleFilled(pos-6, oldp+6,
005370  000136                         pos,   oldp,
005371  000137                         pos,   oldp+12, color) ;
005372  000138  endfunc
005373  000139        
005374  000140  var cptop, cpleft, cpheight, cpwidth, cpTpH, cpLpW, cpBGcol ;
005375  000141        
005376  000142  func getcpvars(var imgIdx)
005377  000143      cptop    := img_GetWord(hndl, imgIdx, IMAGE_YPOS);
005378  000144      cpleft   := img_GetWord(hndl, imgIdx, IMAGE_XPOS);
005379  000145      cpheight := img_GetWord(hndl, imgIdx, IMAGE_HEIGHT);
005380  000146      cpwidth  := img_GetWord(hndl, imgIdx, IMAGE_WIDTH);
005381  000147      cpBGcol  := img_GetWord(hndl, imgIdx, IMAGE_TAG2);
005382  000148      cpTpH    := cptop+cpheight ;
005383  000149      cpLpW    := cpleft+cpwidth ;
005384  000150      cpheight -= 12 ;
005385  000151  endfunc
005386  000152        
005387  000153  func setCpHSl(var imgobj, var objobj, var newColor)
005388  000154      var i, j ;
005389  000155      getcpvars(imgobj) ;
005390  000156      img_SetWord(hndl, imgobj, IMAGE_DELAY, newColor); // IMAGE_DELAY is used as current color
005391  000157      c565toRGBs(newColor) ;
005392  000158      RGB2HLS() ;
005393  000159      ColorpickerArrow(cpVars[objobj], cpLpW, cpBGcol) ;          // 'erase' old arrow
005394  000160      cpVars[objobj] := cpTpH - ( cpheight * l / HLSMAX) - 12;
005395  000161      ColorpickerArrow(cpVars[objobj], cpLpW, LIGHTGREY) ;
005396  000162      for (i := 0; i < cpheight; i++)
005397  000163          j := i * HLSMAX / cpheight ;
005398  000164          HLS2RGB(h, j, s) ;
005399  000165          gfx_Hline(cpTpH-7-i,cpLpW-22,cpLpW-7,RGBs2COL(red,green,blue)) ;
005400  000166      next
005401  000167      endfunc
005402  000475  #END
5403  1A91
5404  1A92
5405  1A93
5406  1A94
5407  1A95
5408  1A96
5409  1A97
5410  1A98
5411  1A99
5412  1A9A
5413  1A9B
5414  1A9C
5415  1A9D
5416  1A9E
5417  1A9F
5418  1AA0
5419  1AA1
5420  1AA2
5421  1AA3
5422  1AA4
5423  1AA5
5424  1AA6
5425  1AA7
5426  1AA8
5427  1AA9
5428  1AAA
5429  1AAB
5430  1AAC
5431  1AAD
5432  1AAE
5433  1AAF
5434  1AB0
5435  1AB1
5436  1AB2
5437  1AB3
5438  1AB4
5439  1AB5
5440  1AB6
5441  1AB7
5442  1AB8
5443  1AB9
5444  1ABA
5445  1ABB
5446  1ABC
5447  1ABD
5448  1ABE
5449  1ABF
5450  1AC0
5451  1AC1
5452  1AC2
5453  1AC3
5454  1AC4
5455  1AC5
5456  1AC6
5457  1AC7
5458  1AC8
5459  1AC9
5460  1ACA
5461  1ACB
5462  1ACC
5463  1ACD
5464  1ACE
5465  1ACF
5466  1AD0
5467  1AD1
5468  1AD2
5469  1AD3
5470  1AD4
5471  1AD5
5472  1AD6
5473  1AD7
5474  1AD8
5475  1AD9
5476  1ADA
5477  1ADB
5478  1ADC
5479  1ADD
5480  1ADE
5481  1ADF
5482  1AE0
5483  1AE1
5484  1AE2
5485  1AE3
5486  1AE4
5487  1AE5
5488  1AE6
5489  1AE7
5490  1AE8
5491  1AE9
5492  1AEA
5493  1AEB
5494  1AEC
5495  1AED
5496  1AEE
5497  1AEF
5498  1AF0
5499  1AF1
5500  1AF2
5501  1AF3
5502  1AF4
5503  1AF5
5504  1AF6
5505  1AF7
5506  1AF8
5507  1AF9
5508  1AFA
5509  1AFB
5510  1AFC
5511  1AFD
5512  1AFE
5513  1AFF
5514  1B00
5515  1B01
5516  1B02
5517  1B03
5518  1B04
5519  1B05
5520  1B06
5521  1B07
5522  1B08
5523  1B09
5524  1B0A
5525  1B0B
5526  1B0C
5527  1B0D
5528  1B0E
5529  1B0F
5530  1B10
5531  1B11
5532  1B12
5533  1B13
5534  1B14
5535  1B15
5536  1B16
5537  1B17
5538  1B18
5539  1B19
5540  1B1A
5541  1B1B
5542  1B1C
5543  1B1D
5544  1B1E
5545  1B1F
5546  1B20
5547  1B21
5548  1B22
5549  1B23
5550  1B24
5551  1B25
5552  1B26
5553  1B27
5554  1B28
5555  1B29
5556  1B2A
5557  1B2B
5558  1B2C
5559  1B2D
5560  1B2E
5561  1B2F
5562  1B30
5563  1B31
5564  1B32
5565  1B33
5566  1B34
5567  1B35
5568  1B36
5569  1B37
5570  1B38
5571  1B39
5572  1B3A
5573  1B3B
5574  1B3C
5575  1B3D
5576  1B3E
5577  1B3F
5578  1B40
5579  1B41
5580  1B42
5581  1B43
5582  1B44
5583  1B45
5584  1B46
5585  1B47
5586  1B48
5587  1B49
5588  1B4A
5589  1B4B
5590  1B4C
5591  1B4D
5592  1B4E
5593  1B4F
5594  1B50
5595  1B51
5596  1B52
5597  1B53
5598  1B54
5599  1B55
5600  1B56
5601  1B57
5602  1B58
5603  1B59
5604  1B5A
5605  1B5B
5606  1B5C
5607  1B5D
5608  1B5E
5609  1B5F
5610  1B60
5611  1B61
5612  1B62
5613  1B63
5614  1B64
5615  1B65
5616  1B66
5617  1B67
5618  1B68
5619  1B69
5620  1B6A
5621  1B6B
5622  1B6C
5623  1B6D
5624  1B6E
5625  1B6F
5626  1B70
5627  1B71
5628  1B72
5629  1B73
5630  1B74
5631  1B75
5632  1B76
5633  1B77
5634  1B78
5635  1B79
5636  1B7A
5637  1B7B
5638  1B7C
5639  1B7D
5640  1B7E
5641  1B7F
5642  1B80
5643  1B81
5644  1B82
5645  1B83
5646  1B84
5647  1B85
5648  1B86
5649  1B87
5650  1B88
5651  1B89
5652  1B8A
5653  1B8B
5654  1B8C
5655  1B8D
5656  1B8E
5657  1B8F
5658  1B90
5659  1B91
5660  1B92
5661  1B93
5662  1B94
5663  1B95
5664  1B96
5665  1B97
5666  1B98
5667  1B99
5668  1B9A
5669  1B9B
5670  1B9C
5671  1B9D
5672  1B9E
5673  1B9F
5674  1BA0
5675  1BA1
5676  1BA2
5677  1BA3
5678  1BA4
5679  1BA5
5680  1BA6
5681  1BA7
5682  1BA8
5683  1BA9
5684  1BAA
5685  1BAB
5686  1BAC
5687  1BAD
5688  1BAE
5689  1BAF
5690  1BB0
5691  1BB1
5692  1BB2
5693  1BB3
5694  1BB4
5695  1BB5
5696  1BB6
5697  1BB7
5698  1BB8
5699  1BB9
5700  1BBA
5701  1BBB
5702  1BBC
5703  1BBD
5704  1BBE
5705  1BBF
5706  1BC0
5707  1BC1
5708  1BC2
5709  1BC3
5710  1BC4
5711  1BC5
5712  1BC6
5713  1BC7
5714  1BC8
5715  1BC9
5716  1BCA
5717  1BCB
5718  1BCC
5719  1BCD
5720  1BCE
5721  1BCF
5722  1BD0
5723  1BD1
5724  1BD2
5725  1BD3
5726  1BD4
5727  1BD5
5728  1BD6
5729  1BD7
5730  1BD8
5731  1BD9
5732  1BDA
5733  1BDB
5734  1BDC
5735  1BDD
5736  1BDE
5737  1BDF
5738  1BE0
5739  1BE1
5740  1BE2
5741  1BE3
5742  1BE4
5743  1BE5
5744  1BE6
5745  1BE7
5746  1BE8
5747  1BE9
5748  1BEA
5749  1BEB
5750  1BEC
5751  1BED
5752  1BEE
5753  1BEF
5754  1BF0
5755  1BF1
5756  1BF2
5757  1BF3
5758  1BF4
5759  1BF5
5760  1BF6
5761  1BF7
5762  1BF8
5763  1BF9
5764  1BFA
5765  1BFB
5766  1BFC
5767  1BFD
5768  1BFE
5769  1BFF
5770  1C00
5771  1C01
5772  1C02
5773  1C03
5774  1C04
5775  1C05
5776  1C06
5777  1C07
5778  1C08
5779  1C09
5780  1C0A
5781  1C0B
5782  1C0C
5783  1C0D
5784  1C0E
5785  1C0F
5786  1C10
5787  1C11
5788  1C12
5789  1C13
5790  1C14
5791  1C15
5792  1C16
5793  1C17
5794  1C18
5795  1C19
5796  1C1A
5797  1C1B
5798  1C1C
5799  1C1D
5800  1C1E
5801  1C1F
5802  1C20
5803  1C21
5804  1C22
5805  1C23
5806  1C24
5807  1C25
5808  1C26
5809  1C27
5810  1C28
5811  1C29
5812  1C2A
5813  1C2B
5814  1C2C
5815  1C2D
5816  1C2E
5817  1C2F
5818  1C30
5819  1C31
5820  1C32
5821  1C33
5822  1C34
5823  1C35
5824  1C36
5825  1C37
5826  1C38
5827  1C39
5828  1C3A
5829  1C3B
5830  1C3C
5831  1C3D
5832  1C3E
5833  1C3F
5834  1C40
5835  1C41
5836  1C42
5837  1C43
5838  1C44
5839  1C45
5840  1C46
5841  1C47
5842  1C48
5843  1C49
5844  1C4A
5845  1C4B
5846  1C4C
5847  1C4D
5848  1C4E
5849  1C4F
5850  1C50
5851  1C51
5852  1C52
5853  1C53
5854  1C54
5855  1C55
5856  1C56
5857  1C57
5858  1C58
5859  1C59
5860  1C5A
5861  1C5B
5862  1C5C
5863  1C5D
5864  1C5E
5865  1C5F
5866  1C60
5867  1C61
5868  1C62
5869  1C63
5870  1C64
5871  1C65
5872  1C66
5873  1C67
5874  1C68
5875  1C69
5876  1C6A
5877  1C6B
5878  1C6C
5879  1C6D
5880  1C6E
5881  1C6F
5882  1C70
5883  1C71
5884  1C72
5885  1C73
5886  1C74
5887  1C75
5888  1C76
5889  1C77
5890  1C78
5891  1C79
5892  1C7A
5893  1C7B
5894  1C7C
5895  1C7D
5896  1C7E
5897  1C7F
5898  1C80
5899  1C81
5900  1C82
5901  1C83
5902  1C84
5903  1C85
5904  1C86
5905  1C87
5906  1C88
5907  1C89
5908  1C8A
5909  1C8B
5910  1C8C
5911  1C8D
5912  1C8E
5913  1C8F
5914  1C90
5915  1C91
5916  1C92
5917  1C93
5918  1C94
5919  1C95
5920  1C96
5921  1C97
5922  1C98
5923  1C99
5924  1C9A
5925  1C9B
5926  1C9C
5927  1C9D
5928  1C9E
5929  1C9F
5930  1CA0
5931  1CA1
5932  1CA2
5933  1CA3
5934  1CA4
5935  1CA5
5936  1CA6
5937  1CA7
5938  1CA8
5939  1CA9
5940  1CAA
5941  1CAB
5942  1CAC
5943  1CAD
5944  1CAE
5945  1CAF
5946  1CB0
5947  1CB1
5948  1CB2
5949  1CB3
5950  1CB4
5951  1CB5
5952  1CB6
5953  1CB7
5954  1CB8
5955  1CB9
5956  1CBA
5957  1CBB
5958  1CBC
5959  1CBD
5960  1CBE
5961  1CBF
5962  1CC0
5963  1CC1
5964  1CC2
5965  1CC3
5966  1CC4
5967  1CC5
5968  1CC6
5969  1CC7
5970  1CC8
5971  1CC9
5972  1CCA
5973  1CCB
5974  1CCC
5975  1CCD
5976  1CCE
5977  1CCF
5978  1CD0
5979  1CD1
5980  1CD2
5981  1CD3
5982  1CD4
5983  1CD5
5984  1CD6
5985  1CD7
5986  1CD8
5987  1CD9
5988  1CDA
5989  1CDB
5990  1CDC
5991  1CDD
5992  1CDE
5993  1CDF
5994  1CE0
5995  1CE1
5996  1CE2
5997  1CE3
5998  1CE4
5999  1CE5
6000  1CE6
6001  1CE7
6002  1CE8
6003  1CE9
6004  1CEA
6005  1CEB
6006  1CEC
6007  1CED
6008  1CEE
6009  1CEF
6010  1CF0
6011  1CF1
6012  1CF2
6013  1CF3
6014  1CF4
6015  1CF5
6016  1CF6
6017  1CF7
6018  1CF8
6019  1CF9
6020  1CFA
6021  1CFB
6022  1CFC
6023  1CFD
6024  1CFE
6025  1CFF
6026  1D00
6027  1D01
6028  1D02
6029  1D03
6030  1D04
6031  1D05
6032  1D06
6033  1D07
6034  1D08
6035  1D09
6036  1D0A
6037  1D0B
6038  1D0C
6039  1D0D
6040  1D0E
6041  1D0F
6042  1D10
6043  1D11
6044  1D12
6045  1D13
6046  1D14
6047  1D15
6048  1D16
6049  1D17
6050  1D18
6051  1D19
6052  1D1A
6053  1D1B
6054  1D1C
6055  1D1D
6056  1D1E
6057  1D1F
6058  1D20
6059  1D21
6060  1D22
6061  1D23
6062  1D24
6063  1D25
6064  1D26
6065  1D27
6066  1D28
6067  1D29
6068  1D2A
6069  1D2B
6070  1D2C
6071  1D2D
6072  1D2E
6073  1D2F
6074  1D30
6075  1D31
6076  1D32
6077  1D33
6078  1D34
6079  1D35
6080  1D36
6081  1D37
6082  1D38
6083  1D39
6084  1D3A
6085  1D3B
6086  1D3C
6087  1D3D
6088  1D3E
6089  1D3F
6090  1D40
6091  1D41
6092  1D42
6093  1D43
6094  1D44
6095  1D45
6096  1D46
6097  1D47
6098  1D48
6099  1D49
6100  1D4A
6101  1D4B
6102  1D4C
6103  1D4D
6104  1D4E
6105  1D4F
6106  1D50
6107  1D51
6108  1D52
6109  1D53
6110  1D54
6111  1D55
6112  1D56
6113  1D57
6114  1D58
6115  1D59
6116  1D5A
6117  1D5B
6118  1D5C
6119  1D5D
6120  1D5E
6121  1D5F
6122  1D60
6123  1D61
6124  1D62
6125  1D63
6126  1D64
6127  1D65
6128  1D66
6129  1D67
6130  1D68
6131  1D69
6132  1D6A
6133  1D6B
6134  1D6C
6135  1D6D
6136  1D6E
6137  1D6F
6138  1D70
6139  1D71
6140  1D72
6141  1D73
6142  1D74
6143  1D75
6144  1D76
6145  1D77
6146  1D78
6147  1D79
6148  1D7A
6149  1D7B
6150  1D7C
6151  1D7D
6152  1D7E
6153  1D7F
6154  1D80
6155  1D81
6156  1D82
6157  1D83
6158  1D84
6159  1D85
6160  1D86
6161  1D87
6162  1D88
6163  1D89
6164  1D8A
6165  1D8B
6166  1D8C
6167  1D8D
6168  1D8E
6169  1D8F
6170  1D90
6171  1D91
6172  1D92
6173  1D93
6174  1D94
6175  1D95
6176  1D96
6177  1D97
6178  1D98
6179  1D99
6180  1D9A
6181  1D9B
6182  1D9C
6183  1D9D
6184  1D9E
6185  1D9F
6186  1DA0
6187  1DA1
6188  1DA2
6189  1DA3
6190  1DA4
6191  1DA5
6192  1DA6
6193  1DA7
6194  1DA8
6195  1DA9
6196  1DAA
6197  1DAB
6198  1DAC
6199  1DAD
6200  1DAE
6201  1DAF
6202  1DB0
6203  1DB1
6204  1DB2
6205  1DB3
6206  1DB4
6207  1DB5
6208  1DB6
6209  1DB7
6210  1DB8
6211  1DB9
6212  1DBA
6213  1DBB
6214  1DBC
6215  1DBD
6216  1DBE
6217  1DBF
6218  1DC0
6219  1DC1
6220  1DC2
6221  1DC3
6222  1DC4
6223  1DC5
6224  1DC6
6225  1DC7
6226  1DC8
6227  1DC9
6228  1DCA
6229  1DCB
6230  1DCC
6231  1DCD
6232  1DCE
6233  1DCF
6234  1DD0
6235  1DD1
6236  1DD2
6237  1DD3
6238  1DD4
6239  1DD5
6240  1DD6
6241  1DD7
6242  1DD8
6243  1DD9
6244  1DDA
6245  1DDB
6246  1DDC
6247  1DDD
6248  1DDE
6249  1DDF
6250  1DE0
6251  1DE1
6252  1DE2
6253  1DE3
6254  1DE4
6255  1DE5
6256  1DE6
6257  1DE7
6258  1DE8
6259  1DE9
6260  1DEA
6261  1DEB
6262  1DEC
6263  1DED
6264  1DEE
6265  1DEF
6266  1DF0
6267  1DF1
6268  1DF2
6269  1DF3
6270  1DF4
6271  1DF5
6272  1DF6
6273  1DF7
6274  1DF8
6275  1DF9
6276  1DFA
6277  1DFB
6278  1DFC
6279  1DFD
6280  1DFE
6281  1DFF
6282  1E00
6283  1E01
6284  1E02
6285  1E03
6286  1E04
6287  1E05
6288  1E06
6289  1E07
6290  1E08
6291  1E09
6292  1E0A
6293  1E0B
6294  1E0C
6295  1E0D
6296  1E0E
6297  1E0F
6298  1E10
6299  1E11
6300  1E12
6301  1E13
6302  1E14
6303  1E15
6304  1E16
6305  1E17
6306  1E18
6307  1E19
6308  1E1A
6309  1E1B
6310  1E1C
6311  1E1D
6312  1E1E
6313  1E1F
6314  1E20
6315  1E21
6316  1E22
6317  1E23
6318  1E24
6319  1E25
6320  1E26
6321  1E27
6322  1E28
6323  1E29
6324  1E2A
6325  1E2B
6326  1E2C
6327  1E2D
6328  1E2E
6329  1E2F
6330  1E30
6331  1E31
6332  1E32
6333  1E33
6334  1E34
6335  1E35
6336  1E36
6337  1E37
6338  1E38
6339  1E39
6340  1E3A
6341  1E3B
6342  1E3C
6343  1E3D
6344  1E3E
6345  1E3F
6346  1E40
6347  1E41
6348  1E42
6349  1E43
6350  1E44
6351  1E45
6352  1E46
6353  1E47
6354  1E48
6355  1E49
6356  1E4A
6357  1E4B
6358  1E4C
6359  1E4D
6360  1E4E
6361  1E4F
6362  1E50
6363  1E51
6364  1E52
6365  1E53
6366  1E54
6367  1E55
6368  1E56
6369  1E57
6370  1E58
6371  1E59
6372  1E5A
6373  1E5B
6374  1E5C
6375  1E5D
6376  1E5E
6377  1E5F
6378  1E60
6379  1E61
6380  1E62
6381  1E63
6382  1E64
6383  1E65
6384  1E66
6385  1E67
6386  1E68
6387  1E69
6388  1E6A
6389  1E6B
6390  1E6C
6391  1E6D
6392  1E6E
6393  1E6F
6394  1E70
6395  1E71
6396  1E72
6397  1E73
6398  1E74
6399  1E75
6400  1E76
6401  1E77
6402  1E78
6403  1E79
6404  1E7A
6405  1E7B
6406  1E7C
6407  1E7D
6408  1E7E
6409  1E7F
6410  1E80
6411  1E81
6412  1E82
6413  1E83
6414  1E84
6415  1E85
6416  1E86
6417  1E87
6418  1E88
6419  1E89
6420  1E8A
6421  1E8B
6422  1E8C
6423  1E8D
6424  1E8E
6425  1E8F
6426  1E90
6427  1E91
6428  1E92
6429  1E93
6430  1E94
6431  1E95
6432  1E96
6433  1E97
6434  1E98
6435  1E99
6436  1E9A
6437  1E9B
6438  1E9C
6439  1E9D
6440  1E9E
6441  1E9F
6442  1EA0
6443  1EA1
6444  1EA2
6445  1EA3
6446  1EA4
6447  1EA5
6448  1EA6
6449  1EA7
6450  1EA8
6451  1EA9
6452  1EAA
6453  1EAB
6454  1EAC
6455  1EAD
6456  1EAE
6457  1EAF
6458  1EB0
6459  1EB1
6460  1EB2
6461  1EB3
6462  1EB4
6463  1EB5
6464  1EB6
6465  1EB7
6466  1EB8
6467  1EB9
6468  1EBA
6469  1EBB
6470  1EBC
6471  1EBD
6472  1EBE
6473  1EBF
6474  1EC0
6475  1EC1
6476  1EC2
6477  1EC3
6478  1EC4
6479  1EC5
6480  1EC6
6481  1EC7
6482  1EC8
6483  1EC9
6484  1ECA
6485  1ECB
6486  1ECC
6487  1ECD
6488  1ECE
6489  1ECF
6490  1ED0
6491  1ED1
6492  1ED2
6493  1ED3
6494  1ED4
6495  1ED5
6496  1ED6
6497  1ED7
6498  1ED8
6499  1ED9
6500  1EDA
6501  1EDB
6502  1EDC
6503  1EDD
6504  1EDE
6505  1EDF
6506  1EE0
6507  1EE1
6508  1EE2
6509  1EE3
6510  1EE4
6511  1EE5
6512  1EE6
6513  1EE7
6514  1EE8
6515  1EE9
6516  1EEA
6517  1EEB
6518  1EEC
6519  1EED
6520  1EEE
6521  1EEF
6522  1EF0
6523  1EF1
6524  1EF2
6525  1EF3
6526  1EF4
6527  1EF5
6528  1EF6
6529  1EF7
6530  1EF8
6531  1EF9
6532  1EFA
6533  1EFB
6534  1EFC
6535  1EFD
6536  1EFE
6537  1EFF
6538  1F00
6539  1F01
6540  1F02
6541  1F03
6542  1F04
6543  1F05
6544  1F06
6545  1F07
6546  1F08
6547  1F09
6548  1F0A
6549  1F0B
6550  1F0C
6551  1F0D
6552  1F0E
6553  1F0F
6554  1F10
6555  1F11
6556  1F12
6557  1F13
6558  1F14
6559  1F15
6560  1F16
6561  1F17
6562  1F18
6563  1F19
6564  1F1A
6565  1F1B
6566  1F1C
6567  1F1D
6568  1F1E
6569  1F1F
6570  1F20
6571  1F21
6572  1F22
6573  1F23
6574  1F24
6575  1F25
6576  1F26
6577  1F27
6578  1F28
6579  1F29
6580  1F2A
6581  1F2B
6582  1F2C
6583  1F2D
6584  1F2E
6585  1F2F
6586  1F30
6587  1F31
6588  1F32
6589  1F33
6590  1F34
6591  1F35
6592  1F36
6593  1F37
6594  1F38
6595  1F39
6596  1F3A
6597  1F3B
6598  1F3C
6599  1F3D
6600  1F3E
6601  1F3F
6602  1F40
6603  1F41
6604  1F42
6605  1F43
6606  1F44
6607  1F45
6608  1F46
6609  1F47
6610  1F48
6611  1F49
6612  1F4A
6613  1F4B
6614  1F4C
6615  1F4D
6616  1F4E
6617  1F4F
6618  1F50
6619  1F51
6620  1F52
6621  1F53
6622  1F54
6623  1F55
6624  1F56
6625  1F57
6626  1F58
6627  1F59
6628  1F5A
6629  1F5B
6630  1F5C
6631  1F5D
6632  1F5E
6633  1F5F
6634  1F60
6635  1F61
6636  1F62
6637  1F63
6638  1F64
6639  1F65
6640  1F66
6641  1F67
6642  1F68
6643  1F69
6644  1F6A
6645  1F6B
6646  1F6C
6647  1F6D
6648  1F6E
6649  1F6F
6650  1F70
6651  1F71
6652  1F72
6653  1F73
6654  1F74
6655  1F75
6656  1F76
6657  1F77
6658  1F78
6659  1F79
6660  1F7A
6661  1F7B
6662  1F7C
6663  1F7D
6664  1F7E
6665  1F7F
6666  1F80
6667  1F81
6668  1F82
6669  1F83
6670  1F84
6671  1F85
6672  1F86
6673  1F87
6674  1F88
6675  1F89
6676  1F8A
6677  1F8B
6678  1F8C
6679  1F8D
6680  1F8E
6681  1F8F
6682  1F90
6683  1F91
6684  1F92
6685  1F93
6686  1F94
6687  1F95
6688  1F96
6689  1F97
6690  1F98
6691  1F99
6692  1F9A
6693  1F9B
6694  1F9C
6695  1F9D
6696  1F9E
6697  1F9F
6698  1FA0
6699  1FA1
6700  1FA2
6701  1FA3
6702  1FA4
6703  1FA5
6704  1FA6
6705  1FA7
6706  1FA8
6707  1FA9
6708  1FAA
6709  1FAB
6710  1FAC
6711  1FAD
6712  1FAE
6713  1FAF
6714  1FB0
6715  1FB1
6716  1FB2
6717  1FB3
6718  1FB4
6719  1FB5
6720  1FB6
6721  1FB7
6722  1FB8
6723  1FB9
6724  1FBA
6725  1FBB
6726  1FBC
6727  1FBD
6728  1FBE
6729  1FBF
6730  1FC0
6731  1FC1
6732  1FC2
6733  1FC3
6734  1FC4
6735  1FC5
6736  1FC6
6737  1FC7
6738  1FC8
6739  1FC9
6740  1FCA
6741  1FCB
6742  1FCC
6743  1FCD
6744  1FCE
6745  1FCF
6746  1FD0
6747  1FD1
6748  1FD2
6749  1FD3
6750  1FD4
6751  1FD5
6752  1FD6
6753  1FD7
6754  1FD8
6755  1FD9
6756  1FDA
6757  1FDB
6758  1FDC
6759  1FDD
6760  1FDE
6761  1FDF
6762  1FE0
6763  1FE1
6764  1FE2
6765  1FE3
6766  1FE4
6767  1FE5
6768  1FE6
6769  1FE7
6770  1FE8
6771  1FE9
6772  1FEA
6773  1FEB
6774  1FEC
6775  1FED
6776  1FEE
6777  1FEF
6778  1FF0
6779  1FF1
6780  1FF2
6781  1FF3
6782  1FF4
6783  1FF5
6784  1FF6
6785  1FF7
6786  1FF8
6787  1FF9
6788  1FFA
6789  1FFB
6790  1FFC
6791  1FFD
6792  1FFE
6793  1FFF
6794  2000
6795  2001
6796  2002
6797  2003
6798  2004
6799  2005
6800  2006
6801  2007
6802  2008
6803  2009
6804  200A
6805  200B
6806  200C
6807  200D
6808  200E
6809  200F
6810  2010
6811  2011
6812  2012
6813  2013
6814  2014
6815  2015
6816  2016
6817  2017
6818  2018
6819  2019
6820  201A
6821  201B
6822  201C
6823  201D
6824  201E
6825  201F
6826  2020
6827  2021
6828  2022
6829  2023
6830  2024
6831  2025
6832  2026
6833  2027
6834  2028
6835  2029
6836  202A
6837  202B
6838  202C
6839  202D
6840  202E
6841  202F
6842  2030
6843  2031
6844  2032
6845  2033
6846  2034
6847  2035
6848  2036
6849  2037
6850  2038
6851  2039
6852  203A
6853  203B
6854  203C
6855  203D
6856  203E
6857  203F
6858  2040
6859  2041
6860  2042
6861  2043
6862  2044
6863  2045
6864  2046
6865  2047
6866  2048
6867  2049
6868  204A
6869  204B
6870  204C
6871  204D
6872  204E
6873  204F
6874  2050
6875  2051
6876  2052
6877  2053
6878  2054
6879  2055
6880  2056
6881  2057
6882  2058
6883  2059
6884  205A
6885  205B
6886  205C
6887  205D
6888  205E
6889  205F
6890  2060
6891  2061
6892  2062
6893  2063
6894  2064
6895  2065
6896  2066
6897  2067
6898  2068
6899  2069
6900  206A
6901  206B
6902  206C
6903  206D
6904  206E
6905  206F
6906  2070
6907  2071
6908  2072
6909  2073
6910  2074
6911  2075
6912  2076
6913  2077
6914  2078
6915  2079
6916  207A
6917  207B
6918  207C
6919  207D
6920  207E
6921  207F
6922  2080
6923  2081
6924  2082
6925  2083
6926  2084
6927  2085
6928  2086
6929  2087
6930  2088
6931  2089
6932  208A
6933  208B
6934  208C
6935  208D
6936  208E
6937  208F
6938  2090
6939  2091
6940  2092
6941  2093
6942  2094
6943  2095
6944  2096
6945  2097
6946  2098
6947  2099
6948  209A
6949  209B
6950  209C
6951  209D
6952  209E
6953  209F
6954  20A0
6955  20A1
6956  20A2
6957  20A3
6958  20A4
6959  20A5
6960  20A6
6961  20A7
6962  20A8
6963  20A9
6964  20AA
6965  20AB
6966  20AC
6967  20AD
6968  20AE
6969  20AF
6970  20B0
6971  20B1
6972  20B2
6973  20B3
6974  20B4
6975  20B5
6976  20B6
6977  20B7
6978  20B8
6979  20B9
6980  20BA
6981  20BB
6982  20BC
6983  20BD
6984  20BE
6985  20BF
6986  20C0
6987  20C1
6988  20C2
6989  20C3
6990  20C4
6991  20C5
6992  20C6
6993  20C7
6994  20C8
6995  20C9
6996  20CA
6997  20CB
6998  20CC
6999  20CD
7000  20CE
7001  20CF
7002  20D0
7003  20D1
7004  20D2
7005  20D3
7006  20D4
7007  20D5
7008  20D6
7009  20D7
7010  20D8
7011  20D9
7012  20DA
7013  20DB
7014  20DC
7015  20DD
7016  20DE
7017  20DF
7018  20E0
7019  20E1
7020  20E2
7021  20E3
7022  20E4
7023  20E5
7024  20E6
7025  20E7
7026  20E8
7027  20E9
7028  20EA
7029  20EB
7030  20EC
7031  20ED
7032  20EE
7033  20EF
7034  20F0
7035  20F1
7036  20F2
7037  20F3
7038  20F4
7039  20F5
7040  20F6
7041  20F7
7042  20F8
7043  20F9
7044  20FA
7045  20FB
7046  20FC
7047  20FD
7048  20FE
7049  20FF
7050  2100
7051  2101
7052  2102
7053  2103
7054  2104
7055  2105
7056  2106
7057  2107
7058  2108
7059  2109
7060  210A
7061  210B
7062  210C
7063  210D
7064  210E
7065  210F
7066  2110
7067  2111
7068  2112
7069  2113
7070  2114
7071  2115
7072  2116
7073  2117
7074  2118
7075  2119
7076  211A
7077  211B
7078  211C
7079  211D
7080  211E
7081  211F
7082  2120
7083  2121
7084  2122
7085  2123
7086  2124
7087  2125
7088  2126
7089  2127
7090  2128
7091  2129
7092  212A
7093  212B
7094  212C
7095  212D
7096  212E
7097  212F
7098  2130
7099  2131
7100  2132
7101  2133
7102  2134
7103  2135
7104  2136
7105  2137
7106  2138
7107  2139
7108  213A
7109  213B
7110  213C
7111  213D
7112  213E
7113  213F
7114  2140
7115  2141
7116  2142
7117  2143
7118  2144
7119  2145
7120  2146
7121  2147
7122  2148
7123  2149
7124  214A
7125  214B
7126  214C
7127  214D
7128  214E
7129  214F
7130  2150
7131  2151
7132  2152
7133  2153
7134  2154
7135  2155
7136  2156
7137  2157
7138  2158
7139  2159
7140  215A
7141  215B
7142  215C
7143  215D
7144  215E
7145  215F
7146  2160
7147  2161
7148  2162
7149  2163
7150  2164
7151  2165
7152  2166
7153  2167
7154  2168
7155  2169
7156  216A
7157  216B
7158  216C
7159  216D
7160  216E
7161  216F
7162  2170
7163  2171
7164  2172
7165  2173
7166  2174
7167  2175
7168  2176
7169  2177
7170  2178
7171  2179
7172  217A
7173  217B
7174  217C
7175  217D
7176  217E
7177  217F
7178  2180
7179  2181
7180  2182
7181  2183
7182  2184
7183  2185
7184  2186
7185  2187
7186  2188
7187  2189
7188  218A
7189  218B
7190  218C
7191  218D
7192  218E
7193  218F
7194  2190
7195  2191
7196  2192
7197  2193
7198  2194
7199  2195
7200  2196
7201  2197
7202  2198
7203  2199
7204  219A
7205  219B
7206  219C
7207  219D
7208  219E
7209  219F
7210  21A0
7211  21A1
7212  21A2
7213  21A3
7214  21A4
7215  21A5
7216  21A6
7217  21A7
7218  21A8
7219  21A9
7220  21AA
7221  21AB
7222  21AC
7223  21AD
7224  21AE
7225  21AF
7226  21B0
7227  21B1
7228  21B2
7229  21B3
7230  21B4
7231  21B5
7232  21B6
7233  21B7
7234  21B8
7235  21B9
7236  21BA
7237  21BB
7238  21BC
7239  21BD
7240  21BE
7241  21BF
7242  21C0
7243  21C1
7244  21C2
7245  21C3
7246  21C4
7247  21C5
7248  21C6
7249  21C7
7250  21C8
7251  21C9
7252  21CA
7253  21CB
7254  21CC
7255  21CD
7256  21CE
7257  21CF
7258  21D0
7259  21D1
7260  21D2
7261  21D3
7262  21D4
7263  21D5
7264  21D6
7265  21D7
7266  21D8
7267  21D9
7268  21DA
7269  21DB
7270  21DC
7271  21DD
7272  21DE
7273  21DF
7274  21E0
7275  21E1
7276  21E2
7277  21E3
7278  21E4
7279  21E5
7280  21E6
7281  21E7
7282  21E8
7283  21E9
7284  21EA
7285  21EB
7286  21EC
7287  21ED
7288  21EE
7289  21EF
7290  21F0
7291  21F1
7292  21F2
7293  21F3
7294  21F4
7295  21F5
7296  21F6
7297  21F7
7298  21F8
7299  21F9
7300  21FA
7301  21FB
7302  21FC
7303  21FD
7304  21FE
7305  21FF
7306  2200
7307  2201
7308  2202
7309  2203
7310  2204
7311  2205
7312  2206
7313  2207
7314  2208
7315  2209
7316  220A
7317  220B
7318  220C
7319  220D
7320  220E
7321  220F
7322  2210
7323  2211
7324  2212
7325  2213
7326  2214
7327  2215
7328  2216
7329  2217
7330  2218
7331  2219
7332  221A
7333  221B
7334  221C
7335  221D
7336  221E
7337  221F
7338  2220
7339  2221
7340  2222
7341  2223
7342  2224
7343  2225
7344  2226
7345  2227
7346  2228
7347  2229
7348  222A
7349  222B
7350  222C
7351  222D
7352  222E
7353  222F
7354  2230
7355  2231
7356  2232
7357  2233
7358  2234
7359  2235
7360  2236
7361  2237
7362  2238
7363  2239
7364  223A
7365  223B
7366  223C
7367  223D
7368  223E
7369  223F
7370  2240
7371  2241
7372  2242
7373  2243
7374  2244
7375  2245
7376  2246
7377  2247
7378  2248
7379  2249
7380  224A
7381  224B
7382  224C
7383  224D
7384  224E
7385  224F
7386  2250
7387  2251
7388  2252
7389  2253
7390  2254
7391  2255
7392  2256
7393  2257
7394  2258
7395  2259
7396  225A
7397  225B
7398  225C
7399  225D
7400  225E
7401  225F
7402  2260
7403  2261
7404  2262
7405  2263
7406  2264
7407  2265
7408  2266
7409  2267
7410  2268
7411  2269
7412  226A
7413  226B
7414  226C
7415  226D
7416  226E
7417  226F
7418  2270
7419  2271
7420  2272
7421  2273
7422  2274
7423  2275
7424  2276
7425  2277
7426  2278
7427  2279
7428  227A
7429  227B
7430  227C
7431  227D
7432  227E
7433  227F
7434  2280
7435  2281
7436  2282
7437  2283
7438  2284
7439  2285
7440  2286
7441  2287
7442  2288
7443  2289
7444  228A
7445  228B
7446  228C
7447  228D
7448  228E
7449  228F
7450  2290
7451  2291
7452  2292
7453  2293
7454  2294
7455  2295
7456  2296
7457  2297
7458  2298
7459  2299
7460  229A
7461  229B
7462  229C
7463  229D
7464  229E
7465  229F
7466  22A0
7467  22A1
7468  22A2
7469  22A3
7470  22A4
7471  22A5
7472  22A6
7473  22A7
7474  22A8
7475  22A9
7476  22AA
7477  22AB
7478  22AC
7479  22AD
7480  22AE
7481  22AF
7482  22B0
7483  22B1
7484  22B2
7485  22B3
7486  22B4
7487  22B5
7488  22B6
7489  22B7
7490  22B8
7491  22B9
7492  22BA
7493  22BB
7494  22BC
7495  22BD
7496  22BE
7497  22BF
7498  22C0
7499  22C1
7500  22C2
7501  22C3
7502  22C4
7503  22C5
7504  22C6
7505  22C7
7506  22C8
7507  22C9
7508  22CA
7509  22CB
7510  22CC
7511  22CD
7512  22CE
7513  22CF
7514  22D0
7515  22D1
7516  22D2
7517  22D3
7518  22D4
7519  22D5
7520  22D6
7521  22D7
7522  22D8
7523  22D9
7524  22DA
7525  22DB
7526  22DC
7527  22DD
7528  22DE
7529  22DF
7530  22E0
7531  22E1
7532  22E2
7533  22E3
7534  22E4
7535  22E5
7536  22E6
7537  22E7
7538  22E8
7539  22E9
7540  22EA
7541  22EB
7542  22EC
7543  22ED
7544  22EE
7545  22EF
7546  22F0
7547  22F1
7548  22F2
7549  22F3
7550  22F4
7551  22F5
7552  22F6
7553  22F7
7554  22F8
7555  22F9
7556  22FA
7557  22FB
7558  22FC
7559  22FD
7560  22FE
7561  22FF
7562  2300
7563  2301
7564  2302
7565  2303
7566  2304
7567  2305
7568  2306
7569  2307
7570  2308
7571  2309
7572  230A
7573  230B
7574  230C
7575  230D
7576  230E
7577  230F
7578  2310
7579  2311
7580  2312
7581  2313
7582  2314
7583  2315
7584  2316
7585  2317
7586  2318
7587  2319
7588  231A
7589  231B
7590  231C
7591  231D
7592  231E
7593  231F
7594  2320
7595  2321
7596  2322
7597  2323
7598  2324
7599  2325
7600  2326
7601  2327
7602  2328
7603  2329
7604  232A
7605  232B
7606  232C
7607  232D
7608  232E
7609  232F
7610  2330
7611  2331
7612  2332
7613  2333
7614  2334
7615  2335
7616  2336
7617  2337
7618  2338
7619  2339
7620  233A
7621  233B
7622  233C
7623  233D
7624  233E
7625  233F
7626  2340
7627  2341
7628  2342
7629  2343
7630  2344
7631  2345
7632  2346
7633  2347
7634  2348
7635  2349
7636  234A
7637  234B
7638  234C
7639  234D
7640  234E
7641  234F
7642  2350
7643  2351
7644  2352
7645  2353
7646  2354
7647  2355
7648  2356
7649  2357
7650  2358
7651  2359
7652  235A
7653  235B
7654  235C
7655  235D
7656  235E
7657  235F
7658  2360
7659  2361
7660  2362
7661  2363
7662  2364
7663  2365
7664  2366
7665  2367
7666  2368
7667  2369
7668  236A
7669  236B
7670  236C
7671  236D
7672  236E
7673  236F
7674  2370
7675  2371
7676  2372
7677  2373
7678  2374
7679  2375
7680  2376
7681  2377
7682  2378
7683  2379
7684  237A
7685  237B
7686  237C
7687  237D
7688  237E
7689  237F
7690  2380
7691  2381
7692  2382
7693  2383
7694  2384
7695  2385
7696  2386
7697  2387
7698  2388
7699  2389
7700  238A
7701  238B
7702  238C
7703  238D
7704  238E
7705  238F
7706  2390
7707  2391
7708  2392
7709  2393
7710  2394
7711  2395
7712  2396
7713  2397
7714  2398
7715  2399
7716  239A
7717  239B
7718  239C
7719  239D
7720  239E
7721  239F
7722  23A0
7723  23A1
7724  23A2
7725  23A3
7726  23A4
7727  23A5
7728  23A6
7729  23A7
7730  23A8
7731  23A9
7732  23AA
7733  23AB
7734  23AC
7735  23AD
7736  23AE
7737  23AF
7738  23B0
7739  23B1
7740  23B2
7741  23B3
7742  23B4
7743  23B5
7744  23B6
7745  23B7
7746  23B8
7747  23B9
7748  23BA
7749  23BB
7750  23BC
7751  23BD
7752  23BE
7753  23BF
7754  23C0
7755  23C1
7756  23C2
7757  23C3
7758  23C4
7759  23C5
7760  23C6
7761  23C7
7762  23C8
7763  23C9
7764  23CA
7765  23CB
7766  23CC
7767  23CD
7768  23CE
7769  23CF
7770  23D0
7771  23D1
7772  23D2
7773  23D3
7774  23D4
7775  23D5
7776  23D6
7777  23D7
7778  23D8
7779  23D9
7780  23DA
7781  23DB
7782  23DC
7783  23DD
7784  23DE
7785  23DF
7786  23E0
7787  23E1
7788  23E2
7789  23E3
7790  23E4
7791  23E5
7792  23E6
7793  23E7
7794  23E8
7795  23E9
7796  23EA
7797  23EB
7798  23EC
7799  23ED
7800  23EE
7801  23EF
7802  23F0
7803  23F1
7804  23F2
7805  23F3
7806  23F4
7807  23F5
7808  23F6
7809  23F7
7810  23F8
7811  23F9
7812  23FA
7813  23FB
7814  23FC
7815  23FD
7816  23FE
7817  23FF
7818  2400
7819  2401
7820  2402
7821  2403
7822  2404
7823  2405
7824  2406
7825  2407
7826  2408
7827  2409
7828  240A
7829  240B
7830  240C
7831  240D
7832  240E
7833  240F
7834  2410
7835  2411
7836  2412
7837  2413
7838  2414
7839  2415
7840  2416
7841  2417
7842  2418
7843  2419
7844  241A
7845  241B
7846  241C
7847  241D
7848  241E
7849  241F
7850  2420
7851  2421
7852  2422
7853  2423
7854  2424
7855  2425
7856  2426
7857  2427
7858  2428
7859  2429
7860  242A
7861  242B
7862  242C
7863  242D
7864  242E
7865  242F
7866  2430
7867  2431
7868  2432
7869  2433
7870  2434
7871  2435
7872  2436
7873  2437
7874  2438
7875  2439
7876  243A
7877  243B
7878  243C
7879  243D
7880  243E
7881  243F
7882  2440
7883  2441
7884  2442
7885  2443
7886  2444
7887  2445
7888  2446
7889  2447
7890  2448
7891  2449
7892  244A
7893  244B
7894  244C
7895  244D
7896  244E
7897  244F
7898  2450
7899  2451
7900  2452
7901  2453
7902  2454
7903  2455
7904  2456
7905  2457
7906  2458
7907  2459
7908  245A
7909  245B
7910  245C
7911  245D
7912  245E
7913  245F
7914  2460
7915  2461
7916  2462
7917  2463
7918  2464
7919  2465
7920  2466
7921  2467
7922  2468
7923  2469
7924  246A
7925  246B
7926  246C
7927  246D
7928  246E
7929  246F
7930  2470
7931  2471
7932  2472
7933  2473
7934  2474
7935  2475
7936  2476
7937  2477
7938  2478
7939  2479
7940  247A
7941  247B
7942  247C
7943  247D
7944  247E
7945  247F
7946  2480
7947  2481
7948  2482
7949  2483
7950  2484
7951  2485
7952  2486
7953  2487
7954  2488
7955  2489
7956  248A
7957  248B
7958  248C
7959  248D
7960  248E
7961  248F
7962  2490
7963  2491
7964  2492
7965  2493
7966  2494
7967  2495
7968  2496
7969  2497
7970  2498
7971  2499
7972  249A
7973  249B
7974  249C
7975  249D
7976  249E
7977  249F
7978  24A0
7979  24A1
7980  24A2
7981  24A3
7982  24A4
7983  24A5
7984  24A6
7985  24A7
7986  24A8
7987  24A9
7988  24AA
7989  24AB
7990  24AC
7991  24AD
7992  24AE
7993  24AF
7994  24B0
7995  24B1
7996  24B2
7997  24B3
7998  24B4
7999  24B5
8000  24B6
8001  24B7
8002  24B8
8003  24B9
8004  24BA
8005  24BB
8006  24BC
8007  24BD
8008  24BE
8009  24BF
8010  24C0
8011  24C1
8012  24C2
8013  24C3
8014  24C4
8015  24C5
8016  24C6
8017  24C7
8018  24C8
8019  24C9
8020  24CA
8021  24CB
8022  24CC
8023  24CD
8024  24CE
8025  24CF
8026  24D0
8027  24D1
8028  24D2
8029  24D3
8030  24D4
8031  24D5
8032  24D6
8033  24D7
8034  24D8
8035  24D9
8036  24DA
8037  24DB
8038  24DC
8039  24DD
8040  24DE
8041  24DF
8042  24E0
8043  24E1
8044  24E2
8045  24E3
8046  24E4
8047  24E5
8048  24E6
8049  24E7
8050  24E8
8051  24E9
8052  24EA
8053  24EB
8054  24EC
8055  24ED
8056  24EE
8057  24EF
8058  24F0
8059  24F1
8060  24F2
8061  24F3
8062  24F4
8063  24F5
8064  24F6
8065  24F7
8066  24F8
8067  24F9
8068  24FA
8069  24FB
8070  24FC
8071  24FD
8072  24FE
8073  24FF
8074  2500
8075  2501
8076  2502
8077  2503
8078  2504
8079  2505
8080  2506
8081  2507
8082  2508
8083  2509
8084  250A
8085  250B
8086  250C
8087  250D
8088  250E
8089  250F
8090  2510
8091  2511
8092  2512
8093  2513
8094  2514
8095  2515
8096  2516
8097  2517
8098  2518
8099  2519
8100  251A
8101  251B
8102  251C
8103  251D
8104  251E
8105  251F
8106  2520
8107  2521
8108  2522
8109  2523
8110  2524
8111  2525
8112  2526
8113  2527
8114  2528
8115  2529
8116  252A
8117  252B
8118  252C
8119  252D
8120  252E
8121  252F
8122  2530
8123  2531
8124  2532
8125  2533
8126  2534
8127  2535
8128  2536
8129  2537
8130  2538
8131  2539
8132  253A
8133  253B
8134  253C
8135  253D
8136  253E
8137  253F
8138  2540
8139  2541
8140  2542
8141  2543
8142  2544
8143  2545
8144  2546
8145  2547
8146  2548
8147  2549
8148  254A
8149  254B
8150  254C
8151  254D
8152  254E
8153  254F
8154  2550
8155  2551
8156  2552
8157  2553
8158  2554
8159  2555
8160  2556
8161  2557
8162  2558
8163  2559
8164  255A
8165  255B
8166  255C
8167  255D
8168  255E
8169  255F
8170  2560
8171  2561
8172  2562
8173  2563
8174  2564
8175  2565
8176  2566
8177  2567
8178  2568
8179  2569
8180  256A
8181  256B
8182  256C
8183  256D
8184  256E
8185  256F
8186  2570
8187  2571
8188  2572
8189  2573
8190  2574
8191  2575
8192  2576
8193  2577
8194  2578
8195  2579
8196  257A
8197  257B
8198  257C
8199  257D
8200  257E
8201  257F
8202  2580
8203  2581
8204  2582
8205  2583
8206  2584
8207  2585
8208  2586
8209  2587
8210  2588
8211  2589
8212  258A
8213  258B
8214  258C
8215  258D
8216  258E
8217  258F
8218  2590
8219  2591
8220  2592
8221  2593
8222  2594
8223  2595
8224  2596
8225  2597
8226  2598
8227  2599
8228  259A
8229  259B
8230  259C
8231  259D
8232  259E
8233  259F
8234  25A0
8235  25A1
8236  25A2
8237  25A3
8238  25A4
8239  25A5
8240  25A6
8241  25A7
8242  25A8
8243  25A9
8244  25AA
8245  25AB
8246  25AC
8247  25AD
8248  25AE
8249  25AF
8250  25B0
8251  25B1
8252  25B2
8253  25B3
8254  25B4
8255  25B5
8256  25B6
8257  25B7
8258  25B8
8259  25B9
8260  25BA
8261  25BB
8262  25BC
8263  25BD
8264  25BE
8265  25BF
8266  25C0
8267  25C1
8268  25C2
8269  25C3
8270  25C4
8271  25C5
8272  25C6
8273  25C7
8274  25C8
8275  25C9
8276  25CA
8277  25CB
8278  25CC
8279  25CD
8280  25CE
8281  25CF
8282  25D0
8283  25D1
8284  25D2
8285  25D3
8286  25D4
8287  25D5
8288  25D6
8289  25D7
8290  25D8
8291  25D9
8292  25DA
8293  25DB
8294  25DC
8295  25DD
8296  25DE
8297  25DF
8298  25E0
8299  25E1
8300  25E2
8301  25E3
8302  25E4
8303  25E5
8304  25E6
8305  25E7
8306  25E8
8307  25E9
8308  25EA
8309  25EB
8310  25EC
8311  25ED
8312  25EE
8313  25EF
8314  25F0
8315  25F1
8316  25F2
8317  25F3
8318  25F4
8319  25F5
8320  25F6
8321  25F7
8322  25F8
8323  25F9
8324  25FA
8325  25FB
8326  25FC
8327  25FD
8328  25FE
8329  25FF
8330  2600
8331  2601
8332  2602
8333  2603
8334  2604
8335  2605
8336  2606
8337  2607
8338  2608
8339  2609
8340  260A
8341  260B
8342  260C
8343  260D
8344  260E
8345  260F
8346  2610
8347  2611
8348  2612
8349  2613
8350  2614
8351  2615
8352  2616
8353  2617
8354  2618
8355  2619
8356  261A
8357  261B
8358  261C
8359  261D
8360  261E
8361  261F
8362  2620
8363  2621
8364  2622
8365  2623
8366  2624
8367  2625
8368  2626
8369  2627
8370  2628
8371  2629
8372  262A
8373  262B
8374  262C
8375  262D
8376  262E
8377  262F
8378  2630
8379  2631
8380  2632
8381  2633
8382  2634
8383  2635
8384  2636
8385  2637
8386  2638
8387  2639
8388  263A
8389  263B
8390  263C
8391  263D
8392  263E
8393  263F
8394  2640
8395  2641
8396  2642
8397  2643
8398  2644
8399  2645
8400  2646
8401  2647
8402  2648
8403  2649
8404  264A
8405  264B
8406  264C
8407  264D
8408  264E
8409  264F
8410  2650
8411  2651
8412  2652
8413  2653
8414  2654
8415  2655
8416  2656
8417  2657
8418  2658
8419  2659
8420  265A
8421  265B
8422  265C
8423  265D
8424  265E
8425  265F
8426  2660
8427  2661
8428  2662
8429  2663
8430  2664
8431  2665
8432  2666
8433  2667
8434  2668
8435  2669
8436  266A
8437  266B
8438  266C
8439  266D
8440  266E
8441  266F
8442  2670
8443  2671
8444  2672
8445  2673
8446  2674
8447  2675
8448  2676
8449  2677
8450  2678
8451  2679
8452  267A
8453  267B
8454  267C
8455  267D
8456  267E
8457  267F
8458  2680
8459  2681
8460  2682
8461  2683
8462  2684
8463  2685
8464  2686
8465  2687
8466  2688
8467  2689
8468  268A
8469  268B
8470  268C
8471  268D
8472  268E
8473  268F
8474  2690
8475  2691
8476  2692
8477  2693
8478  2694
8479  2695
8480  2696
8481  2697
8482  2698
8483  2699
8484  269A
8485  269B
8486  269C
8487  269D
8488  269E
8489  269F
8490  26A0
8491  26A1
8492  26A2
8493  26A3
8494  26A4
8495  26A5
8496  26A6
8497  26A7
8498  26A8
8499  26A9
8500  26AA
8501  26AB
8502  26AC
8503  26AD
8504  26AE
8505  26AF
8506  26B0
8507  26B1
8508  26B2
8509  26B3
8510  26B4
8511  26B5
8512  26B6
8513  26B7
8514  26B8
8515  26B9
8516  26BA
8517  26BB
8518  26BC
8519  26BD
8520  26BE
8521  26BF
8522  26C0
8523  26C1
8524  26C2
8525  26C3
8526  26C4
8527  26C5
8528  26C6
8529  26C7
8530  26C8
8531  26C9
8532  26CA
8533  26CB
8534  26CC
8535  26CD
8536  26CE
8537  26CF
8538  26D0
8539  26D1
8540  26D2
8541  26D3
8542  26D4
8543  26D5
8544  26D6
8545  26D7
8546  26D8
8547  26D9
8548  26DA
8549  26DB
8550  26DC
8551  26DD
8552  26DE
8553  26DF
8554  26E0
8555  26E1
8556  26E2
8557  26E3
8558  26E4
8559  26E5
8560  26E6
8561  26E7
8562  26E8
8563  26E9
8564  26EA
8565  26EB
8566  26EC
8567  26ED
8568  26EE
8569  26EF
8570  26F0
8571  26F1
8572  26F2
8573  26F3
8574  26F4
8575  26F5
8576  26F6
8577  26F7
8578  26F8
8579  26F9
8580  26FA
8581  26FB
8582  26FC
8583  26FD
8584  26FE
8585  26FF
8586  2700
8587  2701
8588  2702
8589  2703
8590  2704
8591  2705
8592  2706
8593  2707
8594  2708
8595  2709
8596  270A
8597  270B
8598  270C
8599  270D
8600  270E
8601  270F
8602  2710
8603  2711
8604  2712
8605  2713
8606  2714
8607  2715
8608  2716
8609  2717
8610  2718
8611  2719
8612  271A
8613  271B
8614  271C
8615  271D
8616  271E
8617  271F
8618  2720
8619  2721
8620  2722
8621  2723
8622  2724
8623  2725
8624  2726
8625  2727
8626  2728
8627  2729
8628  272A
8629  272B
8630  272C
8631  272D
8632  272E
8633  272F
8634  2730
8635  2731
8636  2732
8637  2733
8638  2734
8639  2735
8640  2736
8641  2737
8642  2738
8643  2739
8644  273A
8645  273B
8646  273C
8647  273D
8648  273E
8649  273F
8650  2740
8651  2741
8652  2742
8653  2743
8654  2744
8655  2745
8656  2746
8657  2747
8658  2748
8659  2749
8660  274A
8661  274B
8662  274C
8663  274D
8664  274E
8665  274F
8666  2750
8667  2751
8668  2752
8669  2753
8670  2754
8671  2755
8672  2756
8673  2757
8674  2758
8675  2759
8676  275A
8677  275B
8678  275C
8679  275D
8680  275E
8681  275F
8682  2760
8683  2761
8684  2762
8685  2763
8686  2764
8687  2765
8688  2766
8689  2767
8690  2768
8691  2769
8692  276A
8693  276B
8694  276C
8695  276D
8696  276E
8697  276F
8698  2770
8699  2771
8700  2772
8701  2773
8702  2774
8703  2775
8704  2776
8705  2777
8706  2778
8707  2779
8708  277A
8709  277B
8710  277C
8711  277D
8712  277E
8713  277F
8714  2780
8715  2781
8716  2782
8717  2783
8718  2784
8719  2785
8720  2786
8721  2787
8722  2788
8723  2789
8724  278A
8725  278B
8726  278C
8727  278D
8728  278E
8729  278F
8730  2790
8731  2791
8732  2792
8733  2793
8734  2794
8735  2795
8736  2796
8737  2797
8738  2798
8739  2799
8740  279A
8741  279B
8742  279C
8743  279D
8744  279E
8745  279F
8746  27A0
8747  27A1
8748  27A2
8749  27A3
8750  27A4
8751  27A5
8752  27A6
8753  27A7
8754  27A8
8755  27A9
8756  27AA
8757  27AB
8758  27AC
8759  27AD
8760  27AE
8761  27AF
8762  27B0
8763  27B1
8764  27B2
8765  27B3
8766  27B4
8767  27B5
8768  27B6
8769  27B7
8770  27B8
8771  27B9
8772  27BA
8773  27BB
8774  27BC
8775  27BD
8776  27BE
8777  27BF
8778  27C0
8779  27C1
8780  27C2
8781  27C3
8782  27C4
8783  27C5
8784  27C6
8785  27C7
8786  27C8
8787  27C9
8788  27CA
8789  27CB
8790  27CC
8791  27CD
8792  27CE
8793  27CF
8794  27D0
8795  27D1
8796  27D2
8797  27D3
8798  27D4
8799  27D5
8800  27D6
8801  27D7
8802  27D8
8803  27D9
8804  27DA
8805  27DB
8806  27DC
8807  27DD
8808  27DE
8809  27DF
8810  27E0
8811  27E1
8812  27E2
8813  27E3
8814  27E4
8815  27E5
8816  27E6
8817  27E7
8818  27E8
8819  27E9
8820  27EA
8821  27EB
8822  27EC
8823  27ED
8824  27EE
8825  27EF
8826  27F0
8827  27F1
8828  27F2
8829  27F3
8830  27F4
8831  27F5
8832  27F6
8833  27F7
8834  27F8
8835  27F9
8836  27FA
8837  27FB
8838  27FC
8839  27FD
8840  27FE
8841  27FF
8842  2800
8843  2801
8844  2802
8845  2803
8846  2804
8847  2805
8848  2806
8849  2807
8850  2808
8851  2809
8852  280A
8853  280B
8854  280C
8855  280D
8856  280E
8857  280F
8858  2810
8859  2811
8860  2812
8861  2813
8862  2814
8863  2815
8864  2816
8865  2817
8866  2818
8867  2819
8868  281A
8869  281B
8870  281C
8871  281D
8872  281E
8873  281F
8874  2820
8875  2821
8876  2822
8877  2823
8878  2824
8879  2825
8880  2826
8881  2827
8882  2828
8883  2829
8884  282A
8885  282B
8886  282C
8887  282D
8888  282E
8889  282F
8890  2830
8891  2831
8892  2832
8893  2833
8894  2834
8895  2835
8896  2836
8897  2837
8898  2838
8899  2839
8900  283A
8901  283B
8902  283C
8903  283D
8904  283E
8905  283F
8906  2840
8907  2841
8908  2842
8909  2843
8910  2844
8911  2845
8912  2846
8913  2847
8914  2848
8915  2849
8916  284A
8917  284B
8918  284C
8919  284D
8920  284E
8921  284F
8922  2850
8923  2851
8924  2852
8925  2853
8926  2854
8927  2855
8928  2856
8929  2857
8930  2858
8931  2859
8932  285A
8933  285B
8934  285C
8935  285D
8936  285E
8937  285F
8938  2860
8939  2861
8940  2862
8941  2863
8942  2864
8943  2865
8944  2866
8945  2867
8946  2868
8947  2869
8948  286A
8949  286B
8950  286C
8951  286D
8952  286E
8953  286F
8954  2870
8955  2871
8956  2872
8957  2873
8958  2874
8959  2875
8960  2876
8961  2877
8962  2878
8963  2879
8964  287A
8965  287B
8966  287C
8967  287D
8968  287E
8969  287F
8970  2880
8971  2881
8972  2882
8973  2883
8974  2884
8975  2885
8976  2886
8977  2887
8978  2888
8979  2889
8980  288A
8981  288B
8982  288C
8983  288D
8984  288E
8985  288F
8986  2890
8987  2891
8988  2892
8989  2893
8990  2894
8991  2895
8992  2896
8993  2897
8994  2898
8995  2899
8996  289A
8997  289B
8998  289C
8999  289D
9000  289E
9001  289F
9002  28A0
9003  28A1
9004  28A2
9005  28A3
9006  28A4
9007  28A5
9008  28A6
9009  28A7
9010  28A8
9011  28A9
9012  28AA
9013  28AB
9014  28AC
9015  28AD
9016  28AE
9017  28AF
9018  28B0
9019  28B1
9020  28B2
9021  28B3
9022  28B4
9023  28B5
9024  28B6
9025  28B7
9026  28B8
9027  28B9
9028  28BA
9029  28BB
9030  28BC
9031  28BD
9032  28BE
9033  28BF
9034  28C0
9035  28C1
9036  28C2
9037  28C3
9038  28C4
9039  28C5
9040  28C6
9041  28C7
9042  28C8
9043  28C9
9044  28CA
9045  28CB
9046  28CC
9047  28CD
9048  28CE
9049  28CF
9050  28D0
9051  28D1
9052  28D2
9053  28D3
9054  28D4
9055  28D5
9056  28D6
9057  28D7
9058  28D8
9059  28D9
9060  28DA
9061  28DB
9062  28DC
9063  28DD
9064  28DE
9065  28DF
9066  28E0
9067  28E1
9068  28E2
9069  28E3
9070  28E4
9071  28E5
9072  28E6
9073  28E7
9074  28E8
9075  28E9
9076  28EA
9077  28EB
9078  28EC
9079  28ED
9080  28EE
9081  28EF
9082  28F0
9083  28F1
9084  28F2
9085  28F3
9086  28F4
9087  28F5
9088  28F6
9089  28F7
9090  28F8
9091  28F9
9092  28FA
9093  28FB
9094  28FC
9095  28FD
9096  28FE
9097  28FF
9098  2900
9099  2901
9100  2902
9101  2903
9102  2904
9103  2905
9104  2906
9105  2907
9106  2908
9107  2909
9108  290A
9109  290B
9110  290C
9111  290D
9112  290E
9113  290F
9114  2910
9115  2911
9116  2912
9117  2913
9118  2914
9119  2915
9120  2916
9121  2917
9122  2918
9123  2919
9124  291A
9125  291B
9126  291C
9127  291D
9128  291E
9129  291F
9130  2920
9131  2921
9132  2922
9133  2923
9134  2924
9135  2925
9136  2926
9137  2927
9138  2928
9139  2929
9140  292A
9141  292B
9142  292C
9143  292D
9144  292E
9145  292F
9146  2930
9147  2931
9148  2932
9149  2933
9150  2934
9151  2935
9152  2936
9153  2937
9154  2938
9155  2939
9156  293A
9157  293B
9158  293C
9159  293D
9160  293E
9161  293F
9162  2940
9163  2941
9164  2942
9165  2943
9166  2944
9167  2945
9168  2946
9169  2947
9170  2948
9171  2949
9172  294A
9173  294B
9174  294C
9175  294D
9176  294E
9177  294F
9178  2950
9179  2951
9180  2952
9181  2953
9182  2954
9183  2955
9184  2956
9185  2957
9186  2958
9187  2959
9188  295A
9189  295B
9190  295C
9191  295D
9192  295E
9193  295F
9194  2960
9195  2961
9196  2962
9197  2963
9198  2964
9199  2965
9200  2966
9201  2967
9202  2968
9203  2969
9204  296A
9205  296B
9206  296C
9207  296D
9208  296E
9209  296F
9210  2970
9211  2971
9212  2972
9213  2973
9214  2974
9215  2975
9216  2976
9217  2977
9218  2978
9219  2979
9220  297A
9221  297B
9222  297C
9223  297D
9224  297E
9225  297F
9226  2980
9227  2981
9228  2982
9229  2983
9230  2984
9231  2985
9232  2986
9233  2987
9234  2988
9235  2989
9236  298A
9237  298B
9238  298C
9239  298D
9240  298E
9241  298F
9242  2990
9243  2991
9244  2992
9245  2993
9246  2994
9247  2995
9248  2996
9249  2997
9250  2998
9251  2999
9252  299A
9253  299B
9254  299C
9255  299D
9256  299E
9257  299F
9258  29A0
9259  29A1
9260  29A2
9261  29A3
9262  29A4
9263  29A5
9264  29A6
9265  29A7
9266  29A8
9267  29A9
9268  29AA
9269  29AB
9270  29AC
9271  29AD
9272  29AE
9273  29AF
9274  29B0
9275  29B1
9276  29B2
9277  29B3
9278  29B4
9279  29B5
9280  29B6
9281  29B7
9282  29B8
9283  29B9
9284  29BA
9285  29BB
9286  29BC
9287  29BD
9288  29BE
9289  29BF
9290  29C0
9291  29C1
9292  29C2
9293  29C3
9294  29C4
9295  29C5
9296  29C6
9297  29C7
9298  29C8
9299  29C9
9300  29CA
9301  29CB
9302  29CC
9303  29CD
9304  29CE
9305  29CF
9306  29D0
9307  29D1
9308  29D2
9309  29D3
9310  29D4
9311  29D5
9312  29D6
9313  29D7
9314  29D8
9315  29D9
9316  29DA
9317  29DB
9318  29DC
9319  29DD
9320  29DE
9321  29DF
9322  29E0
9323  29E1
9324  29E2
9325  29E3
9326  29E4
9327  29E5
9328  29E6
9329  29E7
9330  29E8
9331  29E9
9332  29EA
9333  29EB
9334  29EC
9335  29ED
9336  29EE
9337  29EF
9338  29F0
9339  29F1
9340  29F2
9341  29F3
9342  29F4
9343  29F5
9344  29F6
9345  29F7
9346  29F8
9347  29F9
9348  29FA
9349  29FB
9350  29FC
9351  29FD
9352  29FE
9353  29FF
9354  2A00
9355  2A01
9356  2A02
9357  2A03
9358  2A04
9359  2A05
9360  2A06
9361  2A07
9362  2A08
9363  2A09
9364  2A0A
9365  2A0B
9366  2A0C
9367  2A0D
9368  2A0E
9369  2A0F
9370  2A10
9371  2A11
9372  2A12
9373  2A13
9374  2A14
9375  2A15
9376  2A16
9377  2A17
9378  2A18
9379  2A19
9380  2A1A
9381  2A1B
9382  2A1C
9383  2A1D
9384  2A1E
9385  2A1F
9386  2A20
9387  2A21
9388  2A22
9389  2A23
9390  2A24
9391  2A25
9392  2A26
9393  2A27
9394  2A28
9395  2A29
9396  2A2A
9397  2A2B
9398  2A2C
9399  2A2D
9400  2A2E
9401  2A2F
9402  2A30
9403  2A31
9404  2A32
9405  2A33
9406  2A34
9407  2A35
9408  2A36
9409  2A37
9410  2A38
9411  2A39
9412  2A3A
9413  2A3B
9414  2A3C
9415  2A3D
9416  2A3E
9417  2A3F
9418  2A40
9419  2A41
9420  2A42
9421  2A43
9422  2A44
9423  2A45
9424  2A46
9425  2A47
9426  2A48
9427  2A49
9428  2A4A
9429  2A4B
9430  2A4C
9431  2A4D
9432  2A4E
9433  2A4F
9434  2A50
9435  2A51
9436  2A52
9437  2A53
9438  2A54
9439  2A55
9440  2A56
9441  2A57
9442  2A58
9443  2A59
9444  2A5A
9445  2A5B
9446  2A5C
9447  2A5D
9448  2A5E
9449  2A5F
9450  2A60
9451  2A61
9452  2A62
9453  2A63
9454  2A64
9455  2A65
9456  2A66
9457  2A67
9458  2A68
9459  2A69
9460  2A6A
9461  2A6B
9462  2A6C
9463  2A6D
9464  2A6E
9465  2A6F
9466  2A70
9467  2A71
9468  2A72
9469  2A73
9470  2A74
9471  2A75
9472  2A76
9473  2A77
9474  2A78
9475  2A79
9476  2A7A
9477  2A7B
9478  2A7C
9479  2A7D
9480  2A7E
9481  2A7F
9482  2A80
9483  2A81
9484  2A82
9485  2A83
9486  2A84
9487  2A85
9488  2A86
9489  2A87
9490  2A88
9491  2A89
9492  2A8A
9493  2A8B
9494  2A8C
9495  2A8D
9496  2A8E
9497  2A8F
9498  2A90
9499  2A91
9500  2A92
9501  2A93
9502  2A94
9503  2A95
9504  2A96
9505  2A97
9506  2A98
9507  2A99
9508  2A9A
9509  2A9B
9510  2A9C
9511  2A9D
9512  2A9E
9513  2A9F
9514  2AA0
9515  2AA1
9516  2AA2
9517  2AA3
9518  2AA4
9519  2AA5
9520  2AA6
9521  2AA7
9522  2AA8
9523  2AA9
9524  2AAA
9525  2AAB
9526  2AAC
9527  2AAD
9528  2AAE
9529  2AAF
9530  2AB0
9531  2AB1
9532  2AB2
9533  2AB3
9534  2AB4
9535  2AB5
9536  2AB6
9537  2AB7
9538  2AB8
9539  2AB9
9540  2ABA
9541  2ABB
9542  2ABC
9543  2ABD
9544  2ABE
9545  2ABF
9546  2AC0
9547  2AC1
9548  2AC2
9549  2AC3
9550  2AC4
9551  2AC5
9552  2AC6
9553  2AC7
9554  2AC8
9555  2AC9
9556  2ACA
9557  2ACB
9558  2ACC
9559  2ACD
9560  2ACE
9561  2ACF
9562  2AD0
9563  2AD1
9564  2AD2
9565  2AD3
9566  2AD4
9567  2AD5
9568  2AD6
9569  2AD7
9570  2AD8
9571  2AD9
9572  2ADA
9573  2ADB
9574  2ADC
9575  2ADD
9576  2ADE
9577  2ADF
9578  2AE0
9579  2AE1
9580  2AE2
9581  2AE3
9582  2AE4
9583  2AE5
9584  2AE6
9585  2AE7
9586  2AE8
9587  2AE9
9588  2AEA
9589  2AEB
9590  2AEC
9591  2AED
9592  2AEE
9593  2AEF
9594  2AF0
9595  2AF1
9596  2AF2
9597  2AF3
9598  2AF4
9599  2AF5
9600  2AF6
9601  2AF7
9602  2AF8
9603  2AF9
9604  2AFA
9605  2AFB
9606  2AFC
9607  2AFD
9608  2AFE
9609  2AFF
9610  2B00
9611  2B01
9612  2B02
9613  2B03
9614  2B04
9615  2B05
9616  2B06
9617  2B07
9618  2B08
9619  2B09
9620  2B0A
9621  2B0B
9622  2B0C
9623  2B0D
9624  2B0E
9625  2B0F
9626  2B10
9627  2B11
9628  2B12
9629  2B13
9630  2B14
9631  2B15
9632  2B16
9633  2B17
9634  2B18
9635  2B19
9636  2B1A
9637  2B1B
9638  2B1C
9639  2B1D
9640  2B1E
9641  2B1F
9642  2B20
9643  2B21
9644  2B22
9645  2B23
9646  2B24
9647  2B25
9648  2B26
9649  2B27
9650  2B28
9651  2B29
9652  2B2A
9653  2B2B
9654  2B2C
9655  2B2D
9656  2B2E
9657  2B2F
9658  2B30
9659  2B31
9660  2B32
9661  2B33
9662  2B34
9663  2B35
9664  2B36
9665  2B37
9666  2B38
9667  2B39
9668  2B3A
9669  2B3B
9670  2B3C
9671  2B3D
9672  2B3E
9673  2B3F
9674  2B40
9675  2B41
9676  2B42
9677  2B43
9678  2B44
9679  2B45
9680  2B46
9681  2B47
9682  2B48
9683  2B49
9684  2B4A
9685  2B4B
9686  2B4C
9687  2B4D
9688  2B4E
9689  2B4F
9690  2B50
9691  2B51
9692  2B52
9693  2B53
9694  2B54
9695  2B55
9696  2B56
9697  2B57
9698  2B58
9699  2B59
9700  2B5A
9701  2B5B
9702  2B5C
9703  2B5D
9704  2B5E
9705  2B5F
9706  2B60
9707  2B61
9708  2B62
9709  2B63
9710  2B64
9711  2B65
9712  2B66
9713  2B67
9714  2B68
9715  2B69
9716  2B6A
9717  2B6B
9718  2B6C
9719  2B6D
9720  2B6E
9721  2B6F
9722  2B70
9723  2B71
9724  2B72
9725  2B73
9726  2B74
9727  2B75
9728  2B76
9729  2B77
9730  2B78
9731  2B79
9732  2B7A
9733  2B7B
9734  2B7C
9735  2B7D
9736  2B7E
9737  2B7F
9738  2B80
9739  2B81
9740  2B82
9741  2B83
9742  2B84
9743  2B85
9744  2B86
9745  2B87
9746  2B88
9747  2B89
9748  2B8A
9749  2B8B
9750  2B8C
9751  2B8D
9752  2B8E
9753  2B8F
9754  2B90
9755  2B91
9756  2B92
9757  2B93
9758  2B94
9759  2B95
9760  2B96
9761  2B97
9762  2B98
9763  2B99
9764  2B9A
9765  2B9B
9766  2B9C
9767  2B9D
9768  2B9E
9769  2B9F
9770  2BA0
9771  2BA1
9772  2BA2
9773  2BA3
9774  2BA4
9775  2BA5
9776  2BA6
9777  2BA7
9778  2BA8
9779  2BA9
9780  2BAA
9781  2BAB
9782  2BAC
9783  2BAD
9784  2BAE
9785  2BAF
9786  2BB0
9787  2BB1
9788  2BB2
9789  2BB3
9790  2BB4
9791  2BB5
9792  2BB6
9793  2BB7
9794  2BB8
9795  2BB9
9796  2BBA
9797  2BBB
9798  2BBC
9799  2BBD
9800  2BBE
9801  2BBF
9802  2BC0
9803  2BC1
9804  2BC2
9805  2BC3
9806  2BC4
9807  2BC5
9808  2BC6
9809  2BC7
9810  2BC8
9811  2BC9
9812  2BCA
9813  2BCB
9814  2BCC
9815  2BCD
9816  2BCE
9817  2BCF
9818  2BD0
9819  2BD1
9820  2BD2
9821  2BD3
9822  2BD4
9823  2BD5
9824  2BD6
9825  2BD7
9826  2BD8
9827  2BD9
9828  2BDA
9829  2BDB
9830  2BDC
9831  2BDD
9832  2BDE
9833  2BDF
9834  2BE0
9835  2BE1
9836  2BE2
9837  2BE3
9838  2BE4
9839  2BE5
9840  2BE6
9841  2BE7
9842  2BE8
9843  2BE9
9844  2BEA
9845  2BEB
9846  2BEC
9847  2BED
9848  2BEE
9849  2BEF
9850  2BF0
9851  2BF1
9852  2BF2
9853  2BF3
9854  2BF4
9855  2BF5
9856  2BF6
9857  2BF7
9858  2BF8
9859  2BF9
9860  2BFA
9861  2BFB
9862  2BFC
9863  2BFD
9864  2BFE
9865  2BFF
9866  2C00
9867  2C01
9868  2C02
9869  2C03
9870  2C04
9871  2C05
9872  2C06
9873  2C07
9874  2C08
9875  2C09
9876  2C0A
9877  2C0B
9878  2C0C
9879  2C0D
9880  2C0E
9881  2C0F
9882  2C10
9883  2C11
9884  2C12
9885  2C13
9886  2C14
9887  2C15
9888  2C16
9889  2C17
9890  2C18
9891  2C19
9892  2C1A
9893  2C1B
9894  2C1C
9895  2C1D
9896  2C1E
9897  2C1F
9898  2C20
9899  2C21
9900  2C22
9901  2C23
9902  2C24
9903  2C25
9904  2C26
9905  2C27
9906  2C28
9907  2C29
9908  2C2A
9909  2C2B
9910  2C2C
9911  2C2D
9912  2C2E
9913  2C2F
9914  2C30
9915  2C31
9916  2C32
9917  2C33
9918  2C34
9919  2C35
9920  2C36
9921  2C37
9922  2C38
9923  2C39
9924  2C3A
9925  2C3B
9926  2C3C
9927  2C3D
9928  2C3E
9929  2C3F
9930  2C40
9931  2C41
9932  2C42
9933  2C43
9934  2C44
9935  2C45
9936  2C46
9937  2C47
9938  2C48
9939  2C49
9940  2C4A
9941  2C4B
9942  2C4C
9943  2C4D
9944  2C4E
9945  2C4F
9946  2C50
9947  2C51
9948  2C52
9949  2C53
9950  2C54
9951  2C55
9952  2C56
9953  2C57
9954  2C58
9955  2C59
9956  2C5A
9957  2C5B
9958  2C5C
9959  2C5D
9960  2C5E
9961  2C5F
9962  2C60
9963  2C61
9964  2C62
9965  2C63
9966  2C64
9967  2C65
9968  2C66
9969  2C67
9970  2C68
9971  2C69
9972  2C6A
9973  2C6B
9974  2C6C
9975  2C6D
9976  2C6E
9977  2C6F
9978  2C70
9979  2C71
9980  2C72
9981  2C73
9982  2C74
9983  2C75
9984  2C76
9985  2C77
9986  2C78
9987  2C79
9988  2C7A
9989  2C7B
9990  2C7C
9991  2C7D
9992  2C7E
9993  2C7F
9994  2C80
9995  2C81
9996  2C82
9997  2C83
9998  2C84
9999  2C85
10000  2C86
10001  2C87
10002  2C88
10003  2C89
10004  2C8A
10005  2C8B
10006  2C8C
10007  2C8D
10008  2C8E
10009  2C8F
10010  2C90
10011  2C91
10012  2C92
10013  2C93
10014  2C94
10015  2C95
10016  2C96
10017  2C97
10018  2C98
10019  2C99
10020  2C9A
10021  2C9B
10022  2C9C
10023  2C9D
10024  2C9E
10025  2C9F
10026  2CA0
10027  2CA1
10028  2CA2
10029  2CA3
10030  2CA4
10031  2CA5
10032  2CA6
10033  2CA7
10034  2CA8
10035  2CA9
10036  2CAA
10037  2CAB
10038  2CAC
10039  2CAD
10040  2CAE
10041  2CAF
10042  2CB0
10043  2CB1
10044  2CB2
10045  2CB3
10046  2CB4
10047  2CB5
10048  2CB6
10049  2CB7
10050  2CB8
10051  2CB9
10052  2CBA
10053  2CBB
10054  2CBC
10055  2CBD
10056  2CBE
10057  2CBF
10058  2CC0
10059  2CC1
10060  2CC2
10061  2CC3
10062  2CC4
10063  2CC5
10064  2CC6
10065  2CC7
10066  2CC8
10067  2CC9
10068  2CCA
10069  2CCB
10070  2CCC
10071  2CCD
10072  2CCE
10073  2CCF
10074  2CD0
10075  2CD1
10076  2CD2
10077  2CD3
10078  2CD4
10079  2CD5
10080  2CD6
10081  2CD7
10082  2CD8
10083  2CD9
10084  2CDA
10085  2CDB
10086  2CDC
10087  2CDD
10088  2CDE
10089  2CDF
10090  2CE0
10091  2CE1
10092  2CE2
10093  2CE3
10094  2CE4
10095  2CE5
10096  2CE6
10097  2CE7
10098  2CE8
10099  2CE9
10100  2CEA
10101  2CEB
10102  2CEC
10103  2CED
10104  2CEE
10105  2CEF
10106  2CF0
10107  2CF1
10108  2CF2
10109  2CF3
10110  2CF4
10111  2CF5
10112  2CF6
10113  2CF7
10114  2CF8
10115  2CF9
10116  2CFA
10117  2CFB
10118  2CFC
10119  2CFD
10120  2CFE
10121  2CFF
10122  2D00
10123  2D01
10124  2D02
10125  2D03
10126  2D04
10127  2D05
10128  2D06
10129  2D07
10130  2D08
10131  2D09
10132  2D0A
10133  2D0B
10134  2D0C
10135  2D0D
10136  2D0E
10137  2D0F
10138  2D10
10139  2D11
10140  2D12
10141  2D13
10142  2D14
10143  2D15
10144  2D16
10145  2D17
10146  2D18
10147  2D19
10148  2D1A
10149  2D1B
10150  2D1C
10151  2D1D
10152  2D1E
10153  2D1F
10154  2D20
10155  2D21
10156  2D22
10157  2D23
10158  2D24
10159  2D25
10160  2D26
10161  2D27
10162  2D28
10163  2D29
10164  2D2A
10165  2D2B
10166  2D2C
10167  2D2D
10168  2D2E
10169  2D2F
10170  2D30
10171  2D31
10172  2D32
10173  2D33
10174  2D34
10175  2D35
10176  2D36
10177  2D37
10178  2D38
10179  2D39
10180  2D3A
10181  2D3B
10182  2D3C
10183  2D3D
10184  2D3E
10185  2D3F
10186  2D40
10187  2D41
10188  2D42
10189  2D43
10190  2D44
10191  2D45
10192  2D46
10193  2D47
10194  2D48
10195  2D49
10196  2D4A
10197  2D4B
10198  2D4C
10199  2D4D
10200  2D4E
10201  2D4F
10202  2D50
10203  2D51
10204  2D52
10205  2D53
10206  2D54
10207  2D55
10208  2D56
10209  2D57
10210  2D58
10211  2D59
10212  2D5A
10213  2D5B
10214  2D5C
10215  2D5D
10216  2D5E
10217  2D5F
10218  2D60
10219  2D61
10220  2D62
10221  2D63
10222  2D64
10223  2D65
10224  2D66
10225  2D67
10226  2D68
10227  2D69
10228  2D6A
10229  2D6B
10230  2D6C
10231  2D6D
10232  2D6E
10233  2D6F
10234  2D70
10235  2D71
10236  2D72
10237  2D73
10238  2D74
10239  2D75
10240  2D76
10241  2D77
10242  2D78
10243  2D79
10244  2D7A
10245  2D7B
10246  2D7C
10247  2D7D
10248  2D7E
10249  2D7F
10250  2D80
10251  2D81
10252  2D82
10253  2D83
10254  2D84
10255  2D85
10256  2D86
10257  2D87
10258  2D88
10259  2D89
10260  2D8A
10261  2D8B
10262  2D8C
10263  2D8D
10264  2D8E
10265  2D8F
10266  2D90
10267  2D91
10268  2D92
10269  2D93
10270  2D94
10271  2D95
10272  2D96
10273  2D97
10274  2D98
10275  2D99
10276  2D9A
10277  2D9B
10278  2D9C
10279  2D9D
10280  2D9E
10281  2D9F
10282  2DA0
10283  2DA1
10284  2DA2
10285  2DA3
10286  2DA4
10287  2DA5
10288  2DA6
10289  2DA7
10290  2DA8
10291  2DA9
10292  2DAA
10293  2DAB
10294  2DAC
10295  2DAD
10296  2DAE
10297  2DAF
10298  2DB0
10299  2DB1
10300  2DB2
10301  2DB3
10302  2DB4
10303  2DB5
10304  2DB6
10305  2DB7
10306  2DB8
10307  2DB9
10308  2DBA
10309  2DBB
10310  2DBC
10311  2DBD
10312  2DBE
10313  2DBF
10314  2DC0
10315  2DC1
10316  2DC2
10317  2DC3
10318  2DC4
10319  2DC5
10320  2DC6
10321  2DC7
10322  2DC8
10323  2DC9
10324  2DCA
10325  2DCB
10326  2DCC
10327  2DCD
10328  2DCE
10329  2DCF
10330  2DD0
10331  2DD1
10332  2DD2
10333  2DD3
10334  2DD4
10335  2DD5
10336  2DD6
10337  2DD7
10338  2DD8
10339  2DD9
10340  2DDA
10341  2DDB
10342  2DDC
10343  2DDD
10344  2DDE
10345  2DDF
10346  2DE0
10347  2DE1
10348  2DE2
10349  2DE3
10350  2DE4
10351  2DE5
10352  2DE6
10353  2DE7
10354  2DE8
10355  2DE9
10356  2DEA
10357  2DEB
10358  2DEC
10359  2DED
10360  2DEE
10361  2DEF
10362  2DF0
10363  2DF1
10364  2DF2
10365  2DF3
10366  2DF4
10367  2DF5
10368  2DF6
10369  2DF7
10370  2DF8
10371  2DF9
10372  2DFA
10373  2DFB
10374  2DFC
10375  2DFD
10376  2DFE
10377  2DFF
10378  2E00
10379  2E01
10380  2E02
10381  2E03
10382  2E04
10383  2E05
10384  2E06
10385  2E07
10386  2E08
10387  2E09
10388  2E0A
10389  2E0B
10390  2E0C
10391  2E0D
10392  2E0E
10393  2E0F
10394  2E10
10395  2E11
10396  2E12
10397  2E13
10398  2E14
10399  2E15
10400  2E16
10401  2E17
10402  2E18
10403  2E19
10404  2E1A
10405  2E1B
10406  2E1C
10407  2E1D
10408  2E1E
10409  2E1F
10410  2E20
10411  2E21
10412  2E22
10413  2E23
10414  2E24
10415  2E25
10416  2E26
10417  2E27
10418  2E28
10419  2E29
10420  2E2A
10421  2E2B
10422  2E2C
10423  2E2D
10424  2E2E
10425  2E2F
10426  2E30
10427  2E31
10428  2E32
10429  2E33
10430  2E34
10431  2E35
10432  2E36
10433  2E37
10434  2E38
10435  2E39
10436  2E3A
10437  2E3B
10438  2E3C
10439  2E3D
10440  2E3E
10441  2E3F
10442  2E40
10443  2E41
10444  2E42
10445  2E43
10446  2E44
10447  2E45
10448  2E46
10449  2E47
10450  2E48
10451  2E49
10452  2E4A
10453  2E4B
10454  2E4C
10455  2E4D
10456  2E4E
10457  2E4F
10458  2E50
10459  2E51
10460  2E52
10461  2E53
10462  2E54
10463  2E55
10464  2E56
10465  2E57
10466  2E58
10467  2E59
10468  2E5A
10469  2E5B
10470  2E5C
10471  2E5D
10472  2E5E
10473  2E5F
10474  2E60
10475  2E61
10476  2E62
10477  2E63
10478  2E64
10479  2E65
10480  2E66
10481  2E67
10482  2E68
10483  2E69
10484  2E6A
10485  2E6B
10486  2E6C
10487  2E6D
10488  2E6E
10489  2E6F
10490  2E70
10491  2E71
10492  2E72
10493  2E73
10494  2E74
10495  2E75
10496  2E76
10497  2E77
10498  2E78
10499  2E79
10500  2E7A
10501  2E7B
10502  2E7C
10503  2E7D
10504  2E7E
10505  2E7F
10506  2E80
10507  2E81
10508  2E82
10509  2E83
10510  2E84
10511  2E85
10512  2E86
10513  2E87
10514  2E88
10515  2E89
10516  2E8A
10517  2E8B
10518  2E8C
10519  2E8D
10520  2E8E
10521  2E8F
10522  2E90
10523  2E91
10524  2E92
10525  2E93
10526  2E94
10527  2E95
10528  2E96
10529  2E97
10530  2E98
10531  2E99
10532  2E9A
10533  2E9B
10534  2E9C
10535  2E9D
10536  2E9E
10537  2E9F
10538  2EA0
10539  2EA1
10540  2EA2
10541  2EA3
10542  2EA4
10543  2EA5
10544  2EA6
10545  2EA7
10546  2EA8
10547  2EA9
10548  2EAA
10549  2EAB
10550  2EAC
10551  2EAD
10552  2EAE
10553  2EAF
10554  2EB0
10555  2EB1
10556  2EB2
10557  2EB3
10558  2EB4
10559  2EB5
10560  2EB6
10561  2EB7
10562  2EB8
10563  2EB9
10564  2EBA
10565  2EBB
10566  2EBC
10567  2EBD
10568  2EBE
10569  2EBF
10570  2EC0
10571  2EC1
10572  2EC2
10573  2EC3
10574  2EC4
10575  2EC5
10576  2EC6
10577  2EC7
10578  2EC8
10579  2EC9
10580  2ECA
10581  2ECB
10582  2ECC
10583  2ECD
10584  2ECE
10585  2ECF
10586  2ED0
10587  2ED1
10588  2ED2
10589  2ED3
10590  2ED4
10591  2ED5
10592  2ED6
10593  2ED7
10594  2ED8
10595  2ED9
10596  2EDA
10597  2EDB
10598  2EDC
10599  2EDD
10600  2EDE
10601  2EDF
10602  2EE0
10603  2EE1
10604  2EE2
10605  2EE3
10606  2EE4
10607  2EE5
10608  2EE6
10609  2EE7
10610  2EE8
10611  2EE9
10612  2EEA
10613  2EEB
10614  2EEC
10615  2EED
10616  2EEE
10617  2EEF
10618  2EF0
10619  2EF1
10620  2EF2
10621  2EF3
10622  2EF4
10623  2EF5
10624  2EF6
10625  2EF7
10626  2EF8
10627  2EF9
10628  2EFA
10629  2EFB
10630  2EFC
10631  2EFD
10632  2EFE
10633  2EFF
10634  2F00
10635  2F01
10636  2F02
10637  2F03
10638  2F04
10639  2F05
10640  2F06
10641  2F07
10642  2F08
10643  2F09
10644  2F0A
10645  2F0B
10646  2F0C
10647  2F0D
10648  2F0E
10649  2F0F
10650  2F10
10651  2F11
10652  2F12
10653  2F13
10654  2F14
10655  2F15
10656  2F16
10657  2F17
10658  2F18
10659  2F19
10660  2F1A
10661  2F1B
10662  2F1C
10663  2F1D
10664  2F1E
10665  2F1F
10666  2F20
10667  2F21
10668  2F22
10669  2F23
10670  2F24
10671  2F25
10672  2F26
10673  2F27
10674  2F28
10675  2F29
10676  2F2A
10677  2F2B
10678  2F2C
10679  2F2D
10680  2F2E
10681  2F2F
10682  2F30
10683  2F31
10684  2F32
10685  2F33
10686  2F34
10687  2F35
10688  2F36
10689  2F37
10690  2F38
10691  2F39
10692  2F3A
10693  2F3B
10694  2F3C
10695  2F3D
10696  2F3E
10697  2F3F
10698  2F40
10699  2F41
10700  2F42
10701  2F43
10702  2F44
10703  2F45
10704  2F46
10705  2F47
10706  2F48
10707  2F49
10708  2F4A
10709  2F4B
10710  2F4C
10711  2F4D
10712  2F4E
10713  2F4F
10714  2F50
10715  2F51
10716  2F52
10717  2F53
10718  2F54
10719  2F55
10720  2F56
10721  2F57
10722  2F58
10723  2F59
10724  2F5A
10725  2F5B
10726  2F5C
10727  2F5D
10728  2F5E
10729  2F5F
10730  2F60
10731  2F61
10732  2F62
10733  2F63
10734  2F64
10735  2F65
10736  2F66
10737  2F67
10738  2F68
10739  2F69
10740  2F6A
10741  2F6B
10742  2F6C
10743  2F6D
10744  2F6E
10745  2F6F
10746  2F70
10747  2F71
10748  2F72
10749  2F73
10750  2F74
10751  2F75
10752  2F76
10753  2F77
10754  2F78
10755  2F79
10756  2F7A
10757  2F7B
10758  2F7C
10759  2F7D
10760  2F7E
10761  2F7F
10762  2F80
10763  2F81
10764  2F82
10765  2F83
10766  2F84
10767  2F85
10768  2F86
10769  2F87
10770  2F88
10771  2F89
10772  2F8A
10773  2F8B
10774  2F8C
10775  2F8D
10776  2F8E
10777  2F8F
10778  2F90
10779  2F91
10780  2F92
10781  2F93
10782  2F94
10783  2F95
10784  2F96
10785  2F97
10786  2F98
10787  2F99
10788  2F9A
10789  2F9B
10790  2F9C
10791  2F9D
10792  2F9E
10793  2F9F
10794  2FA0
10795  2FA1
10796  2FA2
10797  2FA3
10798  2FA4
10799  2FA5
10800  2FA6
10801  2FA7
10802  2FA8
10803  2FA9
10804  2FAA
10805  2FAB
10806  2FAC
10807  2FAD
10808  2FAE
10809  2FAF
10810  2FB0
10811  2FB1
10812  2FB2
10813  2FB3
10814  2FB4
10815  2FB5
10816  2FB6
10817  2FB7
10818  2FB8
10819  2FB9
10820  2FBA
10821  2FBB
10822  2FBC
10823  2FBD
10824  2FBE
10825  2FBF
10826  2FC0
10827  2FC1
10828  2FC2
10829  2FC3
10830  2FC4
10831  2FC5
10832  2FC6
10833  2FC7
10834  2FC8
10835  2FC9
10836  2FCA
10837  2FCB
10838  2FCC
10839  2FCD
10840  2FCE
10841  2FCF
10842  2FD0
10843  2FD1
10844  2FD2
10845  2FD3
10846  2FD4
10847  2FD5
10848  2FD6
10849  2FD7
10850  2FD8
10851  2FD9
10852  2FDA
10853  2FDB
10854  2FDC
10855  2FDD
10856  2FDE
10857  2FDF
10858  2FE0
10859  2FE1
10860  2FE2
10861  2FE3
10862  2FE4
10863  2FE5
10864  2FE6
10865  2FE7
10866  2FE8
10867  2FE9
10868  2FEA
10869  2FEB
10870  2FEC
10871  2FED
10872  2FEE
10873  2FEF
10874  2FF0
10875  2FF1
10876  2FF2
10877  2FF3
10878  2FF4
10879  2FF5
10880  2FF6
10881  2FF7
10882  2FF8
10883  2FF9
10884  2FFA
10885  2FFB
10886  2FFC
10887  2FFD
10888  2FFE
10889  2FFF
10890  3000
10891  3001
10892  3002
10893  3003
10894  3004
10895  3005
10896  3006
10897  3007
10898  3008
10899  3009
10900  300A
10901  300B
10902  300C
10903  300D
10904  300E
10905  300F
10906  3010
10907  3011
10908  3012
10909  3013
10910  3014
10911  3015
10912  3016
10913  3017
10914  3018
10915  3019
10916  301A
10917  301B
10918  301C
10919  301D
10920  301E
10921  301F
10922  3020
10923  3021
10924  3022
10925  3023
10926  3024
10927  3025
10928  3026
10929  3027
10930  3028
10931  3029
10932  302A
10933  302B
10934  302C
10935  302D
10936  302E
10937  302F
10938  3030
10939  3031
10940  3032
10941  3033
10942  3034
10943  3035
10944  3036
10945  3037
10946  3038
10947  3039
10948  303A
10949  303B
10950  303C
10951  303D
10952  303E
10953  303F
10954  3040
10955  3041
10956  3042
10957  3043
10958  3044
10959  3045
10960  3046
10961  3047
10962  3048
10963  3049
10964  304A
10965  304B
10966  304C
10967  304D
10968  304E
10969  304F
10970  3050
10971  3051
10972  3052
10973  3053
10974  3054
10975  3055
10976  3056
10977  3057
10978  3058
10979  3059
10980  305A
10981  305B
10982  305C
10983  305D
10984  305E
10985  305F
10986  3060
10987  3061
10988  3062
10989  3063
10990  3064
10991  3065
10992  3066
10993  3067
10994  3068
10995  3069
10996  306A
10997  306B
10998  306C
10999  306D
11000  306E
11001  306F
11002  3070
11003  3071
11004  3072
11005  3073
11006  3074
11007  3075
11008  3076
11009  3077
11010  3078
11011  3079
11012  307A
11013  307B
11014  307C
11015  307D
11016  307E
11017  307F
11018  3080
11019  3081
11020  3082
11021  3083
11022  3084
11023  3085
11024  3086
11025  3087
11026  3088
11027  3089
11028  308A
11029  308B
11030  308C
11031  308D
11032  308E
11033  308F
11034  3090
11035  3091
11036  3092
11037  3093
11038  3094
11039  3095
11040  3096
11041  3097
11042  3098
11043  3099
11044  309A
11045  309B
11046  309C
11047  309D
11048  309E
11049  309F
11050  30A0
11051  30A1
11052  30A2
11053  30A3
11054  30A4
11055  30A5
11056  30A6
11057  30A7
11058  30A8
11059  30A9
11060  30AA
11061  30AB
11062  30AC
11063  30AD
11064  30AE
11065  30AF
11066  30B0
11067  30B1
11068  30B2
11069  30B3
11070  30B4
11071  30B5
11072  30B6
11073  30B7
11074  30B8
11075  30B9
11076  30BA
11077  30BB
11078  30BC
11079  30BD
11080  30BE
11081  30BF
11082  30C0
11083  30C1
11084  30C2
11085  30C3
11086  30C4
11087  30C5
11088  30C6
11089  30C7
11090  30C8
11091  30C9
11092  30CA
11093  30CB
11094  30CC
11095  30CD
11096  30CE
11097  30CF
11098  30D0
11099  30D1
11100  30D2
11101  30D3
11102  30D4
11103  30D5
11104  30D6
11105  30D7
11106  30D8
11107  30D9
11108  30DA
11109  30DB
11110  30DC
11111  30DD
11112  30DE
11113  30DF
11114  30E0
11115  30E1
11116  30E2
11117  30E3
11118  30E4
11119  30E5
11120  30E6
11121  30E7
11122  30E8
11123  30E9
11124  30EA
11125  30EB
11126  30EC
11127  30ED
11128  30EE
11129  30EF
11130  30F0
11131  30F1
11132  30F2
11133  30F3
11134  30F4
11135  30F5
11136  30F6
11137  30F7
11138  30F8
11139  30F9
11140  30FA
11141  30FB
11142  30FC
11143  30FD
11144  30FE
11145  30FF
11146  3100
11147  3101
11148  3102
11149  3103
11150  3104
11151  3105
11152  3106
11153  3107
11154  3108
11155  3109
11156  310A
11157  310B
11158  310C
11159  310D
11160  310E
11161  310F
11162  3110
11163  3111
11164  3112
11165  3113
11166  3114
11167  3115
11168  3116
11169  3117
11170  3118
11171  3119
11172  311A
11173  311B
11174  311C
11175  311D
11176  311E
11177  311F
11178  3120
11179  3121
11180  3122
11181  3123
11182  3124
11183  3125
11184  3126
11185  3127
11186  3128
11187  3129
11188  312A
11189  312B
11190  312C
11191  312D
11192  312E
11193  312F
11194  3130
11195  3131
11196  3132
11197  3133
11198  3134
11199  3135
11200  3136
11201  3137
11202  3138
11203  3139
11204  313A
11205  313B
11206  313C
11207  313D
11208  313E
11209  313F
11210  3140
11211  3141
11212  3142
11213  3143
11214  3144
11215  3145
11216  3146
11217  3147
11218  3148
11219  3149
11220  314A
11221  314B
11222  314C
11223  314D
11224  314E
11225  314F
11226  3150
11227  3151
11228  3152
11229  3153
11230  3154
11231  3155
11232  3156
11233  3157
11234  3158
11235  3159
11236  315A
11237  315B
11238  315C
11239  315D
11240  315E
11241  315F
11242  3160
11243  3161
11244  3162
11245  3163
11246  3164
11247  3165
11248  3166
11249  3167
11250  3168
11251  3169
11252  316A
11253  316B
11254  316C
11255  316D
11256  316E
11257  316F
11258  3170
11259  3171
11260  3172
11261  3173
11262  3174
11263  3175
11264  3176
11265  3177
11266  3178
11267  3179
11268  317A
11269  317B
11270  317C
11271  317D
11272  317E
11273  317F
11274  3180
11275  3181
11276  3182
11277  3183
11278  3184
11279  3185
11280  3186
11281  3187
11282  3188
11283  3189
11284  318A
11285  318B
11286  318C
11287  318D
11288  318E
11289  318F
11290  3190
11291  3191
11292  3192
11293  3193
11294  3194
11295  3195
11296  3196
11297  3197
11298  3198
11299  3199
11300  319A
11301  319B
11302  319C
11303  319D
11304  319E
11305  319F
11306  31A0
11307  31A1
11308  31A2
11309  31A3
11310  31A4
11311  31A5
11312  31A6
11313  31A7
11314  31A8
11315  31A9
11316  31AA
11317  31AB
11318  31AC
11319  31AD
11320  31AE
11321  31AF
11322  31B0
11323  31B1
11324  31B2
11325  31B3
11326  31B4
11327  31B5
11328  31B6
11329  31B7
11330  31B8
11331  31B9
11332  31BA
11333  31BB
11334  31BC
11335  31BD
11336  31BE
11337  31BF
11338  31C0
11339  31C1
11340  31C2
11341  31C3
11342  31C4
11343  31C5
11344  31C6
11345  31C7
11346  31C8
11347  31C9
11348  31CA
11349  31CB
11350  31CC
11351  31CD
11352  31CE
11353  31CF
11354  31D0
11355  31D1
11356  31D2
11357  31D3
11358  31D4
11359  31D5
11360  31D6
11361  31D7
11362  31D8
11363  31D9
11364  31DA
11365  31DB
11366  31DC
11367  31DD
11368  31DE
11369  31DF
11370  31E0
11371  31E1
11372  31E2
11373  31E3
11374  31E4
11375  31E5
11376  31E6
11377  31E7
11378  31E8
11379  31E9
11380  31EA
11381  31EB
11382  31EC
11383  31ED
11384  31EE
11385  31EF
11386  31F0
11387  31F1
11388  31F2
11389  31F3
11390  31F4
11391  31F5
11392  31F6
11393  31F7
11394  31F8
11395  31F9
11396  31FA
11397  31FB
11398  31FC
11399  31FD
11400  31FE
11401  31FF
11402  3200
11403  3201
11404  3202
11405  3203
11406  3204
11407  3205
11408  3206
11409  3207
11410  3208
11411  3209
11412  320A
11413  320B
11414  320C
11415  320D
11416  320E
11417  320F
11418  3210
11419  3211
11420  3212
11421  3213
11422  3214
11423  3215
11424  3216
11425  3217
11426  3218
11427  3219
11428  321A
11429  321B
11430  321C
11431  321D
11432  321E
11433  321F
11434  3220
11435  3221
11436  3222
11437  3223
11438  3224
11439  3225
11440  3226
11441  3227
11442  3228
11443  3229
11444  322A
11445  322B
11446  322C
11447  322D
11448  322E
11449  322F
11450  3230
11451  3231
11452  3232
11453  3233
11454  3234
11455  3235
11456  3236
11457  3237
11458  3238
11459  3239
11460  323A
11461  323B
11462  323C
11463  323D
11464  323E
11465  323F
11466  3240
11467  3241
11468  3242
11469  3243
11470  3244
11471  3245
11472  3246
11473  3247
11474  3248
11475  3249
11476  324A
11477  324B
11478  324C
11479  324D
11480  324E
11481  324F
11482  3250
11483  3251
11484  3252
11485  3253
11486  3254
11487  3255
11488  3256
11489  3257
11490  3258
11491  3259
11492  325A
11493  325B
11494  325C
11495  325D
11496  325E
11497  325F
11498  3260
11499  3261
11500  3262
11501  3263
11502  3264
11503  3265
11504  3266
11505  3267
11506  3268
11507  3269
11508  326A
11509  326B
11510  326C
11511  326D
11512  326E
11513  326F
11514  3270
11515  3271
11516  3272
11517  3273
11518  3274
11519  3275
11520  3276
11521  3277
11522  3278
11523  3279
11524  327A
11525  327B
11526  327C
11527  327D
11528  327E
11529  327F
11530  3280
11531  3281
11532  3282
11533  3283
11534  3284
11535  3285
11536  3286
11537  3287
11538  3288
11539  3289
11540  328A
11541  328B
11542  328C
11543  328D
11544  328E
11545  328F
11546  3290
11547  3291
11548  3292
11549  3293
11550  3294
11551  3295
11552  3296
11553  3297
11554  3298
11555  3299
11556  329A
11557  329B
11558  329C
11559  329D
11560  329E
11561  329F
11562  32A0
11563  32A1
11564  32A2
11565  32A3
11566  32A4
11567  32A5
11568  32A6
11569  32A7
11570  32A8
11571  32A9
11572  32AA
11573  32AB
11574  32AC
11575  32AD
11576  32AE
11577  32AF
11578  32B0
11579  32B1
11580  32B2
11581  32B3
11582  32B4
11583  32B5
11584  32B6
11585  32B7
11586  32B8
11587  32B9
11588  32BA
11589  32BB
11590  32BC
11591  32BD
11592  32BE
11593  32BF
11594  32C0
11595  32C1
11596  32C2
11597  32C3
11598  32C4
11599  32C5
11600  32C6
11601  32C7
11602  32C8
11603  32C9
11604  32CA
11605  32CB
11606  32CC
11607  32CD
11608  32CE
11609  32CF
11610  32D0
11611  32D1
11612  32D2
11613  32D3
11614  32D4
11615  32D5
11616  32D6
11617  32D7
11618  32D8
11619  32D9
11620  32DA
11621  32DB
11622  32DC
11623  32DD
11624  32DE
11625  32DF
11626  32E0
11627  32E1
11628  32E2
11629  32E3
11630  32E4
11631  32E5
11632  32E6
11633  32E7
11634  32E8
11635  32E9
11636  32EA
11637  32EB
11638  32EC
11639  32ED
11640  32EE
11641  32EF
11642  32F0
11643  32F1
11644  32F2
11645  32F3
11646  32F4
11647  32F5
11648  32F6
11649  32F7
11650  32F8
11651  32F9
11652  32FA
11653  32FB
11654  32FC
11655  32FD
11656  32FE
11657  32FF
11658  3300
11659  3301
11660  3302
11661  3303
11662  3304
11663  3305
11664  3306
11665  3307
11666  3308
11667  3309
11668  330A
11669  330B
11670  330C
11671  330D
11672  330E
11673  330F
11674  3310
11675  3311
11676  3312
11677  3313
11678  3314
11679  3315
11680  3316
11681  3317
11682  3318
11683  3319
11684  331A
11685  331B
11686  331C
11687  331D
11688  331E
11689  331F
11690  3320
11691  3321
11692  3322
11693  3323
11694  3324
11695  3325
11696  3326
11697  3327
11698  3328
11699  3329
11700  332A
11701  332B
11702  332C
11703  332D
11704  332E
11705  332F
11706  3330
11707  3331
11708  3332
11709  3333
11710  3334
11711  3335
11712  3336
11713  3337
11714  3338
11715  3339
11716  333A
11717  333B
11718  333C
11719  333D
11720  333E
11721  333F
11722  3340
11723  3341
11724  3342
11725  3343
11726  3344
11727  3345
11728  3346
11729  3347
11730  3348
11731  3349
11732  334A
11733  334B
11734  334C
11735  334D
11736  334E
11737  334F
11738  3350
11739  3351
11740  3352
11741  3353
11742  3354
11743  3355
11744  3356
11745  3357
11746  3358
11747  3359
11748  335A
11749  335B
11750  335C
11751  335D
11752  335E
11753  335F
11754  3360
11755  3361
11756  3362
11757  3363
11758  3364
11759  3365
11760  3366
11761  3367
11762  3368
11763  3369
11764  336A
11765  336B
11766  336C
11767  336D
11768  336E
11769  336F
11770  3370
11771  3371
11772  3372
11773  3373
11774  3374
11775  3375
11776  3376
11777  3377
11778  3378
11779  3379
11780  337A
11781  337B
11782  337C
11783  337D
11784  337E
11785  337F
11786  3380
11787  3381
11788  3382
11789  3383
11790  3384
11791  3385
11792  3386
11793  3387
11794  3388
11795  3389
11796  338A
11797  338B
11798  338C
11799  338D
11800  338E
11801  338F
11802  3390
11803  3391
11804  3392
11805  3393
11806  3394
11807  3395
11808  3396
11809  3397
11810  3398
11811  3399
11812  339A
11813  339B
11814  339C
11815  339D
11816  339E
11817  339F
11818  33A0
11819  33A1
11820  33A2
11821  33A3
11822  33A4
11823  33A5
11824  33A6
11825  33A7
11826  33A8
11827  33A9
11828  33AA
11829  33AB
11830  33AC
11831  33AD
11832  33AE
11833  33AF
11834  33B0
11835  33B1
11836  33B2
11837  33B3
11838  33B4
11839  33B5
11840  33B6
11841  33B7
11842  33B8
11843  33B9
11844  33BA
11845  33BB
11846  33BC
11847  33BD
11848  33BE
11849  33BF
11850  33C0
11851  33C1
11852  33C2
11853  33C3
11854  33C4
11855  33C5
11856  33C6
11857  33C7
11858  33C8
11859  33C9
11860  33CA
11861  33CB
11862  33CC
11863  33CD
11864  33CE
11865  33CF
11866  33D0
11867  33D1
11868  33D2
11869  33D3
11870  33D4
11871  33D5
11872  33D6
11873  33D7
11874  33D8
11875  33D9
11876  33DA
11877  33DB
11878  33DC
11879  33DD
11880  33DE
11881  33DF
11882  33E0
11883  33E1
11884  33E2
11885  33E3
11886  33E4
11887  33E5
11888  33E6
11889  33E7
11890  33E8
11891  33E9
11892  33EA
11893  33EB
11894  33EC
11895  33ED
11896  33EE
11897  33EF
11898  33F0
11899  33F1
11900  33F2
11901  33F3
11902  33F4
11903  33F5
11904  33F6
11905  33F7
11906  33F8
11907  33F9
11908  33FA
11909  33FB
11910  33FC
11911  33FD
11912  33FE
11913  33FF
11914  3400
11915  3401
11916  3402
11917  3403
11918  3404
11919  3405
11920  3406
11921  3407
11922  3408
11923  3409
11924  340A
11925  340B
11926  340C
11927  340D
11928  340E
11929  340F
11930  3410
11931  3411
11932  3412
11933  3413
11934  3414
11935  3415
11936  3416
11937  3417
11938  3418
11939  3419
11940  341A
11941  341B
11942  341C
11943  341D
11944  341E
11945  341F
11946  3420
11947  3421
11948  3422
11949  3423
11950  3424
11951  3425
11952  3426
11953  3427
11954  3428
11955  3429
11956  342A
11957  342B
11958  342C
11959  342D
11960  342E
11961  342F
11962  3430
11963  3431
11964  3432
11965  3433
11966  3434
11967  3435
11968  3436
11969  3437
11970  3438
11971  3439
11972  343A
11973  343B
11974  343C
11975  343D
11976  343E
11977  343F
11978  3440
11979  3441
11980  3442
11981  3443
11982  3444
11983  3445
11984  3446
11985  3447
11986  3448
11987  3449
11988  344A
11989  344B
11990  344C
11991  344D
11992  344E
11993  344F
11994  3450
11995  3451
11996  3452
11997  3453
11998  3454
11999  3455
12000  3456
12001  3457
12002  3458
12003  3459
12004  345A
12005  345B
12006  345C
12007  345D
12008  345E
12009  345F
12010  3460
12011  3461
12012  3462
12013  3463
12014  3464
12015  3465
12016  3466
12017  3467
12018  3468
12019  3469
12020  346A
12021  346B
12022  346C
12023  346D
12024  346E
12025  346F
12026  3470
12027  3471
12028  3472
12029  3473
12030  3474
12031  3475
12032  3476
12033  3477
12034  3478
12035  3479
12036  347A
12037  347B
12038  347C
12039  347D
12040  347E
12041  347F
12042  3480
12043  3481
12044  3482
12045  3483
12046  3484
12047  3485
12048  3486
12049  3487
12050  3488
12051  3489
12052  348A
12053  348B
12054  348C
12055  348D
12056  348E
12057  348F
12058  3490
12059  3491
12060  3492
12061  3493
12062  3494
12063  3495
12064  3496
12065  3497
12066  3498
12067  3499
12068  349A
12069  349B
12070  349C
12071  349D
12072  349E
12073  349F
12074  34A0
12075  34A1
12076  34A2
12077  34A3
12078  34A4
12079  34A5
12080  34A6
12081  34A7
12082  34A8
12083  34A9
12084  34AA
12085  34AB
12086  34AC
12087  34AD
12088  34AE
12089  34AF
12090  34B0
12091  34B1
12092  34B2
12093  34B3
12094  34B4
12095  34B5
12096  34B6
012097  000476        
012098  000477  var cpVars[2] ;
012099  000478  var scTracebuf[40] ;   // each scope has 8 entries
012100  000479  var scCurpos[5] := [0, 0, 0, 0, 0] ;
12101  1A9B
12102  1A9C
12103  1A9D
12104  1A9E
12105  1A9F
12106  1AA0
12107  1AA1
12108  1AA2
12109  1AA3
12110  1AA4
012111  000480  var sc0Oldval1[116], sc0Newval1[116]  ;
012112  000481  var sc0Oldval2[116], sc0Newval2[116]  ;
012113  000482  var sc1Oldval1[74], sc1Newval1[74]  ;
012114  000483  var sc2Oldval1[74], sc2Newval1[74]  ;
012115  000484  var sc3Oldval1[74], sc3Newval1[74]  ;
012116  000485  var sc4Oldval1[601], sc4Newval1[601]  ;
012117  000486  // Start P2.inc
012118  000487  var oObjects[MaxTotObjects+1] ;                 // address of objects
012119  000488  var CurrentForm ;
012120  000489  var TouchXpos, TouchYpos ;
012121  000490  var InputType, TouchState, CurInputData, pInputIndex ;
012122  000491  var comRX[40], cmd[CMDLenMAX] ;
012123  000492        
012124  000493  var InputCS, OutputCS ;
012125  000494        
012126  000495        
012127  000496        
012128  000497  func seroutCS(var op)
012129  000498      serout(op) ;
012130  000499      OutputCS ^= op ;
012131  000500  endfunc
012132  000501        
012133  000502  func nak0()
012134  000503      serout(NAK) ;
012135  000504      InputCS := 0 ;
012136  000505  endfunc
012137  000506        
012138  000507  func seroutOcs()
012139  000508      serout(OutputCS) ;
012140  000509      OutputCS := 0 ;
012141  000510  endfunc
012142  000511        
012143  000512  func SendReport(var id, var objt, var objn, var val)
012144  000513      seroutCS(id) ;
012145  000514      seroutCS(objt) ;
012146  000515      seroutCS(objn) ;
012147  000516      seroutCS(val >> 8) ; // first 8 bits
012148  000517      seroutCS(val) ;
012149  000518      seroutOcs() ;
012150  000519  endfunc
012151  000520        
012152  000521  func TMul(var p1, var p2, var p3)
012153  000522      var var32[2], var322[2] ;
012154  000523      umul_1616(var32, p1, *(CurInputData+p2)) ;
012155  000524      umul_1616(var322, var32[1], *(CurInputData+p3)) ;
012156  000525      umul_1616(var32, var32[0], *(CurInputData+p3)) ;
012157  000526      return(var32[1] + var322[0]) ;
012158  000527  endfunc
012159  000528        
012160  000529  func ReadObject(var ObjectType, var ObjectIdx)
012161  000530      var j, k, Objects ;
012162  000531      Objects := *(oObjects+ObjectType) ;
012163  000532        
012164  000533      j := 2 + ObjectIdx * 2 + Objects ;
012165  000534       if (ObjectType == tForm)
012166  000535          k := CurrentForm ;
012167  000536      else if ((ObjectType == tCustomdigits) || (ObjectType == tLeddigits))
012168  000537          k := img_GetWord(hndl, *j, IMAGE_TAG2);
012169  000538      else if (ObjectType == tColorPicker)
012170  000539          k := img_GetWord(hndl, *j, IMAGE_DELAY);
012171  000540          else
012172  000541          k := img_GetWord(hndl, *j, IMAGE_INDEX);
012173  000542          if (((ObjectType == tWinButton) || (ObjectType == tAniButton) || (ObjectType == tUserButton) || (ObjectType == t4Dbutton)) && (k)) k := 1 ; // this is not correct for blocked buttons and cannot be fixed as we cannot
012174  000543                                                                                                                                                      // determine if button is momentary or not which is needed for correct answer.
012175  000544      endif
012176  000545      SendReport(REPORT_OBJ, ObjectType, ObjectIdx, k) ;
012177  000546  endfunc
012178  000547        
012179  000548  func Graticule(var x1, var y1, var x2, var y2, var xinc, var yinc, var color)
012180  000549      var TouchYpos ;
012181  000550      x1 += xinc ;
012182  000551      while (x1 < x2)
012183  000552          TouchYpos := y1 + yinc ;
012184  000553          while (TouchYpos < y2)
012185  000554              gfx_PutPixel(x1, TouchYpos, color) ;
012186  000555              TouchYpos += yinc ;
012187  000556          wend
012188  000557          x1 += xinc ;
012189  000558      wend
012190  000559  endfunc
012191  000560        
012192  000561  #CONST
012193  000587  #END
012194  000588  var told[4], tnew[4] ;
012195  000589        
012196  000590  func addressTraces(var ObjectIdx, var scopeIdx)
012197  000591      var i, j ;
012198  000592      j := ObjectIdx * 8 ;
012199  000593      for (i := 0; i < 4 ; i++)
012200  000594          if (i < oScopen[scopeIdx+scTraces])
012201  000595              told[i] := scTracebuf[2*i+j] ;
012202  000596              tnew[i] := scTracebuf[2*i+j+1] ;
012203  000597          else
012204  000598              told[i] := 0 ;
012205  000599              tnew[i] := 0 ;
012206  000600          endif
012207  000601      next
012208  000602  endfunc
012209  000603        
012210  000604  func drawScope(var j)
012211  000605      if (oScopen[j+scForm] == CurrentForm)
012212  000606          if (oScopen[j+scGraticuleVis]) Graticule(oScopen[j+scLeft], oScopen[j+scTop], oScopen[j+scRight], oScopen[j+scBottom],
012213  000607                                                    oScopen[j+scGraticuleXinc], oScopen[j+scGraticuleYinc], oScopen[j+scGraticuleCol]) ;
012214  000608          gfx_Scope(oScopen[j+scLeft], oScopen[j+scWidth], oScopen[j+scYZero],
012215  000609                    oScopen[j+scDataPoints], oScopen[j+scXmag],oScopen[j+scYamp], oScopen[j+scColor],
012216  000610                    told[0],tnew[0],oScopen[j+scTrace1Col], told[1],tnew[1],oScopen[j+scTrace2Col],  told[2],tnew[2],oScopen[j+scTrace3Col],  told[3],tnew[3],oScopen[j+scTrace4Col]
012217  000611                    );
012218  000612          if (oScopen[j+scYLineVis]) gfx_Hline(oScopen[j+scYLineForm], oScopen[j+scLeft], oScopen[j+scRight], oScopen[j+scYLineCol]) ;
012219  000613      endif
012220  000614  endfunc
012221  000615        
012222  000616  func doScope(var ObjectIdx, var NewVal)
012223  000617      var curarr, curtrace, i, j, *p ;
012224  000618      j := ObjectIdx * SCOPEENTS ;
012225  000619      curarr   := scCurpos[ObjectIdx] / oScopen[j+scTraces] ;
012226  000620      curtrace := scCurpos[ObjectIdx] % oScopen[j+scTraces] ;
012227  000621      addressTraces(ObjectIdx, j) ;
012228  000622      p := tnew[curtrace] ;
012229  000623      // move trace
012230  000624      mem_Copy(&p[1], &p[0], (oScopen[j+scDataPoints]-1)*2);    // this will only work in R35 and above PmmC
012231  000625      p[oScopen[j+scDataPoints]-1] := NewVal ;
012232  000626      if (   (curtrace == oScopen[j+scTraces]-1)
012233  000627          && (curarr == oScopen[j+scRefreshInc]-1 ) )
012234  000628          drawScope(j) ;
012235  000629          scCurpos[ObjectIdx] := 0 ;
012236  000630      else
012237  000631          scCurpos[ObjectIdx]++ ;
012238  000632      endif
012239  000633  endfunc
012240  000634        
012241  000635  func WriteObject(var ObjectType, var ObjectIdx, var NewVal)
012242  000636      var i, j, k, Objects ;
012243  000637      ObjectType &= 0x3f ;
012244  000638      if (ObjectType == tForm)
012245  000639          ActivateForm(ObjectIdx) ;
012246  000640      else if (ObjectType == tScope)
012247  000641          doScope(ObjectIdx, NewVal) ;
012248  000642      else
012249  000643          Objects := *(oObjects+ObjectType)+ObjectIdx*2+2 ;
012250  000644          i := *(Objects) ;
012251  000645          switch (ObjectType)
012252  000646              case tWinButton :
012253  000647                  j := InputControls[oWinButtons[ObjectIdx+1]] ;
012254  000648                  break ;
012255  000649              case t4Dbutton :
012256  000650                  j := InputControls[o4Dbuttons[ObjectIdx+1]] ;
012257  000651                  break ;
012258  000652              default : j := -1 ;
012259  000653          endswitch
012260  000654          if (j != -1)
012261  000655              k := img_GetWord(hndl, i , IMAGE_INDEX) ;
012262  000656              NewVal := NewVal << 1 ;
012263  000657              if (OVF())      // button group index change
012264  000658                  if (*(j+InputData+Ofs_IPD_P1))
012265  000659                      k &= 1 ;    // mask off old group index for momentary
012266  000660                  else
012267  000661                      k &= 3 ;    // mask off old group index for toggle
012268  000662                  endif
012269  000663              else            // normal set
012270  000664                  if (*(j+InputData+Ofs_IPD_P2) != -1) TurnOffButtons(*(j+InputData+Ofs_IPD_P2)) ;
012271  000665                  k &= 0xfffc ;    // retain only group index for state set
012272  000666              endif
012273  000667              NewVal |= k ;
012274  000668          endif
012275  000669          if (ObjectType == tColorPicker)
012276  000670              setCpHSl(i, ObjectIdx, NewVal) ;
012277  000671        
012278  000672          else if (ObjectType == tLeddigits)
012279  000673              img_SetWord(hndl, i , IMAGE_TAG2, NewVal); // where state is 0 to 2
012280  000674              ledDigitsDisplay(i, oLeddigitss, oLedDigitsn) ;
012281  000675          else
012282  000676              img_SetWord(hndl, i , IMAGE_INDEX, NewVal); // where state is 0 to 2
012283  000677              img_Show(hndl, i) ; // will only display if form is current
012284  000678          endif
012285  000679      endif
012286  000680  endfunc
012287  000681        
012288  000682  func TurnOffButtons(var group)
012289  000683      var j, k, l;
012290  000684      for (j := 0; j < nInputs; j++)
012291  000685          k := j*IPDatasize ;
012292  000686          if (*(InputData+k+Ofs_IPD_P2) == group)
012293  000687              l := -1 ;
012294  000688               if (*(InputData+k) == t4Dbutton)
012295  000689                  l := o4Dbuttons[*(InputData+k+Ofs_IPD_OBJVIDX)/2] ;
012296  000690                  img_SetWord(hndl, l, IMAGE_INDEX, 0);
012297  000691                  img_Show(hndl, l);      // only shows on current form
012298  000692              else if (*(InputData+k) == tWinButton)
012299  000693                  l := oWinButtons[*(InputData+k+Ofs_IPD_OBJVIDX)/2] ;
012300  000694                  img_SetWord(hndl, l, IMAGE_INDEX, 0);
012301  000695                  img_Show(hndl, l);      // only shows on current form
012302  000696              endif
012303  000697          endif
012304  000698      next
012305  000699  endfunc
012306  000700        
012307  000701        
012308  000702  // WARNING, this code will crash if newval exceeds maximum displayable number
012309  000703  func ledDigitsDisplay(var imgidx, var typeptr, var setptr)
012310  000704      var i, j, k, l, lb, newval ;
012311  000705      if (!((img_GetWord(hndl, imgidx, IMAGE_FLAGS) & I_ENABLED))) return ;  // ;img_GetWord(hndl, imgidx, IMAGE_TAG2) ;if diabled then exit
012312  000706      newval := img_GetWord(hndl, imgidx, IMAGE_TAG2) ;
012313  000707      i := -1 ;
012314  000708      j := *(typeptr) ;
012315  000709      repeat
012316  000710          typeptr += 2 ;
012317  000711          i++ ;
012318  000712          until (*(typeptr) == imgidx);
012319  000713      j := setptr + i*10 ;
012320  000714        
012321  000715      imgidx++ ;
012322  000716      l := 1 ;
012323  000717      for (i := 1; i < *(j+Ofs_Digits_Digits); i++)
012324  000718          l *= 10 ;
012325  000719      next
012326  000720      lb := *(j+Ofs_Digits_LeadingBlanks) ;
012327  000721      for (i := 0; i < *(j+Ofs_Digits_Digits); i++)
012328  000722          k := newval / l ;
012329  000723          newval -= k * l ;
012330  000724          if ( lb && (i < *(j+Ofs_Digits_Digits) - *(j+Ofs_Digits_MinDigits)) )
012331  000725              if (k == 0)
012332  000726                  k := 10 ;
012333  000727              else
012334  000728                  lb := 0 ;
012335  000729              endif
012336  000730          endif
012337  000731          l /= 10 ;
012338  000732          img_SetWord(hndl, imgidx, IMAGE_INDEX, k);
012339  000733          img_SetWord(hndl, imgidx, IMAGE_XPOS, *(j+Ofs_Digits_Left)+i* *(j+Ofs_Digits_Widthdigit)) ;
012340  000734          img_Show(hndl, imgidx);
012341  000735      next
012342  000736  endfunc
012343  000737        
012344  000738        
012345  000739  func ActivateForm(var newform)
012346  000740      var i, j, *p ;
012347  000741        
012348  000742      if (CurrentForm != -1) // deactivate old form, by disabling all inputs
012349  000743          for (i := FormStartIndex[CurrentForm]; i <= FormEndIndex[CurrentForm]; i++)
012350  000744              if (img_GetWord(hndl, i, IMAGE_TAG))
012351  000745                  img_Disable(hndl,i) ;
012352  000746              endif
012353  000747          next
012354  000748      endif
012355  000749      CurrentForm := newform ;
012356  000750      // display newform image or clear to image color
012357  000751      if (FormBGcolors[CurrentForm] != ColorBGimage)
012358  000752          gfx_Set(BACKGROUND_COLOUR,FormBGcolors[CurrentForm]);
012359  000753          gfx_Cls() ;
012360  000754          DoGFXObjects() ;                                    // display GFX 'widgets'
012361  000755      endif
012362  000756        
012363  000757      // enable inputs
012364  000758      for (i := FormStartIndex[CurrentForm]; i < FormEndIndex[CurrentForm]; i++)
012365  000759          j := img_GetWord(hndl, i, IMAGE_TAG) ;
012366  000760          if (j)
012367  000761              j-- ;
012368  000762              img_SetAttributes(hndl, i, I_STAYONTOP+I_ENABLED);        // make sure this is on top of form, if applicable
012369  000763              //if (j != tKeyboard)
012370  000764              if ((j <= tWinButton) || (j >= t4Dbutton) )               // enable inputs
012371  000765                  img_ClearAttributes(hndl, i, I_TOUCH_DISABLE);        // ensure touch is enabled
012372  000766              endif
012373  000767              img_Show(hndl,i) ; // show initialy, if required
012374  000768              if (j == tForm)
012375  000769                  DoGFXObjects() ;                                    // display GFX 'widgets' for image backgruobds
012376  000770              else if (j == tLeddigits)
012377  000771                  ledDigitsDisplay(i, oLeddigitss, oLedDigitsn) ;
012378  000772              endif
012379  000773          endif
012380  000774      next
012381  000775      for (i := 0; i < nScopes; i++)
012382  000776          j := i * SCOPEENTS ;
012383  000777          if (oScopen[j+scForm] == CurrentForm)
012384  000778              addressTraces(i,j) ;
012385  000779              p := told[0] ;
012386  000780              p[0] := -1 ; // force init scope
012387  000781              gfx_RectangleFilled(oScopen[j+scLeft], oScopen[j+scTop], oScopen[j+scRight], oScopen[j+scBottom], oScopen[j+scColor]) ;
012388  000782              if (oScopen[j+scGraticuleVis]) Graticule(oScopen[j+scLeft], oScopen[j+scTop], oScopen[j+scRight], oScopen[j+scBottom],
012389  000783                                                        oScopen[j+scGraticuleXinc], oScopen[j+scGraticuleYinc], oScopen[j+scGraticuleCol]) ;
012390  000784              drawScope(i*SCOPEENTS) ;    // draw scope when activating form, may look a bit first time up....
012391  000785              if (oScopen[j+scYLineVis]) gfx_Hline(oScopen[j+scYLineForm], oScopen[j+scLeft], oScopen[j+scRight], oScopen[j+scYLineCol]) ;
012392  000786          endif
012393  000787      next
012394  000788        
012395  000789  endfunc
012396  000790        
012397  000791  func UpdateObjects(var newval)
012398  000792      var IPidx, otherOBJ ;
012399  000793      if ( ( img_GetWord(hndl, *(pInputIndex), IMAGE_INDEX) != newval) || (TouchState == Ofs_IPD_RELEASE) ) // only bother if values changed, or release
012400  000794        
012401  000795          img_SetWord(hndl, *(pInputIndex), IMAGE_INDEX, newval);
012402  000796      if (img_GetWord(hndl, *(pInputIndex), IMAGE_TAG) != tColorPicker)
012403  000797              img_Show(hndl, *(pInputIndex));      // only shows on current form
012404  000798          endif
012405  000799          if ((InputType == t4Dbutton) || (InputType == tUserButton) || (InputType == tWinButton))
012406  000800              if (*(CurInputData+Ofs_IPD_P1))
012407  000801                  newval &= 1;
012408  000802              else
012409  000803                  newval &= 3;
012410  000804              endif
012411  000805              if (newval > 1) newval := 1;
012412  000806          endif
012413  000807          IPidx := *(CurInputData+TouchState) ;
012414  000808          while(IPidx != 0)
012415  000809              otherOBJ := IPidx + InputData;
012416  000810              if (*(otherOBJ) == OT_REPORT)
012417  000811          SendReport(REPORT_EVENT, InputType, *(otherOBJ+Ofs_IPD_OBJVIDX), newval) ;
012418  000812              else if (*(otherOBJ) == OT_MAGIC)
012419  000813                  IPidx := *(otherOBJ+Ofs_IPD_P5) ;
012420  000814                  IPidx(newval) ;
012421  000815              else if (TouchState == *(otherOBJ+Ofs_IPD_P4))
012422  000816                  if (*(otherOBJ) == OT_ACTIVATE)
012423  000817                      ActivateForm(*(otherOBJ+Ofs_IPD_P2) ) ;
012424  000818                      InputType := tForm ;
012425  000819                  else if (*(otherOBJ) == OT_SETCONST)
012426  000820                      newval := *(otherOBJ+Ofs_IPD_P3) ;
012427  000821                      WriteObject(*(otherOBJ+Ofs_IPD_P1), *(otherOBJ+Ofs_IPD_P2), newval) ;
012428  000822                  else if (*(otherOBJ) == OT_SETANOTHER)
012429  000823                      WriteObject(*(otherOBJ+Ofs_IPD_P1), *(otherOBJ+Ofs_IPD_P2), newval) ;
012430  000824                  else if (*(otherOBJ) == OT_PREVFRAME)
012431  000825                      if (img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX))
012432  000826                          WriteObject(*(otherOBJ+Ofs_IPD_P5),*(otherOBJ+Ofs_IPD_P2),img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX)-1) ;
012433  000827                      endif
012434  000828                      newval := img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) ;
012435  000829                  else if (*(otherOBJ) == OT_NEXTFRAME)
012436  000830                      if (img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) < *(otherOBJ+Ofs_IPD_P3))
012437  000831                          WriteObject(*(otherOBJ+Ofs_IPD_P5),*(otherOBJ+Ofs_IPD_P2),img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX)+1) ;
012438  000832                      endif
012439  000833                      newval := img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) ;
012440  000834                  endif
012441  000835              endif
012442  000836              IPidx := *(otherOBJ+TouchState) ;
012443  000837          wend
012444  000838      endif
012445  000839  endfunc
012446  000840        
012447  000841  // End P2.inc
012448  000842  func DoGFXObjects()
012449  000843      switch (CurrentForm)
012450  000844          case 0:
012451  000845              gfx_RectangleFilled(0, 0, 799, 63, 0x014B) ;
012452  000846              gfx_OutlineColour(WHITE) ;
012453  000847              gfx_LinePattern(LPFINE) ;
012454  000848              gfx_RectangleFilled(0, 64, 799, 77, 0xFE81) ;
012455  000849              gfx_OutlineColour(BLACK) ;
012456  000850              gfx_Panel(PANEL_RAISED, 4, 215, 217, 194, 0x7D79) ;
012457  000851              gfx_Panel(PANEL_RAISED, 224, 216, 212, 193, 0x7D79) ;
012458  000852              gfx_Panel(PANEL_RAISED, 3, 412, 791, 68, 0x7D79) ;
012459  000853              gfx_Panel(PANEL_RAISED, 440, 188, 354, 220, 0x7D79) ;
012460  000854          break ;
012461  000855          case 1:
012462  000856              gfx_RectangleFilled(0, 0, 799, 63, 0x014B) ;
012463  000857              gfx_OutlineColour(WHITE) ;
012464  000858              gfx_LinePattern(LPFINE) ;
012465  000859              gfx_RectangleFilled(0, 64, 799, 77, 0xFE81) ;
012466  000860              gfx_OutlineColour(BLACK) ;
012467  000861              gfx_Panel(PANEL_RAISED, 588, 80, 210, 286, 0x7D79) ;
012468  000862              gfx_Panel(PANEL_RAISED, 380, 80, 210, 286, 0x7D79) ;
012469  000863              gfx_Panel(PANEL_RAISED, 168, 80, 210, 286, 0x7D79) ;
012470  000864              gfx_Panel(PANEL_RAISED, 0, 196, 168, 170, 0x7D79) ;
012471  000865              gfx_Panel(PANEL_RAISED, 0, 367, 799, 113, 0x7D79) ;
012472  000866          break ;
012473  000867          case 2:
012474  000868              gfx_RectangleFilled(0, 0, 799, 63, 0x014B) ;
012475  000869              gfx_OutlineColour(WHITE) ;
012476  000870              gfx_LinePattern(LPFINE) ;
012477  000871              gfx_Panel(PANEL_RAISED, 0, 64, 800, 14, 0xFE81) ;
012478  000872              gfx_OutlineColour(BLACK) ;
012479  000873          break ;
012480  000874          case 3:
012481  000875              gfx_OutlineColour(WHITE) ;
012482  000876              gfx_LinePattern(LPFINE) ;
012483  000877              gfx_RectangleFilled(0, 64, 799, 77, 0xFE81) ;
012484  000878              gfx_OutlineColour(BLACK) ;
012485  000879              gfx_Panel(PANEL_RAISED, 0, 0, 800, 64, 0x014B) ;
012486  000880          break ;
012487  000881          case 4:
012488  000882              gfx_RectangleFilled(0, 0, 799, 63, 0x014B) ;
012489  000883              gfx_OutlineColour(WHITE) ;
012490  000884              gfx_LinePattern(LPFINE) ;
012491  000885              gfx_RectangleFilled(0, 64, 799, 77, 0xFE81) ;
012492  000886              gfx_OutlineColour(BLACK) ;
012493  000887          break ;
012494  000888          case 6:
012495  000889              gfx_RectangleFilled(0, 0, 799, 81, 0x014B) ;
012496  000890              gfx_OutlineColour(WHITE) ;
012497  000891              gfx_LinePattern(LPFINE) ;
012498  000892              gfx_RectangleFilled(0, 80, 799, 92, 0xFE81) ;
012499  000893              gfx_OutlineColour(BLACK) ;
012500  000894          break ;
012501  000895          case 7:
012502  000896              gfx_OutlineColour(WHITE) ;
012503  000897              gfx_LinePattern(LPFINE) ;
012504  000898              gfx_RectangleFilled(0, 64, 799, 76, 0xFE81) ;
012505  000899              gfx_OutlineColour(BLACK) ;
012506  000900              gfx_RectangleFilled(0, 0, 799, 63, 0x014B) ;
012507  000901          break ;
012508  000902          case 8:
012509  000903              gfx_RectangleFilled(0, 0, 799, 63, 0x014B) ;
012510  000904              gfx_OutlineColour(WHITE) ;
012511  000905              gfx_LinePattern(LPFINE) ;
012512  000906              gfx_RectangleFilled(0, 64, 799, 76, 0xFE81) ;
012513  000907              gfx_OutlineColour(BLACK) ;
012514  000908          break ;
012515  000909          case 9:
012516  000910              gfx_RectangleFilled(0, 0, 799, 63, 0x014B) ;
012517  000911              gfx_OutlineColour(WHITE) ;
012518  000912              gfx_LinePattern(LPFINE) ;
012519  000913              gfx_RectangleFilled(0, 64, 799, 76, 0xFE81) ;
012520  000914              gfx_OutlineColour(BLACK) ;
012521  000915          break ;
012522  000916          case 11:
012523  000917              gfx_RectangleFilled(0, 0, 799, 63, 0x014B) ;
012524  000918              gfx_OutlineColour(WHITE) ;
012525  000919              gfx_LinePattern(LPFINE) ;
012526  000920              gfx_RectangleFilled(0, 64, 799, 73, 0xFE81) ;
012527  000921              gfx_OutlineColour(BLACK) ;
012528  000922          break ;
012529  000923          case 12:
012530  000924              gfx_RectangleFilled(0, 0, 799, 63, 0x014B) ;
012531  000925              gfx_OutlineColour(WHITE) ;
012532  000926              gfx_LinePattern(LPFINE) ;
012533  000927              gfx_RectangleFilled(0, 64, 799, 73, 0xFE81) ;
012534  000928              gfx_OutlineColour(BLACK) ;
012535  000929          break ;
012536  000930          case 13:
012537  000931              gfx_RectangleFilled(0, 0, 799, 63, 0x014B) ;
012538  000932              gfx_OutlineColour(WHITE) ;
012539  000933              gfx_LinePattern(LPFINE) ;
012540  000934              gfx_RectangleFilled(0, 64, 799, 73, 0xFE81) ;
012541  000935              gfx_OutlineColour(BLACK) ;
012542  000936          break ;
012543  000937          case 14:
012544  000938              gfx_OutlineColour(WHITE) ;
012545  000939              gfx_LinePattern(LPFINE) ;
012546  000940              gfx_RectangleFilled(0, 0, 799, 39, 0x014B) ;
012547  000941              gfx_OutlineColour(BLACK) ;
012548  000942              gfx_RectangleFilled(0, 32, 799, 51, YELLOW) ;
012549  000943              gfx_OutlineColour(WHITE) ;
012550  000944              gfx_LinePattern(LPFINE) ;
012551  000945              gfx_RectangleFilled(0, 364, 799, 479, 0x014B) ;
012552  000946              gfx_OutlineColour(BLACK) ;
012553  000947          break ;
012554  000948          case 15:
012555  000949              gfx_RectangleFilled(0, 0, 799, 63, 0x014B) ;
012556  000950              gfx_OutlineColour(WHITE) ;
012557  000951              gfx_LinePattern(LPFINE) ;
012558  000952              gfx_RectangleFilled(0, 64, 799, 77, 0xFE81) ;
012559  000953              gfx_OutlineColour(BLACK) ;
012560  000954          break ;
012561  000955          case 16:
012562  000956              gfx_RectangleFilled(0, 0, 799, 63, 0x014B) ;
012563  000957              gfx_OutlineColour(WHITE) ;
012564  000958              gfx_LinePattern(LPFINE) ;
012565  000959              gfx_RectangleFilled(0, 64, 799, 77, 0xFE81) ;
012566  000960              gfx_OutlineColour(BLACK) ;
012567  000961              gfx_Panel(PANEL_RAISED, 0, 80, 267, 101, 0x7D79) ;
012568  000962              gfx_Panel(PANEL_RAISED, 268, 80, 267, 101, 0x7D79) ;
012569  000963              gfx_Panel(PANEL_RAISED, 0, 180, 267, 121, 0x7D79) ;
012570  000964              gfx_Panel(PANEL_RAISED, 268, 180, 267, 121, 0x7D79) ;
012571  000965              gfx_Panel(PANEL_RAISED, 0, 301, 535, 179, 0x7D79) ;
012572  000966              gfx_Panel(PANEL_RAISED, 536, 80, 264, 399, 0x7D79) ;
012573  000967          break ;
012574  000968          case 18:
012575  000969              gfx_RectangleFilled(0, 0, 799, 63, 0x014B) ;
012576  000970              gfx_OutlineColour(WHITE) ;
012577  000971              gfx_LinePattern(LPFINE) ;
012578  000972              gfx_RectangleFilled(0, 60, 799, 73, 0xFE81) ;
012579  000973              gfx_OutlineColour(BLACK) ;
012580  000974              gfx_Panel(PANEL_RAISED, 328, 76, 328, 404, 0x7D79) ;
012581  000975              gfx_Panel(PANEL_RAISED, 0, 76, 328, 404, 0x7D79) ;
012582  000976          break ;
012583  000977      endswitch
012584  000978  endfunc
012585  000979        
012586  000980  // Start P3.inc
012587  000981  func main()
012588  000982      var comTX[50], cmdi, i, j, ImageTouched, TouchStatus, oldn ;
012589  000983        
012590  000984      putstr("Mounting...\n");
012591  000985      if (!(file_Mount()))
012592  000986          while(!(file_Mount()))
012593  000987              putstr("Drive not mounted...");
012594  000988              pause(200);
012595  000989              gfx_Cls();
012596  000990              pause(200);
012597  000991          wend
012598  000992      endif
012599  000993  //    gfx_MoveTo(0, 0);
012600  000994  //    print(mem_Heap()," ") ;
012601  000995  //    gfx_TransparentColour(0x0020);
012602  000996  //    gfx_Transparency(ON);
012603  000997        
012604  000998      gfx_ScreenMode(LANDSCAPE) ;
012605  000999        
012606  001000      // open image control
012607  001001      hndl := file_LoadImageControl("SCREEN~1.dat", "SCREEN~1.gci", 1);
012608  001002        
012609  001003      // init 'constants'
012610  001004  // End P3.inc
012611  001005        
012612  001006      oObjects[tDipSwitch] := oDipSwitchs ;
012613  001007      oObjects[tKnob] := oKnobs ;
012614  001008      oObjects[tRockerSwitch] := oRockerSwitchs ;
012615  001009      oObjects[tRotarySwitch] := oRotarySwitchs ;
012616  001010      oObjects[tGSlider] := oGSliders ;
012617  001011      oObjects[tTrackbar] := oTrackbars ;
012618  001012      oObjects[tWinButton] := oWinButtons ;
012619  001013      oObjects[tAngularmeter] := oAngularmeters ;
012620  001014      oObjects[tCoolgauge] := oCoolgauges ;
012621  001015      oObjects[tCustomdigits] := oCustomdigitss ;
012622  001016      oObjects[tForm] := oForms ;
012623  001017      oObjects[tGauge] := oGauges ;
012624  001018      oObjects[tImage] := oImages ;
012625  001019      oObjects[tKeyboard] := oKeyboards ;
012626  001020      oObjects[tLed] := oLeds ;
012627  001021      oObjects[tLeddigits] := oLeddigitss ;
012628  001022      oObjects[tMeter] := oMeters ;
012629  001023      oObjects[tStrings] := oStringss ;
012630  001024      oObjects[tThermometer] := oThermometers ;
012631  001025      oObjects[tUserled] := oUserleds ;
012632  001026      oObjects[tVideo] := oVideos ;
012633  001027      oObjects[tStaticText] := oStaticTexts ;
012634  001028      oObjects[tSounds] := oSoundss ;
012635  001029      oObjects[tTimer] := oTimers ;
012636  001030      oObjects[tSpectrum] := oSpectrums ;
012637  001031      oObjects[tTank] := oTanks ;
012638  001032      oObjects[tUserImages] := oUserImagess ;
012639  001033      oObjects[tPinOutput] := oPinOutputs ;
012640  001034      oObjects[tPinInput] := oPinInputs ;
012641  001035      oObjects[t4Dbutton] := o4Dbuttons ;
012642  001036      oObjects[tAniButton] := oAniButtons ;
012643  001037      oObjects[tColorPicker] := oColorPickers ;
012644  001038      oObjects[tUserButton] := oUserButtons ;
012645  001039      sc0Oldval1[0] := -1 ; // init scope, only needed for first trace
012646  001040      scTracebuf[0] := sc0Oldval1 ;
012647  001041      scTracebuf[1] := sc0Newval1 ;
012648  001042      scTracebuf[2] := sc0Oldval2 ;
012649  001043      scTracebuf[3] := sc0Newval2 ;
012650  001044      sc1Oldval1[0] := -1 ; // init scope, only needed for first trace
012651  001045      scTracebuf[8] := sc1Oldval1 ;
012652  001046      scTracebuf[9] := sc1Newval1 ;
012653  001047      sc2Oldval1[0] := -1 ; // init scope, only needed for first trace
012654  001048      scTracebuf[16] := sc2Oldval1 ;
012655  001049      scTracebuf[17] := sc2Newval1 ;
012656  001050      sc3Oldval1[0] := -1 ; // init scope, only needed for first trace
012657  001051      scTracebuf[24] := sc3Oldval1 ;
012658  001052      scTracebuf[25] := sc3Newval1 ;
012659  001053      sc4Oldval1[0] := -1 ; // init scope, only needed for first trace
012660  001054      scTracebuf[32] := sc4Oldval1 ;
012661  001055      scTracebuf[33] := sc4Newval1 ;
012662  001056      WriteObject(tUserled, 2, 1) ;
012663  001057      WriteObject(tUserled, 4, 1) ;
012664  001058      WriteObject(t4Dbutton, 2, 1) ;
012665  001059  // Start P4.inc
012666  001060      // init comms
012667  001061      com_Init(comRX,CMDLenMAX,0);
012668  001062      com_SetBaud(COM0,25600);
012669  001063      com_TXbuffer(comTX, 100, 0);
012670  001064      // tag 'real' objects
012671  001065      for (i := 0; i <= MaxTotObjects; i++)
012672  001066          if (   (i != tSounds)
012673  001067              && (i != tTimer)
012674  001068              && (i != tPinOutput)
012675  001069              && (i != tPinInput) )
012676  001070              TouchXpos := oObjects[i] ;
012677  001071              TouchYpos := *(TouchXpos) ;
012678  001072              for (ImageTouched := 1; ImageTouched <= TouchYpos; ImageTouched++)
012679  001073                  oldn := *(TouchXpos+ImageTouched*2) ;
012680  001074                  img_SetAttributes(hndl, oldn, I_TOUCH_DISABLE);  // ensure touch is enabled
012681  001075                  if (oldn != -1)
012682  001076                      img_SetWord(hndl, oldn, IMAGE_TAG, i+1);
012683  001077                      img_Disable(hndl, oldn) ;
012684  001078                  endif
012685  001079              next
012686  001080          endif
012687  001081      next
012688  001082        
012689  001083      // display initial form
012690  001084      CurrentForm := -1 ;
012691  001085      ActivateForm(0) ; // need to change this according to first actual form
012692  001086        
012693  001087  // End P4.inc
012694  001088  // Start P5.inc
012695  001089      touch_Set(TOUCH_ENABLE);                            // enable the touch screen
012696  001090      oldn := -1 ;
012697  001091      repeat
012698  001092        
012699  001093          // check comms for command, how to NAK invalid command
012700  001094          if (com_Count() != 0)
012701  001095              i := serin() ;
012702  001096              InputCS ^= i ;               // update checksum
012703  001097                  cmd[cmdi++] := i ;
012704  001098                   if (   (cmd[0] == READ_OBJ)
012705  001099                           && (cmdi == 4)         )
012706  001100                      if (InputCS)
012707  001101                          nak0() ;
012708  001102                      else
012709  001103                          ReadObject(cmd[1], cmd[2]) ;
012710  001104                      endif
012711  001105                      cmdi := 0 ;
012712  001106                  else if (   (cmd[0] == WRITE_OBJ)    // 6 byte write command (gen option)
012713  001107                           && (cmdi == 6)          )
012714  001108                      if (InputCS)
012715  001109                          nak0() ;
012716  001110                      else
012717  001111                          WriteObject(cmd[1], cmd[2], cmd[3] << 8 + cmd[4]) ;
012718  001112                          serout(ACK) ;
012719  001113                      endif
012720  001114                      cmdi := 0 ;
012721  001115                  else if (   (cmd[0] == WRITE_CONTRAST)
012722  001116                           && (cmdi == 3)         )
012723  001117                      if (InputCS)
012724  001118                          nak0() ;
012725  001119                      else
012726  001120                          gfx_Contrast(cmd[1]) ;
012727  001121                          serout(ACK) ;
012728  001122                      endif
012729  001123                      cmdi := 0 ;
012730  001124                  else if (cmdi == 6)    // we have 6 bytes and we've gotten here -> something wrong
012731  001125                      nak0() ;
012732  001126                      cmdi := 0 ;
012733  001127                  endif
012734  001128          endif   // a character is available
012735  001129        
012736  001130        
012737  001131      // touch code processing
012738  001132        
012739  001133          TouchStatus := touch_Get(TOUCH_STATUS);               // get touchscreen status
012740  001134          ImageTouched := img_Touched(hndl,-1) ;
012741  001135          if ((TouchStatus == TOUCH_PRESSED) || (TouchStatus == TOUCH_RELEASED) || (TouchStatus == TOUCH_MOVING))
012742  001136              if ((TouchStatus != TOUCH_RELEASED) && (ImageTouched != oldn) && (oldn != -1))
012743  001137                  TouchStatus := TOUCH_RELEASED ;       // simulate release if we move off object
012744  001138              endif
012745  001139              if (TouchStatus != TOUCH_RELEASED)        // if not released
012746  001140                  if (oldn != -1)
012747  001141                      ImageTouched := oldn ;
012748  001142                  else
012749  001143                      if (oldn != ImageTouched)
012750  001144                  oldn := ImageTouched ;
012751  001145                          TouchStatus := TOUCH_PRESSED ;
012752  001146                      endif
012753  001147                  endif
012754  001148                  TouchXpos  := touch_Get(TOUCH_GETX);
012755  001149                  TouchYpos  := touch_Get(TOUCH_GETY);
012756  001150                  TouchState := Ofs_IPD_DOWN ;
012757  001151              else
012758  001152                  ImageTouched := oldn ;                     // simulate release of what we touched
012759  001153                  oldn := -1 ;                    // prevent double release
012760  001154                  TouchState := Ofs_IPD_RELEASE ;
012761  001155              endif
012762  001156              if (ImageTouched != -1)
012763  001157                          CurInputData := InputControls[ImageTouched] + InputData;
012764  001158                          InputType := *(CurInputData) ;
012765  001159                          i := InputType ;
012766  001160                          if (InputType >= t4Dbutton) i -= 23 ; // adjust to ensure next in gosub
012767  001161                          gosub (i), (cDipswitch, cKnob, cRockerswitch, cRotaryswitch, cSlider, cTrackbar, cWinbutton, c4DButton, cAniButton, cColorPicker, cUserButton) ;
012768  001162              endif
012769  001163          endif
012770  001164   //       if ((n != -1) && (oldn == -1)) oldn := n ;    // save what we touched in case we move off it
012771  001165        
012772  001166          sys_EventsResume() ;
012773  001167      forever
012774  001168        
012775  001169  cDipswitch:
012776  001170        
012777  001171  cKnob:
012778  001172      i := XYposToDegree(TouchXpos-*(CurInputData+Ofs_IPD_P1),      // x - CentreX
012779  001173                         TouchYpos-*(CurInputData+Ofs_IPD_P2)) ;    // y - centreY
012780  001174      if (i < *(CurInputData+Ofs_IPD_P3))                   // anything in the first 'dead zone' is minvalue
012781  001175          i := 0 ;
012782  001176      else
012783  001177          if (i > *(CurInputData+Ofs_IPD_P4))               // anything in the last 'dead zone' is maxvalue
012784  001178              i := *(CurInputData+Ofs_IPD_P5) ;
012785  001179          else
012786  001180              i -= *(CurInputData+Ofs_IPD_P3) ;             // offset by -baseangle
012787  001181          endif
012788  001182      endif
012789  001183  //  i := i * *(input+IPD_P6) / *(input+IPD_P5) ;   // convert degrees to position
012790  001184      i := TMul(i, Ofs_IPD_P6, Ofs_IPD_P7) ;   // convert degrees to position
012791  001185      pInputIndex := oKnobs + *(CurInputData+Ofs_IPD_OBJVIDX) ;
012792  001186      UpdateObjects(i) ;
012793  001187  endsub ;
012794  001188        
012795  001189  cRockerswitch:
012796  001190        
012797  001191  cRotaryswitch:
012798  001192        
012799  001193  cSlider:
012800  001194  cTrackbar:
012801  001195      if (*(CurInputData+Ofs_IPD_P1))
012802  001196          i := TouchXpos - *(CurInputData+Ofs_IPD_P2) ;
012803  001197          if (i < 0)
012804  001198              i := 0 ;
012805  001199          else if (i > *(CurInputData+Ofs_IPD_P3))        // height/width - 17)
012806  001200              i := *(CurInputData+Ofs_IPD_P4) ;           // maxvalue-minvalue
012807  001201          else
012808  001202  //            i := *(input+IPD_P4) * i / *(input+IPD_P3) ;    // max-min - (max-min) * posn / (height-17)
012809  001203              i := TMul(i, Ofs_IPD_P4, Ofs_IPD_P5) ;    // max-min - (max-min) * posn / (height-17)
012810  001204          endif
012811  001205      else
012812  001206          i := TouchYpos - *(CurInputData+Ofs_IPD_P2) ;
012813  001207          if (i < 0)
012814  001208              i := *(CurInputData+Ofs_IPD_P4) ;           // maxvalue-minvalue
012815  001209          else if (i > *(CurInputData+Ofs_IPD_P3))        // height/width - 17)
012816  001210              i := 0 ;
012817  001211          else
012818  001212  //            i := *(input+IPD_P4) - *(input+IPD_P4) * i / *(input+IPD_P3) ;    // max-min - (max-min) * posn / (height-17)
012819  001213              i := *(CurInputData+Ofs_IPD_P4) - TMul(i, Ofs_IPD_P4, Ofs_IPD_P5) ;    // max-min - (max-min) * posn / (height-17)
012820  001214          endif
012821  001215      endif
012822  001216      if (InputType == tGSlider)
012823  001217          pInputIndex := oGSliders ;
012824  001218      else
012825  001219          pInputIndex := oTrackbars ;
012826  001220      endif
012827  001221      pInputIndex += *(CurInputData+Ofs_IPD_OBJVIDX) ;
012828  001222      UpdateObjects(i) ;
012829  001223  endsub ;
012830  001224        
012831  001225  c4DButton:
012832  001226      pInputIndex := o4Dbuttons + *(CurInputData+Ofs_IPD_OBJVIDX) ;
012833  001227      goto gbutton ;
012834  001228  cUserButton:
012835  001229  cWinbutton:
012836  001230      pInputIndex := oWinButtons + *(CurInputData+Ofs_IPD_OBJVIDX) ;
012837  001231  gbutton:
012838  001232      i := img_GetWord(hndl, *(pInputIndex), IMAGE_INDEX) ; // current state
012839  001233      if (*(CurInputData+Ofs_IPD_P1))                                 // momentary, reports 0, but should report 1
012840  001234          if (TouchStatus == TOUCH_RELEASED)
012841  001235              i &= 0xfffe ;
012842  001236              TouchState == Ofs_IPD_DOWN ;
012843  001237          else
012844  001238              i |= 1 ;
012845  001239              TouchState == Ofs_IPD_RELEASE ;
012846  001240          endif
012847  001241      else if (*(CurInputData+Ofs_IPD_P2) == -1)                      // Toggle, reports 0+2, but should report 0+1
012848  001242          if (TouchStatus == TOUCH_RELEASED)                     // only truly change on release
012849  001243              if ((i & 3) == 3)
012850  001244                  i &= 0xfffc ;
012851  001245              else
012852  001246                  i++ ;
012853  001247              endif
012854  001248          else
012855  001249              i |= 1 ;                                      // make down regardless of current state
012856  001250          endif
012857  001251      else                        // group action, up all other buttons on touch press, reports 0 for button down
012858  001252          if (TouchStatus == TOUCH_PRESSED)                     // only truly change on release
012859  001253              TurnOffButtons(*(CurInputData+Ofs_IPD_P2)) ;
012860  001254          endif
012861  001255          i := (i & 0xfffc) | 2 ;
012862  001256      endif
012863  001257        
012864  001258      UpdateObjects(i) ;
012865  001259  endsub ;
012866  001260        
012867  001261  cAniButton:
012868  001262        
012869  001263  cColorPicker:
012870  001264      pInputIndex := oColorPickers + *(CurInputData+Ofs_IPD_OBJVIDX) ;
012871  001265      getcpvars(*(pInputIndex)) ;
012872  001266      i := *(CurInputData+Ofs_IPD_OBJVIDX)/2 - 1 ;
012873  001267      j := gfx_GetPixel(TouchXpos,TouchYpos) ;
012874  001268      if (((TouchYpos >= cptop + 6) && (TouchYpos < cpTpH - 6)) && (j != img_GetWord(hndl, i, IMAGE_DELAY)) )     // within range on height  and changed
012875  001269          if ((TouchXpos >= cpleft) && (TouchXpos < cpLpW-32))          // within range of HS picker
012876  001270              setCpHSl(*(pInputIndex), *(CurInputData+Ofs_IPD_OBJVIDX)/2-1, j) ;
012877  001271          else if ((TouchXpos >= cpLpW-22) && (TouchXpos < cpLpW-6))    // within range of L picker
012878  001272              img_SetWord(hndl, *(pInputIndex), IMAGE_DELAY, j);                                       // IMAGE_DELAY is used as current color
012879  001273              ColorpickerArrow(cpVars[i], cpLpW, cpBGcol) ;          // 'erase' old arrow
012880  001274              cpVars[i] := TouchYpos-6 ;
012881  001275              ColorpickerArrow(cpVars[i], cpLpW, LIGHTGREY) ;
012882  001276          endif
012883  001277        
012884  001278          ImageTouched := rColorPickerRoutines[i] ;
012885  001279          ImageTouched(REPORT_EVENT, InputType, i, j) ;
012886  001280      endif
012887  001281  endsub ;
012888  001282        
012889  001283  endfunc
012890  001284  // End P5.inc
Notice: Check that the function called via pointer  'ImageTouched' requires 4 arguments (line 1279 file:Screen.4DGenieS)
Notice: Check that the function called via pointer  'IPidx' requires 1 argument (line 814 file:Screen.4DGenieS)
Notice: local var 'i' in func 'doScope' is never used (line 617 file:Screen.4DGenieS)


Symbol Table:
name                             decimal         hex
__MAXBANKS                             6  0x00000006 (const dword)  (not used)
__MAXMEM                           32768  0x00008000 (const dword)  (usage 1)
__MAXPROG                          32750  0x00007fee (const dword)  (usage 1)
__PLATFORM                             3  0x00000003 (const dword)  (not used)
__reserved10                        -111  0xffffff91 (PmmC func) args[0] r=0  (not used)
__reserved13                        -123  0xffffff85 (PmmC func) args[0] r=0  (not used)
__reserved14                        -124  0xffffff84 (PmmC func) args[0] r=0  (not used)
__reserved17                        -201  0xffffff37 (PmmC func) args[0] r=0  (not used)
__reserved18                        -202  0xffffff36 (PmmC func) args[0] r=0  (not used)
__reserved19                        -203  0xffffff35 (PmmC func) args[0] r=0  (not used)
__reserved20                        -204  0xffffff34 (PmmC func) args[0] r=0  (not used)
__reserved21                        -205  0xffffff33 (PmmC func) args[0] r=0  (not used)
__reserved22                        -206  0xffffff32 (PmmC func) args[0] r=0  (not used)
__reserved23                        -220  0xffffff24 (PmmC func) args[0] r=0  (not used)
__reserved24                        -221  0xffffff23 (PmmC func) args[0] r=0  (not used)
__reserved25                        -222  0xffffff22 (PmmC func) args[0] r=0  (not used)
__reserved26                        -223  0xffffff21 (PmmC func) args[0] r=0  (not used)
__reserved3                          -69  0xffffffbb (PmmC func) args[0] r=0  (not used)
__reserved30                        -283  0xfffffee5 (PmmC func) args[0] r=0  (not used)
__reserved4                          -70  0xffffffba (PmmC func) args[0] r=0  (not used)
__reserved42                        -373  0xfffffe8b (PmmC func) args[0] r=0  (not used)
__reserved43                        -387  0xfffffe7d (PmmC func) args[0] r=0  (not used)
__reserved44                        -388  0xfffffe7c (PmmC func) args[0] r=0  (not used)
__reserved45                        -389  0xfffffe7b (PmmC func) args[0] r=0  (not used)
__reserved46                        -390  0xfffffe7a (PmmC func) args[0] r=0  (not used)
__reserved5                          -76  0xffffffb4 (PmmC func) args[0] r=0  (not used)
__reserved51                        -411  0xfffffe65 (PmmC func) args[0] r=0  (not used)
__reserved52                        -412  0xfffffe64 (PmmC func) args[0] r=0  (not used)
__reserved53                        -422  0xfffffe5a (PmmC func) args[0] r=0  (not used)
__reserved54                        -423  0xfffffe59 (PmmC func) args[0] r=0  (not used)
__reserved57                        -457  0xfffffe37 (PmmC func) args[0] r=0  (not used)
__reserved58                        -458  0xfffffe36 (PmmC func) args[0] r=0  (not used)
__reserved6                          -77  0xffffffb3 (PmmC func) args[0] r=0  (not used)
__reserved60                        -467  0xfffffe2d (PmmC func) args[0] r=0  (not used)
__reserved61                        -468  0xfffffe2c (PmmC func) args[0] r=0  (not used)
__reserved62                        -469  0xfffffe2b (PmmC func) args[0] r=0  (not used)
__reserved63                        -490  0xfffffe16 (PmmC func) args[0] r=0  (not used)
__reserved64                        -491  0xfffffe15 (PmmC func) args[0] r=0  (not used)
__reserved65                        -492  0xfffffe14 (PmmC func) args[0] r=0  (not used)
__reserved66                        -493  0xfffffe13 (PmmC func) args[0] r=0  (not used)
__reserved68                        -509  0xfffffe03 (PmmC func) args[0] r=0  (not used)
__reserved69                        -510  0xfffffe02 (PmmC func) args[0] r=0  (not used)
__reserved70                        -511  0xfffffe01 (PmmC func) args[0] r=0  (not used)
__reserved72                        -520  0xfffffdf8 (PmmC func) args[0] r=0  (not used)
__reserved77                        -526  0xfffffdf2 (PmmC func) args[0] r=0  (not used)
__reserved78                        -527  0xfffffdf1 (PmmC func) args[0] r=0  (not used)
__reserved85                        -536  0xfffffde8 (PmmC func) args[0] r=0  (not used)
__reserved86                        -537  0xfffffde7 (PmmC func) args[0] r=0  (not used)
__reserved9                         -110  0xffffff92 (PmmC func) args[0] r=0  (not used)
__translate                           -8  0xfffffff8 (PmmC func) args[4] r=1  (not used)
ABS                                  -53  0xffffffcb (PmmC func) args[1] r=1  (usage 6)
ACK                                    6  0x00000006 (const dword)  (usage 6)
ActivateForm                       11121  0x00002b71 (User func) args[1] r=0  (usage 9)
addressTraces                      13141  0x00003355 (User func) args[2] r=0  (usage 6)
ALICEBLUE                          63455  0x0000f7df (const dword)  (not used)
ALL                                65535  0x0000ffff (const dword)  (not used)
ana_HS                              -533  0xfffffdeb (PmmC func) args[7] r=0  (not used)
ANTIQUEWHITE                       65370  0x0000ff5a (const dword)  (not used)
APPEND                                 0  0x00000000 (const dword)  (not used)
AQUA                                2047  0x000007ff (const dword)  (not used)
AQUAMARINE                         32762  0x00007ffa (const dword)  (not used)
arctan                                 7  0x00000007arctan                                 7  0x00000007 (mem) byte[101] (member of C:\Users\Zac\Google Drive\NASA RMC Zips\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (usage 3)
AUDIO_ENABLE                          17  0x00000011 (const dword)  (not used)
AZURE                              63487  0x0000f7ff (const dword)  (not used)
BACKGROUND_COLOUR                     17  0x00000011 (const dword)  (usage 3)
BAUD_110                               0  0x00000000 (const dword)  (not used)
BAUD_115200                           13  0x0000000d (const dword)  (not used)
BAUD_1200                              3  0x00000003 (const dword)  (not used)
BAUD_128000                           14  0x0000000e (const dword)  (not used)
BAUD_14400                             7  0x00000007 (const dword)  (not used)
BAUD_19200                             8  0x00000008 (const dword)  (not used)
BAUD_2400                              4  0x00000004 (const dword)  (not used)
BAUD_256000                           15  0x0000000f (const dword)  (not used)
BAUD_300                               1  0x00000001 (const dword)  (not used)
BAUD_300000                           16  0x00000010 (const dword)  (not used)
BAUD_31250                             9  0x00000009 (const dword)  (not used)
BAUD_375000                           17  0x00000011 (const dword)  (not used)
BAUD_38400                            10  0x0000000a (const dword)  (not used)
BAUD_4800                              5  0x00000005 (const dword)  (not used)
BAUD_500000                           18  0x00000012 (const dword)  (not used)
BAUD_56000                            11  0x0000000b (const dword)  (not used)
BAUD_57600                            12  0x0000000c (const dword)  (not used)
BAUD_600                               2  0x00000002 (const dword)  (not used)
BAUD_600000                           19  0x00000013 (const dword)  (not used)
BAUD_9600                              6  0x00000006 (const dword)  (not used)
BEIGE                              63419  0x0000f7bb (const dword)  (not used)
BEVEL_RADIUS                          27  0x0000001b (const dword)  (not used)
BEVEL_SHADOW                          29  0x0000001d (const dword)  (not used)
BEVEL_WIDTH                           28  0x0000001c (const dword)  (not used)
BIN                                    2  0x00000002 (const dword)  (not used)
BIN1                                 258  0x00000102 (const dword)  (not used)
BIN10                               2562  0x00000a02 (const dword)  (not used)
BIN10Z                              6658  0x00001a02 (const dword)  (not used)
BIN10ZB                            10754  0x00002a02 (const dword)  (not used)
BIN11                               2818  0x00000b02 (const dword)  (not used)
BIN11Z                              6914  0x00001b02 (const dword)  (not used)
BIN11ZB                            11010  0x00002b02 (const dword)  (not used)
BIN12                               3074  0x00000c02 (const dword)  (not used)
BIN12Z                              7170  0x00001c02 (const dword)  (not used)
BIN12ZB                            11266  0x00002c02 (const dword)  (not used)
BIN13                               3330  0x00000d02 (const dword)  (not used)
BIN13Z                              7426  0x00001d02 (const dword)  (not used)
BIN13ZB                            11522  0x00002d02 (const dword)  (not used)
BIN14                               3586  0x00000e02 (const dword)  (not used)
BIN14Z                              7682  0x00001e02 (const dword)  (not used)
BIN14ZB                            11778  0x00002e02 (const dword)  (not used)
BIN15                               3842  0x00000f02 (const dword)  (not used)
BIN15Z                              7938  0x00001f02 (const dword)  (not used)
BIN15ZB                            12034  0x00002f02 (const dword)  (not used)
BIN16                                  2  0x00000002 (const dword)  (not used)
BIN16Z                              4098  0x00001002 (const dword)  (not used)
BIN16ZB                             8194  0x00002002 (const dword)  (not used)
BIN1Z                               4354  0x00001102 (const dword)  (not used)
BIN1ZB                              8450  0x00002102 (const dword)  (not used)
BIN2                                 514  0x00000202 (const dword)  (not used)
BIN2Z                               4610  0x00001202 (const dword)  (not used)
BIN2ZB                              8706  0x00002202 (const dword)  (not used)
BIN3                                 770  0x00000302 (const dword)  (not used)
BIN3Z                               4866  0x00001302 (const dword)  (not used)
BIN3ZB                              8962  0x00002302 (const dword)  (not used)
BIN4                                1026  0x00000402 (const dword)  (not used)
BIN4Z                               5122  0x00001402 (const dword)  (not used)
BIN4ZB                              9218  0x00002402 (const dword)  (not used)
BIN5                                1282  0x00000502 (const dword)  (not used)
BIN5Z                               5378  0x00001502 (const dword)  (not used)
BIN5ZB                              9474  0x00002502 (const dword)  (not used)
BIN6                                1538  0x00000602 (const dword)  (not used)
BIN6Z                               5634  0x00001602 (const dword)  (not used)
BIN6ZB                              9730  0x00002602 (const dword)  (not used)
BIN7                                1794  0x00000702 (const dword)  (not used)
BIN7Z                               5890  0x00001702 (const dword)  (not used)
BIN7ZB                              9986  0x00002702 (const dword)  (not used)
BIN8                                2050  0x00000802 (const dword)  (not used)
BIN8Z                               6146  0x00001802 (const dword)  (not used)
BIN8ZB                             10242  0x00002802 (const dword)  (not used)
BIN9                                2306  0x00000902 (const dword)  (not used)
BIN9Z                               6402  0x00001902 (const dword)  (not used)
BIN9ZB                             10498  0x00002902 (const dword)  (not used)
BINZ                                4098  0x00001002 (const dword)  (not used)
BINZB                               8194  0x00002002 (const dword)  (not used)
BISQUE                             65336  0x0000ff38 (const dword)  (not used)
BLACK                                  0  0x00000000 (const dword)  (usage 66)
BLANCHEDALMOND                     65369  0x0000ff59 (const dword)  (not used)
blue                                   6  0x00000006 (mem) word (global)  (usage 21)
BLUE                                  31  0x0000001f (const dword)  (usage 15)
BLUEVIOLET                         35164  0x0000895c (const dword)  (not used)
BOLD                                  16  0x00000010 (const dword)  (not used)
BOTTOM_POS                             5  0x00000005 (const dword)  (not used)
BROWN                              41285  0x0000a145 (const dword)  (not used)
BURLYWOOD                          56784  0x0000ddd0 (const dword)  (not used)
bus_ClearPins                       -119  0xffffff89 (PmmC func) args[1] r=0  (not used)
BUS_RD_PIN                             4  0x00000004 (const dword)  (not used)
bus_Read                            -117  0xffffff8b (PmmC func) args[0] r=1  (not used)
bus_Read8                           -122  0xffffff86 (PmmC func) args[0] r=1  (not used)
bus_SetChangeInterrupt              -120  0xffffff88 (PmmC func) args[2] r=1  (not used)
bus_SetPins                         -118  0xffffff8a (PmmC func) args[1] r=0  (not used)
BUS_WR_PIN                             3  0x00000003 (const dword)  (not used)
bus_Write8                          -121  0xffffff87 (PmmC func) args[1] r=0  (not used)
BUTTON_DOWN                            0  0x00000000 (const dword)  (not used)
BUTTON_UP                              1  0x00000001 (const dword)  (not used)
ByteSwap                             -49  0xffffffcf (PmmC func) args[1] r=1  (not used)
c4DButton                         UNRESOLVED  (not used)
c565toRGBs                         14606  0x0000390e (User func) args[1] r=0  (usage 3)
C:\Users\Zac\Google Drive\NASA RMC Zips\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS    2803  0x00000af3 (const ??? 0)  (not used)
CADETBLUE                          23796  0x00005cf4 (const dword)  (not used)
cAniButton                        UNRESOLVED  (not used)
cColorPicker                      UNRESOLVED  (not used)
cDipswitch                        UNRESOLVED  (not used)
charheight                           -12  0xfffffff4 (PmmC func) args[1] r=1  (not used)
CHARTREUSE                         32736  0x00007fe0 (const dword)  (not used)
charwidth                            -11  0xfffffff5 (PmmC func) args[1] r=1  (not used)
CHECKED                                0  0x00000000 (const dword)  (not used)
CHOCOLATE                          54083  0x0000d343 (const dword)  (not used)
CHR                                  129  0x00000081 (const dword)  (not used)
cKnob                             UNRESOLVED  (not used)
CLIPPING                              19  0x00000013 (const dword)  (not used)
cmd                                 4504  0x00001198 (mem) word[80] (global)  (usage 33)
CMDLenMAX                             80  0x00000050 (const dword)  (usage 6)
ColorBGimage                          32  0x00000020 (const dword)  (usage 9)
ColorpickerArrow                   13971  0x00003693 (User func) args[3] r=0  (usage 12)
COLOUR16                               0  0x00000000 (const dword)  (not used)
COLOUR8                                1  0x00000001 (const dword)  (not used)
COM0                               63492  0x0000f804 (const dword)  (usage 3)
COM1                               63493  0x0000f805 (const dword)  (not used)
com1_Count                          -249  0xffffff07 (PmmC func) args[0] r=1  (not used)
com1_Error                          -257  0xfffffeff (PmmC func) args[0] r=1  (not used)
com1_Full                           -253  0xffffff03 (PmmC func) args[0] r=1  (not used)
com1_Init                           -233  0xffffff17 (PmmC func) args[3] r=0  (not used)
com1_Reset                          -245  0xffffff0b (PmmC func) args[0] r=0  (not used)
COM1_RX_pin                         -226  0xffffff1e (PmmC func) args[1] r=1  (not used)
com1_RXblock                        -558  0xfffffdd2 (PmmC func) args[2] r=0  (not used)
com1_Sync                           -261  0xfffffefb (PmmC func) args[0] r=1  (not used)
COM1_TX_pin                         -229  0xffffff1b (PmmC func) args[1] r=1  (not used)
com1_TXblock                        -557  0xfffffdd3 (PmmC func) args[2] r=0  (not used)
com1_TXbuffer                       -265  0xfffffef7 (PmmC func) args[3] r=0  (not used)
com1_TXbufferHold                   -277  0xfffffeeb (PmmC func) args[1] r=1  (not used)
com1_TXcount                        -269  0xfffffef3 (PmmC func) args[0] r=1  (not used)
com1_TXemptyEvent                   -273  0xfffffeef (PmmC func) args[1] r=1  (not used)
COM2                               63494  0x0000f806 (const dword)  (not used)
com2_Count                          -250  0xffffff06 (PmmC func) args[0] r=1  (not used)
com2_Error                          -258  0xfffffefe (PmmC func) args[0] r=1  (not used)
com2_Full                           -254  0xffffff02 (PmmC func) args[0] r=1  (not used)
com2_Init                           -234  0xffffff16 (PmmC func) args[3] r=0  (not used)
com2_Reset                          -246  0xffffff0a (PmmC func) args[0] r=0  (not used)
COM2_RX_pin                         -227  0xffffff1d (PmmC func) args[1] r=1  (not used)
com2_RXblock                        -560  0xfffffdd0 (PmmC func) args[2] r=0  (not used)
com2_Sync                           -262  0xfffffefa (PmmC func) args[0] r=1  (not used)
COM2_TX_pin                         -230  0xffffff1a (PmmC func) args[1] r=1  (not used)
com2_TXblock                        -559  0xfffffdd1 (PmmC func) args[2] r=0  (not used)
com2_TXbuffer                       -266  0xfffffef6 (PmmC func) args[3] r=0  (not used)
com2_TXbufferHold                   -278  0xfffffeea (PmmC func) args[1] r=1  (not used)
com2_TXcount                        -270  0xfffffef2 (PmmC func) args[0] r=1  (not used)
com2_TXemptyEvent                   -274  0xfffffeee (PmmC func) args[1] r=1  (not used)
COM3                               63495  0x0000f807 (const dword)  (not used)
com3_Count                          -251  0xffffff05 (PmmC func) args[0] r=1  (not used)
com3_Error                          -259  0xfffffefd (PmmC func) args[0] r=1  (not used)
com3_Full                           -255  0xffffff01 (PmmC func) args[0] r=1  (not used)
com3_Init                           -235  0xffffff15 (PmmC func) args[3] r=0  (not used)
com3_Reset                          -247  0xffffff09 (PmmC func) args[0] r=0  (not used)
COM3_RX_pin                         -228  0xffffff1c (PmmC func) args[1] r=1  (not used)
com3_RXblock                        -562  0xfffffdce (PmmC func) args[2] r=0  (not used)
com3_Sync                           -263  0xfffffef9 (PmmC func) args[0] r=1  (not used)
COM3_TX_pin                         -231  0xffffff19 (PmmC func) args[1] r=1  (not used)
com3_TXblock                        -561  0xfffffdcf (PmmC func) args[2] r=0  (not used)
com3_TXbuffer                       -267  0xfffffef5 (PmmC func) args[3] r=0  (not used)
com3_TXbufferHold                   -279  0xfffffee9 (PmmC func) args[1] r=1  (not used)
com3_TXcount                        -271  0xfffffef1 (PmmC func) args[0] r=1  (not used)
com3_TXemptyEvent                   -275  0xfffffeed (PmmC func) args[1] r=1  (not used)
com_Count                           -248  0xffffff08 (PmmC func) args[0] r=1  (usage 3)
com_Error                           -256  0xffffff00 (PmmC func) args[0] r=1  (not used)
com_Full                            -252  0xffffff04 (PmmC func) args[0] r=1  (not used)
com_Init                            -232  0xffffff18 (PmmC func) args[3] r=0  (usage 3)
com_Mode                            -280  0xfffffee8 (PmmC func) args[4] r=1  (not used)
com_Reset                           -244  0xffffff0c (PmmC func) args[0] r=0  (not used)
com_RXblock                         -282  0xfffffee6 (PmmC func) args[2] r=0  (not used)
com_SetBaud                         -225  0xffffff1f (PmmC func) args[2] r=1  (usage 3)
com_Sync                            -260  0xfffffefc (PmmC func) args[0] r=1  (not used)
com_TXblock                         -281  0xfffffee7 (PmmC func) args[2] r=0  (not used)
com_TXbuffer                        -264  0xfffffef8 (PmmC func) args[3] r=0  (usage 3)
com_TXbufferHold                    -276  0xfffffeec (PmmC func) args[1] r=1  (not used)
com_TXcount                         -268  0xfffffef4 (PmmC func) args[0] r=1  (not used)
com_TXemptyEvent                    -272  0xfffffef0 (PmmC func) args[1] r=1  (not used)
comRX                               4424  0x00001148 (mem) word[40] (global)  (usage 3)
CONTRAST                              25  0x00000019 (const dword)  (not used)
CORAL                              64490  0x0000fbea (const dword)  (not used)
CORNFLOWERBLUE                     25789  0x000064bd (const dword)  (not used)
CORNSILK                           65499  0x0000ffdb (const dword)  (not used)
COS                                  -58  0xffffffc6 (PmmC func) args[1] r=1  (not used)
COUNT_EDGE                             3  0x00000003 (const dword)  (not used)
COUNT_FALL                             2  0x00000002 (const dword)  (not used)
COUNT_OFF                              0  0x00000000 (const dword)  (not used)
COUNT_RISE                             1  0x00000001 (const dword)  (not used)
cpBGcol                               26  0x0000001a (mem) word (global)  (usage 9)
cpheight                              18  0x00000012 (mem) word (global)  (usage 18)
cpleft                                16  0x00000010 (mem) word (global)  (usage 9)
cpLpW                                 24  0x00000018 (mem) word (global)  (usage 30)
cptop                                 14  0x0000000e (mem) word (global)  (usage 9)
cpTpH                                 22  0x00000016 (mem) word (global)  (usage 12)
cpVars                                28  0x0000001c (mem) word[2] (global)  (usage 18)
cpwidth                               20  0x00000014 (mem) word (global)  (usage 6)
crc_16                              -567  0xfffffdc9 (PmmC func) args[2] r=1  (not used)
crc_CCITT                           -569  0xfffffdc7 (PmmC func) args[3] r=1  (not used)
crc_CSUM_8                          -566  0xfffffdca (PmmC func) args[2] r=1  (not used)
crc_MODBUS                          -568  0xfffffdc8 (PmmC func) args[2] r=1  (not used)
CRIMSON                            55463  0x0000d8a7 (const dword)  (not used)
cRockerswitch                     UNRESOLVED  (not used)
cRotaryswitch                     UNRESOLVED  (not used)
cSlider                           UNRESOLVED  (not used)
cTrackbar                         UNRESOLVED  (not used)
CurInputData                        4420  0x00001144 (mem) word (global)  (usage 93)
CurrentForm                         4410  0x0000113a (mem) word (global)  (usage 39)
cUserButton                       UNRESOLVED  (not used)
cWinbutton                        UNRESOLVED  (not used)
CY                                   -64  0xffffffc0 (PmmC func) args[0] r=1  (not used)
CYAN                                2047  0x000007ff (const dword)  (not used)
DARKBLUE                              17  0x00000011 (const dword)  (not used)
DARKCYAN                            1105  0x00000451 (const dword)  (not used)
DARKGOLDENROD                      48161  0x0000bc21 (const dword)  (not used)
DARKGRAY                           44373  0x0000ad55 (const dword)  (not used)
DARKGREEN                            800  0x00000320 (const dword)  (not used)
DARKKHAKI                          48557  0x0000bdad (const dword)  (not used)
DARKMAGENTA                        34833  0x00008811 (const dword)  (not used)
DARKOLIVEGREEN                     21317  0x00005345 (const dword)  (not used)
DARKORANGE                         64608  0x0000fc60 (const dword)  (not used)
DARKORCHID                         39321  0x00009999 (const dword)  (not used)
DARKRED                            34816  0x00008800 (const dword)  (not used)
DARKSALMON                         60591  0x0000ecaf (const dword)  (not used)
DARKSEAGREEN                       36337  0x00008df1 (const dword)  (not used)
DARKSLATEBLUE                      18929  0x000049f1 (const dword)  (not used)
DARKSLATEGRAY                      10857  0x00002a69 (const dword)  (not used)
DARKTURQUOISE                       1658  0x0000067a (const dword)  (not used)
DARKVIOLET                         36890  0x0000901a (const dword)  (not used)
DEBUG_MODE                            64  0x00000040 (const dword)  (not used)
DEC                                 1290  0x0000050a (const dword)  (not used)
DEC1                                 266  0x0000010a (const dword)  (not used)
DEC1Z                               4362  0x0000110a (const dword)  (not used)
DEC1ZB                              8458  0x0000210a (const dword)  (not used)
DEC2                                 522  0x0000020a (const dword)  (not used)
DEC2Z                               4618  0x0000120a (const dword)  (not used)
DEC2ZB                              8714  0x0000220a (const dword)  (not used)
DEC3                                 778  0x0000030a (const dword)  (not used)
DEC3Z                               4874  0x0000130a (const dword)  (not used)
DEC3ZB                              8970  0x0000230a (const dword)  (not used)
DEC4                                1034  0x0000040a (const dword)  (not used)
DEC4Z                               5130  0x0000140a (const dword)  (not used)
DEC4ZB                              9226  0x0000240a (const dword)  (not used)
DEC5                                1290  0x0000050a (const dword)  (not used)
DEC5Z                               5386  0x0000150a (const dword)  (not used)
DEC5ZB                              9482  0x0000250a (const dword)  (not used)
DECZ                                5386  0x0000150a (const dword)  (not used)
DECZB                               9482  0x0000250a (const dword)  (not used)
DEEPPINK                           63666  0x0000f8b2 (const dword)  (not used)
DEEPSKYBLUE                         1535  0x000005ff (const dword)  (not used)
DIABLO                                 3  0x00000003 (const dword)  (usage 3)
DIMGRAY                            27469  0x00006b4d (const dword)  (not used)
DISABLE                                0  0x00000000 (const dword)  (not used)
DISK_BUF                              15  0x0000000f (const dword)  (not used)
DISK_DATA_HI                           7  0x00000007 (const dword)  (not used)
DISK_DATA_LO                           6  0x00000006 (const dword)  (not used)
DISK_FAT_HI                            3  0x00000003 (const dword)  (not used)
DISK_FAT_LO                            2  0x00000002 (const dword)  (not used)
DISK_FATCOPIES                        12  0x0000000c (const dword)  (not used)
DISK_FATSIZE                          11  0x0000000b (const dword)  (not used)
DISK_FIRST_SECT_HI                     1  0x00000001 (const dword)  (not used)
DISK_FIRST_SECT_LO                     0  0x00000000 (const dword)  (not used)
DISK_MAXCLUS_HI                        9  0x00000009 (const dword)  (not used)
DISK_MAXCLUS_LO                        8  0x00000008 (const dword)  (not used)
DISK_MAXROOT                          10  0x0000000a (const dword)  (not used)
DISK_ROOT_HI                           5  0x00000005 (const dword)  (not used)
DISK_ROOT_LO                           4  0x00000004 (const dword)  (not used)
DISK_SECT_PER_CLUS                    13  0x0000000d (const dword)  (not used)
DISK_TYPE                             14  0x0000000e (const dword)  (not used)
disp_BlitPixelsFromCOM0             -372  0xfffffe8c (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM1             -563  0xfffffdcd (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM2             -564  0xfffffdcc (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM3             -565  0xfffffdcb (PmmC func) args[0] r=0  (not used)
disp_Disconnect                     -371  0xfffffe8d (PmmC func) args[0] r=0  (not used)
disp_Init                           -370  0xfffffe8e (PmmC func) args[0] r=0  (not used)
disp_ReadWord                       -367  0xfffffe91 (PmmC func) args[0] r=1  (not used)
disp_setGRAM                        -363  0xfffffe95 (PmmC func) args[4] r=0  (not used)
disp_SetReg                         -362  0xfffffe96 (PmmC func) args[2] r=0  (not used)
disp_Sync                           -369  0xfffffe8f (PmmC func) args[1] r=0  (not used)
disp_WrGRAM                         -364  0xfffffe94 (PmmC func) args[1] r=0  (not used)
disp_WriteControl                   -365  0xfffffe93 (PmmC func) args[1] r=0  (not used)
disp_WriteWord                      -366  0xfffffe92 (PmmC func) args[1] r=0  (not used)
DODGERBLUE                          7327  0x00001c9f (const dword)  (not used)
DoGFXObjects                        9097  0x00002389 (User func) args[0] r=0  (usage 6)
doScope                            12610  0x00003142 (User func) args[2] r=0  (usage 3)
DOWN                                   0  0x00000000 (const dword)  (not used)
drawScope                          12810  0x0000320a (User func) args[1] r=0  (usage 6)
DSK                                63490  0x0000f802 (const dword)  (not used)
ENABLE                                 1  0x00000001 (const dword)  (not used)
EVE_SP                               -65  0xffffffbf (PmmC func) args[0] r=1  (not used)
EVE_SSIZE                            -66  0xffffffbe (PmmC func) args[0] r=1  (not used)
EXTERN                               N/A         N/A (macro)  /**/   (not used)
FALSE_REASON                         141  0x0000008d (const dword)  (not used)
FCY_1                                 20  0x00000014 (const dword)  (not used)
FCY_256                               23  0x00000017 (const dword)  (not used)
FCY_64                                22  0x00000016 (const dword)  (not used)
FCY_8                                 21  0x00000015 (const dword)  (not used)
FE_CANNOT_INIT                        15  0x0000000f (const dword)  (not used)
FE_CANNOT_READ_MBR                    16  0x00000010 (const dword)  (not used)
FE_DIR_FULL                           12  0x0000000c (const dword)  (not used)
FE_DISK_FULL                          13  0x0000000d (const dword)  (not used)
FE_DISK_NOT_MNTD                       6  0x00000006 (const dword)  (not used)
FE_EOF                                10  0x0000000a (const dword)  (not used)
FE_FAT_EOF                             9  0x00000009 (const dword)  (not used)
FE_FILE_NOT_FOUND                      7  0x00000007 (const dword)  (not used)
FE_FILE_OVERWRITE                     14  0x0000000e (const dword)  (not used)
FE_FILE_TIMEOUT                       26  0x0000001a (const dword)  (not used)
FE_FIND_ERROR                         19  0x00000013 (const dword)  (not used)
FE_IDE_ERROR                           1  0x00000001 (const dword)  (not used)
FE_INVALID_BR                          5  0x00000005 (const dword)  (not used)
FE_INVALID_CLUSTER                    11  0x0000000b (const dword)  (not used)
FE_INVALID_FILE                        8  0x00000008 (const dword)  (not used)
FE_INVALID_FNAME                      20  0x00000014 (const dword)  (not used)
FE_INVALID_MBR                         4  0x00000004 (const dword)  (not used)
FE_INVALID_MEDIA                      21  0x00000015 (const dword)  (not used)
FE_INVALID_MODE                       18  0x00000012 (const dword)  (not used)
FE_MALLOC_FAILED                      17  0x00000011 (const dword)  (not used)
FE_NOT_PRESENT                         2  0x00000002 (const dword)  (not used)
FE_OK                                  0  0x00000000 (const dword)  (not used)
FE_PARTITION_TYPE                      3  0x00000003 (const dword)  (not used)
FE_SECTOR_READ_FAIL                   22  0x00000016 (const dword)  (not used)
FE_SECTOR_WRITE_FAIL                  23  0x00000017 (const dword)  (not used)
FILE_ATTRIBUTES                       18  0x00000012 (const dword)  (not used)
FILE_BUFFER                           22  0x00000016 (const dword)  (not used)
file_Close                          -431  0xfffffe51 (PmmC func) args[1] r=1  (not used)
file_Count                          -425  0xfffffe57 (PmmC func) args[1] r=1  (not used)
FILE_CURR_CLUSTER                      1  0x00000001 (const dword)  (not used)
FILE_CURR_SECTOR                       2  0x00000002 (const dword)  (not used)
FILE_CURR_SECTOR_POS                   3  0x00000003 (const dword)  (not used)
FILE_CURR_SECTOR_TOP                   4  0x00000004 (const dword)  (not used)
FILE_DATE                             10  0x0000000a (const dword)  (not used)
file_Dir                            -426  0xfffffe56 (PmmC func) args[1] r=1  (not used)
FILE_DISK                             21  0x00000015 (const dword)  (not used)
FILE_ENTRY                            20  0x00000014 (const dword)  (not used)
file_Erase                          -446  0xfffffe42 (PmmC func) args[1] r=1  (not used)
file_Error                          -424  0xfffffe58 (PmmC func) args[0] r=1  (not used)
file_Exec                           -450  0xfffffe3e (PmmC func) args[2] r=1  (not used)
file_Exists                         -429  0xfffffe53 (PmmC func) args[1] r=1  (not used)
file_FindFirst                      -427  0xfffffe55 (PmmC func) args[1] r=1  (not used)
file_FindNext                       -428  0xfffffe54 (PmmC func) args[0] r=1  (not used)
FILE_FIRST_CLUSTER                     0  0x00000000 (const dword)  (not used)
file_GetC                           -441  0xfffffe47 (PmmC func) args[1] r=1  (not used)
file_GetS                           -445  0xfffffe43 (PmmC func) args[3] r=1  (not used)
file_GetW                           -443  0xfffffe45 (PmmC func) args[1] r=1  (not used)
file_Image                          -438  0xfffffe4a (PmmC func) args[3] r=1  (not used)
file_Index                          -434  0xfffffe4e (PmmC func) args[4] r=1  (not used)
file_LoadFunction                   -448  0xfffffe40 (PmmC func) args[1] r=1  (not used)
file_LoadImageControl               -451  0xfffffe3d (PmmC func) args[3] r=1  (usage 3)
FILE_MODE                             17  0x00000011 (const dword)  (not used)
file_Mount                          -452  0xfffffe3c (PmmC func) args[0] r=1  (usage 6)
FILE_NAME                             11  0x0000000b (const dword)  (not used)
file_Open                           -430  0xfffffe52 (PmmC func) args[2] r=1  (not used)
FILE_PAGEFLAG                         19  0x00000013 (const dword)  (not used)
file_PlayWAV                        -454  0xfffffe3a (PmmC func) args[1] r=1  (not used)
file_PutC                           -440  0xfffffe48 (PmmC func) args[2] r=1  (not used)
file_PutS                           -444  0xfffffe44 (PmmC func) args[2] r=1  (not used)
file_PutW                           -442  0xfffffe46 (PmmC func) args[2] r=1  (not used)
file_Read                           -432  0xfffffe50 (PmmC func) args[3] r=1  (not used)
file_Rename                         -455  0xfffffe39 (PmmC func) args[2] r=1  (not used)
file_Rewind                         -447  0xfffffe41 (PmmC func) args[1] r=1  (not used)
file_Run                            -449  0xfffffe3f (PmmC func) args[2] r=1  (not used)
file_ScreenCapture                  -439  0xfffffe49 (PmmC func) args[5] r=1  (not used)
file_Seek                           -433  0xfffffe4f (PmmC func) args[3] r=1  (not used)
FILE_SEEK_POS_HI                       6  0x00000006 (const dword)  (not used)
FILE_SEEK_POS_LO                       5  0x00000005 (const dword)  (not used)
file_SetDate                        -456  0xfffffe38 (PmmC func) args[7] r=1  (not used)
file_Size                           -437  0xfffffe4b (PmmC func) args[3] r=1  (not used)
FILE_SIZE_HI                           8  0x00000008 (const dword)  (not used)
FILE_SIZE_LO                           7  0x00000007 (const dword)  (not used)
file_Tell                           -435  0xfffffe4d (PmmC func) args[3] r=1  (not used)
FILE_TIME                              9  0x00000009 (const dword)  (not used)
file_Unmount                        -453  0xfffffe3b (PmmC func) args[0] r=0  (not used)
file_Write                          -436  0xfffffe4c (PmmC func) args[3] r=1  (not used)
FILLPATTERN_0                      65504  0x0000ffe0 (const dword)  (not used)
FILLPATTERN_1                      65505  0x0000ffe1 (const ??? 0)  (not used)
FILLPATTERN_10                     65514  0x0000ffea (const ??? 0)  (not used)
FILLPATTERN_11                     65515  0x0000ffeb (const ??? 0)  (not used)
FILLPATTERN_12                     65516  0x0000ffec (const ??? 0)  (not used)
FILLPATTERN_13                     65517  0x0000ffed (const ??? 0)  (not used)
FILLPATTERN_14                     65518  0x0000ffee (const ??? 0)  (not used)
FILLPATTERN_15                     65519  0x0000ffef (const ??? 0)  (not used)
FILLPATTERN_16                     65520  0x0000fff0 (const ??? 0)  (not used)
FILLPATTERN_17                     65521  0x0000fff1 (const ??? 0)  (not used)
FILLPATTERN_18                     65522  0x0000fff2 (const ??? 0)  (not used)
FILLPATTERN_19                     65523  0x0000fff3 (const ??? 0)  (not used)
FILLPATTERN_2                      65506  0x0000ffe2 (const ??? 0)  (not used)
FILLPATTERN_20                     65524  0x0000fff4 (const ??? 0)  (not used)
FILLPATTERN_21                     65525  0x0000fff5 (const ??? 0)  (not used)
FILLPATTERN_22                     65526  0x0000fff6 (const ??? 0)  (not used)
FILLPATTERN_23                     65527  0x0000fff7 (const ??? 0)  (not used)
FILLPATTERN_24                     65528  0x0000fff8 (const ??? 0)  (not used)
FILLPATTERN_25                     65529  0x0000fff9 (const ??? 0)  (not used)
FILLPATTERN_26                     65530  0x0000fffa (const ??? 0)  (not used)
FILLPATTERN_27                     65531  0x0000fffb (const ??? 0)  (not used)
FILLPATTERN_28                     65532  0x0000fffc (const ??? 0)  (not used)
FILLPATTERN_29                     65533  0x0000fffd (const ??? 0)  (not used)
FILLPATTERN_3                      65507  0x0000ffe3 (const ??? 0)  (not used)
FILLPATTERN_30                     65534  0x0000fffe (const ??? 0)  (not used)
FILLPATTERN_31                     65535  0x0000ffff (const ??? 0)  (not used)
FILLPATTERN_4                      65508  0x0000ffe4 (const ??? 0)  (not used)
FILLPATTERN_5                      65509  0x0000ffe5 (const ??? 0)  (not used)
FILLPATTERN_6                      65510  0x0000ffe6 (const ??? 0)  (not used)
FILLPATTERN_7                      65511  0x0000ffe7 (const ??? 0)  (not used)
FILLPATTERN_8                      65512  0x0000ffe8 (const ??? 0)  (not used)
FILLPATTERN_9                      65513  0x0000ffe9 (const ??? 0)  (not used)
FIREBRICK                          45316  0x0000b104 (const dword)  (not used)
flash_Bank                          -498  0xfffffe0e (PmmC func) args[0] r=1  (not used)
flash_Blit1                         -507  0xfffffe05 (PmmC func) args[4] r=1  (not used)
flash_Blit16                        -503  0xfffffe09 (PmmC func) args[3] r=1  (not used)
flash_Blit2                         -506  0xfffffe06 (PmmC func) args[4] r=1  (not used)
flash_Blit4                         -505  0xfffffe07 (PmmC func) args[4] r=1  (not used)
flash_Blit8                         -504  0xfffffe08 (PmmC func) args[3] r=1  (not used)
flash_Copy                          -496  0xfffffe10 (PmmC func) args[4] r=1  (not used)
flash_EraseBank                     -499  0xfffffe0d (PmmC func) args[2] r=1  (not used)
flash_Exec                          -508  0xfffffe04 (PmmC func) args[2] r=1  (not used)
flash_GetByte                       -494  0xfffffe12 (PmmC func) args[2] r=1  (not used)
flash_GetWord                       -495  0xfffffe11 (PmmC func) args[2] r=1  (not used)
flash_LoadFile                      -500  0xfffffe0c (PmmC func) args[2] r=1  (not used)
flash_putstr                        -502  0xfffffe0a (PmmC func) args[2] r=1  (not used)
FLASH_READ_PROTECT                    16  0x00000010 (const dword)  (not used)
flash_Run                           -497  0xfffffe0f (PmmC func) args[1] r=1  (not used)
FLASH_WRITE_PROTECT                   32  0x00000020 (const dword)  (not used)
flash_WriteBlock                    -501  0xfffffe0b (PmmC func) args[3] r=1  (not used)
FLASHBANK_0                            0  0x00000000 (const dword)  (not used)
FLASHBANK_1                            1  0x00000001 (const dword)  (not used)
FLASHBANK_2                            2  0x00000002 (const dword)  (not used)
FLASHBANK_3                            3  0x00000003 (const dword)  (not used)
FLASHBANK_4                            4  0x00000004 (const dword)  (not used)
FLASHBANK_5                            5  0x00000005 (const dword)  (not used)
FLORALWHITE                        65502  0x0000ffde (const dword)  (not used)
flt_ABS                              -84  0xffffffac (PmmC func) args[2] r=1  (not used)
flt_ACOS                             -85  0xffffffab (PmmC func) args[2] r=1  (not used)
flt_ADD                              -97  0xffffff9f (PmmC func) args[3] r=1  (not used)
flt_ASIN                             -86  0xffffffaa (PmmC func) args[2] r=1  (not used)
flt_ATAN                             -87  0xffffffa9 (PmmC func) args[2] r=1  (not used)
flt_CEIL                             -90  0xffffffa6 (PmmC func) args[2] r=1  (not used)
flt_COS                              -88  0xffffffa8 (PmmC func) args[2] r=1  (not used)
flt_DIV                             -100  0xffffff9c (PmmC func) args[3] r=1  (not used)
flt_EQ                              -101  0xffffff9b (PmmC func) args[2] r=1  (not used)
flt_EXP                              -89  0xffffffa7 (PmmC func) args[2] r=1  (not used)
flt_FLOOR                            -91  0xffffffa5 (PmmC func) args[2] r=1  (not used)
flt_FTOI                            -108  0xffffff94 (PmmC func) args[1] r=1  (not used)
flt_GE                              -104  0xffffff98 (PmmC func) args[2] r=1  (not used)
flt_GT                              -103  0xffffff99 (PmmC func) args[2] r=1  (not used)
flt_ITOF                             -79  0xffffffb1 (PmmC func) args[2] r=1  (not used)
flt_LE                              -106  0xffffff96 (PmmC func) args[2] r=1  (not used)
flt_LOG                              -93  0xffffffa3 (PmmC func) args[2] r=1  (not used)
flt_LT                              -105  0xffffff97 (PmmC func) args[2] r=1  (not used)
flt_LTOF                             -81  0xffffffaf (PmmC func) args[2] r=1  (not used)
flt_MUL                              -99  0xffffff9d (PmmC func) args[3] r=1  (not used)
flt_NE                              -102  0xffffff9a (PmmC func) args[2] r=1  (not used)
flt_POW                              -96  0xffffffa0 (PmmC func) args[3] r=1  (not used)
flt_PRINT                            -83  0xffffffad (PmmC func) args[2] r=1  (not used)
flt_PRINTxy                         -109  0xffffff93 (PmmC func) args[4] r=1  (not used)
flt_SGN                             -107  0xffffff95 (PmmC func) args[1] r=1  (not used)
flt_SIN                              -92  0xffffffa4 (PmmC func) args[2] r=1  (not used)
flt_SQR                              -94  0xffffffa2 (PmmC func) args[2] r=1  (not used)
flt_SUB                              -98  0xffffff9e (PmmC func) args[3] r=1  (not used)
flt_TAN                              -95  0xffffffa1 (PmmC func) args[2] r=1  (not used)
flt_UITOF                            -80  0xffffffb0 (PmmC func) args[2] r=1  (not used)
flt_ULTOF                            -82  0xffffffae (PmmC func) args[2] r=1  (not used)
flt_VAL                              -78  0xffffffb2 (PmmC func) args[2] r=1  (not used)
FONT1                                  1  0x00000001 (const dword)  (not used)
FONT2                                  2  0x00000002 (const dword)  (not used)
FONT3                                  3  0x00000003 (const dword)  (not used)
FONT_1                                 1  0x00000001 (const dword)  (not used)
FONT_10                               10  0x0000000a (const dword)  (not used)
FONT_11                               11  0x0000000b (const dword)  (not used)
FONT_2                                 2  0x00000002 (const dword)  (not used)
FONT_3                                 3  0x00000003 (const dword)  (not used)
FONT_4                                 4  0x00000004 (const dword)  (not used)
FONT_5                                 5  0x00000005 (const dword)  (not used)
FONT_6                                 6  0x00000006 (const dword)  (not used)
FONT_7                                 7  0x00000007 (const dword)  (not used)
FONT_8                                 8  0x00000008 (const dword)  (not used)
FONT_9                                 9  0x00000009 (const dword)  (not used)
FONT_ID                                2  0x00000002 (const dword)  (not used)
FONT_SIZE                              2  0x00000002 (const dword)  (not used)
FORESTGREEN                         9284  0x00002444 (const dword)  (not used)
FormBGcolors                        6176  0x00001820FormBGcolors                        6176  0x00001820 (mem) word[19] (member of C:\Users\Zac\Google Drive\NASA RMC Zips\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (usage 6)
FormEndIndex                         146  0x00000092FormEndIndex                         146  0x00000092 (mem) word[19] (member of C:\Users\Zac\Google Drive\NASA RMC Zips\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (usage 6)
FormStartIndex                       108  0x0000006cFormStartIndex                       108  0x0000006c (mem) word[19] (member of C:\Users\Zac\Google Drive\NASA RMC Zips\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (usage 6)
FRAME_DELAY                           22  0x00000016 (const dword)  (not used)
FUCHSIA                            63519  0x0000f81f (const dword)  (usage 15)
GAINSBORO                          57083  0x0000defb (const dword)  (not used)
gbutton                           UNRESOLVED  (not used)
getcpvars                          13868  0x0000362c (User func) args[1] r=0  (usage 6)
GFX                                63489  0x0000f801 (const dword)  (not used)
gfx_332to565                        -165  0xffffff5b (PmmC func) args[1] r=1  (not used)
gfx_565to332                        -166  0xffffff5a (PmmC func) args[1] r=1  (not used)
gfx_Arc                             -172  0xffffff54 (PmmC func) args[7] r=0  (not used)
gfx_BevelRadius                     -194  0xffffff3e (PmmC func) args[1] r=1  (not used)
gfx_BevelShadow                     -196  0xffffff3c (PmmC func) args[1] r=1  (not used)
gfx_BevelWidth                      -195  0xffffff3d (PmmC func) args[1] r=1  (not used)
gfx_BGcolour                        -184  0xffffff48 (PmmC func) args[1] r=1  (not used)
GFX_BOTTOM                            51  0x00000033 (const dword)  (not used)
gfx_BoxTo                           -149  0xffffff6b (PmmC func) args[2] r=0  (not used)
gfx_Bullet                          -146  0xffffff6e (PmmC func) args[1] r=0  (not used)
gfx_Button                          -155  0xffffff65 (PmmC func) args[9] r=1  (not used)
gfx_Button2                         -156  0xffffff64 (PmmC func) args[8] r=0  (not used)
gfx_Button3                         -157  0xffffff63 (PmmC func) args[8] r=0  (not used)
gfx_ChangeColour                    -151  0xffffff69 (PmmC func) args[2] r=0  (not used)
gfx_CheckBox                        -158  0xffffff62 (PmmC func) args[8] r=0  (not used)
gfx_Circle                          -136  0xffffff78 (PmmC func) args[4] r=0  (not used)
gfx_CircleFilled                    -137  0xffffff77 (PmmC func) args[4] r=0  (not used)
GFX_CLIP_BOTTOM                      114  0x00000072 (const dword)  (not used)
GFX_CLIP_BOTTOM_VAL                  110  0x0000006e (const dword)  (not used)
GFX_CLIP_LEFT                        111  0x0000006f (const dword)  (not used)
GFX_CLIP_LEFT_VAL                    107  0x0000006b (const dword)  (not used)
GFX_CLIP_RIGHT                       113  0x00000071 (const dword)  (not used)
GFX_CLIP_RIGHT_VAL                   109  0x0000006d (const dword)  (not used)
GFX_CLIP_TOP                         112  0x00000070 (const dword)  (not used)
GFX_CLIP_TOP_VAL                     108  0x0000006c (const dword)  (not used)
gfx_Clipping                        -186  0xffffff46 (PmmC func) args[1] r=1  (not used)
gfx_ClipWindow                      -150  0xffffff6a (PmmC func) args[4] r=0  (not used)
gfx_Cls                             -126  0xffffff82 (PmmC func) args[0] r=0  (usage 6)
gfx_Contrast                        -192  0xffffff40 (PmmC func) args[1] r=1  (usage 3)
gfx_Dot                             -145  0xffffff6f (PmmC func) args[0] r=0  (not used)
gfx_Ellipse                         -153  0xffffff67 (PmmC func) args[5] r=0  (not used)
gfx_EllipseFilled                   -154  0xffffff66 (PmmC func) args[5] r=0  (not used)
gfx_FillPattern                     -170  0xffffff56 (PmmC func) args[2] r=1  (not used)
gfx_FrameDelay                      -189  0xffffff43 (PmmC func) args[1] r=1  (not used)
gfx_Get                             -182  0xffffff4a (PmmC func) args[1] r=1  (not used)
gfx_GetPixel                        -139  0xffffff75 (PmmC func) args[2] r=1  (usage 3)
gfx_Gradient                        -176  0xffffff50 (PmmC func) args[7] r=0  (not used)
gfx_Hline                           -132  0xffffff7c (PmmC func) args[4] r=1  (usage 9)
gfx_IncX                            -147  0xffffff6d (PmmC func) args[0] r=1  (not used)
gfx_IncY                            -148  0xffffff6c (PmmC func) args[0] r=1  (not used)
GFX_LAST_CHAR_HEIGHT                 120  0x00000078 (const dword)  (not used)
GFX_LAST_CHAR_WIDTH                  119  0x00000077 (const dword)  (not used)
GFX_LAST_STR_HEIGHT                  122  0x0000007a (const dword)  (not used)
GFX_LAST_STR_WIDTH                   121  0x00000079 (const dword)  (not used)
GFX_LEFT                              48  0x00000030 (const dword)  (not used)
gfx_Line                            -131  0xffffff7d (PmmC func) args[5] r=0  (not used)
gfx_LinePattern                     -193  0xffffff3f (PmmC func) args[1] r=1  (usage 51)
gfx_LineRel                         -130  0xffffff7e (PmmC func) args[2] r=0  (not used)
gfx_LineTo                          -129  0xffffff7f (PmmC func) args[2] r=0  (not used)
gfx_MoveRel                         -128  0xffffff80 (PmmC func) args[2] r=0  (not used)
gfx_MoveTo                          -127  0xffffff81 (PmmC func) args[2] r=0  (not used)
gfx_ObjectColour                    -185  0xffffff47 (PmmC func) args[1] r=1  (not used)
gfx_Orbit                           -142  0xffffff72 (PmmC func) args[2] r=0  (not used)
gfx_OrbitInit                       -141  0xffffff73 (PmmC func) args[2] r=0  (not used)
gfx_Origin                          -169  0xffffff57 (PmmC func) args[2] r=0  (not used)
gfx_OutlineColour                   -191  0xffffff41 (PmmC func) args[1] r=1  (usage 102)
gfx_Panel                           -161  0xffffff5f (PmmC func) args[6] r=0  (usage 57)
gfx_PenSize                         -183  0xffffff49 (PmmC func) args[1] r=1  (not used)
gfx_PieSlice                        -171  0xffffff55 (PmmC func) args[9] r=0  (not used)
gfx_PointWithinBox                  -199  0xffffff39 (PmmC func) args[3] r=1  (not used)
gfx_PointWithinRectangle            -200  0xffffff38 (PmmC func) args[3] r=1  (not used)
gfx_Polygon                         -144  0xffffff70 (PmmC func) args[4] r=0  (not used)
gfx_PolygonFilled                   -168  0xffffff58 (PmmC func) args[4] r=0  (not used)
gfx_Polyline                        -143  0xffffff71 (PmmC func) args[4] r=0  (not used)
gfx_PutPixel                        -138  0xffffff76 (PmmC func) args[3] r=0  (usage 3)
gfx_RadioButton                     -159  0xffffff61 (PmmC func) args[8] r=0  (not used)
gfx_ReadBresLine                    -178  0xffffff4e (PmmC func) args[5] r=1  (not used)
gfx_ReadGRAMarea                    -180  0xffffff4c (PmmC func) args[5] r=1  (not used)
gfx_Rectangle                       -134  0xffffff7a (PmmC func) args[5] r=0  (not used)
gfx_RectangleFilled                 -135  0xffffff79 (PmmC func) args[5] r=0  (usage 96)
gfx_RGBto565                        -164  0xffffff5c (PmmC func) args[3] r=1  (not used)
GFX_RIGHT                             50  0x00000032 (const dword)  (not used)
gfx_RoundGradient                   -177  0xffffff4f (PmmC func) args[8] r=0  (not used)
gfx_RoundPanel                      -175  0xffffff51 (PmmC func) args[8] r=0  (not used)
gfx_RoundRect                       -173  0xffffff53 (PmmC func) args[6] r=0  (not used)
gfx_Scope                           -532  0xfffffdec (PmmC func) args[19] r=0  (usage 3)
gfx_ScreenCopyPaste                 -163  0xffffff5d (PmmC func) args[6] r=0  (not used)
gfx_ScreenMode                      -190  0xffffff42 (PmmC func) args[1] r=1  (usage 3)
gfx_Set                             -125  0xffffff83 (PmmC func) args[2] r=0  (usage 3)
gfx_SetClipRegion                   -152  0xffffff68 (PmmC func) args[0] r=0  (not used)
gfx_Slider                          -162  0xffffff5e (PmmC func) args[8] r=1  (not used)
gfx_Slider2                         -160  0xffffff60 (PmmC func) args[8] r=1  (not used)
gfx_Surround                        -174  0xffffff52 (PmmC func) args[7] r=0  (not used)
GFX_THUMB_BORDER_DARK                 76  0x0000004c (const dword)  (not used)
GFX_THUMB_BORDER_LIGHT                77  0x0000004d (const dword)  (not used)
GFX_THUMB_PERCENT                     75  0x0000004b (const dword)  (not used)
GFX_TOP                               49  0x00000031 (const dword)  (not used)
GFX_TOUCH_REGION_X1                  103  0x00000067 (const dword)  (not used)
GFX_TOUCH_REGION_X2                  105  0x00000069 (const dword)  (not used)
GFX_TOUCH_REGION_Y1                  104  0x00000068 (const dword)  (not used)
GFX_TOUCH_REGION_Y2                  106  0x0000006a (const dword)  (not used)
gfx_Transparency                    -188  0xffffff44 (PmmC func) args[1] r=1  (not used)
gfx_TransparentColour               -187  0xffffff45 (PmmC func) args[1] r=1  (not used)
gfx_Triangle                        -140  0xffffff74 (PmmC func) args[7] r=0  (not used)
gfx_TriangleFilled                  -167  0xffffff59 (PmmC func) args[7] r=0  (usage 3)
gfx_Vline                           -133  0xffffff7b (PmmC func) args[4] r=1  (not used)
gfx_WriteBresLine                   -179  0xffffff4d (PmmC func) args[5] r=0  (not used)
gfx_WriteGRAMarea                   -181  0xffffff4b (PmmC func) args[5] r=0  (not used)
GFX_X1                                52  0x00000034 (const dword)  (not used)
GFX_X2                                54  0x00000036 (const dword)  (not used)
GFX_X_ORG                             56  0x00000038 (const dword)  (not used)
GFX_XMAX                              46  0x0000002e (const dword)  (not used)
gfx_Xorigin                         -197  0xffffff3b (PmmC func) args[1] r=1  (not used)
GFX_Y1                                53  0x00000035 (const dword)  (not used)
GFX_Y2                                55  0x00000037 (const dword)  (not used)
GFX_Y_ORG                             57  0x00000039 (const dword)  (not used)
GFX_YMAX                              47  0x0000002f (const dword)  (not used)
gfx_Yorigin                         -198  0xffffff3a (PmmC func) args[1] r=1  (not used)
GHOSTWHITE                         65503  0x0000ffdf (const dword)  (not used)
GOLD                               65184  0x0000fea0 (const dword)  (not used)
GOLDENROD                          56612  0x0000dd24 (const dword)  (not used)
GRAD_DOWN                             32  0x00000020 (const dword)  (not used)
GRAD_LEFT                             80  0x00000050 (const dword)  (not used)
GRAD_RIGHT                            48  0x00000030 (const dword)  (not used)
GRAD_UP                               64  0x00000040 (const dword)  (not used)
GRAD_WAVE_HOR                        112  0x00000070 (const dword)  (not used)
GRAD_WAVE_VER                         96  0x00000060 (const dword)  (not used)
GRAM_PIXEL_COUNT_HI                  116  0x00000074 (const dword)  (not used)
GRAM_PIXEL_COUNT_LO                  115  0x00000073 (const dword)  (not used)
Graticule                          13264  0x000033d0 (User func) args[7] r=0  (usage 6)
GRAY                               33808  0x00008410 (const dword)  (not used)
GREEN                               1024  0x00000400 (const dword)  (not used)
green                                  4  0x00000004 (mem) word (global)  (usage 24)
GREENYELLOW                        45029  0x0000afe5 (const dword)  (not used)
h                                      8  0x00000008 (mem) word (global)  (usage 30)
HEX                                 5136  0x00001410 (const dword)  (not used)
HEX1                                4368  0x00001110 (const dword)  (not used)
HEX1Z                                272  0x00000110 (const dword)  (not used)
HEX1ZB                              8464  0x00002110 (const dword)  (not used)
HEX2                                4624  0x00001210 (const dword)  (not used)
HEX2Z                                528  0x00000210 (const dword)  (not used)
HEX2ZB                              8720  0x00002210 (const dword)  (not used)
HEX3                                4880  0x00001310 (const dword)  (not used)
HEX3Z                                784  0x00000310 (const dword)  (not used)
HEX3ZB                              8976  0x00002310 (const dword)  (not used)
HEX4                                5136  0x00001410 (const dword)  (not used)
HEX4Z                               1040  0x00000410 (const dword)  (not used)
HEX4ZB                              9232  0x00002410 (const dword)  (not used)
HEXZ                                1040  0x00000410 (const dword)  (not used)
HEXZB                               9232  0x00002410 (const dword)  (not used)
HI                                     1  0x00000001 (const dword)  (not used)
HIbyte                               -48  0xffffffd0 (PmmC func) args[1] r=1  (not used)
HIDE                                   2  0x00000002 (const dword)  (not used)
HLS2RGB                            14001  0x000036b1 (User func) args[3] r=0  (usage 3)
HLSMAX                               127  0x0000007f (const dword)  (usage 63)
HLSMAXd12                             10  0x0000000a (const dword)  (usage 6)
HLSMAXd2                              63  0x0000003f (const dword)  (usage 12)
HLSMAXd3                              42  0x0000002a (const dword)  (usage 9)
HLSMAXd6                              21  0x00000015 (const dword)  (usage 18)
HLSMAXm2d3                            84  0x00000054 (const dword)  (usage 9)
hndl                                   0  0x00000000 (mem) word (global)  (usage 138)
HONEYDEW                           63486  0x0000f7fe (const dword)  (not used)
HOTPINK                            64342  0x0000fb56 (const dword)  (not used)
hue_RGB                            14169  0x00003759 (User func) args[3] r=0  (usage 9)
HYPER                                  3  0x00000003 (const dword)  (not used)
I2C1                               63520  0x0000f820 (const dword)  (not used)
I2C1_Ack                            -305  0xfffffecf (PmmC func) args[0] r=0  (not used)
I2C1_AckPoll                        -314  0xfffffec6 (PmmC func) args[1] r=1  (not used)
I2C1_AckStatus                      -311  0xfffffec9 (PmmC func) args[0] r=1  (not used)
I2C1_Close                          -287  0xfffffee1 (PmmC func) args[0] r=0  (not used)
I2C1_Getn                           -323  0xfffffebd (PmmC func) args[2] r=1  (not used)
I2C1_Gets                           -320  0xfffffec0 (PmmC func) args[2] r=1  (not used)
I2C1_Idle                           -317  0xfffffec3 (PmmC func) args[0] r=1  (not used)
I2C1_Nack                           -308  0xfffffecc (PmmC func) args[0] r=0  (not used)
I2C1_Open                           -284  0xfffffee4 (PmmC func) args[3] r=1  (not used)
I2C1_Putn                           -329  0xfffffeb7 (PmmC func) args[2] r=1  (not used)
I2C1_Puts                           -326  0xfffffeba (PmmC func) args[1] r=1  (not used)
I2C1_Read                           -299  0xfffffed5 (PmmC func) args[0] r=1  (not used)
I2C1_Restart                        -296  0xfffffed8 (PmmC func) args[0] r=1  (not used)
I2C1_Start                          -290  0xfffffede (PmmC func) args[0] r=1  (not used)
I2C1_Stop                           -293  0xfffffedb (PmmC func) args[0] r=1  (not used)
I2C1_Write                          -302  0xfffffed2 (PmmC func) args[1] r=1  (not used)
I2C2                               63521  0x0000f821 (const dword)  (not used)
I2C2_Ack                            -306  0xfffffece (PmmC func) args[0] r=0  (not used)
I2C2_AckPoll                        -315  0xfffffec5 (PmmC func) args[1] r=1  (not used)
I2C2_AckStatus                      -312  0xfffffec8 (PmmC func) args[0] r=1  (not used)
I2C2_Close                          -288  0xfffffee0 (PmmC func) args[0] r=0  (not used)
I2C2_Getn                           -324  0xfffffebc (PmmC func) args[2] r=1  (not used)
I2C2_Gets                           -321  0xfffffebf (PmmC func) args[2] r=1  (not used)
I2C2_Idle                           -318  0xfffffec2 (PmmC func) args[0] r=1  (not used)
I2C2_Nack                           -309  0xfffffecb (PmmC func) args[0] r=0  (not used)
I2C2_Open                           -285  0xfffffee3 (PmmC func) args[3] r=1  (not used)
I2C2_Putn                           -330  0xfffffeb6 (PmmC func) args[2] r=1  (not used)
I2C2_Puts                           -327  0xfffffeb9 (PmmC func) args[1] r=1  (not used)
I2C2_Read                           -300  0xfffffed4 (PmmC func) args[0] r=1  (not used)
I2C2_Restart                        -297  0xfffffed7 (PmmC func) args[0] r=1  (not used)
I2C2_Start                          -291  0xfffffedd (PmmC func) args[0] r=1  (not used)
I2C2_Stop                           -294  0xfffffeda (PmmC func) args[0] r=1  (not used)
I2C2_Write                          -303  0xfffffed1 (PmmC func) args[1] r=1  (not used)
I2C3                               63522  0x0000f822 (const dword)  (not used)
I2C3_Ack                            -307  0xfffffecd (PmmC func) args[0] r=0  (not used)
I2C3_AckPoll                        -316  0xfffffec4 (PmmC func) args[1] r=1  (not used)
I2C3_AckStatus                      -313  0xfffffec7 (PmmC func) args[0] r=1  (not used)
I2C3_Close                          -289  0xfffffedf (PmmC func) args[0] r=0  (not used)
I2C3_Getn                           -325  0xfffffebb (PmmC func) args[2] r=1  (not used)
I2C3_Gets                           -322  0xfffffebe (PmmC func) args[2] r=1  (not used)
I2C3_Idle                           -319  0xfffffec1 (PmmC func) args[0] r=1  (not used)
I2C3_Nack                           -310  0xfffffeca (PmmC func) args[0] r=0  (not used)
I2C3_Open                           -286  0xfffffee2 (PmmC func) args[3] r=1  (not used)
I2C3_Putn                           -331  0xfffffeb5 (PmmC func) args[2] r=1  (not used)
I2C3_Puts                           -328  0xfffffeb8 (PmmC func) args[1] r=1  (not used)
I2C3_Read                           -301  0xfffffed3 (PmmC func) args[0] r=1  (not used)
I2C3_Restart                        -298  0xfffffed6 (PmmC func) args[0] r=1  (not used)
I2C3_Start                          -292  0xfffffedc (PmmC func) args[0] r=1  (not used)
I2C3_Stop                           -295  0xfffffed9 (PmmC func) args[0] r=1  (not used)
I2C3_Write                          -304  0xfffffed0 (PmmC func) args[1] r=1  (not used)
I2C_10KHZ                              3  0x00000003 (const dword)  (not used)
I2C_20KHZ                              4  0x00000004 (const dword)  (not used)
I2C_250KHZ                             6  0x00000006 (const dword)  (not used)
I2C_50KHZ                              5  0x00000005 (const dword)  (not used)
I2C_FAST                               2  0x00000002 (const dword)  (not used)
I2C_MED                                1  0x00000001 (const dword)  (not used)
I2C_SLOW                               0  0x00000000 (const dword)  (not used)
i4Dbutton0                           187  0x000000bb (const ??? 0)  (usage 3)
i4Dbutton1                           191  0x000000bf (const ??? 0)  (usage 3)
i4Dbutton2                           223  0x000000df (const ??? 0)  (usage 3)
I_COLOUR16                            16  0x00000010 (const dword)  (not used)
I_DARKEN                           16384  0x00004000 (const dword)  (not used)
I_ENABLED                          32768  0x00008000 (const dword)  (usage 6)
I_LIGHTEN                           8192  0x00002000 (const dword)  (not used)
I_MOVIE                              128  0x00000080 (const dword)  (not used)
I_NOGROUP                             64  0x00000040 (const dword)  (not used)
I_STAYONTOP                          256  0x00000100 (const dword)  (usage 3)
I_TOPMOST                            512  0x00000200 (const dword)  (not used)
I_TOUCH_DISABLE                       32  0x00000020 (const dword)  (usage 6)
I_TOUCHED                           4096  0x00001000 (const dword)  (not used)
I_X_LOCK                            1024  0x00000400 (const dword)  (not used)
I_Y_LOCK                            2048  0x00000800 (const dword)  (not used)
iAngularmeter0                         6  0x00000006 (const ??? 0)  (usage 3)
iAngularmeter1                        28  0x0000001c (const ??? 0)  (usage 3)
iAngularmeter2                        55  0x00000037 (const ??? 0)  (usage 3)
iAngularmeter3                        29  0x0000001d (const ??? 0)  (usage 3)
iAngularmeter4                        89  0x00000059 (const ??? 0)  (usage 3)
iAngularmeter5                       233  0x000000e9 (const ??? 0)  (usage 3)
iAngularmeter6                       234  0x000000ea (const ??? 0)  (usage 3)
iColorpicker0                        160  0x000000a0 (const ??? 0)  (usage 3)
iColorpicker1                        214  0x000000d6 (const ??? 0)  (usage 3)
iCoolgauge0                           64  0x00000040 (const ??? 0)  (usage 3)
iCoolgauge1                           52  0x00000034 (const ??? 0)  (usage 3)
iGauge0                               30  0x0000001e (const ??? 0)  (usage 3)
iiLeddigits0                           8  0x00000008 (const ??? 0)  (not used)
iiLeddigits1                          67  0x00000043 (const ??? 0)  (not used)
iiLeddigits11                         22  0x00000016 (const ??? 0)  (not used)
iiLeddigits12                         24  0x00000018 (const ??? 0)  (not used)
iiLeddigits14                        108  0x0000006c (const ??? 0)  (not used)
iiLeddigits15                         82  0x00000052 (const ??? 0)  (not used)
iiLeddigits16                         84  0x00000054 (const ??? 0)  (not used)
iiLeddigits19                         36  0x00000024 (const ??? 0)  (not used)
iiLeddigits2                          60  0x0000003c (const ??? 0)  (not used)
iiLeddigits20                        110  0x0000006e (const ??? 0)  (not used)
iiLeddigits21                        112  0x00000070 (const ??? 0)  (not used)
iiLeddigits22                        114  0x00000072 (const ??? 0)  (not used)
iiLeddigits23                        120  0x00000078 (const ??? 0)  (not used)
iiLeddigits24                        122  0x0000007a (const ??? 0)  (not used)
iiLeddigits25                        127  0x0000007f (const ??? 0)  (not used)
iiLeddigits26                        186  0x000000ba (const ??? 0)  (not used)
iiLeddigits27                        139  0x0000008b (const ??? 0)  (not used)
iiLeddigits28                        141  0x0000008d (const ??? 0)  (not used)
iiLeddigits29                        143  0x0000008f (const ??? 0)  (not used)
iiLeddigits3                          57  0x00000039 (const ??? 0)  (not used)
iiLeddigits30                        145  0x00000091 (const ??? 0)  (not used)
iiLeddigits31                         97  0x00000061 (const ??? 0)  (not used)
iiLeddigits32                        200  0x000000c8 (const ??? 0)  (not used)
iiLeddigits33                        202  0x000000ca (const ??? 0)  (not used)
iiLeddigits4                          39  0x00000027 (const ??? 0)  (not used)
iiLeddigits5                          13  0x0000000d (const ??? 0)  (not used)
iiLeddigits6                          16  0x00000010 (const ??? 0)  (not used)
iiLeddigits9                          19  0x00000013 (const ??? 0)  (not used)
iImage0                               11  0x0000000b (const ??? 0)  (usage 3)
iImage1                               10  0x0000000a (const ??? 0)  (usage 3)
iKnob0                               183  0x000000b7 (const ??? 0)  (usage 3)
iLeddigits0                            7  0x00000007 (const ??? 0)  (usage 3)
iLeddigits1                           66  0x00000042 (const ??? 0)  (usage 3)
iLeddigits11                          21  0x00000015 (const ??? 0)  (usage 3)
iLeddigits12                          23  0x00000017 (const ??? 0)  (usage 3)
iLeddigits14                         107  0x0000006b (const ??? 0)  (usage 3)
iLeddigits15                          81  0x00000051 (const ??? 0)  (usage 3)
iLeddigits16                          83  0x00000053 (const ??? 0)  (usage 3)
iLeddigits19                          35  0x00000023 (const ??? 0)  (usage 3)
iLeddigits2                           59  0x0000003b (const ??? 0)  (usage 3)
iLeddigits20                         109  0x0000006d (const ??? 0)  (usage 3)
iLeddigits21                         111  0x0000006f (const ??? 0)  (usage 3)
iLeddigits22                         113  0x00000071 (const ??? 0)  (usage 3)
iLeddigits23                         119  0x00000077 (const ??? 0)  (usage 3)
iLeddigits24                         121  0x00000079 (const ??? 0)  (usage 3)
iLeddigits25                         126  0x0000007e (const ??? 0)  (usage 3)
iLeddigits26                         185  0x000000b9 (const ??? 0)  (usage 3)
iLeddigits27                         138  0x0000008a (const ??? 0)  (usage 3)
iLeddigits28                         140  0x0000008c (const ??? 0)  (usage 3)
iLeddigits29                         142  0x0000008e (const ??? 0)  (usage 3)
iLeddigits3                           56  0x00000038 (const ??? 0)  (usage 3)
iLeddigits30                         144  0x00000090 (const ??? 0)  (usage 3)
iLeddigits31                          96  0x00000060 (const ??? 0)  (usage 3)
iLeddigits32                         199  0x000000c7 (const ??? 0)  (usage 3)
iLeddigits33                         201  0x000000c9 (const ??? 0)  (usage 3)
iLeddigits4                           38  0x00000026 (const ??? 0)  (usage 3)
iLeddigits5                           12  0x0000000c (const ??? 0)  (usage 3)
iLeddigits6                           15  0x0000000f (const ??? 0)  (usage 3)
iLeddigits9                           18  0x00000012 (const ??? 0)  (usage 3)
IMAGE_CLUSTER                         10  0x0000000a (const dword)  (not used)
IMAGE_DELAY                            7  0x00000007 (const dword)  (usage 12)
IMAGE_FLAGS                            6  0x00000006 (const dword)  (usage 3)
IMAGE_FRAMES                           8  0x00000008 (const dword)  (not used)
IMAGE_HEIGHT                           5  0x00000005 (const dword)  (usage 3)
IMAGE_HIWORD                           1  0x00000001 (const dword)  (not used)
IMAGE_INDEX                            9  0x00000009 (const dword)  (usage 45)
IMAGE_LOWORD                           0  0x00000000 (const dword)  (not used)
IMAGE_SECTOR                          11  0x0000000b (const dword)  (not used)
IMAGE_TAG                             12  0x0000000c (const dword)  (usage 12)
IMAGE_TAG2                            13  0x0000000d (const dword)  (usage 12)
IMAGE_WIDTH                            4  0x00000004 (const dword)  (usage 3)
IMAGE_XPOS                             2  0x00000002 (const dword)  (usage 6)
IMAGE_YPOS                             3  0x00000003 (const dword)  (usage 3)
img_ClearAttributes                 -383  0xfffffe81 (PmmC func) args[3] r=1  (usage 3)
IMG_COUNT                              0  0x00000000 (const dword)  (not used)
IMG_CURRENT_FRAME                     89  0x00000059 (const dword)  (not used)
img_Darken                          -377  0xfffffe87 (PmmC func) args[2] r=1  (not used)
IMG_DAT_FILENAME                       4  0x00000004 (const dword)  (not used)
img_Disable                         -376  0xfffffe88 (PmmC func) args[2] r=1  (usage 6)
img_Enable                          -375  0xfffffe89 (PmmC func) args[2] r=1  (not used)
IMG_ENTRYLEN                           1  0x00000001 (const dword)  (not used)
IMG_FLAGS                             85  0x00000055 (const dword)  (not used)
IMG_FRAME_COUNT                       86  0x00000056 (const dword)  (not used)
IMG_FRAME_DELAY                       84  0x00000054 (const dword)  (not used)
IMG_GCI_FILENAME                       3  0x00000003 (const dword)  (not used)
IMG_GCIFILE_HANDLE                     5  0x00000005 (const dword)  (not used)
img_GetWord                         -380  0xfffffe84 (PmmC func) args[3] r=1  (usage 69)
IMG_HEIGHT                            83  0x00000053 (const dword)  (not used)
img_Lighten                         -378  0xfffffe86 (PmmC func) args[2] r=1  (not used)
IMG_MODE                               2  0x00000002 (const dword)  (not used)
IMG_PIXEL_COUNT_HI                    88  0x00000058 (const dword)  (not used)
IMG_PIXEL_COUNT_LO                    87  0x00000057 (const dword)  (not used)
img_SelectReadPosition              -385  0xfffffe7f (PmmC func) args[5] r=1  (not used)
img_SequentialRead                  -386  0xfffffe7e (PmmC func) args[2] r=1  (not used)
img_SetAttributes                   -382  0xfffffe82 (PmmC func) args[3] r=1  (usage 6)
img_SetPosition                     -374  0xfffffe8a (PmmC func) args[4] r=1  (not used)
img_SetWord                         -379  0xfffffe85 (PmmC func) args[4] r=1  (usage 30)
img_Show                            -381  0xfffffe83 (PmmC func) args[2] r=1  (usage 18)
img_Touched                         -384  0xfffffe80 (PmmC func) args[2] r=1  (usage 3)
IMG_WIDTH                             82  0x00000052 (const dword)  (not used)
INDIANRED                          51947  0x0000caeb (const dword)  (not used)
INDIGO                             18448  0x00004810 (const dword)  (not used)
InputControls                        184  0x000000b8InputControls                        184  0x000000b8 (mem) word[230] (member of C:\Users\Zac\Google Drive\NASA RMC Zips\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (usage 9)
InputCS                             4664  0x00001238 (mem) word (global)  (usage 15)
InputData                            644  0x00000284InputData                            644  0x00000284 (mem) word[2486] (member of C:\Users\Zac\Google Drive\NASA RMC Zips\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (usage 30)
InputType                           4416  0x00001140 (mem) word (global)  (usage 30)
INVERSE                               64  0x00000040 (const dword)  (not used)
IPDatasize                            22  0x00000016 (const dword)  (usage 3)
isalnum                              -41  0xffffffd7 (PmmC func) args[1] r=1  (not used)
isalpha                              -40  0xffffffd8 (PmmC func) args[1] r=1  (not used)
isdigit                              -36  0xffffffdc (PmmC func) args[1] r=1  (not used)
iSlider0                              90  0x0000005a (const ??? 0)  (usage 3)
islower                              -39  0xffffffd9 (PmmC func) args[1] r=1  (not used)
isprint                              -42  0xffffffd6 (PmmC func) args[1] r=1  (not used)
isspace                              -43  0xffffffd5 (PmmC func) args[1] r=1  (not used)
iStatictext0                           1  0x00000001 (const ??? 0)  (usage 3)
iStatictext1                           0  0x00000000 (const ??? 0)  (usage 3)
iStatictext14                         61  0x0000003d (const ??? 0)  (usage 3)
iStatictext15                         62  0x0000003e (const ??? 0)  (usage 3)
iStatictext16                         40  0x00000028 (const ??? 0)  (usage 3)
iStatictext17                         14  0x0000000e (const ??? 0)  (usage 3)
iStatictext18                         17  0x00000011 (const ??? 0)  (usage 3)
iStatictext19                         20  0x00000014 (const ??? 0)  (usage 3)
iStatictext2                           9  0x00000009 (const ??? 0)  (usage 3)
iStatictext20                        115  0x00000073 (const ??? 0)  (usage 3)
iStatictext21                         68  0x00000044 (const ??? 0)  (usage 3)
iStatictext22                        116  0x00000074 (const ??? 0)  (usage 3)
iStatictext23                         43  0x0000002b (const ??? 0)  (usage 3)
iStatictext24                         44  0x0000002c (const ??? 0)  (usage 3)
iStatictext25                         45  0x0000002d (const ??? 0)  (usage 3)
iStatictext26                         46  0x0000002e (const ??? 0)  (usage 3)
iStatictext27                         47  0x0000002f (const ??? 0)  (usage 3)
iStatictext28                         48  0x00000030 (const ??? 0)  (usage 3)
iStatictext29                         49  0x00000031 (const ??? 0)  (usage 3)
iStatictext3                          27  0x0000001b (const ??? 0)  (usage 3)
iStatictext31                         85  0x00000055 (const ??? 0)  (usage 3)
iStatictext32                         86  0x00000056 (const ??? 0)  (usage 3)
iStatictext34                        100  0x00000064 (const ??? 0)  (usage 3)
iStatictext35                        230  0x000000e6 (const ??? 0)  (usage 3)
iStatictext36                        231  0x000000e7 (const ??? 0)  (usage 3)
iStatictext37                         33  0x00000021 (const ??? 0)  (usage 3)
iStatictext38                         34  0x00000022 (const ??? 0)  (usage 3)
iStatictext39                         37  0x00000025 (const ??? 0)  (usage 3)
iStatictext4                          31  0x0000001f (const ??? 0)  (usage 3)
iStatictext40                        117  0x00000075 (const ??? 0)  (usage 3)
iStatictext41                        118  0x00000076 (const ??? 0)  (usage 3)
iStatictext42                        123  0x0000007b (const ??? 0)  (usage 3)
iStatictext43                        124  0x0000007c (const ??? 0)  (usage 3)
iStatictext44                        128  0x00000080 (const ??? 0)  (usage 3)
iStatictext45                        129  0x00000081 (const ??? 0)  (usage 3)
iStatictext46                         63  0x0000003f (const ??? 0)  (usage 3)
iStatictext47                        130  0x00000082 (const ??? 0)  (usage 3)
iStatictext48                        131  0x00000083 (const ??? 0)  (usage 3)
iStatictext49                        134  0x00000086 (const ??? 0)  (usage 3)
iStatictext5                          41  0x00000029 (const ??? 0)  (usage 3)
iStatictext50                        133  0x00000085 (const ??? 0)  (usage 3)
iStatictext51                        162  0x000000a2 (const ??? 0)  (usage 3)
iStatictext52                        170  0x000000aa (const ??? 0)  (usage 3)
iStatictext53                        188  0x000000bc (const ??? 0)  (usage 3)
iStatictext54                        137  0x00000089 (const ??? 0)  (usage 3)
iStatictext55                        146  0x00000092 (const ??? 0)  (usage 3)
iStatictext56                        147  0x00000093 (const ??? 0)  (usage 3)
iStatictext57                         98  0x00000062 (const ??? 0)  (usage 3)
iStatictext58                         88  0x00000058 (const ??? 0)  (usage 3)
iStatictext59                        189  0x000000bd (const ??? 0)  (usage 3)
iStatictext6                          50  0x00000032 (const ??? 0)  (usage 3)
iStatictext60                        190  0x000000be (const ??? 0)  (usage 3)
iStatictext61                        192  0x000000c0 (const ??? 0)  (usage 3)
iStatictext62                        193  0x000000c1 (const ??? 0)  (usage 3)
iStatictext63                        203  0x000000cb (const ??? 0)  (usage 3)
iStatictext64                        204  0x000000cc (const ??? 0)  (usage 3)
iStatictext65                        209  0x000000d1 (const ??? 0)  (usage 3)
iStatictext66                        210  0x000000d2 (const ??? 0)  (usage 3)
iStatictext67                        211  0x000000d3 (const ??? 0)  (usage 3)
iStatictext68                        212  0x000000d4 (const ??? 0)  (usage 3)
iStatictext69                        213  0x000000d5 (const ??? 0)  (usage 3)
iStatictext7                          65  0x00000041 (const ??? 0)  (usage 3)
iStatictext70                        232  0x000000e8 (const ??? 0)  (usage 3)
iStatictext8                          58  0x0000003a (const ??? 0)  (usage 3)
isupper                              -38  0xffffffda (PmmC func) args[1] r=1  (not used)
iswhite                              -44  0xffffffd4 (PmmC func) args[1] r=1  (not used)
isxdigit                             -37  0xffffffdb (PmmC func) args[1] r=1  (not used)
ITALIC                                32  0x00000020 (const dword)  (not used)
iterator                            -404  0xfffffe6c (PmmC func) args[1] r=0  (not used)
iUserled2                            205  0x000000cd (const ??? 0)  (usage 3)
iUserled3                            206  0x000000ce (const ??? 0)  (usage 3)
iUserled4                            207  0x000000cf (const ??? 0)  (usage 3)
iUserled5                            208  0x000000d0 (const ??? 0)  (usage 3)
IVORY                              65534  0x0000fffe (const dword)  (not used)
iWinbutton0                            2  0x00000002 (const ??? 0)  (usage 3)
iWinbutton1                           99  0x00000063 (const ??? 0)  (usage 3)
iWinbutton10                          54  0x00000036 (const ??? 0)  (usage 3)
iWinbutton13                          69  0x00000045 (const ??? 0)  (usage 3)
iWinbutton14                          70  0x00000046 (const ??? 0)  (usage 3)
iWinbutton16                          71  0x00000047 (const ??? 0)  (usage 3)
iWinbutton17                         182  0x000000b6 (const ??? 0)  (usage 3)
iWinbutton18                          72  0x00000048 (const ??? 0)  (usage 3)
iWinbutton19                          73  0x00000049 (const ??? 0)  (usage 3)
iWinbutton2                            3  0x00000003 (const ??? 0)  (usage 3)
iWinbutton20                          74  0x0000004a (const ??? 0)  (usage 3)
iWinbutton21                         184  0x000000b8 (const ??? 0)  (usage 3)
iWinbutton22                          75  0x0000004b (const ??? 0)  (usage 3)
iWinbutton23                          76  0x0000004c (const ??? 0)  (usage 3)
iWinbutton24                          77  0x0000004d (const ??? 0)  (usage 3)
iWinbutton25                          91  0x0000005b (const ??? 0)  (usage 3)
iWinbutton26                          92  0x0000005c (const ??? 0)  (usage 3)
iWinbutton27                          93  0x0000005d (const ??? 0)  (usage 3)
iWinbutton28                          94  0x0000005e (const ??? 0)  (usage 3)
iWinbutton29                          87  0x00000057 (const ??? 0)  (usage 3)
iWinbutton3                            4  0x00000004 (const ??? 0)  (usage 3)
iWinbutton30                          95  0x0000005f (const ??? 0)  (usage 3)
iWinbutton31                         101  0x00000065 (const ??? 0)  (usage 3)
iWinbutton33                         229  0x000000e5 (const ??? 0)  (usage 3)
iWinbutton35                         102  0x00000066 (const ??? 0)  (usage 3)
iWinbutton36                         103  0x00000067 (const ??? 0)  (usage 3)
iWinbutton37                         104  0x00000068 (const ??? 0)  (usage 3)
iWinbutton38                         105  0x00000069 (const ??? 0)  (usage 3)
iWinbutton39                         106  0x0000006a (const ??? 0)  (usage 3)
iWinbutton4                            5  0x00000005 (const ??? 0)  (usage 3)
iWinbutton40                         125  0x0000007d (const ??? 0)  (usage 3)
iWinbutton41                         132  0x00000084 (const ??? 0)  (usage 3)
iWinbutton42                         135  0x00000087 (const ??? 0)  (usage 3)
iWinbutton43                         161  0x000000a1 (const ??? 0)  (usage 3)
iWinbutton44                          25  0x00000019 (const ??? 0)  (usage 3)
iWinbutton45                         163  0x000000a3 (const ??? 0)  (usage 3)
iWinbutton46                         164  0x000000a4 (const ??? 0)  (usage 3)
iWinbutton47                         165  0x000000a5 (const ??? 0)  (usage 3)
iWinbutton48                         166  0x000000a6 (const ??? 0)  (usage 3)
iWinbutton49                         167  0x000000a7 (const ??? 0)  (usage 3)
iWinbutton5                           26  0x0000001a (const ??? 0)  (usage 3)
iWinbutton50                         168  0x000000a8 (const ??? 0)  (usage 3)
iWinbutton51                         169  0x000000a9 (const ??? 0)  (usage 3)
iWinbutton52                          78  0x0000004e (const ??? 0)  (usage 3)
iWinbutton53                         136  0x00000088 (const ??? 0)  (usage 3)
iWinbutton54                         148  0x00000094 (const ??? 0)  (usage 3)
iWinbutton55                         149  0x00000095 (const ??? 0)  (usage 3)
iWinbutton56                         150  0x00000096 (const ??? 0)  (usage 3)
iWinbutton57                         151  0x00000097 (const ??? 0)  (usage 3)
iWinbutton58                         152  0x00000098 (const ??? 0)  (usage 3)
iWinbutton59                         153  0x00000099 (const ??? 0)  (usage 3)
iWinbutton6                           51  0x00000033 (const ??? 0)  (usage 3)
iWinbutton60                         154  0x0000009a (const ??? 0)  (usage 3)
iWinbutton61                         155  0x0000009b (const ??? 0)  (usage 3)
iWinbutton62                         156  0x0000009c (const ??? 0)  (usage 3)
iWinbutton63                         157  0x0000009d (const ??? 0)  (usage 3)
iWinbutton64                         158  0x0000009e (const ??? 0)  (usage 3)
iWinbutton65                         159  0x0000009f (const ??? 0)  (usage 3)
iWinbutton66                         171  0x000000ab (const ??? 0)  (usage 3)
iWinbutton67                         172  0x000000ac (const ??? 0)  (usage 3)
iWinbutton68                         173  0x000000ad (const ??? 0)  (usage 3)
iWinbutton69                         174  0x000000ae (const ??? 0)  (usage 3)
iWinbutton7                           42  0x0000002a (const ??? 0)  (usage 3)
iWinbutton70                         175  0x000000af (const ??? 0)  (usage 3)
iWinbutton71                         176  0x000000b0 (const ??? 0)  (usage 3)
iWinbutton72                         177  0x000000b1 (const ??? 0)  (usage 3)
iWinbutton73                         178  0x000000b2 (const ??? 0)  (usage 3)
iWinbutton74                         179  0x000000b3 (const ??? 0)  (usage 3)
iWinbutton75                         180  0x000000b4 (const ??? 0)  (usage 3)
iWinbutton76                         181  0x000000b5 (const ??? 0)  (usage 3)
iWinbutton77                          79  0x0000004f (const ??? 0)  (usage 3)
iWinbutton78                         194  0x000000c2 (const ??? 0)  (usage 3)
iWinbutton79                         195  0x000000c3 (const ??? 0)  (usage 3)
iWinbutton8                           32  0x00000020 (const ??? 0)  (usage 3)
iWinbutton80                         196  0x000000c4 (const ??? 0)  (usage 3)
iWinbutton81                         197  0x000000c5 (const ??? 0)  (usage 3)
iWinbutton82                         198  0x000000c6 (const ??? 0)  (usage 3)
iWinbutton83                         215  0x000000d7 (const ??? 0)  (usage 3)
iWinbutton84                         216  0x000000d8 (const ??? 0)  (usage 3)
iWinbutton85                         217  0x000000d9 (const ??? 0)  (usage 3)
iWinbutton86                         218  0x000000da (const ??? 0)  (usage 3)
iWinbutton87                         219  0x000000db (const ??? 0)  (usage 3)
iWinbutton88                         220  0x000000dc (const ??? 0)  (usage 3)
iWinbutton89                         221  0x000000dd (const ??? 0)  (usage 3)
iWinbutton9                           53  0x00000035 (const ??? 0)  (usage 3)
iWinbutton90                          80  0x00000050 (const ??? 0)  (usage 3)
iWinbutton91                         222  0x000000de (const ??? 0)  (usage 3)
iWinbutton92                         224  0x000000e0 (const ??? 0)  (usage 3)
iWinbutton93                         225  0x000000e1 (const ??? 0)  (usage 3)
iWinbutton94                         226  0x000000e2 (const ??? 0)  (usage 3)
iWinbutton95                         227  0x000000e3 (const ??? 0)  (usage 3)
iWinbutton96                         228  0x000000e4 (const ??? 0)  (usage 3)
KHAKI                              63281  0x0000f731 (const dword)  (not used)
kKeyboardKeystrokes                 6214  0x00001846kKeyboardKeystrokes                 6214  0x00001846 (mem) word[1] (member of C:\Users\Zac\Google Drive\NASA RMC Zips\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (not used)
l                                     10  0x0000000a (mem) word (global)  (usage 11)
LANDSCAPE                              0  0x00000000 (const dword)  (usage 3)
LANDSCAPE_R                            1  0x00000001 (const dword)  (not used)
LAVENDER                           59199  0x0000e73f (const dword)  (not used)
LAVENDERBLUSH                      65438  0x0000ff9e (const dword)  (not used)
LAWNGREEN                          32736  0x00007fe0 (const dword)  (not used)
ledDigitsDisplay                   11733  0x00002dd5 (User func) args[3] r=0  (usage 6)
LEFT_POS                               2  0x00000002 (const dword)  (not used)
LEMONCHIFFON                       65497  0x0000ffd9 (const dword)  (not used)
LIGHTBLUE                          44764  0x0000aedc (const dword)  (not used)
LIGHTCORAL                         62480  0x0000f410 (const dword)  (not used)
LIGHTCYAN                          59391  0x0000e7ff (const dword)  (not used)
LIGHTGOLD                          65498  0x0000ffda (const dword)  (not used)
LIGHTGREEN                         38770  0x00009772 (const dword)  (not used)
LIGHTGREY                          54938  0x0000d69a (const dword)  (usage 6)
LIGHTPINK                          64952  0x0000fdb8 (const dword)  (not used)
LIGHTSALMON                        64783  0x0000fd0f (const dword)  (not used)
LIGHTSEAGREEN                       9621  0x00002595 (const dword)  (not used)
LIGHTSKYBLUE                       34431  0x0000867f (const dword)  (not used)
LIGHTSLATEGRAY                     29779  0x00007453 (const dword)  (not used)
LIGHTSTEELBLUE                     46651  0x0000b63b (const dword)  (not used)
LIGHTYELLOW                        65532  0x0000fffc (const dword)  (not used)
LIME                                2016  0x000007e0 (const dword)  (usage 15)
LIMEGREEN                          13926  0x00003666 (const dword)  (not used)
LINE_PATTERN                          26  0x0000001a (const dword)  (not used)
LINEN                              65436  0x0000ff9c (const dword)  (not used)
LO                                     0  0x00000000 (const dword)  (not used)
LObyte                               -47  0xffffffd1 (PmmC func) args[1] r=1  (not used)
LOCAL                                N/A         N/A (macro) //   (not used)
LPCOARSE                           61680  0x0000f0f0 (const dword)  (not used)
LPDASHDOT                            975  0x000003cf (const dword)  (not used)
LPDASHDOTDOT                         819  0x00000333 (const dword)  (not used)
LPFINE                             43690  0x0000aaaa (const dword)  (usage 51)
LPMEDIUM                           13107  0x00003333 (const dword)  (not used)
LPSOLID                                0  0x00000000 (const dword)  (not used)
M_PA0                                  1  0x00000001 (const dword)  (not used)
M_PA1                                  2  0x00000002 (const dword)  (not used)
M_PA10                              1024  0x00000400 (const dword)  (not used)
M_PA11                              2048  0x00000800 (const dword)  (not used)
M_PA12                              4096  0x00001000 (const dword)  (not used)
M_PA13                              8192  0x00002000 (const dword)  (not used)
M_PA14                             16384  0x00004000 (const dword)  (not used)
M_PA15                             32768  0x00008000 (const dword)  (not used)
M_PA2                                  4  0x00000004 (const dword)  (not used)
M_PA3                                  8  0x00000008 (const dword)  (not used)
M_PA4                                 16  0x00000010 (const dword)  (not used)
M_PA5                                 32  0x00000020 (const dword)  (not used)
M_PA6                                 64  0x00000040 (const dword)  (not used)
M_PA7                                128  0x00000080 (const dword)  (not used)
M_PA8                                256  0x00000100 (const dword)  (not used)
M_PA9                                512  0x00000200 (const dword)  (not used)
MAGENTA                            63519  0x0000f81f (const dword)  (not used)
main                                6961  0x00001b31 (User func) args[0] r=0  (not used)
MAROON                             32768  0x00008000 (const dword)  (not used)
MAX                                  -55  0xffffffc9 (PmmC func) args[2] r=1  (usage 6)
MaxTotObjects                         33  0x00000021 (const dword)  (usage 6)
MDA                                63552  0x0000f840 (const dword)  (not used)
MEDIA_ADDRESS_HI                      91  0x0000005b (const dword)  (not used)
MEDIA_ADDRESS_LO                      90  0x0000005a (const dword)  (not used)
media_Flush                         -218  0xffffff26 (PmmC func) args[0] r=1  (not used)
media_Image                         -217  0xffffff27 (PmmC func) args[2] r=0  (not used)
media_Init                          -219  0xffffff25 (PmmC func) args[0] r=1  (not used)
media_RdSector                      -211  0xffffff2d (PmmC func) args[1] r=1  (not used)
media_ReadByte                      -213  0xffffff2b (PmmC func) args[0] r=1  (not used)
media_ReadWord                      -214  0xffffff2a (PmmC func) args[0] r=1  (not used)
MEDIA_SECTOR_COUNT                    94  0x0000005e (const dword)  (not used)
MEDIA_SECTOR_HI                       93  0x0000005d (const dword)  (not used)
MEDIA_SECTOR_LO                       92  0x0000005c (const dword)  (not used)
media_SetAdd                        -209  0xffffff2f (PmmC func) args[2] r=0  (not used)
media_SetSector                     -210  0xffffff2e (PmmC func) args[2] r=0  (not used)
media_Video                         -207  0xffffff31 (PmmC func) args[2] r=0  (not used)
media_VideoFrame                    -208  0xffffff30 (PmmC func) args[3] r=0  (not used)
media_WriteByte                     -215  0xffffff29 (PmmC func) args[1] r=1  (not used)
media_WriteWord                     -216  0xffffff28 (PmmC func) args[1] r=1  (not used)
media_WrSector                      -212  0xffffff2c (PmmC func) args[1] r=1  (not used)
MEDIUMAQUAMARINE                   26229  0x00006675 (const dword)  (not used)
MEDIUMBLUE                            25  0x00000019 (const dword)  (not used)
MEDIUMORCHID                       47802  0x0000baba (const dword)  (not used)
MEDIUMPURPLE                       37787  0x0000939b (const dword)  (not used)
MEDIUMSEAGREEN                     15758  0x00003d8e (const dword)  (not used)
MEDIUMSLATEBLUE                    31581  0x00007b5d (const dword)  (not used)
MEDIUMSPRINGGREEN                   2003  0x000007d3 (const dword)  (not used)
MEDIUMTURQUOISE                    20121  0x00004e99 (const dword)  (not used)
MEDIUMVIOLETRED                    49328  0x0000c0b0 (const dword)  (not used)
mem_Alloc                           -413  0xfffffe63 (PmmC func) args[1] r=1  (not used)
mem_AllocV                          -414  0xfffffe62 (PmmC func) args[1] r=1  (not used)
mem_AllocZ                          -415  0xfffffe61 (PmmC func) args[1] r=1  (not used)
mem_ArrayOp1                         -67  0xffffffbd (PmmC func) args[4] r=0  (not used)
mem_ArrayOp2                         -68  0xffffffbc (PmmC func) args[5] r=0  (not used)
mem_Compare                         -421  0xfffffe5b (PmmC func) args[3] r=1  (not used)
mem_Copy                            -420  0xfffffe5c (PmmC func) args[3] r=1  (usage 3)
mem_Free                            -417  0xfffffe5f (PmmC func) args[1] r=1  (not used)
mem_Heap                            -418  0xfffffe5e (PmmC func) args[0] r=1  (not used)
mem_Realloc                         -416  0xfffffe60 (PmmC func) args[2] r=1  (not used)
mem_Set                             -419  0xfffffe5d (PmmC func) args[3] r=1  (not used)
MIDI                                   9  0x00000009 (const dword)  (not used)
MIDNIGHTBLUE                        6350  0x000018ce (const dword)  (not used)
MIN                                  -54  0xffffffca (PmmC func) args[2] r=1  (usage 6)
MINTCREAM                          63487  0x0000f7ff (const dword)  (not used)
MISTYROSE                          65340  0x0000ff3c (const dword)  (not used)
MOCCASIN                           65334  0x0000ff36 (const dword)  (not used)
NAK                                   21  0x00000015 (const dword)  (usage 3)
nak0                               13653  0x00003555 (User func) args[0] r=0  (usage 12)
nAniTimers                             0  0x00000000 (const dword)  (not used)
NAVAJOWHITE                        65269  0x0000fef5 (const dword)  (not used)
NAVY                                  16  0x00000010 (const dword)  (not used)
nInputs                              226  0x000000e2 (const dword)  (usage 3)
nObjects                             235  0x000000eb (const dword)  (not used)
NOTOUCH                                0  0x00000000 (const dword)  (not used)
NP_565                                 0  0x00000000 (const dword)  (not used)
NP_RGB                                 1  0x00000001 (const dword)  (not used)
NP_Write                            -535  0xfffffde9 (PmmC func) args[7] r=1  (not used)
NP_XRGB                                2  0x00000002 (const dword)  (not used)
nScopes                                5  0x00000005 (const dword)  (usage 3)
NybleSwap                            -50  0xffffffce (PmmC func) args[1] r=1  (not used)
o4Dbuttons                          6152  0x00001808o4Dbuttons                          6152  0x00001808 (mem) word[4] (member of C:\Users\Zac\Google Drive\NASA RMC Zips\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (usage 12)
oAngularmeters                      5828  0x000016c4oAngularmeters                      5828  0x000016c4 (mem) word[8] (member of C:\Users\Zac\Google Drive\NASA RMC Zips\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (usage 3)
oAniButtons                         6160  0x00001810oAniButtons                         6160  0x00001810 (mem) word[1] (member of C:\Users\Zac\Google Drive\NASA RMC Zips\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (usage 3)
OBJECT_COLOUR                         18  0x00000012 (const dword)  (not used)
oColorPickers                       6162  0x00001812oColorPickers                       6162  0x00001812 (mem) word[3] (member of C:\Users\Zac\Google Drive\NASA RMC Zips\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (usage 6)
oCoolgauges                         5844  0x000016d4oCoolgauges                         5844  0x000016d4 (mem) word[3] (member of C:\Users\Zac\Google Drive\NASA RMC Zips\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (usage 3)
oCustomdigitss                      5850  0x000016daoCustomdigitss                      5850  0x000016da (mem) word[1] (member of C:\Users\Zac\Google Drive\NASA RMC Zips\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (usage 3)
oDipSwitchs                         5616  0x000015f0oDipSwitchs                         5616  0x000015f0 (mem) word[1] (member of C:\Users\Zac\Google Drive\NASA RMC Zips\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (usage 3)
OFF                                    0  0x00000000 (const dword)  (not used)
oForms                              5852  0x000016dcoForms                              5852  0x000016dc (mem) word[20] (member of C:\Users\Zac\Google Drive\NASA RMC Zips\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (usage 3)
Ofs_Digits_Digits                      2  0x00000002 (const dword)  (usage 9)
Ofs_Digits_LeadingBlanks               8  0x00000008 (const dword)  (usage 3)
Ofs_Digits_Left                        0  0x00000000 (const dword)  (usage 3)
Ofs_Digits_MinDigits                   4  0x00000004 (const dword)  (usage 3)
Ofs_Digits_Widthdigit                  6  0x00000006 (const dword)  (usage 3)
Ofs_IPD_DOWN                          16  0x00000010 (const dword)  (usage 6)
Ofs_IPD_OBJVIDX                       20  0x00000014 (const dword)  (usage 30)
Ofs_IPD_P1                             2  0x00000002 (const dword)  (usage 21)
Ofs_IPD_P2                             4  0x00000004 (const dword)  (usage 39)
Ofs_IPD_P3                             6  0x00000006 (const dword)  (usage 18)
Ofs_IPD_P4                             8  0x00000008 (const dword)  (usage 21)
Ofs_IPD_P5                            10  0x0000000a (const dword)  (usage 18)
Ofs_IPD_P6                            12  0x0000000c (const dword)  (usage 21)
Ofs_IPD_P7                            14  0x0000000e (const dword)  (usage 3)
Ofs_IPD_RELEASE                       18  0x00000012 (const dword)  (usage 9)
Ofs_String_Ansi                       22  0x00000016 (const dword)  (not used)
Ofs_String_BGColor                    16  0x00000010 (const dword)  (not used)
Ofs_String_FGColor                    14  0x0000000e (const dword)  (not used)
Ofs_String_FontAttribs                18  0x00000012 (const dword)  (not used)
Ofs_String_Form                       24  0x00000018 (const dword)  (not used)
Ofs_String_Size                        4  0x00000004 (const dword)  (not used)
Ofs_String_StartH                      0  0x00000000 (const dword)  (not used)
Ofs_String_StartL                      2  0x00000002 (const dword)  (not used)
Ofs_String_Transparent                20  0x00000014 (const dword)  (not used)
Ofs_String_x1                          6  0x00000006 (const dword)  (not used)
Ofs_String_x2                         10  0x0000000a (const dword)  (not used)
Ofs_String_y1                          8  0x00000008 (const dword)  (not used)
Ofs_String_y2                         12  0x0000000c (const dword)  (not used)
oGauges                             5892  0x00001704oGauges                             5892  0x00001704 (mem) word[2] (member of C:\Users\Zac\Google Drive\NASA RMC Zips\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (usage 3)
oGSliders                           5626  0x000015faoGSliders                           5626  0x000015fa (mem) word[2] (member of C:\Users\Zac\Google Drive\NASA RMC Zips\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (usage 6)
oImages                             5896  0x00001708oImages                             5896  0x00001708 (mem) word[3] (member of C:\Users\Zac\Google Drive\NASA RMC Zips\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (usage 3)
oKeyboards                          5902  0x0000170eoKeyboards                          5902  0x0000170e (mem) word[1] (member of C:\Users\Zac\Google Drive\NASA RMC Zips\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (usage 3)
oKnobs                              5618  0x000015f2oKnobs                              5618  0x000015f2 (mem) word[2] (member of C:\Users\Zac\Google Drive\NASA RMC Zips\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (usage 6)
OLDLACE                            65468  0x0000ffbc (const dword)  (not used)
oLedDigitsn                         6222  0x0000184eoLedDigitsn                         6222  0x0000184e (mem) word[170] (member of C:\Users\Zac\Google Drive\NASA RMC Zips\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (usage 6)
oLeddigitss                         5906  0x00001712oLeddigitss                         5906  0x00001712 (mem) word[35] (member of C:\Users\Zac\Google Drive\NASA RMC Zips\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (usage 9)
oLeds                               5904  0x00001710oLeds                               5904  0x00001710 (mem) word[1] (member of C:\Users\Zac\Google Drive\NASA RMC Zips\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (usage 3)
OLIVE                              33792  0x00008400 (const dword)  (not used)
OLIVEDRAB                          27748  0x00006c64 (const dword)  (not used)
oMeters                             5976  0x00001758oMeters                             5976  0x00001758 (mem) word[1] (member of C:\Users\Zac\Google Drive\NASA RMC Zips\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (usage 3)
ON                                     1  0x00000001 (const dword)  (not used)
oObjects                            4342  0x000010f6 (mem) word[34] (global)  (usage 108)
OP1_ADD                                5  0x00000005 (const dword)  (not used)
OP1_AND                                2  0x00000002 (const dword)  (not used)
OP1_BLACKEN                           16  0x00000010 (const dword)  (not used)
OP1_DARKEN                            18  0x00000012 (const dword)  (not used)
OP1_DIV                                8  0x00000008 (const dword)  (not used)
OP1_GRAY                              14  0x0000000e (const dword)  (not used)
OP1_IOR                                3  0x00000003 (const dword)  (not used)
OP1_LIGHTEN                           17  0x00000011 (const dword)  (not used)
OP1_MUL                                7  0x00000007 (const dword)  (not used)
OP1_NOP                                0  0x00000000 (const dword)  (not used)
OP1_REV                                9  0x00000009 (const dword)  (not used)
OP1_ROL                               12  0x0000000c (const dword)  (not used)
OP1_ROR                               13  0x0000000d (const dword)  (not used)
OP1_SET                                1  0x00000001 (const dword)  (not used)
OP1_SHL                               10  0x0000000a (const dword)  (not used)
OP1_SHR                               11  0x0000000b (const dword)  (not used)
OP1_SUB                                6  0x00000006 (const dword)  (not used)
OP1_WHITEN                            15  0x0000000f (const dword)  (not used)
OP1_XOR                                4  0x00000004 (const dword)  (not used)
OP2_ADD                                4  0x00000004 (const dword)  (not used)
OP2_AND                                1  0x00000001 (const dword)  (not used)
OP2_BLEND                              9  0x00000009 (const dword)  (not used)
OP2_COPY                               8  0x00000008 (const dword)  (not used)
OP2_DIV                                7  0x00000007 (const dword)  (not used)
OP2_IOR                                2  0x00000002 (const dword)  (not used)
OP2_MUL                                6  0x00000006 (const dword)  (not used)
OP2_SUB                                5  0x00000005 (const dword)  (not used)
OP2_XOR                                3  0x00000003 (const dword)  (not used)
OPAQUE                                 1  0x00000001 (const dword)  (not used)
oPinInputs                          6150  0x00001806oPinInputs                          6150  0x00001806 (mem) word[1] (member of C:\Users\Zac\Google Drive\NASA RMC Zips\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (usage 3)
oPinOutputs                         6174  0x0000181eoPinOutputs                         6174  0x0000181e (mem) word[1] (member of C:\Users\Zac\Google Drive\NASA RMC Zips\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (usage 3)
ORANGE                             64800  0x0000fd20 (const dword)  (not used)
ORANGERED                          64032  0x0000fa20 (const dword)  (not used)
ORCHID                             56218  0x0000db9a (const dword)  (not used)
oRockerSwitchs                      5622  0x000015f6oRockerSwitchs                      5622  0x000015f6 (mem) word[1] (member of C:\Users\Zac\Google Drive\NASA RMC Zips\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (usage 3)
oRotarySwitchs                      5624  0x000015f8oRotarySwitchs                      5624  0x000015f8 (mem) word[1] (member of C:\Users\Zac\Google Drive\NASA RMC Zips\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (usage 3)
oScopen                             6562  0x000019a2oScopen                             6562  0x000019a2 (mem) word[120] (member of C:\Users\Zac\Google Drive\NASA RMC Zips\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (usage 153)
oScopes                             6144  0x00001800oScopes                             6144  0x00001800 (mem) word[1] (member of C:\Users\Zac\Google Drive\NASA RMC Zips\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (not used)
oSoundss                            6172  0x0000181coSoundss                            6172  0x0000181c (mem) word[1] (member of C:\Users\Zac\Google Drive\NASA RMC Zips\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (usage 3)
oSpectrums                          6142  0x000017feoSpectrums                          6142  0x000017fe (mem) word[1] (member of C:\Users\Zac\Google Drive\NASA RMC Zips\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (usage 3)
oStaticTexts                        5998  0x0000176eoStaticTexts                        5998  0x0000176e (mem) word[72] (member of C:\Users\Zac\Google Drive\NASA RMC Zips\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (usage 3)
oStringss                           5978  0x0000175aoStringss                           5978  0x0000175a (mem) word[1] (member of C:\Users\Zac\Google Drive\NASA RMC Zips\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (usage 3)
OT_ACTIVATE                          103  0x00000067 (const dword)  (usage 93)
OT_MAGIC                             108  0x0000006c (const dword)  (usage 3)
OT_NEXTFRAME                         104  0x00000068 (const dword)  (usage 3)
OT_NEXTSTRING                        106  0x0000006a (const dword)  (not used)
OT_PREVFRAME                         105  0x00000069 (const dword)  (usage 3)
OT_PREVSTRING                        107  0x0000006b (const dword)  (not used)
OT_REPORT                            100  0x00000064 (const dword)  (usage 291)
OT_SETANOTHER                        102  0x00000066 (const dword)  (usage 6)
OT_SETCONST                          101  0x00000065 (const dword)  (usage 3)
oTanks                              6146  0x00001802oTanks                              6146  0x00001802 (mem) word[1] (member of C:\Users\Zac\Google Drive\NASA RMC Zips\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (usage 3)
oThermometers                       5980  0x0000175coThermometers                       5980  0x0000175c (mem) word[1] (member of C:\Users\Zac\Google Drive\NASA RMC Zips\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (usage 3)
oTimers                             6170  0x0000181aoTimers                             6170  0x0000181a (mem) word[1] (member of C:\Users\Zac\Google Drive\NASA RMC Zips\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (usage 3)
oTrackbars                          5630  0x000015feoTrackbars                          5630  0x000015fe (mem) word[1] (member of C:\Users\Zac\Google Drive\NASA RMC Zips\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (usage 6)
oUserButtons                        6168  0x00001818oUserButtons                        6168  0x00001818 (mem) word[1] (member of C:\Users\Zac\Google Drive\NASA RMC Zips\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (usage 3)
oUserImagess                        6148  0x00001804oUserImagess                        6148  0x00001804 (mem) word[1] (member of C:\Users\Zac\Google Drive\NASA RMC Zips\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (usage 3)
oUserleds                           5982  0x0000175eoUserleds                           5982  0x0000175e (mem) word[7] (member of C:\Users\Zac\Google Drive\NASA RMC Zips\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (usage 3)
OUTLINE                                1  0x00000001 (const dword)  (not used)
OUTLINE_COLOUR                        24  0x00000018 (const dword)  (not used)
OutputCS                            4666  0x0000123a (mem) word (global)  (usage 9)
OVF                                  -63  0xffffffc1 (PmmC func) args[0] r=1  (usage 3)
oVideos                             5996  0x0000176coVideos                             5996  0x0000176c (mem) word[1] (member of C:\Users\Zac\Google Drive\NASA RMC Zips\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (usage 3)
OW_Read                             -523  0xfffffdf5 (PmmC func) args[1] r=1  (not used)
OW_Read9                            -524  0xfffffdf4 (PmmC func) args[1] r=1  (not used)
OW_Reset                            -522  0xfffffdf6 (PmmC func) args[1] r=1  (not used)
OW_Write                            -525  0xfffffdf3 (PmmC func) args[2] r=0  (not used)
oWinButtons                         5632  0x00001600oWinButtons                         5632  0x00001600 (mem) word[98] (member of C:\Users\Zac\Google Drive\NASA RMC Zips\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (usage 12)
PA0                                    1  0x00000001 (const dword)  (not used)
PA1                                    2  0x00000002 (const dword)  (not used)
PA10                                  11  0x0000000b (const dword)  (not used)
PA11                                  12  0x0000000c (const dword)  (not used)
PA12                                  13  0x0000000d (const dword)  (not used)
PA13                                  14  0x0000000e (const dword)  (not used)
PA14                                  15  0x0000000f (const dword)  (not used)
PA15                                  16  0x00000010 (const dword)  (not used)
PA2                                    3  0x00000003 (const dword)  (not used)
PA3                                    4  0x00000004 (const dword)  (not used)
PA4                                    5  0x00000005 (const dword)  (not used)
PA5                                    6  0x00000006 (const dword)  (not used)
PA6                                    7  0x00000007 (const dword)  (not used)
PA7                                    8  0x00000008 (const dword)  (not used)
PA8                                    9  0x00000009 (const dword)  (not used)
PA9                                   10  0x0000000a (const dword)  (not used)
PALEGOLDENROD                      61269  0x0000ef55 (const dword)  (not used)
PALEGREEN                          40915  0x00009fd3 (const dword)  (not used)
PALETURQUOISE                      44925  0x0000af7d (const dword)  (not used)
PALEVIOLETRED                      56210  0x0000db92 (const dword)  (not used)
PANEL_FRAME                            3  0x00000003 (const dword)  (not used)
PANEL_HIDE                             2  0x00000002 (const dword)  (not used)
PANEL_RAISED                           1  0x00000001 (const dword)  (usage 57)
PANEL_SUNKEN                           0  0x00000000 (const dword)  (not used)
PAPAYAWHIP                         65402  0x0000ff7a (const dword)  (not used)
pause                                 -6  0xfffffffa (PmmC func) args[1] r=0  (usage 6)
PEACHPUFF                          65239  0x0000fed7 (const dword)  (not used)
peekW                                -34  0xffffffde (PmmC func) args[1] r=1  (not used)
PEN_SIZE                              16  0x00000010 (const dword)  (not used)
PERU                               52263  0x0000cc27 (const dword)  (not used)
PIN_AN                                 5  0x00000005 (const dword)  (not used)
PIN_ANAVG                              6  0x00000006 (const dword)  (not used)
pin_Counter                         -514  0xfffffdfe (PmmC func) args[3] r=1  (not used)
PIN_COUNTER_PA4                      123  0x0000007b (const dword)  (not used)
PIN_COUNTER_PA5                      124  0x0000007c (const dword)  (not used)
PIN_COUNTER_PA6                      125  0x0000007d (const dword)  (not used)
PIN_COUNTER_PA7                      126  0x0000007e (const dword)  (not used)
PIN_COUNTER_PA8                      127  0x0000007f (const dword)  (not used)
PIN_COUNTER_PA9                      128  0x00000080 (const dword)  (not used)
PIN_EVENT_PA4                        129  0x00000081 (const dword)  (not used)
PIN_EVENT_PA5                        130  0x00000082 (const dword)  (not used)
PIN_EVENT_PA6                        131  0x00000083 (const dword)  (not used)
PIN_EVENT_PA7                        132  0x00000084 (const dword)  (not used)
PIN_EVENT_PA8                        133  0x00000085 (const dword)  (not used)
PIN_EVENT_PA9                        134  0x00000086 (const dword)  (not used)
pin_HI                              -113  0xffffff8f (PmmC func) args[1] r=1  (not used)
PIN_INP                                0  0x00000000 (const dword)  (not used)
PIN_INP_HI                             1  0x00000001 (const dword)  (not used)
PIN_INP_LO                             2  0x00000002 (const dword)  (not used)
pin_LO                              -114  0xffffff8e (PmmC func) args[1] r=1  (not used)
PIN_OUT                                3  0x00000003 (const dword)  (not used)
PIN_OUT_OD                             4  0x00000004 (const dword)  (not used)
pin_Pulseout                        -512  0xfffffe00 (PmmC func) args[2] r=1  (not used)
pin_PulseoutB                       -513  0xfffffdff (PmmC func) args[2] r=1  (not used)
pin_PulseoutCount                   -519  0xfffffdf9 (PmmC func) args[4] r=1  (not used)
pin_Read                            -116  0xffffff8c (PmmC func) args[1] r=1  (not used)
pin_Set                             -112  0xffffff90 (PmmC func) args[2] r=1  (not used)
pin_Val                             -115  0xffffff8d (PmmC func) args[2] r=0  (not used)
PINK                               65049  0x0000fe19 (const dword)  (not used)
pInputIndex                         4422  0x00001146 (mem) word (global)  (usage 45)
PLUM                               56603  0x0000dd1b (const dword)  (not used)
pokeW                                -35  0xffffffdd (PmmC func) args[2] r=0  (not used)
PORTRAIT                               2  0x00000002 (const dword)  (not used)
PORTRAIT_R                             3  0x00000003 (const dword)  (not used)
POWDERBLUE                         46876  0x0000b71c (const dword)  (not used)
PROGRESSBAR_HIDE                       2  0x00000002 (const dword)  (not used)
PROGRESSBAR_RAISED                 65535  0x0000ffff (const dword)  (not used)
PROGRESSBAR_SUNKEN                 65534  0x0000fffe (const dword)  (not used)
PTN_BDIAGONAL                      65518  0x0000ffee (const ??? 0)  (not used)
PTN_BRICKS                         65521  0x0000fff1 (const ??? 0)  (not used)
PTN_BS_HORIZONTAL                  65510  0x0000ffe6 (const ??? 0)  (not used)
PTN_BS_VERTICAL                    65509  0x0000ffe5 (const ??? 0)  (not used)
PTN_BSHORIZONTAL                   65516  0x0000ffec (const ??? 0)  (not used)
PTN_BSVERTICAL                     65515  0x0000ffeb (const ??? 0)  (not used)
PTN_CARGONET                       65522  0x0000fff2 (const ??? 0)  (not used)
PTN_CIRCUITS                       65523  0x0000fff3 (const ??? 0)  (not used)
PTN_COBBLESTONES                   65524  0x0000fff4 (const ??? 0)  (not used)
PTN_COURSE_B_DIAGONAL              65512  0x0000ffe8 (const ??? 0)  (not used)
PTN_COURSE_CROSS                   65513  0x0000ffe9 (const ??? 0)  (not used)
PTN_COURSE_DIAGONALCROSS           65514  0x0000ffea (const ??? 0)  (not used)
PTN_COURSE_DOTS                    65508  0x0000ffe4 (const ??? 0)  (not used)
PTN_COURSE_F_DIAGONAL              65511  0x0000ffe7 (const ??? 0)  (not used)
PTN_CROSSES                        65535  0x0000ffff (const ??? 0)  (not used)
PTN_DAISIES                        65525  0x0000fff5 (const ??? 0)  (not used)
PTN_DIZZY                          65526  0x0000fff6 (const ??? 0)  (not used)
PTN_EMPTY                          65504  0x0000ffe0 (const dword)  (not used)
PTN_FDIAGONAL                      65517  0x0000ffed (const ??? 0)  (not used)
PTN_FIELDEFFECT                    65527  0x0000fff7 (const ??? 0)  (not used)
PTN_FINE_CROSS                     65519  0x0000ffef (const ??? 0)  (not used)
PTN_FINE_DIAGONAL_CROSS            65520  0x0000fff0 (const ??? 0)  (not used)
PTN_FINE_DOTS                      65506  0x0000ffe2 (const ??? 0)  (not used)
PTN_KEY                            65528  0x0000fff8 (const ??? 0)  (not used)
PTN_MEDIUM_DOTS                    65507  0x0000ffe3 (const ??? 0)  (not used)
PTN_ROUNDER                        65529  0x0000fff9 (const ??? 0)  (not used)
PTN_SCALES                         65530  0x0000fffa (const ??? 0)  (not used)
PTN_SOLID                          65505  0x0000ffe1 (const ??? 0)  (not used)
PTN_STONE                          65531  0x0000fffb (const ??? 0)  (not used)
PTN_THATCHES                       65532  0x0000fffc (const ??? 0)  (not used)
PTN_TILE                           65533  0x0000fffd (const ??? 0)  (not used)
PTN_WAFFLESREVENGE                 65534  0x0000fffe (const ??? 0)  (not used)
PURPLE                             32784  0x00008010 (const dword)  (not used)
putch                                 -2  0xfffffffe (PmmC func) args[1] r=0  (not used)
putchXY                               -3  0xfffffffd (PmmC func) args[3] r=0  (not used)
putnum                                -7  0xfffffff9 (PmmC func) args[2] r=1  (not used)
putnumXY                             -51  0xffffffcd (PmmC func) args[4] r=1  (not used)
putstr                                -9  0xfffffff7 (PmmC func) args[1] r=1  (usage 6)
putstrCentred                         -5  0xfffffffb (PmmC func) args[3] r=0  (not used)
putstrXY                              -4  0xfffffffc (PmmC func) args[3] r=0  (not used)
PWM_BINARY                             3  0x00000003 (const dword)  (not used)
pwm_Init                            -521  0xfffffdf7 (PmmC func) args[3] r=1  (not used)
PWM_OFF                                0  0x00000000 (const dword)  (not used)
PWM_PLAIN                              1  0x00000001 (const dword)  (not used)
PWM_SERVO                              2  0x00000002 (const dword)  (not used)
QEN1_COUNTER_HI                      136  0x00000088 (const dword)  (not used)
QEN1_COUNTER_LO                      135  0x00000087 (const dword)  (not used)
QEN1_DELTA                           137  0x00000089 (const dword)  (not used)
QEN2_COUNTER_HI                      139  0x0000008b (const dword)  (not used)
QEN2_COUNTER_LO                      138  0x0000008a (const dword)  (not used)
QEN2_DELTA                           140  0x0000008c (const dword)  (not used)
Qencoder1                           -515  0xfffffdfd (PmmC func) args[3] r=1  (not used)
Qencoder1Reset                      -517  0xfffffdfb (PmmC func) args[0] r=0  (not used)
Qencoder2                           -516  0xfffffdfc (PmmC func) args[3] r=1  (not used)
Qencoder2Reset                      -518  0xfffffdfa (PmmC func) args[0] r=0  (not used)
RAND                                 -59  0xffffffc5 (PmmC func) args[0] r=1  (not used)
RANDOM_HI                             33  0x00000021 (const dword)  (not used)
RANDOM_LO                             32  0x00000020 (const dword)  (not used)
RANDVAL                              -60  0xffffffc4 (PmmC func) args[2] r=1  (not used)
rColorPickerRoutines                6218  0x0000184arColorPickerRoutines                6218  0x0000184a (mem) word[2] (member of C:\Users\Zac\Google Drive\NASA RMC Zips\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (usage 3)
READ_OBJ                               0  0x00000000 (const dword)  (usage 3)
ReadCmd                              128  0x00000080 (const dword)  (not used)
ReadObject                         13335  0x00003417 (User func) args[2] r=0  (usage 3)
RED                                63488  0x0000f800 (const dword)  (usage 15)
red                                    2  0x00000002 (mem) word (global)  (usage 24)
REPORT_EVENT                           7  0x00000007 (const dword)  (usage 6)
REPORT_MAGIC_EVENT_BYTES              10  0x0000000a (const dword)  (not used)
REPORT_MAGIC_EVENT_DBYTES             11  0x0000000b (const dword)  (not used)
REPORT_OBJ                             5  0x00000005 (const dword)  (usage 3)
RGB2HLS                            14299  0x000037db (User func) args[0] r=0  (usage 3)
RGBMAX                               127  0x0000007f (const dword)  (usage 6)
RGBMAXm2                             254  0x000000fe (const dword)  (usage 9)
RGBs2COL                           14645  0x00003935 (User func) args[3] r=0  (usage 3)
RIGHT_POS                              4  0x00000004 (const dword)  (not used)
rKeyboardRoutines                   6216  0x00001848rKeyboardRoutines                   6216  0x00001848 (mem) word[1] (member of C:\Users\Zac\Google Drive\NASA RMC Zips\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (not used)
ROSYBROWN                          48241  0x0000bc71 (const dword)  (not used)
ROYALBLUE                          17244  0x0000435c (const dword)  (not used)
RUNFLASH                             128  0x00000080 (const dword)  (not used)
s                                     12  0x0000000c (mem) word (global)  (usage 12)
SADDLEBROWN                        35362  0x00008a22 (const dword)  (not used)
SALMON                             64526  0x0000fc0e (const dword)  (not used)
SANDYBROWN                         62764  0x0000f52c (const dword)  (not used)
SAVE_TO_DISK                           7  0x00000007 (const dword)  (not used)
sc0Newval1                           354  0x00000162 (mem) word[116] (global)  (usage 3)
sc0Newval2                           818  0x00000332 (mem) word[116] (global)  (usage 3)
sc0Oldval1                           122  0x0000007a (mem) word[116] (global)  (usage 6)
sc0Oldval2                           586  0x0000024a (mem) word[116] (global)  (usage 3)
sc1Newval1                          1198  0x000004ae (mem) word[74] (global)  (usage 3)
sc1Oldval1                          1050  0x0000041a (mem) word[74] (global)  (usage 6)
sc2Newval1                          1494  0x000005d6 (mem) word[74] (global)  (usage 3)
sc2Oldval1                          1346  0x00000542 (mem) word[74] (global)  (usage 6)
sc3Newval1                          1790  0x000006fe (mem) word[74] (global)  (usage 3)
sc3Oldval1                          1642  0x0000066a (mem) word[74] (global)  (usage 6)
sc4Newval1                          3140  0x00000c44 (mem) word[601] (global)  (usage 3)
sc4Oldval1                          1938  0x00000792 (mem) word[601] (global)  (usage 6)
scBottom                              21  0x00000015 (const ??? 0)  (usage 9)
scColor                                0  0x00000000 (const ??? 0)  (usage 6)
scCurpos                             112  0x00000070 (mem) word[5] (global)  (usage 12)
scDataPoints                          22  0x00000016 (const ??? 0)  (usage 9)
scForm                                19  0x00000013 (const ??? 0)  (usage 6)
scGraticuleCol                         1  0x00000001 (const ??? 0)  (usage 6)
scGraticuleVis                         2  0x00000002 (const ??? 0)  (usage 6)
scGraticuleXinc                        3  0x00000003 (const ??? 0)  (usage 6)
scGraticuleYinc                        4  0x00000004 (const ??? 0)  (usage 6)
scLeft                                 5  0x00000005 (const ??? 0)  (usage 18)
SCOPEENTS                             24  0x00000018 (const ??? 0)  (usage 9)
SCREEN_MODE                           23  0x00000017 (const dword)  (not used)
scRefreshInc                           6  0x00000006 (const ??? 0)  (usage 3)
scRight                               20  0x00000014 (const ??? 0)  (usage 15)
scTop                                  7  0x00000007 (const ??? 0)  (usage 9)
scTrace1Col                            8  0x00000008 (const ??? 0)  (usage 3)
scTrace2Col                            9  0x00000009 (const ??? 0)  (usage 3)
scTrace3Col                           10  0x0000000a (const ??? 0)  (usage 3)
scTrace4Col                           11  0x0000000b (const ??? 0)  (usage 3)
scTracebuf                            32  0x00000020 (mem) word[40] (global)  (usage 42)
scTraces                              12  0x0000000c (const ??? 0)  (usage 12)
scWidth                               13  0x0000000d (const ??? 0)  (usage 3)
scXmag                                14  0x0000000e (const ??? 0)  (usage 3)
scYamp                                15  0x0000000f (const ??? 0)  (usage 3)
scYLineCol                            17  0x00000011 (const ??? 0)  (usage 6)
scYLineForm                           16  0x00000010 (const ??? 0)  (usage 6)
scYLineVis                            18  0x00000012 (const ??? 0)  (usage 6)
scYZero                               23  0x00000017 (const ??? 0)  (usage 3)
SEAGREEN                           11338  0x00002c4a (const dword)  (not used)
SEASHELL                           65469  0x0000ffbd (const dword)  (not used)
SEED                                 -61  0xffffffc3 (PmmC func) args[1] r=0  (not used)
SendReport                         13586  0x00003512 (User func) args[4] r=0  (usage 12)
serin                               -236  0xffffff14 (PmmC func) args[0] r=1  (usage 3)
serin1                              -237  0xffffff13 (PmmC func) args[0] r=1  (not used)
serin2                              -238  0xffffff12 (PmmC func) args[0] r=1  (not used)
serin3                              -239  0xffffff11 (PmmC func) args[0] r=1  (not used)
serinX                               N/A         N/A (macro) serin   (not used)
serout                              -240  0xffffff10 (PmmC func) args[1] r=0  (usage 15)
serout1                             -241  0xffffff0f (PmmC func) args[1] r=0  (not used)
serout2                             -242  0xffffff0e (PmmC func) args[1] r=0  (not used)
serout3                             -243  0xffffff0d (PmmC func) args[1] r=0  (not used)
seroutCS                           13669  0x00003565 (User func) args[1] r=0  (usage 15)
seroutOcs                          13636  0x00003544 (User func) args[0] r=0  (usage 3)
seroutX                              N/A         N/A (macro) serout   (not used)
setbaud                             -224  0xffffff20 (PmmC func) args[1] r=0  (not used)
setCpHSl                           13688  0x00003578 (User func) args[3] r=0  (usage 6)
SIENNA                             41605  0x0000a285 (const dword)  (not used)
SILVER                             50712  0x0000c618 (const dword)  (not used)
SIN                                  -57  0xffffffc7 (PmmC func) args[1] r=1  (not used)
SKYBLUE                            34429  0x0000867d (const dword)  (not used)
SLATEBLUE                          27353  0x00006ad9 (const dword)  (not used)
SLATEGRAY                          29714  0x00007412 (const dword)  (not used)
SLIDER_HIDE                            2  0x00000002 (const dword)  (not used)
SLIDER_RAISED                          1  0x00000001 (const dword)  (not used)
SLIDER_SUNKEN                          0  0x00000000 (const dword)  (not used)
snd_BufSize                         -461  0xfffffe33 (PmmC func) args[1] r=0  (not used)
snd_Continue                        -464  0xfffffe30 (PmmC func) args[0] r=0  (not used)
snd_Freq                            -466  0xfffffe2e (PmmC func) args[2] r=1  (not used)
snd_Pause                           -463  0xfffffe31 (PmmC func) args[0] r=0  (not used)
snd_Pitch                           -460  0xfffffe34 (PmmC func) args[1] r=1  (not used)
snd_Playing                         -465  0xfffffe2f (PmmC func) args[0] r=1  (not used)
snd_Stop                            -462  0xfffffe32 (PmmC func) args[0] r=0  (not used)
snd_Volume                          -459  0xfffffe35 (PmmC func) args[1] r=0  (not used)
SNOW                               65503  0x0000ffdf (const dword)  (not used)
SOLID                                  0  0x00000000 (const dword)  (not used)
SPI1                                   1  0x00000001 (const dword)  (not used)
SPI16_MODE_0                           8  0x00000008 (const dword)  (not used)
SPI16_MODE_1                           9  0x00000009 (const dword)  (not used)
SPI16_MODE_2                          10  0x0000000a (const dword)  (not used)
SPI16_MODE_3                          11  0x0000000b (const dword)  (not used)
SPI16_MODE_4                          12  0x0000000c (const dword)  (not used)
SPI16_MODE_5                          13  0x0000000d (const dword)  (not used)
SPI16_MODE_6                          14  0x0000000e (const dword)  (not used)
SPI16_MODE_7                          15  0x0000000f (const dword)  (not used)
SPI1_Init                           -349  0xfffffea3 (PmmC func) args[2] r=1  (not used)
SPI1_Read                           -352  0xfffffea0 (PmmC func) args[0] r=1  (not used)
spi1_ReadBlock                      -333  0xfffffeb3 (PmmC func) args[2] r=0  (not used)
SPI1_SCK_pin                        -346  0xfffffea6 (PmmC func) args[1] r=1  (not used)
SPI1_SDI_pin                        -343  0xfffffea9 (PmmC func) args[1] r=1  (not used)
SPI1_SDO_pin                        -340  0xfffffeac (PmmC func) args[1] r=1  (not used)
SPI1_Write                          -355  0xfffffe9d (PmmC func) args[1] r=1  (not used)
spi1_WriteBlock                     -359  0xfffffe99 (PmmC func) args[2] r=0  (not used)
SPI2                                   2  0x00000002 (const dword)  (not used)
SPI2_Init                           -350  0xfffffea2 (PmmC func) args[2] r=1  (not used)
SPI2_Read                           -353  0xfffffe9f (PmmC func) args[0] r=1  (not used)
spi2_ReadBlock                      -334  0xfffffeb2 (PmmC func) args[2] r=0  (not used)
SPI2_SCK_pin                        -347  0xfffffea5 (PmmC func) args[1] r=1  (not used)
SPI2_SDI_pin                        -344  0xfffffea8 (PmmC func) args[1] r=1  (not used)
SPI2_SDO_pin                        -341  0xfffffeab (PmmC func) args[1] r=1  (not used)
SPI2_Write                          -356  0xfffffe9c (PmmC func) args[1] r=1  (not used)
spi2_WriteBlock                     -360  0xfffffe98 (PmmC func) args[2] r=0  (not used)
SPI3                                   3  0x00000003 (const dword)  (not used)
SPI3_Init                           -351  0xfffffea1 (PmmC func) args[2] r=1  (not used)
SPI3_Read                           -354  0xfffffe9e (PmmC func) args[0] r=1  (not used)
spi3_ReadBlock                      -335  0xfffffeb1 (PmmC func) args[2] r=0  (not used)
SPI3_SCK_pin                        -348  0xfffffea4 (PmmC func) args[1] r=1  (not used)
SPI3_SDI_pin                        -345  0xfffffea7 (PmmC func) args[1] r=1  (not used)
SPI3_SDO_pin                        -342  0xfffffeaa (PmmC func) args[1] r=1  (not used)
SPI3_Write                          -357  0xfffffe9b (PmmC func) args[1] r=1  (not used)
spi3_WriteBlock                     -361  0xfffffe97 (PmmC func) args[2] r=0  (not used)
SPI8_MODE_0                            0  0x00000000 (const dword)  (not used)
SPI8_MODE_1                            1  0x00000001 (const dword)  (not used)
SPI8_MODE_2                            2  0x00000002 (const dword)  (not used)
SPI8_MODE_3                            3  0x00000003 (const dword)  (not used)
SPI8_MODE_4                            4  0x00000004 (const dword)  (not used)
SPI8_MODE_5                            5  0x00000005 (const dword)  (not used)
SPI8_MODE_6                            6  0x00000006 (const dword)  (not used)
SPI8_MODE_7                            7  0x00000007 (const dword)  (not used)
spi_Disable                         -339  0xfffffead (PmmC func) args[0] r=0  (not used)
spi_Init                            -336  0xfffffeb0 (PmmC func) args[3] r=0  (not used)
spi_Read                            -337  0xfffffeaf (PmmC func) args[0] r=1  (not used)
spi_ReadBlock                       -332  0xfffffeb4 (PmmC func) args[2] r=0  (not used)
SPI_SPEED0                             0  0x00000000 (const dword)  (not used)
SPI_SPEED1                             1  0x00000001 (const dword)  (not used)
SPI_SPEED10                           10  0x0000000a (const dword)  (not used)
SPI_SPEED11                           11  0x0000000b (const dword)  (not used)
SPI_SPEED12                           12  0x0000000c (const dword)  (not used)
SPI_SPEED13                           13  0x0000000d (const dword)  (not used)
SPI_SPEED14                           14  0x0000000e (const dword)  (not used)
SPI_SPEED15                           15  0x0000000f (const dword)  (not used)
SPI_SPEED2                             2  0x00000002 (const dword)  (not used)
SPI_SPEED3                             3  0x00000003 (const dword)  (not used)
SPI_SPEED4                             4  0x00000004 (const dword)  (not used)
SPI_SPEED5                             5  0x00000005 (const dword)  (not used)
SPI_SPEED6                             6  0x00000006 (const dword)  (not used)
SPI_SPEED7                             7  0x00000007 (const dword)  (not used)
SPI_SPEED8                             8  0x00000008 (const dword)  (not used)
SPI_SPEED9                             9  0x00000009 (const dword)  (not used)
spi_Write                           -338  0xfffffeae (PmmC func) args[1] r=0  (not used)
spi_WriteBlock                      -358  0xfffffe9a (PmmC func) args[2] r=0  (not used)
spiflash_BlockErase                 -541  0xfffffde3 (PmmC func) args[3] r=0  (not used)
spiflash_BulkErase                  -540  0xfffffde4 (PmmC func) args[2] r=0  (not used)
spiflash_Exec                       -554  0xfffffdd6 (PmmC func) args[3] r=1  (not used)
spiflash_GetC                       -547  0xfffffddd (PmmC func) args[2] r=1  (not used)
spiflash_GetS                       -551  0xfffffdd9 (PmmC func) args[4] r=1  (not used)
spiflash_GetW                       -549  0xfffffddb (PmmC func) args[2] r=1  (not used)
spiflash_ID                         -539  0xfffffde5 (PmmC func) args[2] r=1  (not used)
spiflash_Image                      -545  0xfffffddf (PmmC func) args[4] r=1  (not used)
spiflash_LoadFunction               -552  0xfffffdd8 (PmmC func) args[2] r=1  (not used)
spiflash_LoadImageControl           -555  0xfffffdd5 (PmmC func) args[2] r=1  (not used)
spiflash_PlayWAV                    -556  0xfffffdd4 (PmmC func) args[2] r=1  (not used)
spiflash_PutC                       -546  0xfffffdde (PmmC func) args[3] r=0  (not used)
spiflash_PutS                       -550  0xfffffdda (PmmC func) args[3] r=1  (not used)
spiflash_PutW                       -548  0xfffffddc (PmmC func) args[3] r=0  (not used)
spiflash_Read                       -543  0xfffffde1 (PmmC func) args[4] r=1  (not used)
spiflash_Run                        -553  0xfffffdd7 (PmmC func) args[3] r=1  (not used)
spiflash_SetAdd                     -542  0xfffffde2 (PmmC func) args[3] r=0  (not used)
spiflash_SIG                        -538  0xfffffde6 (PmmC func) args[2] r=1  (not used)
spiflash_Write                      -544  0xfffffde0 (PmmC func) args[4] r=1  (not used)
SPRINGGREEN                         2031  0x000007ef (const dword)  (not used)
SQRT                                 -62  0xffffffc2 (PmmC func) args[1] r=1  (not used)
SSD1963_ENTER_IDLE_MODE               57  0x00000039 (const dword)  (not used)
SSD1963_ENTER_INVERT_MODE             33  0x00000021 (const dword)  (not used)
SSD1963_ENTER_NORMAL_MODE             19  0x00000013 (const dword)  (not used)
SSD1963_ENTER_PARTIAL_MODE            18  0x00000012 (const dword)  (not used)
SSD1963_ENTER_SLEEP_MODE              16  0x00000010 (const dword)  (not used)
SSD1963_EXIT_IDLE_MODE                56  0x00000038 (const dword)  (not used)
SSD1963_EXIT_INVERT_MODE              32  0x00000020 (const dword)  (not used)
SSD1963_EXIT_SLEEP_MODE               17  0x00000011 (const dword)  (not used)
SSD1963_GET_ADDRESS_MODE              11  0x0000000b (const dword)  (not used)
SSD1963_GET_DBC_CONF                 209  0x000000d1 (const dword)  (not used)
SSD1963_GET_DBC_TH                   213  0x000000d5 (const dword)  (not used)
SSD1963_GET_DISPLAY_MODE              13  0x0000000d (const dword)  (not used)
SSD1963_GET_GPIO0_ROP                201  0x000000c9 (const dword)  (not used)
SSD1963_GET_GPIO1_ROP                203  0x000000cb (const dword)  (not used)
SSD1963_GET_GPIO2_ROP                205  0x000000cd (const dword)  (not used)
SSD1963_GET_GPIO3_ROP                207  0x000000cf (const dword)  (not used)
SSD1963_GET_GPIO_CONFIG              185  0x000000b9 (const dword)  (not used)
SSD1963_GET_GPIO_STATUS              187  0x000000bb (const dword)  (not used)
SSD1963_GET_HORZ_PERIOD              181  0x000000b5 (const dword)  (not used)
SSD1963_GET_LCD_GEN0                 192  0x000000c0 (const dword)  (not used)
SSD1963_GET_LCD_GEN1                 194  0x000000c2 (const dword)  (not used)
SSD1963_GET_LCD_GEN2                 196  0x000000c4 (const dword)  (not used)
SSD1963_GET_LCD_GEN3                 198  0x000000c6 (const dword)  (not used)
SSD1963_GET_LCD_MODE                 177  0x000000b1 (const dword)  (not used)
SSD1963_GET_LSHIFT_FREQ              231  0x000000e7 (const dword)  (not used)
SSD1963_GET_PIXEL_DATA_INTERFACE     241  0x000000f1 (const dword)  (not used)
SSD1963_GET_PLL_MN                   227  0x000000e3 (const dword)  (not used)
SSD1963_GET_PLL_STATUS               228  0x000000e4 (const dword)  (not used)
SSD1963_GET_POST_PROC                189  0x000000bd (const dword)  (not used)
SSD1963_GET_POWER_MODE                10  0x0000000a (const dword)  (not used)
SSD1963_GET_PWM_CONFIG               191  0x000000bf (const dword)  (not used)
SSD1963_GET_SCANLINE                  69  0x00000045 (const dword)  (not used)
SSD1963_GET_TEAR_EFFECT_STATUS        14  0x0000000e (const dword)  (not used)
SSD1963_GET_VERT_PERIOD              183  0x000000b7 (const dword)  (not used)
SSD1963_NOP                            0  0x00000000 (const dword)  (not used)
SSD1963_READ_DDB                     161  0x000000a1 (const dword)  (not used)
SSD1963_READ_MEMORY_CONTINUE          62  0x0000003e (const dword)  (not used)
SSD1963_READ_MEMORY_START             46  0x0000002e (const dword)  (not used)
SSD1963_SET_ADDRESS_MODE              54  0x00000036 (const dword)  (not used)
SSD1963_SET_COLUMN_ADDRESS            42  0x0000002a (const dword)  (not used)
SSD1963_SET_DBC_CONF                 208  0x000000d0 (const dword)  (not used)
SSD1963_SET_DBC_TH                   212  0x000000d4 (const dword)  (not used)
SSD1963_SET_DEEP_SLEEP               229  0x000000e5 (const dword)  (not used)
SSD1963_SET_DISPLAY_OFF               40  0x00000028 (const dword)  (not used)
SSD1963_SET_DISPLAY_ON                41  0x00000029 (const dword)  (not used)
SSD1963_SET_GAMMA_CURVE               38  0x00000026 (const dword)  (not used)
SSD1963_SET_GPIO0_ROP                200  0x000000c8 (const dword)  (not used)
SSD1963_SET_GPIO1_ROP                202  0x000000ca (const dword)  (not used)
SSD1963_SET_GPIO2_ROP                204  0x000000cc (const dword)  (not used)
SSD1963_SET_GPIO3_ROP                206  0x000000ce (const dword)  (not used)
SSD1963_SET_GPIO_CONFIG              184  0x000000b8 (const dword)  (not used)
SSD1963_SET_GPIO_VALUE               186  0x000000ba (const dword)  (not used)
SSD1963_SET_HORZ_PERIOD              180  0x000000b4 (const dword)  (not used)
SSD1963_SET_LCD_GEN0                 193  0x000000c1 (const dword)  (not used)
SSD1963_SET_LCD_GEN1                 195  0x000000c3 (const dword)  (not used)
SSD1963_SET_LCD_GEN2                 197  0x000000c5 (const dword)  (not used)
SSD1963_SET_LCD_GEN3                 199  0x000000c7 (const dword)  (not used)
SSD1963_SET_LCD_MODE                 176  0x000000b0 (const dword)  (not used)
SSD1963_SET_LSHIFT_FREQ              230  0x000000e6 (const dword)  (not used)
SSD1963_SET_PAGE_ADDRESS              43  0x0000002b (const dword)  (not used)
SSD1963_SET_PARTIAL_AREA              48  0x00000030 (const dword)  (not used)
SSD1963_SET_PLL                      224  0x000000e0 (const dword)  (not used)
SSD1963_SET_PLL_MN                   226  0x000000e2 (const dword)  (not used)
SSD1963_SET_POST_PROC                188  0x000000bc (const dword)  (not used)
SSD1963_SET_PWM_CONFIG               190  0x000000be (const dword)  (not used)
SSD1963_SET_REAR_ON                   53  0x00000035 (const dword)  (not used)
SSD1963_SET_SCROLL_AREA               51  0x00000033 (const dword)  (not used)
SSD1963_SET_SCROLL_START              55  0x00000037 (const dword)  (not used)
SSD1963_SET_TEAR_OFF                  52  0x00000034 (const dword)  (not used)
SSD1963_SET_TEAR_SCANLINE             68  0x00000044 (const dword)  (not used)
SSD1963_SET_VERT_PERIOD              182  0x000000b6 (const dword)  (not used)
SSD1963_SOFT_RESET                     1  0x00000001 (const dword)  (not used)
SSD1963_WRITE_MEMORY_CONTINUE         60  0x0000003c (const dword)  (not used)
SSD1963_WRITE_MEMORY_START            44  0x0000002c (const dword)  (not used)
STEELBLUE                          17430  0x00004416 (const dword)  (not used)
STR                                  128  0x00000080 (const dword)  (not used)
str_ByteMove                        -487  0xfffffe19 (PmmC func) args[3] r=1  (not used)
str_Cat                             -485  0xfffffe1b (PmmC func) args[2] r=1  (not used)
str_CatN                            -486  0xfffffe1a (PmmC func) args[3] r=1  (not used)
str_Copy                            -488  0xfffffe18 (PmmC func) args[2] r=1  (not used)
str_CopyN                           -489  0xfffffe17 (PmmC func) args[3] r=1  (not used)
str_Find                            -481  0xfffffe1f (PmmC func) args[2] r=1  (not used)
str_FindI                           -482  0xfffffe1e (PmmC func) args[2] r=1  (not used)
str_GetByte                         -475  0xfffffe25 (PmmC func) args[1] r=1  (not used)
str_GetC                            -474  0xfffffe26 (PmmC func) args[2] r=1  (not used)
str_GetD                            -471  0xfffffe29 (PmmC func) args[2] r=1  (not used)
str_GetHexW                         -473  0xfffffe27 (PmmC func) args[2] r=1  (not used)
str_GetW                            -472  0xfffffe28 (PmmC func) args[2] r=1  (not used)
str_GetWord                         -476  0xfffffe24 (PmmC func) args[1] r=1  (not used)
str_Length                          -483  0xfffffe1d (PmmC func) args[1] r=1  (not used)
str_Match                           -479  0xfffffe21 (PmmC func) args[2] r=1  (not used)
str_MatchI                          -480  0xfffffe20 (PmmC func) args[2] r=1  (not used)
str_Printf                          -484  0xfffffe1c (PmmC func) args[2] r=1  (not used)
str_Ptr                             -470  0xfffffe2a (PmmC func) args[1] r=1  (not used)
str_PutByte                         -477  0xfffffe23 (PmmC func) args[2] r=0  (not used)
str_PutWord                         -478  0xfffffe22 (PmmC func) args[2] r=0  (not used)
strheight                            -14  0xfffffff2 (PmmC func) args[0] r=1  (not used)
strlen                               -10  0xfffffff6 (PmmC func) args[1] r=1  (not used)
strwidth                             -13  0xfffffff3 (PmmC func) args[1] r=1  (not used)
STYLE1                                 2  0x00000002 (const dword)  (not used)
STYLE2                                 3  0x00000003 (const dword)  (not used)
SWAP                                 -56  0xffffffc8 (PmmC func) args[2] r=0  (usage 3)
sys_DeepSleep                       -405  0xfffffe6b (PmmC func) args[1] r=1  (not used)
sys_Driver                          -531  0xfffffded (PmmC func) args[0] r=0  (not used)
sys_ErrorMessage                    -534  0xfffffdea (PmmC func) args[1] r=1  (not used)
sys_EventQueue                      -396  0xfffffe74 (PmmC func) args[0] r=1  (not used)
sys_EventsPostpone                  -397  0xfffffe73 (PmmC func) args[0] r=0  (not used)
sys_EventsResume                    -398  0xfffffe72 (PmmC func) args[0] r=0  (usage 3)
sys_GetDate                         -401  0xfffffe6f (PmmC func) args[0] r=0  (not used)
sys_GetDateVar                      -528  0xfffffdf0 (PmmC func) args[3] r=0  (not used)
sys_GetTime                         -399  0xfffffe71 (PmmC func) args[0] r=0  (not used)
sys_GetTimer                        -394  0xfffffe76 (PmmC func) args[1] r=1  (not used)
sys_GetTimeVar                      -529  0xfffffdef (PmmC func) args[4] r=0  (not used)
sys_PmmC                            -530  0xfffffdee (PmmC func) args[0] r=0  (not used)
sys_SetDate                         -402  0xfffffe6e (PmmC func) args[3] r=1  (not used)
sys_SetTime                         -400  0xfffffe70 (PmmC func) args[3] r=1  (not used)
sys_SetTimer                        -393  0xfffffe77 (PmmC func) args[2] r=0  (not used)
sys_SetTimerEvent                   -395  0xfffffe75 (PmmC func) args[2] r=1  (not used)
sys_Sleep                           -403  0xfffffe6d (PmmC func) args[1] r=1  (not used)
sys_StoreTouchCalibration           -368  0xfffffe90 (PmmC func) args[0] r=1  (not used)
sys_T                               -391  0xfffffe79 (PmmC func) args[0] r=1  (not used)
sys_T_HI                            -392  0xfffffe78 (PmmC func) args[0] r=1  (not used)
SYS_X_MAX                             44  0x0000002c (const dword)  (not used)
SYS_Y_MAX                             45  0x0000002d (const dword)  (not used)
SYSTEM_TIMER_HI                       35  0x00000023 (const dword)  (not used)
SYSTEM_TIMER_LO                       34  0x00000022 (const dword)  (not used)
t4Dbutton                             30  0x0000001e (const dword)  (usage 33)
TAN                                54705  0x0000d5b1 (const dword)  (not used)
tAngularmeter                          7  0x00000007 (const dword)  (usage 3)
tAniButton                            31  0x0000001f (const dword)  (usage 6)
TB1                                  100  0x00000064 (const dword)  (not used)
TB2                                  101  0x00000065 (const dword)  (not used)
TB3                                  102  0x00000066 (const dword)  (not used)
TB4                                  103  0x00000067 (const dword)  (not used)
tColorPicker                          32  0x00000020 (const dword)  (usage 18)
tCoolgauge                             8  0x00000008 (const dword)  (usage 3)
tCustomdigits                          9  0x00000009 (const dword)  (usage 6)
tDipSwitch                             0  0x00000000 (const dword)  (usage 3)
TEAL                                1040  0x00000410 (const dword)  (not used)
TEXT                               63489  0x0000f801 (const dword)  (not used)
TEXT_ANGLE                            15  0x0000000f (const dword)  (not used)
TEXT_ATTRIBUTES                       13  0x0000000d (const dword)  (not used)
TEXT_BACKGROUND                        1  0x00000001 (const dword)  (not used)
TEXT_BOLD                              9  0x00000009 (const dword)  (not used)
TEXT_COLOUR                            0  0x00000000 (const dword)  (not used)
TEXT_HEIGHT                            4  0x00000004 (const dword)  (not used)
TEXT_HIGHLIGHT                         1  0x00000001 (const dword)  (not used)
TEXT_INVERSE                          11  0x0000000b (const dword)  (not used)
TEXT_ITALIC                           10  0x0000000a (const dword)  (not used)
TEXT_MARGIN                           97  0x00000061 (const dword)  (not used)
TEXT_OPACITY                           8  0x00000008 (const dword)  (not used)
TEXT_PRINTDELAY                        7  0x00000007 (const dword)  (not used)
TEXT_UNDERLINED                       12  0x0000000c (const dword)  (not used)
TEXT_WIDTH                             3  0x00000003 (const dword)  (not used)
TEXT_WRAP                             14  0x0000000e (const dword)  (not used)
TEXT_XGAP                              5  0x00000005 (const dword)  (not used)
TEXT_XPOS                             95  0x0000005f (const dword)  (not used)
TEXT_YGAP                              6  0x00000006 (const dword)  (not used)
TEXT_YPOS                             96  0x00000060 (const dword)  (not used)
tForm                                 10  0x0000000a (const dword)  (usage 15)
tGauge                                11  0x0000000b (const dword)  (usage 3)
tGSlider                               4  0x00000004 (const dword)  (usage 9)
THISTLE                            56827  0x0000ddfb (const dword)  (not used)
tImage                                12  0x0000000c (const dword)  (usage 3)
TIMER0                                 0  0x00000000 (const dword)  (not used)
TIMER1                                 1  0x00000001 (const dword)  (not used)
TIMER2                                 2  0x00000002 (const dword)  (not used)
TIMER3                                 3  0x00000003 (const dword)  (not used)
TIMER4                                 4  0x00000004 (const dword)  (not used)
TIMER5                                 5  0x00000005 (const dword)  (not used)
TIMER6                                 6  0x00000006 (const dword)  (not used)
TIMER7                                 7  0x00000007 (const dword)  (not used)
tKeyboard                             13  0x0000000d (const dword)  (usage 3)
tKnob                                  1  0x00000001 (const dword)  (usage 6)
tLed                                  14  0x0000000e (const dword)  (usage 3)
tLeddigits                            15  0x0000000f (const dword)  (usage 12)
tMagicObject                          34  0x00000022 (const dword)  (not used)
tMeter                                16  0x00000010 (const dword)  (usage 3)
TMR0                                  36  0x00000024 (const dword)  (not used)
TMR1                                  37  0x00000025 (const dword)  (not used)
TMR2                                  38  0x00000026 (const dword)  (not used)
TMR3                                  39  0x00000027 (const dword)  (not used)
TMR4                                  40  0x00000028 (const dword)  (not used)
TMR5                                  41  0x00000029 (const dword)  (not used)
TMR6                                  42  0x0000002a (const dword)  (not used)
TMR7                                  43  0x0000002b (const dword)  (not used)
TMul                               13529  0x000034d9 (User func) args[3] r=0  (usage 9)
tnew                                4676  0x00001244 (mem) word[4] (global)  (usage 21)
to                                    -1  0xffffffff (PmmC func) args[1] r=0  (not used)
told                                4668  0x0000123c (mem) word[4] (global)  (usage 21)
tolower                              -46  0xffffffd2 (PmmC func) args[1] r=1  (not used)
TOMATO                             64264  0x0000fb08 (const dword)  (not used)
TOP_POS                                3  0x00000003 (const dword)  (not used)
touch_DetectRegion                  -406  0xfffffe6a (PmmC func) args[4] r=0  (not used)
TOUCH_DISABLE                          1  0x00000001 (const dword)  (not used)
TOUCH_ENABLE                           0  0x00000000 (const dword)  (usage 3)
touch_Get                           -408  0xfffffe68 (PmmC func) args[1] r=1  (usage 9)
TOUCH_GETX                             1  0x00000001 (const dword)  (usage 3)
TOUCH_GETY                             2  0x00000002 (const dword)  (usage 3)
TOUCH_MOVING                           3  0x00000003 (const dword)  (usage 3)
TOUCH_PRESSED                          1  0x00000001 (const dword)  (usage 9)
TOUCH_RAW_X                          117  0x00000075 (const dword)  (not used)
TOUCH_RAW_Y                          118  0x00000076 (const dword)  (not used)
TOUCH_REGIONDEFAULT                    2  0x00000002 (const dword)  (not used)
TOUCH_RELEASED                         2  0x00000002 (const dword)  (usage 18)
touch_Set                           -407  0xfffffe69 (PmmC func) args[1] r=0  (usage 3)
TOUCH_STATUS                           0  0x00000000 (const dword)  (usage 3)
touch_TestArea                      -410  0xfffffe66 (PmmC func) args[1] r=1  (not used)
touch_TestBox                       -409  0xfffffe67 (PmmC func) args[1] r=1  (not used)
TOUCH_XMAXCAL                         80  0x00000050 (const dword)  (not used)
TOUCH_XMINCAL                         78  0x0000004e (const dword)  (not used)
TOUCH_YMAXCAL                         81  0x00000051 (const dword)  (not used)
TOUCH_YMINCAL                         79  0x0000004f (const dword)  (not used)
TouchState                          4418  0x00001142 (mem) word (global)  (usage 24)
TouchXpos                           4412  0x0000113c (mem) word (global)  (usage 33)
TouchYpos                           4414  0x0000113e (mem) word (global)  (usage 28)
toupper                              -45  0xffffffd3 (PmmC func) args[1] r=1  (not used)
tPinInput                             29  0x0000001d (const dword)  (usage 6)
tPinOutput                            28  0x0000001c (const dword)  (usage 6)
TRANSPARENCY                          21  0x00000015 (const dword)  (not used)
TRANSPARENT                            0  0x00000000 (const dword)  (not used)
TRANSPARENT_COLOUR                    20  0x00000014 (const dword)  (not used)
tRockerSwitch                          2  0x00000002 (const dword)  (usage 3)
tRotarySwitch                          3  0x00000003 (const dword)  (usage 3)
tScope                                25  0x00000019 (const dword)  (usage 3)
tSounds                               22  0x00000016 (const dword)  (usage 6)
tSpectrum                             24  0x00000018 (const dword)  (usage 3)
tStaticText                           21  0x00000015 (const dword)  (usage 3)
tStrings                              17  0x00000011 (const dword)  (usage 3)
tTank                                 26  0x0000001a (const dword)  (usage 3)
tThermometer                          18  0x00000012 (const dword)  (usage 3)
tTimer                                23  0x00000017 (const dword)  (usage 6)
tTrackbar                              5  0x00000005 (const dword)  (usage 3)
TurnOffButtons                     12047  0x00002f0f (User func) args[1] r=0  (usage 6)
TURQUOISE                          18202  0x0000471a (const dword)  (not used)
tUserButton                           33  0x00000021 (const dword)  (usage 9)
tUserImages                           27  0x0000001b (const dword)  (usage 3)
tUserled                              19  0x00000013 (const dword)  (usage 9)
tVideo                                20  0x00000014 (const dword)  (usage 3)
tWinButton                             6  0x00000006 (const dword)  (usage 294)
txt_Angle                            -33  0xffffffdf (PmmC func) args[1] r=1  (not used)
txt_Attributes                       -31  0xffffffe1 (PmmC func) args[1] r=1  (not used)
txt_BGcolour                         -19  0xffffffed (PmmC func) args[1] r=1  (not used)
txt_Bold                             -27  0xffffffe5 (PmmC func) args[1] r=1  (not used)
txt_Delay                            -25  0xffffffe7 (PmmC func) args[1] r=1  (not used)
txt_FGcolour                         -18  0xffffffee (PmmC func) args[1] r=1  (not used)
TXT_FONT_HEIGHT                      102  0x00000066 (const dword)  (not used)
TXT_FONT_ID                           98  0x00000062 (const dword)  (not used)
TXT_FONT_MAX                          99  0x00000063 (const dword)  (not used)
TXT_FONT_OFFSET                      100  0x00000064 (const dword)  (not used)
TXT_FONT_WIDTH                       101  0x00000065 (const dword)  (not used)
txt_FontBank                         -52  0xffffffcc (PmmC func) args[2] r=1  (not used)
txt_FontID                           -20  0xffffffec (PmmC func) args[1] r=1  (not used)
txt_Height                           -22  0xffffffea (PmmC func) args[1] r=1  (not used)
txt_Inverse                          -29  0xffffffe3 (PmmC func) args[1] r=1  (not used)
txt_Italic                           -28  0xffffffe4 (PmmC func) args[1] r=1  (not used)
txt_MoveCursor                       -16  0xfffffff0 (PmmC func) args[2] r=0  (not used)
txt_Opacity                          -26  0xffffffe6 (PmmC func) args[1] r=1  (not used)
txt_Set                              -17  0xffffffef (PmmC func) args[2] r=0  (not used)
txt_Underline                        -30  0xffffffe2 (PmmC func) args[1] r=1  (not used)
txt_Width                            -21  0xffffffeb (PmmC func) args[1] r=1  (not used)
txt_Wrap                             -32  0xffffffe0 (PmmC func) args[1] r=1  (not used)
txt_Xgap                             -23  0xffffffe9 (PmmC func) args[1] r=1  (not used)
txt_Ygap                             -24  0xffffffe8 (PmmC func) args[1] r=1  (not used)
uadd_3232                            -71  0xffffffb9 (PmmC func) args[3] r=1  (not used)
ucmp_3232                            -75  0xffffffb5 (PmmC func) args[2] r=1  (not used)
UDEC                               17674  0x0000450a (const dword)  (not used)
UDEC1                              16650  0x0000410a (const dword)  (not used)
UDEC1Z                             20746  0x0000510a (const dword)  (not used)
UDEC1ZB                            24842  0x0000610a (const dword)  (not used)
UDEC2                              16906  0x0000420a (const dword)  (not used)
UDEC2Z                             21002  0x0000520a (const dword)  (not used)
UDEC2ZB                            25098  0x0000620a (const dword)  (not used)
UDEC3                              17162  0x0000430a (const dword)  (not used)
UDEC3Z                             21258  0x0000530a (const dword)  (not used)
UDEC3ZB                            25354  0x0000630a (const dword)  (not used)
UDEC4                              17418  0x0000440a (const dword)  (not used)
UDEC4Z                             21514  0x0000540a (const dword)  (not used)
UDEC4ZB                            25610  0x0000640a (const dword)  (not used)
UDEC5                              17674  0x0000450a (const dword)  (not used)
UDEC5Z                             21770  0x0000550a (const dword)  (not used)
UDEC5ZB                            25866  0x0000650a (const dword)  (not used)
UDECZ                              21770  0x0000550a (const dword)  (not used)
UDECZB                             25866  0x0000650a (const dword)  (not used)
udiv_3232                            -74  0xffffffb6 (PmmC func) args[3] r=1  (not used)
ULCD_70DT_DIABLO16_GFX                 0  0x00000000 (const ??? 0)  (not used)
umul_1616                            -73  0xffffffb7 (PmmC func) args[3] r=1  (usage 9)
UNCHECKED                              1  0x00000001 (const dword)  (not used)
UNDEFINED                             84  0x00000054 (const dword)  (usage 3)
UNDERLINED                           128  0x00000080 (const dword)  (not used)
unicode_page                         -15  0xfffffff1 (PmmC func) args[3] r=1  (not used)
UP                                     1  0x00000001 (const dword)  (not used)
UpdateObjects                      10568  0x00002948 (User func) args[1] r=0  (usage 9)
usub_3232                            -72  0xffffffb8 (PmmC func) args[3] r=1  (not used)
VIOLET                             60445  0x0000ec1d (const dword)  (not used)
WHEAT                              63222  0x0000f6f6 (const dword)  (not used)
WHITE                              65535  0x0000ffff (const dword)  (usage 51)
WHITESMOKE                         63422  0x0000f7be (const dword)  (not used)
WRITE_CONTRAST                         4  0x00000004 (const dword)  (usage 3)
WRITE_MAGIC_BYTES                      8  0x00000008 (const dword)  (not used)
WRITE_MAGIC_DBYTES                     9  0x00000009 (const dword)  (not used)
WRITE_OBJ                              1  0x00000001 (const dword)  (usage 3)
WRITE_STR                              2  0x00000002 (const dword)  (not used)
WRITE_STRU                             3  0x00000003 (const dword)  (not used)
WriteCmd                               0  0x00000000 (const dword)  (not used)
WriteObject                        12233  0x00002fc9 (User func) args[3] r=0  (usage 24)
X_MAX                                  0  0x00000000 (const dword)  (not used)
X_ORG                                  6  0x00000006 (const dword)  (not used)
X_ORIGIN                              30  0x0000001e (const dword)  (not used)
XYposToDegree                      14669  0x0000394d (User func) args[2] r=0  (usage 3)
Y_MAX                                  1  0x00000001 (const dword)  (not used)
Y_ORG                                  7  0x00000007 (const dword)  (not used)
Y_ORIGIN                              31  0x0000001f (const dword)  (not used)
YELLOW                             65504  0x0000ffe0 (const dword)  (usage 18)
YELLOWGREEN                        40550  0x00009e66 (const dword)  (not used)
