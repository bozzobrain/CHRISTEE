file C:\Users\User\Google Drive\NASA RMC\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS

file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\uLCD-70DT.fnc

000001  000001  #platform "uLCD-70DT"
000002  000001  #platform "uLCD-70DT"
000003  000008  */
000004  000009      #constant ULCD_70DT_DIABLO16_GFX
000005  000009      #constant ULCD_70DT_DIABLO16_GFX
000006  000010        
000007  000011      #IFNOT EXISTS DIABLO16_GFX2_FUNCTIONS
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\Diablo16_Functions.fnc

000008  000012          #inherit "Diablo16_Functions.fnc"          // inherit the generic functions
000009  000012          #inherit "Diablo16_Functions.fnc"          // inherit the generic functions
000010  000001        
000011  000002  // Common inheritance for Diablo16 platforms
000012  000003        
000013  000004  //#constant ULCD_32PT_DIABLO16_GFX
000014  000005        
000015  000006        
000016  000007  // define the compiler dummy preambles
000017  000008  #constant LOCAL $//
000018  000008  #constant LOCAL $//
000019  000009  #constant EXTERN $ /**/
000020  000009  #constant EXTERN $ /**/
000021  000010        
000022  000011  #CONST
000023  000020  #END
000024  000021        
000025  000022  #CONST
000026  000038  #END
000027  000039        
000028  000040        
000029  000041        
000030  000042        
000031  000047  */
000032  000048        
000033  000049        
000034  000050  //------------------------------------------------------------------//
000035  000051  //     EVE  miscellaneous functions                                 //
000036  000052  //------------------------------------------------------------------//
000037  000053        
000038  000054  func to("device"), 0;                // output device redirection
000039  000055  // Syntax: to(outstream);
000040  000056  // Usage : to(APPEND); putstr("TWO ");
000041  000057  // Notes : outstream: A variable or constant specifying destination for putch, putstr, putnum and print functions.
000042  000058  //     :
000043  000059  //     : to() sends the printed output to destinations other than the screen. Normally, print just
000044  000060  //     : sends its output to the display in TEXT mode which is the default, however, the output from
000045  000061  //     : print can be sent to COM0, and MDA (media) 'streams'. The to(...) function can also stream
000046  000062  //     : to a memory array . Note that once the to(...) function has taken effect, the stream reverts
000047  000063  //     : back to the default stream which is TEXT as soon as putch, putstr, putnum or print has
000048  000064  //     : completed its action. The APPEND argument is used to send the printed output to the same
000049  000065  //     : place as the previous redirection. This is most useful for building string arrays, or adding
000050  000066  //     : sequential data to a media stream.
000051  000067  //     :
000052  000068  //     : Predefined Name Constant    putch(), putstr(), putnum(), print() redirection
000053  000069  //     : APPEND         0x0000      Output is directed to the same stream that was previously assigned. Output is
000054  000070  //     :                            appended to user memory if previous redirection was to an array.
000055  000071  //     : COM0           0xFF04      Output is redirected to the COM (serial) port.
000056  000072  //     : TEXT           0xFF08      Output is directed to the screen (default).
000057  000073  //     : MDA            0xFF10      Output is directed to the SD or FLASH media.
000058  000074  //     : I2C1           0xF820      Output is directed to the I2C1 port.
000059  000075  //     : memory pointer             Output is redirect to the memory pointer argument, eg to(myarray); print("HELLO");
000060  000076        
000061  000077  //------------------------------------------------------------------//
000062  000078  // to(..) redirection constants            //
000063  000079  //------------------------------------------------------------------//
000064  000080  #CONST
000065  000093  #END
000066  000094        
000067  000095        
000068  000096  func putch("char"), 0;                // write single char to current output device
000069  000097  // Syntax    : putch("char");
000070  000098  // Usage     : putch("A");
000071  000099  // Notes     : prints single characters to the current output stream, usually the
000072  000100  //           : display unless redirected with the ‘to’ redirection function.
000073  000101  //         : The arguments can be a variable, array element, expression or constant.
000074  000102        
000075  000103        
000076  000104  func putchXY("xpos", "ypos", "char"), 0;
000077  000105  // Syntax  : putchXY(x, y, '0x41'),
000078  000106  // Usage   : putchXY(100, 100, "HELLO");
000079  000107  // Notes   : Print a single character at position x, y.
000080  000108  //         : Char may be a constant or variable.
000081  000109  // Returns : nothing.
000082  000110        
000083  000111  func putstrXY("xpos", "ypos", "string"), 0;
000084  000112  // Syntax  : putstrXY(x, y, "string"),
000085  000113  // Usage   : putstrXY(100, 100, "HELLO");
000086  000114  // Notes   : Print a string at position x, y
000087  000115  //         : "String" may be a string constant, or pointer to a word aligned string.
000088  000116  // Returns : nothing.
000089  000117        
000090  000118        
000091  000119  func putstrCentred("xc", "yc", "string"), 0;
000092  000120  // Syntax  : putstrCentred(x, y, "string"),
000093  000121  // Usage   : putstrCentred(100, 100, "HELLO");
000094  000122  // Notes   : Print a string centred at position x, y
000095  000123  //         : "String" may be a string constant, or pointer to a word aligned string.
000096  000124  // Returns : nothing.
000097  000125        
000098  000126        
000099  000127  func pause("milliseconds"), 0;            // blocking delay
000100  000128  // Syntax: pause(milliseconds);
000101  000129  // Usage : pause(1000);                //pause for 1 second
000102  000130  // Notes : Pause for a number of milli second.Maximum delay could be 65535 milli seconds
000103  000131        
000104  000132        
000105  000133  func putnum("arg1","arg2"), 1;            // print number to current output device
000106  000134  // Syntax: putnum(format, value);
000107  000135  // Usage : var := putnum(HEX, val);
000108  000136  // Notes : prints a 16bit number in various formats to the current output stream, usually the display.
000109  000137  //     : Format: A constant that specifies the number format
000110  000138  //     : Value : The number to be printed
000111  000139  //     : (      DECIMAL   )    (   UNSIGNED DECIMAL )    (    HEX         )     (    BINARY          )
000112  000140  //     : DEC     DECZ     DECZB     UDEC     UDECZ     UDECZB     HEX     HEXZ     HEXZB     BIN     BINZ     BINZB
000113  000141  //     : DEC1 DEC1Z     DEC1ZB     UDEC1     UDEC1Z     UDEC1ZB HEX1     HEX1Z     HEX1ZB     BIN1     BIN1Z     BIN1ZB
000114  000142  //     : DEC2 DEC2Z     DEC2ZB     UDEC2     UDEC2Z     UDEC2ZB HEX2     HEX2Z     HEX1ZB     BIN2     BIN2Z     BIN2ZB
000115  000143  //     : DEC3 DEC3Z     DEC3ZB     UDEC3     UDEC3Z     UDEC3ZB HEX3     HEX3Z     HEX1ZB     BIN3     BIN3Z     BIN3ZB
000116  000144  //     : DEC4 DEC4Z     DEC4ZB     UDEC4     UDEC4Z     UDEC4ZB HEX4     HEX4Z     HEX1ZB     BIN4     BIN4Z     BIN4ZB
000117  000145  //     : DEC5 DEC5Z     DEC5ZB     UDEC5     UDEC5Z     UDEC5ZB             BIN5     BIN5Z     BIN5ZB
000118  000146  //     :                                     BIN6     BIN6Z     BIN6ZB
000119  000147  //     :                                     BIN7     BIN7Z     BIN7ZB
000120  000148  //     :                                     BIN8     BIN8Z     BIN8ZB
000121  000149  //     :                                     BIN9     BIN9Z     BIN9ZB
000122  000150  //     :                                     BIN10     BIN10Z     BIN10ZB
000123  000151  //     :                                     BIN11     BIN11Z     BIN11ZB
000124  000152  //     :                                     BIN12     BIN12Z     BIN12ZB
000125  000153  //     :                                     BIN13     BIN13Z     BIN13ZB
000126  000154  //     :                                     BIN14     BIN14Z     BIN14ZB
000127  000155  //     :                                     BIN15     BIN15Z     BIN15ZB
000128  000156  //     :                                     BIN16     BIN16Z     BIN16ZB
000129  000157  //     : field: Returns the the default width of the numeric field (digit count), usually ignored.
000130  000158  //     : bit 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0
000131  000159  //     : | | | | \___ ___/ \__ __/ \_____ _____/
000132  000160  //     : | | | | V V V
000133  000161  //     : | | | | | | |
000134  000162  //     : | | | | | |
000135  000163  //     : | | | | (nb 0 = 16) | |____BASE (usually 2,10 or 16)
000136  000164  //     : | | | | digit count |
000137  000165  //     : | | | | |___reserved (not used on GOLDELOX)
000138  000166  //     : | | | |
000139  000167  //     : | | | |
000140  000168  //     : | | | |
000141  000169  //     : | | | |
000142  000170  //     : | | | |
000143  000171  //     : | | | |______ 1 = leading zeros included
000144  000172  //     : | | | 0 = leading zeros suppressed
000145  000173  //     : | | |
000146  000174  //     : | | |
000147  000175  //     : | | |_______ 1 = leading zero blanking
000148  000176  //     : | |
000149  000177  //     : | |_____ sign bit (0 = signed, 1 = unsigned)
000150  000178  //     : |
000151  000179  //     : |______ 1 = space before unsigned number
000152  000180        
000153  000181        
000154  000182  func __translate("arg1","arg2","arg3","arg4"), 1; // list translator (*** internal compiler use only, not usable)
000155  000183        
000156  000184        
000157  000185  func putstr("string"), 1;                         // print var (word) aligned string to current output device
000158  000186  // Syntax: putstr(pointer);
000159  000187  // Usage : putstr("HELLO\n");
000160  000188  // Notes : putstr prints a string to the current output stream, usually the display. The argument can be
000161  000189  //       : a string constant, a word aligned pointer to a string, a pointer to an array, or a pointer to
000162  000190  //       : a data statement. Note that string constants and data statement pointers are byte aligned.
000163  000191  //       : The output of putstr can be redirected to the communications port, the media, or memory
000164  000192  //       : using the to(...); function.
000165  000193  //       : A string constant is automatically terminated with a zero.
000166  000194  //       : A string in a data statement is not automatically terminated with a zero.
000167  000195  //       : All variables in 4DGL are 16bit, if an array is used for holding 8 bit characters, each array
000168  000196  //       : element packs 1 or 2 characters.
000169  000197        
000170  000198        
000171  000199  func strlen("varAddress"), 1;                   // return length of a var (word) aligned string in character units
000172  000200  // Syntax: strlen("varAddress);
000173  000201  // Usage : strlen("HELLO\n");
000174  000202  // Notes : gives the length of a string that is packed into regular var array
000175  000203  //       : Use str_Length(ptr)  for string pointer mode
000176  000204        
000177  000205        
000178  000206  func charwidth("char"), 1;
000179  000207  // Syntax  : charwidth(char);
000180  000208  // Usage   : wid := charwidth('W');
000181  000209  // Notes   : calculates width of a character in pixel units.
000182  000210  //         : 'char' may be a constant or variable.
000183  000211  // Returns : Width of character in pixel units.
000184  000212        
000185  000213        
000186  000214  func charheight("char"), 1;
000187  000215  // Syntax  : charheight(char);
000188  000216  // Usage   : ht := charheight('0x41');
000189  000217  // Notes   : Calculates height of a character in pixel units.
000190  000218  //         : 'char' may be a constant or variable.
000191  000219  // Returns : Height of character in pixel units.
000192  000220        
000193  000221        
000194  000222  func strwidth("pointer"), 1;
000195  000223  // Syntax  : strwidth(ptr);
000196  000224  // Usage   : x := strwidth("HELLO");
000197  000225  // Notes   : returns width of a string in pixel units.
000198  000226  //         : 'pointer' may be a constant or pointer to word aligned variable
000199  000227  // Returns : Width of string in pixel units, can be multi line.
000200  000228        
000201  000229        
000202  000230  func strheight(), 1;
000203  000231  // Syntax  : strheight();
000204  000232  // Usage   : h := strheight();
000205  000233  // Notes   : calculates height of a string in pixel units (after a call to strwidth );
000206  000234  //         : pointer may be a constant or pointer to word aligned variable
000207  000235  // Returns : Height of string in pixel units, can be multi line.
000208  000236        
000209  000237        
000210  000238  func unicode_page("charbeg","charend","charoffset"), 1;
000211  000239  // Syntax: unicode_page("charbeg","charend","charoffset");
000212  000240  // Usage : eg:  F_Traditional_0x20_0xFF
000213  000241  // Notes : After selecting a unicode image control with txt_FontID,
000214  000242  //       : this function is called to set the required font within the
000215  000243  //       : unicode set. The file "Unicode.inc" contains wrappers for
000216  000244  //       : this function, and it is not normally called directly.
000217  000245  //       : Returns count of characters in the set.
000218  000246  //       : Refer to "Unicode.inc" for further information.
000219  000247        
000220  000248        
000221  000249  //------------------------------------------------------------------//
000222  000250  //          Text Related Functions                                  //
000223  000251  //------------------------------------------------------------------//
000224  000252        
000225  000253  func txt_MoveCursor("line", "column"), 0;
000226  000254  // Syntax: txt_SetCursor(line, column);
000227  000255  // Usage : txt_SetCursor(arg1, arg2);
000228  000256  // Notes : Moves the text Cursor to a new screen position set by
000229  000257  //       : line,column parameters.
000230  000258        
000231  000259  func txt_Set("function", "value"), 0;
000232  000260  // Syntax: txt_Set(function, value);
000233  000261  // Usage : txt_Set(arg1, arg2);
000234  000262  // Returns : Original value before the change
000235  000263  // Notes : Sets various text related parameters used by other functions
000236  000264  //       : This allows the features to be set programatically with a
000237  000265  //       : single function call.It is strongly recommended to use the
000238  000266  //       : pre-defined constants rather than the mode numbers.
000239  000267  //       : NB:- It is often required to be able to set text
000240  000268  //       : functions with a single function call for graphics engine
000241  000269  //       : related functions, however, there is a complete set of single parameter
000242  000270  //       : shortcut functions that have exactly the same function as
000243  000271  //       : each of the txt_Set modes and saves 1 parameter / uses less memory
000244  000272  //       :
000245  000273  //       : txt_Set(TEXT_COLOUR, colour);        // function 0, TEXT_COLOUR, default colour = LIME
000246  000274  //       : txt_Set(TEXT_HIGHLIGHT, colour);     // function 1, TEXT_HIGHLIGHT)
000247  000275  //       : txt_Set(FONT_ID, fontNumer);         // function 2, FONT_ID)
000248  000276  //       : txt_Set(TEXT_WIDTH, multiplier);     // function 3, TEXT_WIDTH)
000249  000277  //       : txt_Set(TEXT_HEIGHT, multiplier);    // function 4, TEXT_HEIGHT)
000250  000278  //       : txt_Set(TEXT_XGAP, pixels);          // function 5, TEXT_XGAP)
000251  000279  //       : txt_Set(TEXT_YGAP, pixels);          // function 6, TEXT_YGAP)
000252  000280  //       : txt_Set(TEXT_PRINTDELAY, msecs);     // function 7, TEXT_PRINTDELAY)
000253  000281  //       : txt_Set(TEXT_OPACITY, value);        // function 8, TEXT_OPACITY)
000254  000282  //       : txt_Set(TEXT_BOLD, boldness);        // function 9, TEXT_BOLD)
000255  000283  //       : txt_Set(TEXT_ITALIC, slope);         // function 10, TEXT_ITALIC)
000256  000284  //       : txt_Set(TEXT_INVERSE, onoff);        // function 11, TEXT_INVERSE)
000257  000285  //       : txt_Set(TEXT_UNDERLINED, onoff);     // function 12, TEXT_UNDERLINED)
000258  000286  //       : txt_Set(TEXT_ATTRIBUTES, combine);   // function 13, TEXT_ATTRIBUTES)
000259  000287  //       : txt_Set(TEXT_WRAP, column);          // function 14, TEXT_WRAP)
000260  000288  //       : txt_Set(TEXT_ANGLE , degrees);       // function 15, TEXT_ANGLE)
000261  000289  //       :
000262  000290  //       : txt_Set(TEXT_COLOUR, colour);
000263  000291  //       : mode = TEXT_COLOUR (function 0)
000264  000292  //       : txt_Set(TEXT_COLOUR, value);
000265  000293  //       : value = 0 to 0xFFFF, Black to White
000266  000294  //       : Sets the Text colour for the display
000267  000295  //       : Default = LIME.
000268  000296  //       :
000269  000297  //       : mode = TEXT_HIGHLIGHT (function 1)
000270  000298  //       : txt_Set(TEXT_HIGHLIGHT, value);
000271  000299  //       : value = 0 to 0xFFFF, Black to White
000272  000300  //       : Sets the Text background colour for the display. Effective
000273  000301  //       : when text mode is Opaque.
000274  000302  //       : Default = BLACK.
000275  000303  //       :
000276  000304  //       : mode = FONT_ID (function 2)
000277  000305  //       : txt_Set(FONT_ID, value);
000278  000306  //       : value = FONT1 to FONT11 for internal fonts
000279  000307  //       : else this value is the name of a font included
000280  000308  //       : in a users program in a data statement.
000281  000309  //       : Default = FONT SIZE 3.
000282  000310  //       :
000283  000311  //       : mode = TEXT_WIDTH  (function 3)
000284  000312  //       : txt_Set(TEXT_WIDTH, value);
000285  000313  //       : value = 1 to 16
000286  000314  //       : Sets the Text Width multiplier
000287  000315  //       : text will be printed magnified horizontally
000288  000316  //       : by this factor, Default = 1.
000289  000317  //       :
000290  000318  //       : mode = TEXT_HEIGHT  (function 4)
000291  000319  //       : txt_Set(TEXT_HEIGHT, value);
000292  000320  //       : value = 1 to 16
000293  000321  //       : Sets the Text Height multiplier
000294  000322  //       : text will be printed magnified vertically
000295  000323  //       : by this factor, Default = 1.
000296  000324  //       :
000297  000325  //       : mode = TEXT_XGAP  (function 5)
000298  000326  //       : txt_Set(TEXT_XGAP, value);
000299  000327  //       : value = 1 to 32
000300  000328  //       : Sets the horizontal gap between characters
000301  000329  //       : The gap is in pixel units, Default = 0
000302  000330  //       :
000303  000331  //       : mode = TEXT_YGAP  (function 6)
000304  000332  //       : txt_Set(TEXT_YGAP, value);
000305  000333  //       : value = 1 to 32
000306  000334  //       : Sets the vertical gap below characters
000307  000335  //       : The gap is in pixel units, Default = 0
000308  000336  //       :
000309  000337  //       : mode = TEXT_PRINTDELAY  (function 7) DEPRECATED
000310  000338  //       : txt_Set(TEXT_PRINTDELAY, value);
000311  000339  //       : value = 0 to 255
000312  000340  //       : Sets the delay time (in ms) during character
000313  000341  //       : printing to give a 'teletype' like effect.
000314  000342  //       : Often used to attract attention to a string
000315  000343  //       : being printed which can often be missed if
000316  000344  //       : just suddenly appearing or changing.
000317  000345  //       : Default = 0 ms.
000318  000346  //       :
000319  000347  //       : mode = TEXT_OPACITY (function 8)
000320  000348  //       : txt_Set(TEXT_OPACITY, value);
000321  000349  //       : value = TRANSPARENT (0) = Text Trasparent
000322  000350  //       : value = OPAQUE (1) = Text Opaque
000323  000351  //       : Sets the Opacity/Transparency of the text
000324  000352  //       : Default = 0 or TRANSPARENT
000325  000353  //       :
000326  000354  //       : mode = TEXT_BOLD (function 9)
000327  000355  //       : txt_Set(TEXT_BOLD, value);
000328  000356  //       : value = dont care
000329  000357  //       : Sets Bold Text mode for the next string or char
000330  000358  //       : The feature automatically resets after printing
000331  000359  //       : using putstr or print has completed
000332  000360  //       :
000333  000361  //       : mode = TEXT_ITALIC (function10)
000334  000362  //       : txt_Set(TEXT_ITALIC, value);
000335  000363  //       : value = dont care
000336  000364  //       : Sets Italic Text mode for the next string or char
000337  000365  //       : The feature automatically resets after printing
000338  000366  //       : using putstr or print has completed
000339  000367        
000340  000368  //       : mode = TEXT_INVERSE (function 11)
000341  000369  //       : txt_Set(TEXT_INVERSE, value);
000342  000370  //       : value = dont care
000343  000371  //       : Sets Inverse Text mode for the next string or char
000344  000372  //       : The feature automatically resets after printing
000345  000373  //       : using putstr or print has completed
000346  000374  //       :
000347  000375  //       : mode = TEXT_UNDERLINED (function 12)
000348  000376  //       : txt_Set(TEXT_UNDERLINED, value);
000349  000377  //       : value = dont care
000350  000378  //       : Sets Underlined Text mode for the next string or char
000351  000379  //       : The feature automatically resets after printing
000352  000380  //       : using putstr or print has completed
000353  000381  //       :
000354  000382  //       : mode = TEXT_ATTRIBUTES (function 13)
000355  000383  //       : txt_Set(TEXT_ATTRIBUTES, value);
000356  000384  //       : value = bits are defined as:
000357  000385  //       :  BOLD        16          // TEXT_ATTRIBUTES bold text (auto reset)
000358  000386  //       :  ITALIC      32          // TEXT_ATTRIBUTES italic text (auto reset)
000359  000387  //       :  INVERSE     64          // TEXT_ATTRIBUTES inverse text (auto reset)
000360  000388  //       :  UNDERLINED  128         // TEXT_ATTRIBUTES underlined text (auto reset)
000361  000389  //       : Allows a combination of text attributes to be defined together
000362  000390  //       : by 'or'ing the bits together.
000363  000391  //       : Example: txt_Set(TEXT_ATTRIBUTES, BOLD | INVERSE); // bold + inverse
000364  000392  //       : The feature automatically resets after printing
000365  000393  //       : using putstr or print has completed.
000366  000394  //       : Bits 0-3 and 8-15 are reserved for future attributes.
000367  000395  //       :
000368  000396  //       : mode = TEXT_WRAP (function 14)
000369  000397  //       : txt_Set(TEXT_WRAP , value);
000370  000398  //       : Sets the position where text wrap will occur
000371  000399  //       : The feature automatically resets when screen
000372  000400  //       : mode is changed. If the value is set to 0,
000373  000401  //       : text wrap is turned off.
000374  000402  //       : of the current screen. Default value is 0
000375  000403  // Notes : The value is in pixel units.
000376  000404  //       :
000377  000405  //       : mode = TEXT_ANGLE (function 15)
000378  000406  //       : txt_Set(TEXT_ANGLE , value);
000379  000407  //       : Sets the angle of plotted fonts
000380  000408  // Notes : The angle is in degrees.
000381  000409  //       :
000382  000410        
000383  000411  //------------------------------------------------------------------------------
000384  000412  //txt_Set() related constants
000385  000413  //------------------------------------------------------------------------------
000386  000414  #CONST
000387  000433  #END
000388  000434        
000389  000435  //------------------------------------------------------------------------------
000390  000436  //txt_Set() related arguments
000391  000437  //------------------------------------------------------------------------------
000392  000438  #CONST
000393  000464  #END
000394  000465        
000395  000466        
000396  000467  //=====================================================//
000397  000468  // Single parameter short-cuts                         //
000398  000469  // for the txt_Set functions                           //
000399  000470  // These functions return the existing value before    //
000400  000471  // the change is made.                                 //
000401  000472  //=====================================================//
000402  000473  func txt_FGcolour("colour"), 1;             // 0  text foreground colour
000403  000474  func txt_BGcolour("colour"), 1;             // 1  text background colour
000404  000475  func txt_FontID("id"), 1;                   // 2  text font ID (0 = system font)
000405  000476  func txt_Width("multiplier"), 1;            // 3  text width multiplier
000406  000477  func txt_Height("multiplier"), 1;           // 4  text height multiplier
000407  000478  func txt_Xgap("pixelcount"), 1;             // 5  text gap between characters
000408  000479  func txt_Ygap("pixelcount"), 1;             // 6  text gap between lines
000409  000480  func txt_Delay("millisecs"), 1;             // 7  text printing delay factor
000410  000481  func txt_Opacity("mode"), 1;                // 8  text OPAQUE or TRANSPARENT
000411  000482  func txt_Bold("mode"), 1;                   // 9  text bold ON/OFF
000412  000483  func txt_Italic("mode"), 1;                 // 10 text italic ON/OFF
000413  000484  func txt_Inverse("mode"), 1;                // 11 text inverse ON/OFF
000414  000485  func txt_Underline("mode"), 1;              // 12 text underline ON/OFF
000415  000486  func txt_Attributes("value"), 1;            // 13 text combined bold|italic|inverse|underline
000416  000487  func txt_Wrap("value"), 1;                  // 14 text set text wrap position
000417  000488  func txt_Angle("value"), 1;                 // 15 text set angle of plotted font
000418  000489        
000419  000490        
000420  000491        
000421  000492  //------------------------------------------------------------------//
000422  000493  // Memory Access Functions                                          //
000423  000494  //------------------------------------------------------------------//
000424  000495                                                  //
000425  000496  func peekW("address"), 1;                       // read a word from system memory
000426  000497  func pokeW("address", "wordvalue"), 0;          // write a word to system memory
000427  000498  // refer to address map of internal variables   //
000428  000499        
000429  000500        
000430  000501  //------------------------------------------------------------------//
000431  000502  //        CTYPE Function Prototypes
000432  000503  //------------------------------------------------------------------//
000433  000504        
000434  000505  func isdigit("char"), 1;    //Returns a 1 if the character is an ascii digit else returns a 0
000435  000506  // Syntax: isdigit("char");
000436  000507  // Usage : Var := isdigit(ch);
000437  000508  // Notes : char specifies the ascii character for the test
000438  000509  //     : 0 : char is not an ascii digit.
000439  000510  //     : 1 : char is an ascii digit..
000440  000511  //     : Valid range is "0123456789"
000441  000512        
000442  000513  func isxdigit("char"), 1;    //Returns a 1 if the character is an ascii hexadecimal digit else returns a 0
000443  000514  // Syntax: isxdigit("char");
000444  000515  // Usage : Var := isxdigit(ch);
000445  000516  // Notes : char specifies the ascii character for the test
000446  000517  //     : 0 : char is not an ascii hexadecimal digit.
000447  000518  //     : 1 : char is an ascii hexadecimal digit..
000448  000519  //     : Valid range is "0123456789ABCDEF"
000449  000520        
000450  000521  func isupper("char"), 1;    //Returns a 1 if the character is an ascii upper case letter else returns a 0
000451  000522  // Syntax: isupper("char");
000452  000523  // Usage : Var := isupper(ch);
000453  000524  // Notes : char specifies the ascii character for the test
000454  000525  //     : 0 : char is not an ascii upper-case letter.
000455  000526  //     : 1 : char is an ascii upper-case letter.
000456  000527  //     : Valid range is "ABCD....WXYZ"
000457  000528        
000458  000529  func islower("char"), 1;    //Returns a 1 if the character is an ascii lower case letter else returns a 0
000459  000530  // Syntax: islower("char");
000460  000531  // Usage : Var := islower(ch);
000461  000532  // Notes : char specifies the ascii character for the test
000462  000533  //     : 0 : char is not an ascii lower-case letter.
000463  000534  //     : 1 : char is an ascii lower-case letter.
000464  000535  //     : Valid range is "abcd....wxyz"
000465  000536        
000466  000537  func isalpha("char"), 1;    //Returns a 1 if the character is an ascii lower or upper case letter else returns a 0
000467  000538  // Syntax: isalpha("char");
000468  000539  // Usage : Var := isalpha(ch);
000469  000540  // Notes : char specifies the ascii character for the test
000470  000541  //     : 0 : char is not an ascii lower or upper case letter.
000471  000542  //     : 1 : char is an ascii lower or upper case letter.
000472  000543  //     : Valid range is "ABCD...XYZ", "abcd....wxyz"
000473  000544        
000474  000545  func isalnum("char"), 1;    //Returns a 1 if the character is an ascii alpha numeric else returns a 0
000475  000546  // Syntax: isalnum("char");
000476  000547  // Usage : Var := isalnum(ch);
000477  000548  // Notes : char specifies the ascii character for the test
000478  000549  //     : 0 : char is not an ascii alphanumeric character.
000479  000550  //     : 1 : char is an ascii alphanumeric character.
000480  000551  //     : Valid range is "ABCD...XYZ", "abcd....wxyz", "0123456789"
000481  000552        
000482  000553  func isprint("char"), 1;    //Returns a 1 if the character is a printible ascii char else returns a 0
000483  000554  // Syntax: isprint("char");
000484  000555  // Usage : Var := isprint(ch);
000485  000556  // Notes : char specifies the ascii character for the test
000486  000557  //     : 0 : char is not a printable ascii character.
000487  000558  //     : 1 : char is a printable ascii character.
000488  000559  //     : Valid range is "0x20...0x7F"
000489  000560        
000490  000561  func isspace("char"), 1;    //Returns a 1 if the character is any one of the space type chars else returns a 0
000491  000562  // Syntax: isspace("char");
000492  000563  // Usage : Var := isspace(ch);
000493  000564  // Notes : char specifies the ascii character for the test
000494  000565  //     : 0 : char is not a space type character.
000495  000566  //     : 1 : char is a space type character.
000496  000567  //     : Valid range is space, formfeed, newline, carriage return, tab, vertical tab
000497  000568        
000498  000569  //unformatted
000499  000570  func iswhite("char"), 1;    //
000500  000571  // Syntax: iswhite("char");
000501  000572  // Usage : Var := iswhite(ch);
000502  000573  // Notes : char specifies the ascii character for the test
000503  000574  //     : 0 : char is not a space or tab character.
000504  000575  //     : 1 : char is not a space or tab character.
000505  000576  //     : Valid range is space or tab
000506  000577        
000507  000578  func toupper("char"), 1; //if character is lower case it returns the upper case equivalent else returns the passed char
000508  000579  // Syntax: toupper("char");
000509  000580  // Usage : Var := toupper(ch);
000510  000581  // Notes : char specifies the ascii character for the test
000511  000582  //     : "ABCD....XYZ" : if character is a lower case letter.
000512  000583  //     : char : if character is not a lower case letter.
000513  000584  //     : Valid range is "abcd....wxyz"
000514  000585        
000515  000586  func tolower("char"), 1; //if character is upper case it returns the lower case equivalent else returns the passed char
000516  000587  // Syntax: tolower("char");
000517  000588  // Usage : Var := tolower(ch);
000518  000589  // Notes : char specifies the ascii character for the test
000519  000590  //     : "abcd....xyz" : if character is an upper case letter.
000520  000591  //     : char : if character is not an upper case letter.
000521  000592  //     : Valid range is "ABCD....WXYZ"
000522  000593        
000523  000594  func LObyte("var"), 1;        //Returns the lower byte (lower 8 bits) of a 16 bit variable.
000524  000595  // Syntax: LObyte(var);
000525  000596  // Usage : myVar := LObyte(myvar2);
000526  000597  // Notes : var specifies the user variable
000527  000598  //     : Returns the lower byte (lower 8 bits) of a 16 bit variable
000528  000599        
000529  000600  func HIbyte("var"), 1;        //Returns the High byte (upper 8 bits) of a 16 bit variable.
000530  000601  // Syntax: HIbyte(var);
000531  000602  // Usage : myVar := HIbyte(myvar2);
000532  000603  // Notes : var specifies the user variable
000533  000604  //     : Returns the high byte (upper 8 bits) of a 16 bit variable
000534  000605        
000535  000606        
000536  000607  func ByteSwap("var"), 1;    //Returns the swapped upper and lower bytes of a 16 bit variable.
000537  000608  // Syntax: ByteSwap(var);
000538  000609  // Usage : myVar := ByteSwap(myvar2);
000539  000610  // Notes : var specifies the user variable
000540  000611  //     : Returns the endian swapped value of a 16 bit variable
000541  000612        
000542  000613        
000543  000614  func NybleSwap("var"), 1;    //Returns the swapped lower bytes nybles, upper byte retained.
000544  000615  // Syntax: NybleSwap(var);
000545  000616  // Usage : myVar := NybleSwap(myvar2);
000546  000617  // Notes : var specifies the user variable
000547  000618  //     : Returns the 16 bit variable with swapped lower nybles
000548  000619        
000549  000620  func putnumXY("xpos", "ypos", "arg1","arg2"), 1;            // print number at the specified position
000550  000621  // Syntax: putnumXY(x, y, format, value);
000551  000622  // Usage : var := putnumXY(100, 100, HEX, val);
000552  000623  // Notes : prints a 16bit number in various formats at the specified XY coordinates.
000553  000624  //     : Format: A constant that specifies the number format
000554  000625  //     : Value : The number to be printed
000555  000626        
000556  000627  func txt_FontBank("flashbank", "address"), 1;               // use a font located in another bank
000557  000628  // Syntax: txt_FontBank(bank, offset);
000558  000629  // Usage : txt_FontBank(FLASHBANK_2, arg2);
000559  000630  // Returns : Current font before the change, or 0 if invalid or bank is protected
000560  000631  // Notes : Sets the current font to a font held in another bank
000561  000632        
000562  000633  //------------------------------------------------------------------//
000563  000634  // 16bit signed Math Functions                                      //
000564  000635  //------------------------------------------------------------------//
000565  000636                                                  //
000566  000637  func ABS("value"), 1;                           // return a positive number
000567  000638  // Syntax: ABS(value);
000568  000639  // Usage : var := ABS(arg);
000569  000640  // Notes : Returns the absolute value of an argument
000570  000641        
000571  000642  func MIN("value1", "value2"), 1;                // return the smaller of 2 numbers
000572  000643  // Syntax: MIN(value1, value2);
000573  000644  // Usage : var := MIN(arg1, arg2);
000574  000645  // Notes : Returns the minimum of 2 arguments
000575  000646        
000576  000647  func MAX("value1", "value2"), 1;                // return the larger of 2 numbers
000577  000648  // Syntax: MAX(value1, value2);
000578  000649  // Usage : var := MAX(arg1, arg2);
000579  000650  // Notes : Returns the maximum of 2 arguments
000580  000651        
000581  000652  func SWAP("&var", "&var"), 0;                   // swap 2 variables, arguments must point to variables
000582  000653  // Syntax: SWAP(&var1, &var2);
000583  000654  // Usage : SWAP(&var1, &var2);
000584  000655  // Notes : Swaps the contents of 2 variables or memory locations
000585  000656        
000586  000657  func SIN("angle"), 1;                           // return SIN of angle
000587  000658  // Syntax: SIN(angle);
000588  000659  // Usage : var := SIN(arg);
000589  000660  // Notes : Returns the sine in radians of an argument in degrees
000590  000661  //       : the returned value range is from 127 to -127. The real
000591  000662  //       : cosine values vary from 1.0 to -1.0 so appropriate
000592  000663  //       : scaling must be done in user code.
000593  000664        
000594  000665  func COS("angle"), 1;                           // return COS of angle
000595  000666  // Syntax: COS(angle);
000596  000667  // Usage : var := COS(arg);
000597  000668  // Notes : Returns the cosine in radians of an argument in degrees
000598  000669  //       : the returned value range is from 127 to -127. The real
000599  000670  //       : cosine values vary from 1.0 to -1.0 so appropriate
000600  000671  //       : scaling must be done in user code.
000601  000672        
000602  000673  func RAND(), 1;                                 // return a pseudo random number
000603  000674  // Syntax: RAND();
000604  000675  // Usage : var := RAND();
000605  000676  // Notes : Returns a random number between 0 and 0xFFFF.
000606  000677  //       : The random number generator must first be seeded
000607  000678  //       : by using the SEED(number) function.
000608  000679        
000609  000680  func RANDVAL("low", "high"), 1;                 // return a ranged pseudo random number
000610  000681  // Syntax: RANDVAL("low", "high");
000611  000682  // Usage : var := RANDVAL(low, high);
000612  000683  // Notes : Returns a random number between low and high limits
000613  000684  //       : such that low <= N < high
000614  000685  //       : The random number generator may first be seeded
000615  000686  //       : by using the SEED(number) function.
000616  000687  //       : RANDVAL is the equivalent of aggregate functions:-
000617  000688  //       :     myvar = ABS( (RAND()%(high-low)+low) );
000618  000689  //       : Note that the lower limit is inclusive, but the upper limit is exclusive.
000619  000690        
000620  000691  func SEED("number"), 0;                         // re-seed the pseudo random number generator
000621  000692  // Syntax: SEED(number);
000622  000693  // Usage : SEED(arg);
000623  000694  // Notes : Seeds the random number generator.
000624  000695        
000625  000696  func SQRT("number"), 1;                         // return square root of a number
000626  000697  // Syntax: SQRT(number);
000627  000698  // Usage : SQRT(arg);
000628  000699  // Notes : Returns the integer square root of a number.
000629  000700        
000630  000701  func OVF(), 1;                                  // returns upper 16bits of 32bit results
000631  000702  // Syntax: OVF();
000632  000703  // Usage : loWord := 0x2710 * 0x2710;           // (10000 * 10000 in hex format)
000633  000704  //       : hiWord := OVF();
000634  000705  // Notes : This function returns the high order 16 bits from certain math and shift functions..
000635  000706        
000636  000707  func CY(), 1;
000637  000708  // Syntax: CY();
000638  000709  // Usage : myvar := 0xFFF8 + 9;                 // result = 1
000639  000710  //       : print(myvar," "CY(),"\n");           // carry = 1
000640  000711  // Notes : This function returns the carry status of an
000641  000712  // unsigned overflow from any 16 or 32bit additions or sutractions.
000642  000713        
000643  000714  func EVE_SP(), 1;
000644  000715  // Syntax: EVE_SP();
000645  000716  // Usage : eg:  print(EVE_SP());
000646  000717  // Notes : Used for debugging to assess the current stack level,
000647  000718  //       : mainly for checking stack leaks, see example EVE_SP.4dg
000648  000719        
000649  000720  func EVE_SSIZE(), 1;
000650  000721  // Syntax: EVE_SSIZE();
000651  000722  // Usage : eg:  print(EVE_SSIZE());
000652  000723  // Notes : Used to get the stack size,
000653  000724  //       : mainly for debugging purposes, EVE_SP.4dg
000654  000725        
000655  000726        
000656  000727  //------------------------------------------------------------------//
000657  000728  //
000658  000729  //------------------------------------------------------------------//
000659  000730  func mem_ArrayOp1("memarray", "count", "op", "value"), 0;                     // single array functions
000660  000731        
000661  000732        
000662  000733  // single word array operations
000663  000734  #CONST
000664  000755  #END
000665  000756        
000666  000757        
000667  000758  func mem_ArrayOp2("memarray1", "memarray2", "count", "op", "value"), 0;         // dual array functions
000668  000759        
000669  000760  // dual word array operations
000670  000761  #CONST
000671  000773  #END
000672  000774        
000673  000775        
000674  000776  func __reserved3(), 0; // do not remove
000675  000777  func __reserved4(), 0; // do not remove
000676  000778        
000677  000779        
000678  000780  //------------------------------------------------------------------//
000679  000781  // unsigned long (32 bit) operations                                //
000680  000782  //------------------------------------------------------------------//
000681  000783        
000682  000784  func uadd_3232("res32", "val1", "val2"), 1;
000683  000785  // Syntax   : cmp_3232(res32, varA, varB);
000684  000786  // Input    : DWORD res32 points to optional result (or zero for compare)
000685  000787  //          : DWORD val1 points to 32bit augend
000686  000788  //          : DWORD val2 points to 32bit addend
000687  000789  // Usage    : var res32[2];
000688  000790  //          : res := cmp_3232(res32, val1, val2);
000689  000791  // Notes    : performs an unsigned addition of 2 x 32bit values
000690  000792  //          : placing the 32bit result in a 2 word array.
000691  000793  // Returns  : returns 1 on 32bit unsigned overflow (carry).
000692  000794  //          ; carry flag is also set on 32bit unsigned overflow
000693  000795  //          ; and can be read with the CY() function.
000694  000796        
000695  000797        
000696  000798  func usub_3232("res32", "val1", "val2"), 1;
000697  000799  // Syntax   : cmp_3232(res32, varA, varB);
000698  000800  // Input    : DWORD res32 points to optional result (or zero for compare)
000699  000801  //          : DWORD val1 points to first 32bit minuend
000700  000802  //          : DWORD val2 points to 32bit subtrahend
000701  000803  // Usage    : var res32[2];
000702  000804  //          : res := cmp_3232(res32, val1, val2);
000703  000805  // Notes    : performs an unsigned subtraction of 2 x 32bit values
000704  000806  //          : placing the 32bit result in a 2 word array.
000705  000807  // Returns  : returns 1 on 32bit unsigned overflow (borrow).
000706  000808  //          ; carry flag is also set on 32bit unsigned underflow
000707  000809  //          ; and can be read with the CY() function.
000708  000810        
000709  000811        
000710  000812  func umul_1616("&res32", "val1", "val2"), 1;
000711  000813  // Syntax   : umul_1616(&res32, varA, varB);
000712  000814  // Input    : DWORD result   points to 32bit result register.
000713  000815  //          : VAR   val1  16bit register or constant
000714  000816  //          : VAR   val2  16bit register or constant
000715  000817  // Usage    : var res32[2];
000716  000818  //          : umul_1616(&res32, myvar, 50000);
000717  000819  // Notes    : performs an unsigned multiply of 2 x 16bit values
000718  000820  //          : placing the 32bit result in a 2 word array.
000719  000821  // Returns  : the pointer to the 32bit result.
000720  000822  //          : carry and overflow are not affected.
000721  000823        
000722  000824        
000723  000825  func udiv_3232("res32", "val1", "val2"), 1;
000724  000826  // Syntax   : udiv_1616(res32, varA, varB);
000725  000827  // Input    : DWORD *result   points to 32bit result register.
000726  000828  //          : DWORD   val1  pointer to 32bit value (dividend)
000727  000829  //          : DWORD   val2  pointer to 32bit value (divisor)
000728  000830  // Usage    : var res32[2];
000729  000831  //          : umul_1616(res32, myvar, 50000);
000730  000832  // Notes    : performs an unsigned division of 2 x 32bit values
000731  000833  //          : placing the 32bit result in a 2 word array.
000732  000834  // Returns  : the pointer to the 32bit result.
000733  000835  //          : carry and overflow are not affected.
000734  000836        
000735  000837        
000736  000838  func ucmp_3232("val1", "val2"), 1;
000737  000839  // Syntax   : cmp_3232(varA, varB);
000738  000840  // Input    : DWORD val1 points to 32bit minuend
000739  000841  //          : DWORD val2 points to 32bit sutrahend
000740  000842  // Usage    : res := cmp_3232(val1, val2);
000741  000843  // Notes    : performs an unsigned comparison of 2 x 32bit values.
000742  000844  //          : The result of the subtraction is returned.
000743  000845  // Returns  : 0  if equal
000744  000846  //          : 1  if val1 > val2
000745  000847  //          : -1 if val1 < val2
000746  000848  //          : This function does not affect the carry flag.
000747  000849        
000748  000850  func __reserved5(), 0; // do not remove
000749  000851  func __reserved6(), 0; // do not remove
000750  000852        
000751  000853  //------------------------------------------------------------------//
000752  000854  // Floating point operations                                        //
000753  000855  // Note that source arguments may be a pointer to a float variable, //
000754  000856  // or a numeric text string.                                        //
000755  000857  // A string argument is converted at run-time by calling            //
000756  000858  // flt_Val for a string argument.                                   //
000757  000859  // Note that a float variable is a 2 word array, eg var myfloat[2]; //
000758  000860  //------------------------------------------------------------------//
000759  000861  func flt_VAL("fresult", "numstring"), 1;
000760  000862  // Syntax   : flt_VAL(float1, mystring);
000761  000863  // Input    : FLOAT  fresult  points to float result register
000762  000864  //          : numstring       a string constant or string variable
000763  000865  //          : that is holds valid floating point number.
000764  000866  // Usage    : var float1[2];
000765  000867  //          : flt_VAL(float1, "1.0594631");
000766  000868  // Notes    : The string argument can be a string constant, a pointer
000767  000869  //          : to a string variable, or a pointer to a data statement.
000768  000870  //          : The string may be a float, or a hex or binary integer value (no decimal point allowed).
000769  000871  //          : For hex or binary, the number is preceeded with 0x or 0b
000770  000872  // Returns  : the pointer to the float result.
000771  000873  //          : carry and overflow are not affected.
000772  000874        
000773  000875        
000774  000876  func flt_ITOF("fresult", "var16"), 1;
000775  000877  // Syntax   : flt_ITOF(resf, intval);
000776  000878  // Input    : FLOAT  fresult  points to float result register
000777  000879  //          : var16           a 16bit signed integer variable or string constant
000778  000880  // Usage    : var float1[2];
000779  000881  //          : var myvar := 30000;
000780  000882  //          : flt_VAL(float1, myvar);
000781  000883  // Notes    : Converts a 16bit signed integer value to a signed floating point number.
000782  000884  // Returns  : the pointer to the float result.
000783  000885        
000784  000886        
000785  000887  func flt_UITOF("fresult", "uvar16"), 1;
000786  000888  // Syntax   : flt_ITOF(resf, intval);
000787  000889  // Input    : FLOAT  fresult  points to float result register
000788  000890  //          : var16           a 16bit integer variable or constant (treated as unsigned)
000789  000891  // Usage    : var float1[2];
000790  000892  //          : var myuvar := 30000;
000791  000893  //          : flt_UITOF(float1, myuvar);
000792  000894  // Notes    : Converts a 16bit unsigned integer value to a positive floating point number.
000793  000895  // Returns  : the pointer to the float result.
000794  000896        
000795  000897  func flt_LTOF("fresult", "var32"), 1;
000796  000898  // Syntax   : flt_LTOF(resf, var32);
000797  000899  // Input    : FLOAT  fresult  points to float result register
000798  000900  //          : var32           points to a 32bit (long) signed variable or string constant
000799  000901  // Usage    : var float1[2];
000800  000902  //          : var mylong[2];
000801  000903  //          : flt_VAL(float1, mylong);
000802  000904  // Notes    : Converts a 32bit signed integer value to a signed floating point number.
000803  000905  // Returns  : the pointer to the float result.
000804  000906        
000805  000907        
000806  000908  func flt_ULTOF("fresult", "uvar32"), 1;
000807  000909  // Syntax   : flt_ITOF(resf, uvar32);
000808  000910  // Input    : FLOAT  fresult  points to float result register
000809  000911  //          : var32           points to a 32bit (unsigned long) unsigned variable or string constant
000810  000912  // Usage    : var float1[2];
000811  000913  //          : var myulong[2];
000812  000914  //          : flt_VAL(float1, myulong);
000813  000915  // Notes    : Converts a 32bit unsigned integer value to a positive floating point number.
000814  000916  // Returns  : the pointer to the float result.
000815  000917        
000816  000918        
000817  000919  func flt_PRINT("fvalue", "formatstring"), 1;
000818  000920  // Syntax   : flt_PRINT(resf, formatstr);
000819  000921  // Input    : FLOAT  fresult  points to float result register
000820  000922  //          : formatstring    zero, null string, of valid format string
000821  000923  // Usage    : var float1[2];
000822  000924  //          : flt_PRINT(float1, "");
000823  000925  // Notes    : The string argument can be a string constant, a pointer
000824  000926  //          : to a string variable, or a pointer to a data statement.
000825  000927  //          : If it is zero or an empty string, the number is
000826  000928  //          : automatically formatted for the best presentation.
000827  000929  //          : The format string is similar to the C language, but only
000828  000930  //          : a single '%' may be used to print a single variable.
000829  000931  // Returns  : zero if success.
000830  000932        
000831  000933        
000832  000934  func flt_ABS("result", "floatval"), 1;
000833  000935  // Syntax   : flt_ABS(&result, &fval);
000834  000936  // Input    : FLOAT  result   points to float result register
000835  000937  //          : numstring       a string that is a valid number
000836  000938  // Usage    : var float1[2];
000837  000939  //          : flt_VAL(float1, float1); // convert float1 to its ABS value
000838  000940  // Returns  : the pointer to the float result.
000839  000941  //          : carry and overflow are not affected.
000840  000942        
000841  000943        
000842  000944  func flt_ACOS("result", "floatval"), 1;
000843  000945  // Syntax   : flt_ACOS(result, fval);
000844  000946  // Input    : FLOAT  result (in radians) points to float result register
000845  000947  //          : FLOAT  floatval points to the float value to get arccos of
000846  000948  // Usage    : var float1[2];
000847  000949  //          : flt_ACOS(result, float1); // get the arccos of float1
000848  000950  // Notes    : the result is in radians.
000849  000951  // Returns  : the pointer to the float result.
000850  000952  //          : carry and overflow are not affected.
000851  000953        
000852  000954        
000853  000955  func flt_ASIN("result", "floatval"), 1;
000854  000956  // Syntax   : flt_ASIN(result, fval);
000855  000957  // Input    : FLOAT  result (in radians) points to float result register
000856  000958  //          : FLOAT  floatval points to the float value to get arcsin of
000857  000959  // Usage    : var float1[2];
000858  000960  //          : flt_ASIN(result, float1); // get the Arcsin of float1
000859  000961  // Notes    : the result is in radians.
000860  000962  // Returns  : the pointer to the float result.
000861  000963  //          : carry and overflow are not affected.
000862  000964        
000863  000965        
000864  000966  func flt_ATAN("result", "floatval"), 1;
000865  000967  // Syntax   : flt_ATAN(result, fval);
000866  000968  // Input    : FLOAT  result (in radians) points to float result register
000867  000969  //          : FLOAT  floatval points to the float value to get arctan of
000868  000970  // Usage    : var float1[2];
000869  000971  //          : flt_ATAN(result, float1); // get the Arctan of float1
000870  000972  // Notes    : the result is in radians.
000871  000973  // Returns  : the pointer to the float result.
000872  000974  //          : carry and overflow are not affected.
000873  000975        
000874  000976        
000875  000977  func flt_COS("result", "floatval"), 1;
000876  000978  // Syntax   : flt_COS(result, fval);
000877  000979  // Input    : FLOAT  result   points to float result register
000878  000980  //          : FLOAT  floatval (in radians) points to the float value to get Cos of
000879  000981  // Usage    : var float1[2];
000880  000982  //          : flt_COS(result, float1); // get the Cosine of float1
000881  000983  // Notes    : the result is in radians.
000882  000984  // Returns  : the pointer to the float result.
000883  000985  //          : carry and overflow are not affected.
000884  000986        
000885  000987        
000886  000988  func flt_EXP("result", "floatval"), 1;
000887  000989  // Syntax   : flt_EXP(result, fval);
000888  000990  // Input    : FLOAT  result   points to float result register
000889  000991  //          : FLOAT  floatval points to the float value to get Exponent of
000890  000992  // Usage    : var float1[2];
000891  000993  //          : flt_EXP(result, float1); // get the Exponent of float1
000892  000994  // Returns  : the pointer to the float result.
000893  000995  //          : carry and overflow are not affected.
000894  000996        
000895  000997        
000896  000998  func flt_CEIL("result", "floatval"), 1;
000897  000999  // Syntax   : flt_CEIL(result, floatval);
000898  001000  // Input    : FLOAT  floatval points to the float value to integerize up
000899  001001  // Usage    : var float1[2];
000900  001002  //          : n := flt_INT(float1, float1); // round value up to the integer value
000901  001003  // Notes    : Removes fractional part, rounding up correctly.
000902  001004  // Returns  : the pointer to the float result.
000903  001005  //          : carry and overflow are not affected.
000904  001006        
000905  001007        
000906  001008  func flt_FLOOR("result", "floatval"), 1;
000907  001009  // Syntax   : flt_FLOOR(result, floatval);
000908  001010  // Input    : FLOAT  floatval points to the float value to integerize down
000909  001011  // Usage    : var float1[2];
000910  001012  //          : n := flt_INT(float1, float1); // round value down to the integer value
000911  001013  // Notes    : Removes fractional part, rounding down correctly.
000912  001014  // Returns  : the pointer to the float result.
000913  001015  //          : carry and overflow are not affected.
000914  001016        
000915  001017        
000916  001018  func flt_SIN("result", "floatval"), 1;
000917  001019  // Syntax   : flt_SIN(result, fval);
000918  001020  // Input    : FLOAT  result   points to float result register
000919  001021  //          : FLOAT  floatval (in radians) points to the float value to get Sine of
000920  001022  // Usage    : var float1[2];
000921  001023  //          : flt_SIN(result, float1); // get the Sin of float1
000922  001024  // Notes    : the result is in radians.
000923  001025  // Returns  : the pointer to the float result.
000924  001026  //          : carry and overflow are not affected.
000925  001027        
000926  001028        
000927  001029  func flt_LOG("result", "floatval"), 1;
000928  001030  // Syntax   : flt_LOG(&result, &fval);
000929  001031  // Input    : FLOAT  result   points to float result register
000930  001032  //          : FLOAT  floatval points to the float value to get Log of
000931  001033  // Usage    : var float1[2];
000932  001034  //          : flt_LOG(result, float1); // get the natural Log of float1
000933  001035  // Returns  : the pointer to the float result.
000934  001036  //          : carry and overflow are not affected.
000935  001037        
000936  001038        
000937  001039  func flt_SQR("result", "floatval"), 1;
000938  001040  // Syntax   : flt_SQR(result, fval);
000939  001041  // Input    : FLOAT  result   points to float result register
000940  001042  //          : FLOAT  floatval points to the float value to get Log of
000941  001043  // Usage    : var float1[2];
000942  001044  //          : flt_SQR(result, float1); // get the square root of float1
000943  001045  // Returns  : the pointer to the float result, or zero if number was negative.
000944  001046  //          : carry and overflow are not affected.
000945  001047        
000946  001048        
000947  001049  func flt_TAN("result", "floatval"), 1;
000948  001050  // Syntax   : flt_TAN(result, fval);
000949  001051  // Input    : FLOAT  result   points to float result register
000950  001052  //          : FLOAT  floatval (in radians) points to the float value to get Tangent of
000951  001053  // Usage    : var float1[2];
000952  001054  //          : flt_TAN(result, float1); // get the Tangent of float1
000953  001055  // Returns  : the pointer to the float result.
000954  001056  //          : carry and overflow are not affected.
000955  001057        
000956  001058        
000957  001059  func flt_POW("result", "floatx", "floaty"), 1;
000958  001060  // Syntax   : flt_POW(result, fval1, fval2);
000959  001061  // Input    : FLOAT  result   points to float result register
000960  001062  //          : FLOAT  floatx   points to the float value to raise
000961  001063  //          : FLOAT  floaty   points to the float value for power
000962  001064  // Usage    : flt_POW(result, floatx, floaty); // raise x to power y
000963  001065  // Returns  : the pointer to the float result, or zero if error occurs.
000964  001066  //          : carry and overflow are not affected.
000965  001067        
000966  001068        
000967  001069  func flt_ADD("result", "floatA", "floatB"), 1;
000968  001070  // Syntax   : flt_ADD(result, floatA, floatB);
000969  001071  // Input    : FLOAT  result   points to float result register
000970  001072  //          : FLOAT  floatval points to the float value A
000971  001073  //          : FLOAT  floatval points to the float value B
000972  001074  // Usage    : flt_ADD(result, floatx, floaty); // add B to A
000973  001075  // Returns  : the pointer to the float result, or zero if error occurs.
000974  001076  //          : carry and overflow are not affected.
000975  001077        
000976  001078        
000977  001079  func flt_SUB("&result", "&floatA", "&floatB"), 1;
000978  001080  // Syntax   : flt_SUB(result, floatA, floatB);
000979  001081  // Input    : FLOAT  result   points to float result register
000980  001082  //          : FLOAT  floatval points to the float value A
000981  001083  //          : FLOAT  floatval points to the float value B
000982  001084  // Usage    : flt_SUB(&result, &floatx, &floaty); // subtract B from A
000983  001085  // Returns  : the pointer to the float result, or zero if error occurs.
000984  001086  //          : carry and overflow are not affected.
000985  001087        
000986  001088        
000987  001089  func flt_MUL("result", "floatA", "floatB"), 1;
000988  001090  // Syntax   : flt_MUL(result, floatA, floatB);
000989  001091  // Input    : FLOAT  result   points to float result register
000990  001092  //          : FLOAT  floatval points to the float value A
000991  001093  //          : FLOAT  floatval points to the float value B
000992  001094  // Usage    : flt_MUL(result, floatA, floatB); // multiply A by B
000993  001095  // Returns  : the pointer to the float result, or zero if error occurs.
000994  001096  //          : carry and overflow are not affected.
000995  001097        
000996  001098        
000997  001099  func flt_DIV("result", "floatA", "floatB"), 1;
000998  001100  // Syntax   : flt_DIV(result, floatA, floatB);
000999  001101  // Input    : FLOAT  result   points to float result register
001000  001102  //          : FLOAT  floatval points to the float value A
001001  001103  //          : FLOAT  floatval points to the float value B
001002  001104  // Usage    : flt_DIV(result, floatA, floatB); // divide A by B
001003  001105  // Returns  : the pointer to the float result, or zero if error occurs.
001004  001106  //          : carry and overflow are not affected.
001005  001107        
001006  001108        
001007  001109  //------------------------------------------------------------------//
001008  001110  // The following float functions all return integer values.
001009  001111  //------------------------------------------------------------------//
001010  001112  func flt_EQ("floatA", "floatB"), 1;
001011  001113  // Syntax   : flt_EQ(floatA, floatB);
001012  001114  // Input    : FLOAT  floatval points to the float value A
001013  001115  //          : FLOAT  floatval points to the float value B
001014  001116  // Usage    : if (flt_EQ(floatA, floatB)) // compare A to B, true if A == B
001015  001117  // Returns  : True if numbers are equal, false otherwise.
001016  001118        
001017  001119        
001018  001120  func flt_NE("floatA", "floatB"), 1;
001019  001121  // Syntax   : flt_NE(floatA, floatB);
001020  001122  // Input    : FLOAT  floatval points to the float value A
001021  001123  //          : FLOAT  floatval points to the float value B
001022  001124  // Usage    : if (flt_NE(floatA, floatB)) // compare A to B, true if A != B
001023  001125  // Returns  : True if numbers are not equal, false otherwise.
001024  001126        
001025  001127        
001026  001128        
001027  001129  func flt_GT("floatA", "floatB"), 1;
001028  001130  // Syntax   : flt_GT(floatA, floatB);
001029  001131  // Input    : FLOAT  floatval points to the float value A
001030  001132  //          : FLOAT  floatval points to the float value B
001031  001133  // Usage    : if (flt_GT(floatA, floatB)) // compare A to B, true if A > B
001032  001134  // Returns  : True if A > B, false otherwise.
001033  001135        
001034  001136        
001035  001137  func flt_GE("floatA", "floatB"), 1;
001036  001138  // Syntax   : flt_GE(floatA, floatB);
001037  001139  // Input    : FLOAT  floatval points to the float value A
001038  001140  //          : FLOAT  floatval points to the float value B
001039  001141  // Usage    : if (flt_GE(floatA, floatB)) // compare A to B, true if A >= B
001040  001142  // Returns  : True if A >= B, false otherwise.
001041  001143        
001042  001144        
001043  001145  func flt_LT("floatA", "floatB"), 1;
001044  001146  // Syntax   : flt_LT(floatA, floatB);
001045  001147  // Input    : FLOAT  floatval points to the float value A
001046  001148  //          : FLOAT  floatval points to the float value B
001047  001149  // Usage    : if (flt_LT(floatA, floatB)) // compare A to B, true if A < B
001048  001150  // Returns  : True if A < B, false otherwise.
001049  001151        
001050  001152        
001051  001153  func flt_LE("floatA", "floatB"), 1;
001052  001154  // Syntax   : flt_LE(floatA, floatB);
001053  001155  // Input    : FLOAT  floatval points to the float value A
001054  001156  //          : FLOAT  floatval points to the float value B
001055  001157  // Usage    : if (flt_LE(floatA, floatB )) // compare A to B, true if A <= B
001056  001158  // Returns  : True if A <= B, false otherwise.
001057  001159        
001058  001160        
001059  001161  func flt_SGN("floatval"), 1;
001060  001162  // Syntax   : flt_SGN(fval);
001061  001163  // Input    : FLOAT  floatval   points to the float value examine sign
001062  001164  // Usage    : var float1[2];
001063  001165  //          : n := flt_SGN(float1); // return -1 if float number negative
001064  001166  // Notes    : returns 0 if sign is positive or zero.
001065  001167  // Returns  : returns 16bit integer -1 if float sign is negative, or zero if positive.
001066  001168  //          : carry and overflow are not affected.
001067  001169        
001068  001170        
001069  001171  func flt_FTOI("floatvar"), 1;
001070  001172  // Syntax   : flt_FTOI(myfloat);
001071  001173  // Input    : FLOAT  fresult  points to float result register
001072  001174  // Usage    : var float1[2];
001073  001175  //          : myvar := flt_VAL(&float1, myvar);
001074  001176  // Notes    : Converts a floating point number to a 16bit integer.
001075  001177  //          : The floating point number is rounded up or down accordingly.
001076  001178  // Returns  : the integer value of the float.
001077  001179        
001078  001180  func flt_PRINTxy("xpos", "ypos", "fvalue", "formatstring"), 1;
001079  001181  // Syntax   : flt_PRINT(x, y, resf, formatstr);
001080  001182  // Input    : FLOAT  fresult  points to float result register
001081  001183  //          : formatstring    zero, null string, of valid format string
001082  001184  // Usage    : var float1[2];
001083  001185  //          : flt_PRINT(float1, "");
001084  001186  // Notes    : The string argument can be a string constant, a pointer
001085  001187  //          : to a string variable, or a pointer to a data statement.
001086  001188  //          : If it is zero or an empty string, the number is
001087  001189  //          : automatically formatted for the best presentation.
001088  001190  //          : The format string is similar to the C language, but only
001089  001191  //          : a single '%' may be used to print a single variable.
001090  001192  // Returns  : zero if success.
001091  001193        
001092  001194  func __reserved9(), 0; // do not remove
001093  001195  func __reserved10(), 0; // do not remove
001094  001196        
001095  001197  //------------------------------------------------------------------//
001096  001198  //------------------------------------------------------------------//
001097  001199  //------------------------------------------------------------------//
001098  001200  //------------------------------------------------------------------//
001099  001201  //------------------------------------------------------------------//
001100  001202  func pin_Set("mode", "pin"), 1;            // set pin to required mode
001101  001203  // Syntax: pin_Set(mode, pin);
001102  001204  // Usage : pin_Set(PIN_OUT,);
001103  001205  // Notes : Sets the selected pin to the desired mode. Refer to the manual
001104  001206  //       : for pin function compatitblilites.
001105  001207  //       : returns true if the pin number and mode is legal (usually ignored)
001106  001208  //       :    available pin modes
001107  001209  //       :    PIN_INP                 0        // pin is input, no pullup or pulldown
001108  001210  //       :    PIN_INP_HI              1        // pin is input with pullup to Vcc
001109  001211  //       :    PIN_INP_LO              2        // pin is input with pulldown to Gnd
001110  001212  //       :    PIN_OUT                 3        // pin is output
001111  001213  //       :    PIN_OUT_OD              4        // pin is output with open drain
001112  001214  //       :    PIN_AN                  5        // pin is analogue (PA0 to PA3 only)
001113  001215  //       :    PIN_ANAVG               6        // pin is analogue (PA0 to PA3 only), averaged - 16 samples
001114  001216  //       :
001115  001217        
001116  001218  func pin_HI("pin"), 1;                    // set pin to logic '1'
001117  001219  // Syntax: pin_HI(pin);
001118  001220  // Usage : pin_HI(PA4);        // make PA4 HI level
001119  001221  // Notes : Outputs a logic "High" to the pin latch
001120  001222  //       : The pin is automatically made an output.
001121  001223  //       : pullup, pulldown, and change notification will be disable for the selected pin.
001122  001224  //       : returns true if the pin number is legal (usually ignored)
001123  001225  //       :
001124  001226        
001125  001227  func pin_LO("pin"), 1;                    // set pin to logic '0'
001126  001228  // Syntax: pin_LO(pin);
001127  001229  // Usage : pin_LO(PA3);
001128  001230  // Notes : Outputs a logic "Low" to the pin latch
001129  001231  //       : The pin is automatically made an output.
001130  001232  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001131  001233  //       : returns true if the pin number is legal (usually ignored)
001132  001234  //       :
001133  001235        
001134  001236  func pin_Val("pin", "value"), 0;                    // set pin to to state of variable
001135  001237  // Syntax: pin_Var(pin, value);
001136  001238  // Usage : pin_Var(IO3, myvar);
001137  001239  // Notes : Outputs a logic state on a pin depending on the value of bit 0 of a variable
001138  001240  //       : The pin is automatically made an output.
001139  001241  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001140  001242  //       : returns true if the pin number is legal (usually ignored)
001141  001243        
001142  001244  func pin_Read("pin"), 1;                // read pin, logic or analogue
001143  001245  // Syntax: pin_Read(PA0);
001144  001246  // Usage : arg1 := pin_Read(arg2);
001145  001247  // Notes : Read a pin in various ways. If the pin is
001146  001248  //       : set to an input, read the state of the input pin.
001147  001249  //       : If set to an output, read the state of the output latch.
001148  001250  //       : If set to analogue, read the 12 bit analogue value.
001149  001251        
001150  001252  func bus_Read(), 1;
001151  001253  // Syntax: bus_Read();
001152  001254  // Usage : arg1 := pin_ReadBus();
001153  001255  // Notes : Read the 16 bit port regardless of pin configurations.
001154  001256  //       : If a pin is configured as input or analogue, the pin is read directly as
001155  001257  //       : if it were a digital input. If a pin is configured as an output, the pin
001156  001258  //       : is also read directly, giving the output latch state.
001157  001259  //       : Bit 0 coresponds to PA0 through to bit15 which coresponds to PA15
001158  001260  //       : (Refer to 'port bit position masks')
001159  001261  //Returns: Returns the 16 bit value of the bus.
001160  001262        
001161  001263  func bus_SetPins("value"), 0;
001162  001264  // Syntax: bus_SetPins(value);
001163  001265  // Usage : arg1 := bus_SetPins(15); // set PA0 to PA3 to output bits, making them HI
001164  001266  // Notes : Any '1' bits in "value" set the coresponding port pin to an output
001165  001267  //       : and forces its state to a '1'. The state of its previous open drain
001166  001268  //       : configuration is not altered. Any zero bits in "value" will not affect the pin.
001167  001269  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001168  001270  //       : Bit 0 coresponds to PA0 through to bit13 which coresponds to PA13
001169  001271        
001170  001272  func bus_ClearPins("value"), 0;
001171  001273  // Syntax: bus_ClearPins(value);
001172  001274  // Usage : bus_ClearPins(0x03F0); // set PA0 to PA5 to output bits, making them LO
001173  001275  // Notes : Any '1' bits in "value" set the coresponding port pin to an output
001174  001276  //       : and forces its state to a '0. The state of its previous open drain
001175  001277  //       : configuration is not altered. Any zero bits in "value" will not affect the pin.
001176  001278  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001177  001279  //       : Bit 0 coresponds to PA0 through to bit13 which coresponds to PA13
001178  001280        
001179  001281  func bus_SetChangeInterrupt("function", "portmask"), 1;
001180  001282  // Syntax: bus_SetChangeInterrupt(value);
001181  001283  // Usage : bus_SetChangeInterrupt(scanKeypad, 0x00F0); // set PA4 to PA7 to interrupt on change
001182  001284  // Notes : Any '1' bits in "portmask" marks that pin to generate an interrupt on change.
001183  001285  //       : A level change on that pin will cause "function" to be executed. If "function" is
001184  001286  //       : zero, the display may be put into sleep mode, and any change will cause a wakeup reset.
001185  001287  //       : Wakeup will always re-start code running in FLASHBANK_0
001186  001288  //       : Bit 0 coresponds to PA0 through to bit15 which coresponds to PA15
001187  001289  //       : (Refer to 'port bit position masks')
001188  001290  //       : Once armed, "function" will only be executed once, it is necessary to
001189  001291  //       : re-arm for any further events.
001190  001292  //Returns: Return the current state of the pins that are selected in "portmask"
001191  001293  //       : This can be saved and later used in "function" to see which pin(s) actually changed.
001192  001294        
001193  001295  func bus_Write8("var"), 0;
001194  001296  // Syntax: bus_Write8(var);
001195  001297  // Usage : bus_Write8(arg1);
001196  001298  // Notes : The lower 8 bits of arg1 are placed on the BUS, then, after
001197  001299  //       : a settling delay of approx 50nsec, the BUS_WR(PA2) pin is strobed
001198  001300  //       : LO for approx 50nsec then set back HI.
001199  001301  //       : The upper 8 bits of arg1 are ignored.
001200  001302  //       : NB:- the BUS_WR(PA2) pin must be preset to the desired output state
001201  001303  //       : as must the bus pins to ensure BUS write integrity.
001202  001304  //       :
001203  001305  //       : BUS_0 is PA4
001204  001306  //       : BUS_1 is PA5
001205  001307  //       : BUS_2 is PA6
001206  001308  //       : BUS_3 is PA7
001207  001309  //       : BUS_4 is PA8
001208  001310  //       : BUS_5 is PA9
001209  001311  //       : BUS_6 is PA10
001210  001312  //       : BUS_7 is PA11
001211  001313        
001212  001314  func bus_Read8(), 1;
001213  001315  // Syntax: bus_Read();
001214  001316  // Usage : arg1 := bus_Read8();
001215  001317  // Notes : The BUS_RD(PA3) pin set to LO, then, after a settling delay
001216  001318  //       : of approx 50nsec, the BUS is read into the lower 8 bits of arg
001217  001319  //       : (the upper 8 bits being set to 0)
001218  001320  //       : the BUS_RD(PA3) pin is then set back to a HI level.
001219  001321  //       : NB:- the BUS_RD(PA3) pin must be preset to the desired output state
001220  001322  //       : as must the bus pins to ensure BUS read integrity.
001221  001323  //       :
001222  001324  //       : BUS_0 is PA4
001223  001325  //       : BUS_1 is PA5
001224  001326  //       : BUS_2 is PA6
001225  001327  //       : BUS_3 is PA7
001226  001328  //       : BUS_4 is PA8
001227  001329  //       : BUS_5 is PA9
001228  001330  //       : BUS_6 is PA10
001229  001331  //       : BUS_7 is PA11
001230  001332        
001231  001333  func __reserved13(), 0; // do not remove
001232  001334  func __reserved14(), 0; // do not remove
001233  001335  //------------------------------------------------------------------//
001234  001336  // Pin related constants                                            //
001235  001337  //------------------------------------------------------------------//
001236  001338        
001237  001339  // pin_Set(...) pin modes
001238  001340  #CONST
001239  001348  #END
001240  001349        
001241  001350        
001242  001351  // pin name             constant    connector H1 I/O Pin referencesnumbers
001243  001352  #CONST
001244  001372  #END
001245  001373        
001246  001374  // bit position masks
001247  001375  #CONST
001248  001392  #END
001249  001393        
001250  001394        
001251  001395        
001252  001396  //------------------------------------------------------------------//
001253  001397  //   Graphics Functions
001254  001398  //------------------------------------------------------------------//
001255  001399  func gfx_Set("mode", "value"), 0;            // set various graphics functions
001256  001400  // Syntax: gfx_Set(mode, value);
001257  001401  // Usage : gfx_Set(arg1, arg2);
001258  001402  // Notes : Sets various graphics parameters used by other functions
001259  001403  //       : This allows the features to be set programatically with a
001260  001404  //       : single function call.It is strongly recommended to use the
001261  001405  //       : pre-defined constants rather than the mode numbers.
001262  001406  //       : NB:- Although it is often required to be able to set graphics
001263  001407  //       : functions with a single function call for graphics engine
001264  001408  //       : related functions, there is a complete set of single parameter
001265  001409  //       : shortcut functions that have exactly the same function as
001266  001410  //       : each of the gfx_Set modes and saves 1 parameter / uses less memory
001267  001411  //       :
001268  001412  //       : mode = PEN_SIZE (mode 16)
001269  001413  //       : gfx_Set(PEN_SIZE, value);
001270  001414  //       : value = SOLID (value 0) rectangle and circle objects are solid
001271  001415  //       : value = OUTLINE (value 1) rectangle and circle objects are outlines
001272  001416  //       : Sets the mode of the Pen used by most graphics objects
001273  001417  //       :
001274  001418  //       : mode = BACKGROUND_COLOUR (mode 17)
001275  001419  //       : gfx_Set(BACKGROUND_COLOUR, value);
001276  001420  //       : value = 0 to 0xFFFF, Black to White
001277  001421  //       : Sets the Background colour of the screen
001278  001422  //       :
001279  001423  //       : mode = OBJECT_COLOUR (mode 18)
001280  001424  //       : gfx_Set(OBJECT_COLOUR, value);
001281  001425  //       : value = 0 to 0xFFFF, Black to White
001282  001426  //       : Sets the Object colour used in various functions
001283  001427  //       : LineTo(,,); LineRel(,,); BoxTo(,,); Dot(); etc.
001284  001428  //       :
001285  001429  //       : mode = CLIPPING (mode 19)
001286  001430  //       : gfx_Set(CLIPPING, value);
001287  001431  //       : value = OFF (value 0) Clipping disabled
001288  001432  //       : value = ON (value 1) Clipping enabled
001289  001433  //       : Enables/Disables the Clipping feature
001290  001434  //       :
001291  001435  //       : mode = TRANSPARENT_COLOUR (mode 20) : Image or Animation Transparency Colour.
001292  001436  //       : gfx_Set(TRANSPARENT_COLOUR, value);
001293  001437  //       : value = 0 to 0xFFFF Black to White
001294  001438  //       : Sets Bitmap, Image or Animation Transparency Colour.
001295  001439  //       : NB not implemented
001296  001440  //       :
001297  001441  //       : mode = TRANSPARENCY (mode 21) : Bitmap/Image/Animation Transparency
001298  001442  //       : gfx_Set(5, value);
001299  001443  //       : value = OFF (value 0) Transparency disabled
001300  001444  //       : value = ON (value 1) Transparency enabled
001301  001445  //       : Enables/Disables the Transparency feature
001302  001446  //       : NB not implemented
001303  001447  //       :
001304  001448  //       : mode = FRAME_DELAY (mode 22) : Inter-Frame Delay
001305  001449  //       : gfx_Set(FRAME_DELAY, value);
001306  001450  //       : value = 0 to 65535 ms
001307  001451  //       : Sets the Video/Animation clip inter-frame delay. This setting will
001308  001452  //       : over-ride the embedded frame delay of the clip. After the event,
001309  001453  //       : the setting will auto disable and if further inter-frame delays need
001310  001454  //       : overriding the setting must be re-issued.
001311  001455  //       :
001312  001456  //       : mode = SCREEN_MODE (mode 23) : Set required screen behaviour
001313  001457  //       : gfx_Set(SCREEN_MODE, value);
001314  001458  //       : value = LANDSCAPE   (value 0)
001315  001459  //       : value = LANDSCAPE_R (value 1)
001316  001460  //       : value = PORTRAIT    (value 2)
001317  001461  //       : value = PORTRAIT_R  (value 3)
001318  001462  //       :
001319  001463  //       : mode = OUTLINE_COLOUR (mode 24) : Outline Colour
001320  001464  //       : gfx_Set(OUTLINE_COLOUR, value);
001321  001465  //       : value = 1 to 0xFFFF, if 0, featre is OFF
001322  001466  //       : Sets the filled Rectangle or Circle objects outline colour
001323  001467  //       : If outline colour, is 0, OUTLINE_COLOUR feature is disabled
001324  001468  //       : gfx_Set(OUTLINE_COLOUR, OFF); may be used for this
001325  001469  //       :
001326  001470  //       : Only supports variable contrast for uOLED Modules
001327  001471  //       : mode = CONTRAST (mode 25) : Contrast
001328  001472  //       : gfx_Set(CONTRAST, value);
001329  001473  //       : value = 0 to 9, 0=off, 1=lowest, 8=highest contrast
001330  001474  //       : when contrast=0, display is placed in low power mode.
001331  001475  //       : This function should be called with contrast=0 when
001332  001476  //       : powering down the module.
001333  001477  //       :
001334  001478  //       : mode = LINE_PATTERN (mode 26) : Line Pattern
001335  001479  //       : gfx_Set(LINE_PATTERN, value);
001336  001480  //       : gfx_Set(LINE_PATTERN, 0b1111000011110000); // draw dotted line
001337  001481  //       : gfx_Set(LINE_PATTERN, OFF); // line patterning OFF
001338  001482  //       : a value of 0 turns the feature off
001339  001483  //       :
001340  001484  //       : mode = COLOUR_MODE (mode 27) : 8/16 bit colour mode
001341  001485  //       : gfx_Set(COLOUR_MODE , COLOUR16);   // set 16bit colour mode
001342  001486  //       : gfx_Set(COLOUR_MODE , COLOUR8);   // set 8bit colour mode
001343  001487  //       : NB not implemented, default is COLOUR16
001344  001488  //       :
001345  001489  //       : mode = BEVEL_WIDTH (mode 28) : set button and slider bevel width
001346  001490  //       : gfx_Set(BEVEL_WIDTH , 5);   // set bevel lines to 5 pixels wide
001347  001491  //       : sets the button and slider objects bevel width
001348  001492  //       :
001349  001493  //       : mode = BEVEL_SHADOW (mode 29) : set bevel shadowing depth for buttons and sliders
001350  001494  //       : gfx_Set(BEVEL_SHADOW , 5);
001351  001495  //       : sets the button and slider objects darken and lighten depth for the bevel colour
001352  001496  //       :
001353  001497  //       : mode = X_ORIGIN (mode 29) : set x offset for screen
001354  001498  //       : gfx_Set(X_ORIGIN , 25);  // object are offset 25 pixels from LHS
001355  001499  //       : sets the origin of drawn objects to a position other than 0,0
001356  001500  //       :
001357  001501  //       : mode = Y_ORIGIN (mode 29) : set y offset for screen
001358  001502  //       : gfx_Set(Y_ORIGIN , 30);  // object are offset 30 pixels from TOP
001359  001503  //       : sets the origin of drawn objects to a position other than 0,0
001360  001504        
001361  001505  //------------------------------------------------------------------------------
001362  001506  //gfx_Set() related constants
001363  001507  //------------------------------------------------------------------------------
001364  001508  #CONST
001365  001525  #END
001366  001526        
001367  001527        
001368  001528  func gfx_Cls(), 0;                    // clear the screen
001369  001529  // Syntax: gfx_Cls();
001370  001530  // Usage : gfx_Cls();
001371  001531  // Notes : Clears the screen with current background colour
001372  001532        
001373  001533  func gfx_MoveTo("x", "y"), 0;                // set glb_X1 and glb_Y1 to required co-ordinate
001374  001534  // Syntax: gfx_MoveTo(x, y);
001375  001535  // Usage : gfx_MoveTo(arg1, arg2);
001376  001536  // Notes : Moves the origin to a new x,y position
001377  001537        
001378  001538  func gfx_MoveRel("x", "y"), 0;                // set glb_X1 and glb_Y1 to new relative offset
001379  001539  // Syntax: gfx_MoveRel(x, y);
001380  001540  // Usage : gfx_MoveRel(arg1, arg2);
001381  001541  // Notes : Moves the origin to a new x,y position
001382  001542  //       : relative to the current origing
001383  001543        
001384  001544  func gfx_LineTo("x1", "y1"), 0;                     // draw line from current origin to new point
001385  001545  // Syntax: gfx_LineTo(x1, y1);
001386  001546  // Usage : gfx_LineTo(arg1, arg2);
001387  001547  // Notes : Draws a Line from the origin x,y to x1,y1.
001388  001548  //       : The new origin is then set to x1, y1. Line colour needs
001389  001549  //       : to be preset with "Set Object colour" using gfx_Set(mode=2, colour);
001390  001550        
001391  001551  func gfx_LineRel("x1", "y1"), 0;                    // draw line from current origin to new relative offset
001392  001552  // Syntax: gfx_LineRel(x1, y1);
001393  001553  // Usage : gfx_LineRel(arg1, arg2);
001394  001554  // Notes : Draws a Line from the origin x,y to x1,y1.
001395  001555  //       : Unlike gfx_MoveTo() the origin is not updated with x1, y1. Line colour needs
001396  001556  //       : to be preset with "Set Object colour" using gfx_Set(OBJECT_COLOUR, colour);
001397  001557        
001398  001558  func gfx_Line("x1", "y1", "x2", "y2", "colr"), 0;   // draw line, can be patterned
001399  001559  // Syntax: gfx_Line(x1, x2, y2, colr);
001400  001560  // Usage : gfx_Line(arg1, arg2, arg3, arg4, arg5);
001401  001561  // Notes : Plots a coloured Line from x1,y1 to x2,y2 on the screen
001402  001562        
001403  001563  func gfx_Hline("y", "x1", "x2", "colr"), 1;         // draw Hline, can be patterned
001404  001564  // Syntax: gfx_Line(x1, x2, y, colr);
001405  001565  // Usage : gfx_Line(arg1, arg2, arg3, arg4);
001406  001566  // Notes : Plots a coloured Horizontal line from x1,y to x2,y on the screen
001407  001567        
001408  001568  func gfx_Vline("x", "y1", "y2", "colr"), 1;         // draw Vline, can be patterned
001409  001569  // Syntax: gfx_Line(y1, y2, x, colr);
001410  001570  // Usage : gfx_Line(arg1, arg2, arg3, arg4);
001411  001571  // Notes : Plots a coloured Vertical line from x,y1 to x,y2 on the screen
001412  001572        
001413  001573  func gfx_Rectangle("x1" ,"y1", "x2", "y2", "colr"), 0;    // draw open rectangle,line can be patterned
001414  001574  // Syntax: gfx_Rectangle(x1, y1, x2, y2, colr);
001415  001575  // Usage : gfx_Rectangle(arg1, arg2, arg3, arg4, arg5);
001416  001576  // Notes : Plots a coloured Outline Rectangle from top corner (x1,y1) to
001417  001577  //       : bottom corner (x2,y2) on the screen.
001418  001578        
001419  001579  func gfx_RectangleFilled("x1","y1","x2","y2","colr"), 0;    // draw filled rectangle
001420  001580  // Syntax: gfx_Rectangle(x1, y1, x2, y2, colour);
001421  001581  // Usage : gfx_Rectangle(arg1, arg2, arg3, arg4, arg5);
001422  001582  // Notes : Plots a coloured Solid Rectangle from top corner (x1,y1) to
001423  001583  //       : bottom corner (x2,y2) on the screen.
001424  001584        
001425  001585  func gfx_Circle("x", "y", "rad", "colr"), 0;        // draw open circle
001426  001586  // Syntax: gfx_Circle(x, y, rad, colr);
001427  001587  // Usage : gfx_Circle(arg1, arg2, arg3, arg4);
001428  001588  // Notes : Plots a coloured outline Circle on the screen at centre x,y with radius = rad
001429  001589        
001430  001590  func gfx_CircleFilled("x", "y", "rad", "colr"), 0;    // draw filled circle
001431  001591  // Syntax: gfx_Circle(x, y, rad, colr);
001432  001592  // Usage : gfx_Circle(arg1, arg2, arg3, arg4);
001433  001593  // Notes : Plots a coloured Solid Circle on the screen at centre x,y with radius = rad
001434  001594        
001435  001595  func gfx_PutPixel("x", "y", "colr"), 0;            // set point at x y
001436  001596  // Syntax: gfx_PutPixel(x, y, colr);
001437  001597  // Usage : gfx_PutPixel(arg1, arg2, arg3);
001438  001598  // Notes : Plots a coloured pixel on the screen at x,y location
001439  001599        
001440  001600  func gfx_GetPixel("x", "y"), 1;                // read colour at point x y
001441  001601  // Syntax: gfx_GetPixel(x, y);
001442  001602  // Usage : var := gfx_GetPixel(arg1, arg2);
001443  001603  // Notes : Reads and returns the colour value of a pixel at location x,y
001444  001604        
001445  001605  func gfx_Triangle("x1","y1","x2","y2","x3","y3","colr"), 0; // draw an open triangle
001446  001606  // Syntax: gfx_Triangle(x1, y1, x2, y2, x3, y3, colr);
001447  001607  // Usage : gfx_Triangle(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
001448  001608  // Notes : Plots a coloured outline Triangle from between 3 vertices: x1,y1 x2,y2 x3,y3
001449  001609  //       : Vertices must be specified in an anti-clockwise fashion
001450  001610        
001451  001611  func gfx_OrbitInit("&x_orb", "&y_orb"), 0;        // set result holders for orbit command
001452  001612  // Syntax: gfx_OrbitInit(&x_orb, &y_orb);
001453  001613  // Usage : gfx_OrbitInit(&arg1, &arg2);
001454  001614  // Notes : Sets up the Orbit function parameters.
001455  001615  //       : &x_orb, &y_orb: calcualted Orbit coordiantes. These are pointers to local
001456  001616  //       : variables that get updated after calling gfx_Orbit(,,) function.
001457  001617  //       : The coordiantaes are calculated relative to the origin
001458  001618  //       : obtained by using the gfx_MoveTo(x, y) function.
001459  001619        
001460  001620  func gfx_Orbit("angle", "distance"), 0;            // calculate point at angle, distance
001461  001621  // Syntax: gfx_Orbit(angle, distance);
001462  001622  // Usage : gfx_Orbit(arg1, arg2);
001463  001623  // Notes : The Orbit function calcualtes the x, y coordinates of a distant point whose
001464  001624  //       : only known parameters are the angle and the distance from the current origin.
001465  001625        
001466  001626  func gfx_Polyline("n", "&vx", "&vy", "colr"), 0;    // draw a polyline from a table of vertices
001467  001627  // Syntax: gfx_Polyline(numbVertices, &vertices_x, &vertices_y, colour);
001468  001628  // Usage : gfx_Polyline(arg1, x[array], y[array], arg2);
001469  001629  // Notes : This function is very similar to the Ploygon function
001470  001630  //       : with the exception of the 1st and the last vertices not joined.
001471  001631        
001472  001632  func gfx_Polygon("n", "&vx", "&vy", "colr"), 0;        // draw a polygon from a table of vertices
001473  001633  // Syntax: gfx_Polygon(numbVertices, &vx, &y, colour);
001474  001634  // Usage : gfx_Polygon(arg1, x[array], y[array], arg2);
001475  001635  // Notes : Plots a coloured outline Polygon between specified vertices: x1,y1 x2,y2 .. xn,yn
001476  001636  //       : Vertices must be minimum of 3 and can be specified in any fashion
001477  001637        
001478  001638  func gfx_Dot(), 0;                    // set point at glb_X glb_Y, default colour
001479  001639  // Syntax: gfx_Dot();
001480  001640  // Usage : gfx_Dot();
001481  001641  // Notes : Places a coloured dot at the origin
001482  001642        
001483  001643        
001484  001644  func gfx_Bullet("r"), 0;                // draw circle at glb_X glb_Y, default colour
001485  001645  // Syntax: gfx_Bullet();
001486  001646  // Usage : gfx_Bullet();
001487  001647  // Notes : Places a coloured circle at the origin
001488  001648  //       : filled or unfilled state is controlled by PenSize
001489  001649        
001490  001650  func gfx_IncX(), 1;                    // increment global origin glb_X, returning new value
001491  001651  // Syntax: gfx_IncX();
001492  001652  // Usage : var := gfx_IncX();
001493  001653  // Notes : Increments the x coordinate of the origin
001494  001654        
001495  001655  func gfx_IncY(), 1;                    // increment global origin glb_Y, returning new value
001496  001656  // Syntax: gfx_IncY();
001497  001657  // Usage : var := gfx_IncY();
001498  001658  // Notes : Increments the y coordinate of the origin
001499  001659        
001500  001660  func gfx_BoxTo("x1", "y1"), 0;                // draw rectangle from current origin to x1 y1
001501  001661  // Syntax: gfx_BoxTo(x1, y1);
001502  001662  // Usage : gfx_BoxTo(arg1, arg2);
001503  001663  // Notes : Draws a Rectangle from the origin x,y to x1,y1.
001504  001664  //       : The new origin is then set to x1,y1. Rectangle colour needs
001505  001665  //       : to be preset with "Set Object colour" using gfx_Set(mode=2, colour);
001506  001666  //       : and the PenSize setting determines if Box is solid or outline.
001507  001667        
001508  001668  func gfx_ClipWindow("x1" ,"y1", "x2", "y2"), 0;         // set the cipping area
001509  001669  // Syntax: gfx_ClipWindow(x1, y1, x2, y2);
001510  001670  // Usage : gfx_ClipWindow(arg1, arg2, arg3, arg4);
001511  001671  // Notes : Specifies a clipping window region on the screen such that any objects
001512  001672  //       : and text placed onto the screen will be clipped and displayed only
001513  001673  //       : within that region. For the clipping window to take effect, "Clipping"
001514  001674  //       : must be enabled seperately using the gfx_Set(CLIPPING, ON) command.
001515  001675        
001516  001676        
001517  001677  func gfx_ChangeColour("oldcolr", "newcolr"), 0;         // change pixel colour in clipping area
001518  001678  // Syntax: gfx_ChangeColour(oldcolr, newcolr);
001519  001679  // Usage : gfx_ChangeColour(0xFF00, 0XFFFF);
001520  001680  // *Notes:
001521  001681        
001522  001682  func gfx_SetClipRegion(), 0;                            // set clipping area to the most recent extents
001523  001683  // Syntax: gfx_SetClipRegion();
001524  001684  // Usage : var := gfx_SetClipRegion();
001525  001685  // *Notes:
001526  001686        
001527  001687  func gfx_Ellipse("x", "y", "xrad", "yrad", "colour"), 0;
001528  001688  // Syntax: gfx_Ellipse(x, y, xrad, yrad, colour);
001529  001689  // Usage : gfx_Ellipse(arg1, arg2, arg3, arg4, arg5);
001530  001690  // Notes : Plots a coloured Ellipse on the screen at centre x,y
001531  001691  //       : with xradius = xrad and yradius = yrad.
001532  001692  //       : if PenSize = 0 Ellipse is Solid
001533  001693  //       : if PenSize = 1 Ellipse is Outline
001534  001694        
001535  001695        
001536  001696  func gfx_EllipseFilled("x", "y", "xrad", "yrad", "colour"), 0;
001537  001697  // Syntax: gfx_EllipseFilled(x, y, xrad, yrad, colour);
001538  001698  // Usage : gfx_EllipseFilled(arg1, arg2, arg3, arg4, arg5);
001539  001699  // Notes : Plots a coloured Ellipse on the screen at centre x,y
001540  001700  //       : with xradius = xrad and yradius = yrad.
001541  001701        
001542  001702        
001543  001703  func gfx_Button("state", "x", "y", "buttonColour", "textColour", "font", "textWidth", "textHeight", "text"), 1;
001544  001704  // Syntax: gfx_Button(mode, x, y, buttonColour, textColour, font, textWidth, textHeight, text);
001545  001705  // Usage : gfx_Button(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
001546  001706  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001547  001707  //       : x,y arguments (top left corner). The size of the button depends on
001548  001708  //       : the font, width, height and length of the text.
001549  001709  //       : The button appearance will depend on the state parameter setting:
001550  001710  //       :         state = 0 : Button Pressed
001551  001711  //       :         state = 1 : Button Raised
001552  001712  //       : The button is automatically sized, determined by text.
001553  001713        
001554  001714        
001555  001715  func gfx_Button2("state", "x", "y", "Width", "Height", "buttonColour", "textColour", "text"), 0;
001556  001716  // Syntax: gfx_Button2(mode, x, y, width, height, buttoncolour, textcolour, text);
001557  001717  // Usage : gfx_Button2(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001558  001718  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001559  001719  //       : x,y arguments (top left corner). The size of the button is defined by the width
001560  001720  //       : and height parameters. The text is centered within those bounds.
001561  001721  //       : The button appearance will depend on the state parameter setting:
001562  001722  //       :         state = 0 : Button Pressed
001563  001723  //       :         state = 1 : Button Raised
001564  001724  //       : The button has square corners.
001565  001725        
001566  001726  func gfx_Button3("state", "x", "y", "Width", "Height", "buttonColour", "textColour", "text"), 0;
001567  001727  // Syntax: gfx_Button3(mode, x, y, width, height, buttoncolour, textcolour, text);
001568  001728  // Usage : gfx_Button3(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001569  001729  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001570  001730  //       : x,y arguments (top left corner). The size of the button is defined by the width
001571  001731  //       : and height parameters. The text is centered within those bounds.
001572  001732  //       : The button appearance will depend on the state parameter setting:
001573  001733  //       :         state = 0 : Button Pressed
001574  001734  //       :         state = 1 : Button Raised
001575  001735  //       : The button has rounded corners depending upon gfx_BevelRadius.
001576  001736        
001577  001737  func gfx_CheckBox("state", "x", "y", "Width", "Height", "boxColour", "textColour", "text"), 0;
001578  001738  // Syntax: gfx_CheckBox(state, x, y, Width, Height, boxColour, textColour, text);
001579  001739  // Usage : gfx_CheckBox(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001580  001740  // Notes : Draws a CheckBox at screen location defined by x,y arguments (top left corner).
001581  001741  //       : The size of the button is defined by the width and height parameters.
001582  001742  //       : The text is to the right of the checkbox and truncated if necessary.
001583  001743  //       : The check appearance will depend on the state parameter setting:
001584  001744  //       :         state = 0 = CHECKED    : Checkbox Checked
001585  001745  //       :         state = 1 = UNCHECKED  : CheckBox Unchecked
001586  001746        
001587  001747  func gfx_RadioButton("state", "x", "y", "Width", "Height", "boxColour", "textColour", "text"), 0;
001588  001748  // Syntax: gfx_RadioButton(state, x, y, Width, Height, boxColour, textColour, text);
001589  001749  // Usage : gfx_RadioButton(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001590  001750  // Notes : Draws a RadioButton at screen location defined by x,y arguments (top left corner).
001591  001751  //       : The size of the button is defined by the width and height parameters.
001592  001752  //       : The text is to the right of the radiobutton and truncated if necessary.
001593  001753  //       : The check appearance will depend on the state parameter setting:
001594  001754  //       :         state = 0 = CHECKED    : Radiobutton Checked
001595  001755  //       :         state = 1 = UNCHECKED  : Radiobutton Unchecked
001596  001756        
001597  001757  func gfx_Slider2("mode", "x1", "y1", "width", "height", "colour", "scale", "value"), 1;
001598  001758  // Syntax: gfx_Slider2(mode, x, y, width, height, colour, scale, value);
001599  001759  // Usage : gfx_Slider(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001600  001760  // Notes : Draws a 3 dimensional Slider Bar on the screen.
001601  001761  //       : Slider parameters are as follows:
001602  001762  //       :         mode = 0 : Slider recessed
001603  001763  //       :         mode = 1 : Slider raised
001604  001764  //       :         x1, y1 = top left corner
001605  001765  //       :         x2, y2 = bottom right corner
001606  001766  //       :         scale = n : sets the full scale range from 0 to n
001607  001767  //       :         value = m : sets the relative position of the thumb 0 <= m <= n
001608  001768  //returns: scaled value of thumb position
001609  001769        
001610  001770        
001611  001771        
001612  001772        
001613  001773  func gfx_Panel("state", "x", "y", "width", "height", "colour"), 0;
001614  001774  // Syntax: gfx_Panel(style, x, y, width, height, colour);
001615  001775  // Usage : gfx_Panel(PANEL_RAISED, x, y, w, h, GRAY);
001616  001776  // Notes : Draws a panel (groupbox) at screen location defined by
001617  001777  //       : x, y, width and height with colour "colour".
001618  001778  //       :         state = 0 : sunken
001619  001779  //       :         state = 1 : raised
001620  001780  //       :         state = 2 : hide (draw object in background colour)
001621  001781  //returns: nothing
001622  001782        
001623  001783        
001624  001784        
001625  001785  func gfx_Slider("mode", "x1", "y1", "x2", "y2", "colour", "scale", "value"), 1;
001626  001786  // Syntax: gfx_Slider(mode, x1, y1, x2, y2, colour, scale, value);
001627  001787  // Usage : gfx_Slider(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001628  001788  // Notes : Draws a 3 dimensional Slider Bar on the screen.
001629  001789  //       : Slider parameters are as follows:
001630  001790  //       :         mode = 0 : Slider recessed
001631  001791  //       :         mode = 1 : Slider raised
001632  001792  //       :         x1, y1 = top left corner
001633  001793  //       :         x2, y2 = bottom right corner
001634  001794  //       :         scale = n : sets the full scale range from 0 to n
001635  001795  //       :         value = m : sets the relative position of the thumb 0 <= m <= n
001636  001796  //returns: scaled value of thumb position
001637  001797        
001638  001798        
001639  001799        
001640  001800  func gfx_ScreenCopyPaste("xs", "ys", "xd", "yd", "width", "height"), 0;
001641  001801  // Syntax: gfx_ScreenCopyPaste(xs, ys, xd, yd, width, height);
001642  001802  // Usage : gfx_ScreenCopyPaste(arg1, arg2, arg3, arg4, arg5, arg6);
001643  001803  // Notes : Copies an area of a screen from xs,ys of size given by width and height
001644  001804  //       : and pastes it to another location determined by xd, yd.
001645  001805        
001646  001806  func gfx_RGBto565("RED", "GREEN", "BLUE"), 1;
001647  001807  // Syntax: gfx_RGBto565(red, green, blue);
001648  001808  // Usage : gfx_RGBto565(arg1, arg2, arg3);
001649  001809  // Notes : Returns the 16bit (565 format) colour value of a 24bit (R,G,B format) colour
001650  001810        
001651  001811  func gfx_332to565("COLOUR8BIT"), 1;
001652  001812  // Syntax: gfx_332to565(colour);
001653  001813  // Usage : gfx_332to565(arg);
001654  001814  // Notes : Returns the 16bit (565 format) colour value of an 8 bit (332 format) colour
001655  001815        
001656  001816  func gfx_565to332("COLOUR16BIT"), 1;
001657  001817  // Syntax: gfx_565to332(colour);
001658  001818  // Usage : clor332 := gfx_565to332(arg);
001659  001819  // Notes : Returns the 8bit (332 format) colour value of an 16 bit (565 format) colour
001660  001820        
001661  001821  func gfx_TriangleFilled("x1","y1","x2","y2","x3","y3","colr"), 0; // draw a filled triangle
001662  001822  // Syntax: gfx_TriangleFilled(x1, y1, x2, y2, x3, y3, colr);
001663  001823  // Usage : gfx_TriangleFilled(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
001664  001824  // Notes : Plots a coloured Solid Triangle from between 3 vertices: x1,y1 x2,y2 x3,y3
001665  001825  //       : Vertices must be specified in an anti-clockwise fashion
001666  001826        
001667  001827        
001668  001828  func gfx_PolygonFilled("n", "&vx", "&vy", "colr"), 0;        // draw a filled polygon from a table of vertices
001669  001829  // Syntax: gfx_PolygonFilled(numbVertices, &vx, &y, colour);
001670  001830  // Usage : gfx_PolygonFilled(arg1, x[array], y[array], arg2);
001671  001831  // Notes : Plots a solid Polygon between specified vertices: x1,y1 x2,y2 .. xn,yn
001672  001832  //       : Vertices must be minimum of 3 and can be specified in any fashion
001673  001833        
001674  001834        
001675  001835  func gfx_Origin("x", "y"), 0;            // set relative screen offset for graphics objects
001676  001836  // Syntax: gfx_Offset(x, y);
001677  001837  // Usage : gfx_Offset(arg1, arg2);
001678  001838  // Notes : Set the screen offset
001679  001839        
001680  001840        
001681  001841        
001682  001842  func gfx_FillPattern("patptr", "mode"), 1;
001683  001843  // Syntax  : gfx_FillPattern(patternpointer);
001684  001844  // Usage   : gfx_FillPattern(PTN_BRICKS);
001685  001845  //         : Provides graphics fill pattern, (8 linear bytes, 1=pixel off)
001686  001846  // Notes   : "patptr" points to an 8x8 tile for rendering filled areas.
001687  001847  //         : Rendering is turned off with gfx_FillPattern(0);
001688  001848  //         : or gfx_FillPattern(OFF);
001689  001849  //         : "mode" maybe TRANSPARENT or OPAQUE (0 or 1), for OPAQUE
001690  001850  //         : mode, the current screen colour is used for the 'off'
001691  001851  //         : pixels, for transparent mode, the 'off' pixels are not drawn.
001692  001852  //         : gfx_FillPattern affects all filled object, including polygons.
001693  001853  //         : There are 32 builtin patterns, these are obtained using the
001694  001854  //         : pre-defined constants FILLPATTERN_0 to FILLPATTERN_31, or the
001695  001855  //         : names, eg PTN_BRICKS, PTN_CARGONET, PTN_CIRCUITS, etc.
001696  001856  //         : Note that the constants range from 0xFFE0 to 0xFFFF, any
001697  001857  //         : other value is assumed to be a pointer to a users 8 byte
001698  001858  //         : block pattern.
001699  001859  // Returns : returns the handle of the previous pattern.
001700  001860        
001701  001861        
001702  001862  func gfx_PieSlice("cx", "cy", "spread", "radius", "step", "startangle", "endangle", "mode", "colour"), 0;
001703  001863  // Syntax  : gfx_PieSlice(cx, cy, spread, radius, step, startangle, endangle, mode, colour);
001704  001864  // Usage   : gfx_PieSlice(120, 120, 0, 100, 8, 75, 145, 0, YELLOW);
001705  001865  // Notes   : Draws a 'pie slice' (filled arc) at "cx":"cy" with radius "radius", starting at "startangle"
001706  001866  //         : and ending at "endangle". "spread" is used to offset the centrepoint of the pieslice
001707  001867  //         : to shift a pie chart piece away from the centrepoint.
001708  001868  //         : Rendering can be obtained with gfx_FillPattern(PATTRN);
001709  001869  //         : or gfx_FillPattern(OFF); for no fill pattern.
001710  001870  //         : Step is the stepping angle increment for the fineness of the pie Slice.
001711  001871  //         : "mode" has the following effect
001712  001872  //         :   if mode = 0, no outline
001713  001873  //         :   if mode = 1, outer circumference line (using current object colour)
001714  001874  //         :   if mode = 2, outer circumference and slice lines ( (using current object colour)
001715  001875  // Returns : nothing.
001716  001876        
001717  001877        
001718  001878  func gfx_Arc("xc", "yc", "radius", "step", "startangle", "endangle", "mode"), 0;
001719  001879  // Syntax  : gfx_Arc(cx, cy, radius, step, startangle, endangle, mode);
001720  001880  // Usage   : gfx_Arc(120, 120, 0, 100, 8, 75, 145, 0);
001721  001881  // Notes   : Draws an arc at "cx":"cy" with radius "radius", starting at "startangle"
001722  001882  //         : and ending at "endangle". Colour is determined by curent object colour.
001723  001883  //         : Step is the stepping angle increment for the fineness of the arc.
001724  001884  //         : "mode" has the following effect
001725  001885  //         :   if mode = 0, outer circumference line only
001726  001886  //         :   if mode = 1, outer circumference and lines back to cy:cy
001727  001887  // Returns : nothing.
001728  001888        
001729  001889        
001730  001890  func gfx_RoundRect("x1", "y1", "x2", "y2", "rad", "color"), 0;
001731  001891  // Syntax  : gfx_RoundRect(x1, y1, x2, y2, radius, colour);
001732  001892  // Usage   : gfx_RoundRect(120, 120, 160, 160, 8, GRAY); // draw a tab like object
001733  001893  // Notes   : Draws a filled rectangle at the given co-ordinates with rounded corners
001734  001894  //         : determined by "radius".
001735  001895  //         : Bounding rectangle is x1-rad, y1-rad, x2+rad, y2+rad.
001736  001896  // Returns : nothing.
001737  001897        
001738  001898        
001739  001899  func gfx_Surround("x1", "y1", "x2", "y2", "rad1", "rad2", "color"), 0;
001740  001900  // Syntax  : gfx_Surround(x1, y1, x2, y2, radius1, radius1, colour);
001741  001901  // Usage   : gfx_Surround(120, 120, 160, 160, 8, 0, GRAY); // rounded surround frame
001742  001902  // Notes   : Draws a outline rectangle at the given co-ordinates with rounded corners
001743  001903  //         : determined by "radius1". "radius2" sets the radius of the outer rounded rectangle.
001744  001904  //         : If "radius1" is zero, the inner rectangle will have square corners.
001745  001905  //         : Bounding rectangle is x1-rad1-rad2, y1-rad1-rad2, x2+rad1+rad2, y2+rad1+rad2.
001746  001906  // Returns : nothing.
001747  001907        
001748  001908        
001749  001909  func gfx_RoundPanel("state", "x", "y", "width", "height", "radius", "bevelwidth", "colour"), 0;
001750  001910  // Syntax  : gfx_RoundPanel(style, x, y, width, height, radius, bevelwidth, colour);
001751  001911  // Usage   : gfx_RoundPanel(PANEL_RAISED, 100, 100, 30, 20, GRAY);
001752  001912  // Notes   : Draws a rounded panel at x, y, width and height may be zero allowing the function
001753  001913  //         : to be used for rounded panels, rounded buttons, circular buttons.
001754  001914  //         :         state = 0 : sunken
001755  001915  //         :         state = 1 : raised
001756  001916  //         :         state = 2 : hide (draw object in background colour)
001757  001917  //         : Bounding rectangle is x1-radius-bevelwidth, y1-radius-bevelwidth, x2+radius+bevelwidth, y2+radius+bevelwidth.
001758  001918  // Returns : nothing.
001759  001919        
001760  001920        
001761  001921  func gfx_Gradient("style", "left", "top", "right", "bottom", "color1", "color2"), 0;
001762  001922  // Syntax  : gfx_Gradient(style, x1, y1, x2, y2, colr1, colr2);
001763  001923  // Usage   : gfx_Gradient(GRAD_WAVE_VER, 100, 100, 230, 120, BLACK, WHITE);
001764  001924  // Notes   : Draws a graduated colour rectangle at the specified co-ordinate.
001765  001925  //         : "style" specifies the drawing mode
001766  001926  //         :     GRAD_DOWN         // gradient changes in the vertical direction
001767  001927  //         :     GRAD_RIGHT        // gradient change in the horizontal direction
001768  001928  //         :     GRAD_UP           // gradient changes in the vertical direction
001769  001929  //         :     GRAD_LEFT         // gradient change in the horizontal direction
001770  001930  //         :     GRAD_WAVE_VER     // gradient wave in the vertical direction
001771  001931  //         :     GRAD_WAVE_HOR     // gradient wave in the horizontal direction
001772  001932  // Returns : nothing.
001773  001933        
001774  001934        
001775  001935  func gfx_RoundGradient("style", "left", "top", "right", "bottom", "radius", "color1", "color2"), 0;
001776  001936  // Syntax  : gfx_Gradient(style, x1, y1, x2, y2, radius, colr1, colr2);
001777  001937  // Usage   : gfx_Gradient(GRAD_WAVE_VER, 100, 100, 230, 120, BLACK, WHITE);
001778  001938  // Notes   : Draws a graduated colour rounded rectangle at the specified co-ordinate.
001779  001939  //         : X1 may equal X2, and Y1 = Y2 allowing allowing the function
001780  001940  //         : to be used for rounded panels, rounded buttons, circular buttons.
001781  001941  //         : "style" specifies the drawing mode
001782  001942  //         :     GRAD_DOWN         // gradient changes in the vertical direction
001783  001943  //         :     GRAD_RIGHT        // gradient change in the horizontal direction
001784  001944  //         :     GRAD_UP           // gradient changes in the vertical direction
001785  001945  //         :     GRAD_LEFT         // gradient change in the horizontal direction
001786  001946  //         :     GRAD_WAVE_VER     // gradient wave in the vertical direction
001787  001947  //         :     GRAD_WAVE_HOR     // gradient wave in the horizontal direction
001788  001948  //         : Bounding rectangle is x1-radius, y1-radius, x2+radius, y2+radius.
001789  001949  // Returns : nothing.
001790  001950        
001791  001951        
001792  001952  func gfx_ReadBresLine("x1", "y1", "x2", "y2", "ptr"), 1;
001793  001953  // Syntax  : gfx_readBrezLine(x1, y1, x2, y2, ptr);
001794  001954  // Usage   : anArrayPtr := gfx_readBrezLine(10, 10, 50, 50, 0);  // read arbitrary line to array, let the function make the array for me
001795  001955  // Notes   : reads an arbitrary line from the display to an array.
001796  001956  //         : If "ptr" is 0, the correctly sized array is created, in which case
001797  001957  //         : it is up to the caller to eventually destroy it. Otherwise "ptr"
001798  001958  //         : is expected to point to a correctly sized array.
001799  001959  //         : NB if an array is supplied, its size must be large enough, and may
001800  001960  //         : be calculated:-
001801  001961  //         : bytecount := (MAX(ABS(x2-x1), ABS(y2-y1) + 1) * 2; // calc array size for mem_Alloc (which allocates byte storage)
001802  001962  //         : wordcount := (MAX(ABS(x2-x1), ABS(y2-y1) + 1);     // calc array size for fixed word array
001803  001963  // Returns : A pointer to the created aray, or the users array.
001804  001964  //         : In the case of ptr=0, if there is insufficient
001805  001965  //         : memory to create the array, zero is returned
001806  001966        
001807  001967        
001808  001968  func gfx_WriteBresLine("x1", "y1", "x2", "y2", "ptr"), 0;
001809  001969  // Syntax  : gfx_writeBrezLine(x1, y1, x2, y2, ptr), 0;
001810  001970  // Usage   : gfx_writeBrezLine(20, 20, 50, 50, anArrayPtr);   // write an array back to the arbitrary line
001811  001971  // Notes   : cast pixel values from array to arbitrary line "x1", "y1", "x2", "y2"
001812  001972  //         : "ptr" points to the array to be written.
001813  001973  // Returns : nothing
001814  001974        
001815  001975        
001816  001976  func gfx_ReadGRAMarea("x1", "y1", "x2", "y2", "ptr"), 1;
001817  001977  // Syntax  : gfx_ReadGRAMarea(x1, y1, x2, y2, ptr);
001818  001978  // Usage   : anArrayPtr := gfx_ReadGRAMarea(10, 10, 50, 50, 0);  // read rectangular area to array, let the function make the array for me
001819  001979  // Notes   : reads an arbitrary rectangular area from the display to an array.
001820  001980  //         : If "ptr" is 0, the correctly sized array is created, in which case
001821  001981  //         : it is up to the caller to eventually destroy it. Otherwise "ptr"
001822  001982  //         : is expected to point to a correctly sized array.
001823  001983  //         : NB if an array is supplied, its size must be large enough, and may
001824  001984  //         : be calculated:-
001825  001985  //         : bytecount := ( (ABS(x2-x1)+1) * (ABS(y2-y1) + 1)) * 2;     // calc array size for mem_Alloc (which allocates byte storage)
001826  001986  //         : wordcount := ( (ABS(x2-x1)+1) *  ABS(y2-y1);             // calc array size for fixed word array
001827  001987  // Returns : A pointer to the created aray, or the users array.
001828  001988  //         : In the case of ptr=0, if there is insufficient
001829  001989  //         : memory to create the array, zero is returned
001830  001990        
001831  001991        
001832  001992  func gfx_WriteGRAMarea("x1", "y1", "x2", "y2", "ptr"), 0;
001833  001993  // Syntax  : gfx_WriteGRAMarea(x1, y1, x2, y2, ptr), 0;
001834  001994  // Usage   : gfx_WriteGRAMarea(20, 20, 50, 50, anArrayPtr);   // write an array back to the rectangular area
001835  001995  // Notes   : "ptr" points to the array to be written.
001836  001996  // Returns : nothing
001837  001997        
001838  001998        
001839  001999  func gfx_Get("mode"), 1;
001840  002000  // Syntax: gfx_Get(mode);
001841  002001  // Usage : arg1 := gfx_Get(arg);
001842  002002  // Notes : Returns various parameters to caller
001843  002003  //       :
001844  002004  //       : mode = X_MAX (mode 0) : current orientations maximum X value
001845  002005  //       : var := gfx_Get(X_MAX);
001846  002006  //       : Returns the maximum horizontal value of the display
001847  002007  //       :
001848  002008  //       : mode = Y_MAX (mode 1) : Vcurrent orientations maximum Y value
001849  002009  //       : var := gfx_Get(Y_MAX);
001850  002010  //       : Returns the maximum vertical value of the display
001851  002011  //       :
001852  002012  //       : mode = LEFT_POS (mode 2) : Left location of last Object
001853  002013  //       : var := gfx_Get(LEFT_POS);
001854  002014  //       : Returns the left location of the last drawn object
001855  002015  //       : such as a slider or button or an image/video
001856  002016  //       :
001857  002017  //       : mode = TOP_POS (mode 3) : Top location of Object
001858  002018  //       : var := gfx_Get(TOP_POS);
001859  002019  //       : Returns the top location of the last drawn object
001860  002020  //       : such as a slider or button or an image/video
001861  002021  //       :
001862  002022  //       : mode = RIGHT_POS (mode 4) : Right location of last Object
001863  002023  //       : var := gfx_Get(RIGHT_POS);
001864  002024  //       : Returns the right location of the last drawn object
001865  002025  //       : such as a slider or button or an image/video
001866  002026  //       :
001867  002027  //       : mode = BOTTOM_POS  (mode 5) : Bottom location of Object
001868  002028  //       : var := gfx_Get(BOTTOM_POS );
001869  002029  //       : Returns the bottom location of the last drawn object
001870  002030  //       : such as a slider or button or an image/video
001871  002031  //       :
001872  002032  //       : mode = X_ORG (mode 6) : get current internal X position
001873  002033  //       : var := gfx_Get(X_ORG);
001874  002034  //       : Returns the internal X position that was set with
001875  002035  //       : gfx_MoveTo(x, y); or gfx_Set(X_ORG, pos);
001876  002036  //       :
001877  002037  //       : mode = Y_ORG (mode 7) : get current internal Y position
001878  002038  //       : var := gfx_Get(Y_ORG);
001879  002039  //       : Returns the internal X position that was set with
001880  002040  //       : gfx_MoveTo(x, y); or gfx_Set(Y_ORG, pos);
001881  002041  //       :
001882  002042        
001883  002043        
001884  002044  //------------------------------------------------------------------//
001885  002045  // Single parameter short-cuts                                      //
001886  002046  // for the gfx_Set functions                                        //
001887  002047  // These functions return the existing value before                 //
001888  002048  // the change is made.                                              //
001889  002049  //------------------------------------------------------------------//
001890  002050  func gfx_PenSize("mode"), 1;                        // 0  graphics pen size, SOLD or OUTLINE
001891  002051  func gfx_BGcolour("colour"), 1;                     // 1  graphics background colour
001892  002052  func gfx_ObjectColour("colour"), 1;                 // 2  graphics object colour
001893  002053  func gfx_Clipping("mode"), 1;                       // 3  graphics clipping ON/OFF
001894  002054  func gfx_TransparentColour("colour"), 1;            // 4  graphics image transparent mask colour
001895  002055  func gfx_Transparency("mode"), 1;                   // 5  graphics image transparent mode ON/OFF
001896  002056  func gfx_FrameDelay("milliseconds"), 1;             // 6  graphics animation frame delay
001897  002057  func gfx_ScreenMode("mode"), 1;                     // 7  graphics orientation LANDSCAPE, LANDSCAPE_R, PORTRAIT, PORTRAIT_R
001898  002058  func gfx_OutlineColour("colour"), 1;                // 8  graphics rectangle/circle outline colour
001899  002059  func gfx_Contrast("value"), 1;                      // 9  graphics hardware value 0 to 9, 0=off, 1=lowest, 8=highest (only for AMOLED devices)
001900  002060  func gfx_LinePattern("value"), 1;                   // 10 graphics line draw tesselation pattern (16 linear bits, 1=pixel off)
001901  002061  func gfx_BevelRadius("radius"), 1;                  // 11 graphics button bevel radius
001902  002062  func gfx_BevelWidth("value"), 1;                    // 12 graphics button bevel width
001903  002063  func gfx_BevelShadow("value"), 1;                   // 13 graphics button bevel shadow depth
001904  002064  func gfx_Xorigin("offset"), 1;                      // 14 graphics  X origin
001905  002065  func gfx_Yorigin("offset"), 1;                      // 15 graphics  Y origin
001906  002066        
001907  002067        
001908  002068  func gfx_PointWithinBox("x", "y", "&rectr"), 1;
001909  002069  // Syntax   : gfx_PointWithinBox(x, y, rect);
001910  002070  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=20; r[3]:=30;
001911  002071  //          : result := gfx_PointWithinBox(x, y, r); // check area at 100,200,119,229
001912  002072  // Notes    : rect is an array of 4 vars, x1, y1, width, height - using width co-ordinates
001913  002073  // returns  : Returns true if last touch co-ordinates are within the box test area.
001914  002074        
001915  002075        
001916  002076  func gfx_PointWithinRectangle("x", "y", "&recta"), 1;
001917  002077  // Syntax   : gfx_PointWithinRectangle(x, y, recta);
001918  002078  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=119; r[3]:=129;
001919  002079  //          : result := gfx_PointWithinRectangle(x, y, r); // check if point within area at 100,200,119,229
001920  002080  // Notes    : rect is an array of 4 vars, x1, y1, x2, y2 using absolute co-ordinates
001921  002081  // returns  : Returns true if x:y co-ordinates are within the rectangle test area.
001922  002082        
001923  002083        
001924  002084  func __reserved17(), 0; // do not remove
001925  002085  func __reserved18(), 0; // do not remove
001926  002086  func __reserved19(), 0; // do not remove
001927  002087  func __reserved20(), 0; // do not remove
001928  002088  func __reserved21(), 0; // do not remove
001929  002089  func __reserved22(), 0; // do not remove
001930  002090        
001931  002091        
001932  002092  // built in fill pattern constants for function gfx_FillPattern
001933  002093  #CONST
001934  002126  #END
001935  002127        
001936  002128  #CONST
001937  002161  #END
001938  002162        
001939  002163  //------------------------------------------------------------------//
001940  002164  //     gradient control constants                                   //
001941  002165  //------------------------------------------------------------------//
001942  002166  #constant GRAD_DOWN         0x20    // gradient changes in the vertical direction
001943  002166  #constant GRAD_DOWN         0x20    // gradient changes in the vertical direction
001944  002167  #constant GRAD_RIGHT        0x30    // gradient change in the horizontal direction
001945  002167  #constant GRAD_RIGHT        0x30    // gradient change in the horizontal direction
001946  002168  #constant GRAD_UP           0x40    // gradient changes in the vertical direction
001947  002168  #constant GRAD_UP           0x40    // gradient changes in the vertical direction
001948  002169  #constant GRAD_LEFT         0x50    // gradient change in the horizontal direction
001949  002169  #constant GRAD_LEFT         0x50    // gradient change in the horizontal direction
001950  002170  #constant GRAD_WAVE_VER     0x60    // gradient wave in the vertical direction
001951  002170  #constant GRAD_WAVE_VER     0x60    // gradient wave in the vertical direction
001952  002171  #constant GRAD_WAVE_HOR     0x70    // gradient wave in the horizontal direction
001953  002171  #constant GRAD_WAVE_HOR     0x70    // gradient wave in the horizontal direction
001954  002172        
001955  002173        
001956  002174        
001957  002175        
001958  002176  //------------------------------------------------------------------//
001959  002177  // uSD/FLASH Function Prototypes                                    //
001960  002178  //------------------------------------------------------------------//
001961  002179  func media_Video("x", "y"), 0;                      // display movie at position x y
001962  002180  // Syntax: media_Video(x, y);
001963  002181  // Usage : media_Video(arg1, arg2);
001964  002182  // Notes : Play a Video/Animation clip from the uSD card at screen location
001965  002183  //       : specified by x,y (top left corner). The location of the clip in the
001966  002184  //       : uSD card must be specified by media_setSector(Video_Sector_Add) function.
001967  002185        
001968  002186  func media_VideoFrame("x", "y","framenumber"), 0;   // display required frame from a movie at x y
001969  002187  // Syntax: media_VideoFrame(Frame_number);
001970  002188  // Usage : arg1 := media_VideoFrame();
001971  002189  // Notes : After a pointer to a valid video has been set with media_SetSector,
001972  002190  //       : calling this function shows each fram sequentially, returning
001973  002191  //       : the number of frames remaining. The position of the image is
001974  002192  //     : at the current origin as set with gfx_MoveTo(...);
001975  002193        
001976  002194  func media_SetAdd("HiWord", "LoWord"), 0;           // set stream byte address
001977  002195  // Syntax: media_SetAdd(AddHiWord, AddLoWord);
001978  002196  // Usage : media_SetAdd(arg1, arg2);
001979  002197  // Notes : Set uSD internal Address pointer for bytewise access
001980  002198        
001981  002199  func media_SetSector("HiWord", "LoWord"), 0;        // set stream sector address
001982  002200  // Syntax: media_SetSector(SectHiWord, SectLoWord);
001983  002201  // Usage : media_SetSector(arg1, arg2);
001984  002202  // Notes : Set uSD internal Sector pointer for sector block access
001985  002203        
001986  002204  func media_RdSector("*destination"), 1;
001987  002205  // Syntax: media_RdSector(*destination);
001988  002206  // Usage : media_RdSector(rdblock);
001989  002207  // Notes : Reads and Returns 512 bytes (256 words) into a destination
001990  002208  //       : block (eg rdblock[256]) pointed to by the internal Sector pointer.
001991  002209  //       : After the read the Sector pointer is automatically incremented by 1.
001992  002210  //       : Returns TRUE if uSD response was TRUE
001993  002211        
001994  002212  func media_WrSector("*source"), 1;
001995  002213  // Syntax: media_WrSector(*source);
001996  002214  // Usage : media_WrSector(wrblock);
001997  002215  // Notes : Writes 512 bytes (256 words) from a source memory block
001998  002216  //       : (eg wrblock[256]) into the uSD card. After the write the Sector
001999  002217  //       : pointer is automatically incremented by 1.
002000  002218  //       : Returns TRUE if uSD response was TRUE
002001  002219        
002002  002220  func media_ReadByte(), 1;                // read a byte at the current stream position
002003  002221  // Syntax: media_RdByte();
002004  002222  // Usage : var := media_RdByte();
002005  002223  // Notes : Reads and Returns a single byte of data from the
002006  002224  //       : uSD card pointed to by the internal Address pointer.
002007  002225  //       : After the read the Address pointer is automatically
002008  002226  //       : incremented by 1.
002009  002227        
002010  002228  func media_ReadWord(), 1;                // read a word at the current stream position
002011  002229  // Syntax: media_ReadWord();
002012  002230  // Usage : var := media_ReadWord();
002013  002231  // *Notes : Reads and Returns a single word of data from the
002014  002232  //       : uSD card pointed to by the internal Address pointer.
002015  002233  //       : After the read the Address pointer is automatically
002016  002234  //       : incremented by 2.
002017  002235        
002018  002236  func media_WriteByte("byte"), 1;              // write a byte to the current stream position
002019  002237  // Syntax: media_WriteByte(arg1);
002020  002238  // Usage : var := media_WriteByte(arg1);
002021  002239  // *Notes : Writes and Returns xxxxx
002022  002240  //       : After the write the Address pointer is automatically
002023  002241  //       : incremented by 1.
002024  002242        
002025  002243  func media_WriteWord("word"), 1;            // write a word to the current stream position
002026  002244  // Syntax: media_WriteWord(arg1);
002027  002245  // Usage : var := media_WriteWord(arg1);
002028  002246  // *Notes : Writes and Returns xxxxx
002029  002247  //       : After the write the Address pointer is automatically
002030  002248  //       : incremented by 2.
002031  002249        
002032  002250  func media_Image("x", "y"), 0;            // display image at position x y
002033  002251  // Syntax: media_Image(x, y);
002034  002252  // Usage : media_Image(arg1, arg2);
002035  002253  // Notes : Display an image from the uSD card at screen location
002036  002254  //       : specified by x,y (top left corner). The location of the
002037  002255  //       : Image in the uSD card must be specified by
002038  002256  //       : media_setSector(Image_Sector_Add) function.
002039  002257        
002040  002258  func media_Flush(), 1;                    // after writing to media, flush the sector and write
002041  002259  // Syntax: media_Flush();
002042  002260  // Usage : var := media_Flush();
002043  002261  // *Notes : After writing any data to a sector, media_Flush() should be called to ensure that the current sector that
002044  002262  //       : is being written is correctly stored back to the media else write operations may be unpredictable.
002045  002263        
002046  002264  func media_Init(), 1;                    // initialize uSD card
002047  002265  // Usage : media_Init();
002048  002266  // Notes : Initialise uSD CARD
002049  002267  //       : Response: 0 = No Card
002050  002268  //       :           1 = Card Initialised
002051  002269        
002052  002270  func __reserved23(), 0; // do not remove
002053  002271  func __reserved24(), 0; // do not remove
002054  002272  func __reserved25(), 0; // do not remove
002055  002273  func __reserved26(), 0; // do not remove
002056  002274        
002057  002275  //==============================================//
002058  002276  // Communications Function Prototypes           //
002059  002277  // NB Primary COM port has fixed pins,          //
002060  002278  // COM1, COM2 and COM3 must have pins assigned. //
002061  002279  //==============================================//
002062  002280  func setbaud("baudnum"), 0;            // set baud rate of COM0
002063  002281  // Syntax: setbaud(baud_number);
002064  002282  // Usage : setbaud(BAUD_128000);        //Set baud rate to 128000bps
002065  002283  // *Notes : argument specifies the baud rate using pre-defined constant.
002066  002284  //       : The pre-defined constant is a value of 0-19 , and internally
002067  002285  //       : this is used as a table pointer to get the baud rate divisor
002068  002286  //       : value for one of the 20 selected baud rates, control is then
002069  002287  //       : passed to com_SetBaud(COM0, baudlookup[baud_number]);
002070  002288  //       : The pre-defined constants equate to a value of 0-19.
002071  002289  //       : If a value other than 0-19 is used, a run time error (eror 25)
002072  002290  //       : will occur.
002073  002291        
002074  002292  // baud divisor rates for legacy setbaud(n);
002075  002293  #CONST
002076  002315  #END
002077  002316        
002078  002317        
002079  002318  func com_SetBaud("comport","baudrate/10"), 1;
002080  002319  // Syntax: com_SetBaud("comport","baudrate/10");
002081  002320  // Usage : com_SetBaud(COM1, 960);   // set COM1 to 9600 baud
002082  002321  // Notes : sets to any viable baud rate from 160 to 655350
002083  002322  // return true if baud rate was acceptable
002084  002323        
002085  002324        
002086  002325  func COM1_RX_pin("pin"), 1;        // select the hardware pin for the COM1 receive line
002087  002326  // Usage : COM1_RX_pin(PA0); // set COM1 RX to PA0 pin
002088  002327  // Notes : Selects the hardware pin for COM1 receive line.
002089  002328  //       : Note that only a single pin can be mapped to COM1 RX.
002090  002329  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002091  002330  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002092  002331  //       : If the pin argument is 0 the function has no effect
002093  002332  //       : The pin is automatically set to an input.
002094  002333  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002095  002334  //       : it is necessary to configure the input pin first, eg
002096  002335  //       :     COM1_RX_pin(PA7);     // configure COM1 RX to PA7 (this disconnects anything else)
002097  002336  //       :     COM1_TX_pin(PA7));    // configure COM1 TX to PA7
002098  002337  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002099  002338        
002100  002339  func COM2_RX_pin("pin"), 1;        // select the hardware pin for the COM2 receive line
002101  002340  // Usage : COM2_RX_pin(PA0); // set COM2 RX to PA0 pin
002102  002341  // Notes : Selects the hardware pin for COM2 receive line.
002103  002342  //       : Note that only a single pin can be mapped to COM2 RX.
002104  002343  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002105  002344  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002106  002345  //       : If the pin argument is 0 the function has no effect
002107  002346  //       : The pin is automatically set to an input.
002108  002347  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002109  002348  //       : it is necessary to configure the input pin first, eg
002110  002349  //       :     COM2_RX_pin(PA7);     // configure COM2 RX to PA7 (this disconnects anything else)
002111  002350  //       :     COM2_TX_pin(PA7));    // configure COM2 TX to PA7
002112  002351  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002113  002352        
002114  002353  func COM3_RX_pin("pin"), 1;        // select the hardware pin for the COM3 receive line
002115  002354  // Usage : COM3_RX_pin(PA0); // set COM3 RX to PA0 pin
002116  002355  // Notes : Selects the hardware pin for COM3 receive line.
002117  002356  //       : Note that only a single pin can be mapped to COM3 RX.
002118  002357  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002119  002358  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002120  002359  //       : If the pin argument is 0 the function has no effect
002121  002360  //       : The pin is automatically set to an input.
002122  002361  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002123  002362  //       : it is necessary to configure the input pin first, eg
002124  002363  //       :     COM3_RX_pin(PA7);     // configure COM3 RX to PA7 (this disconnects anything else)
002125  002364  //       :     COM3_TX_pin(PA7));    // configure COM3 TX to PA7
002126  002365  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002127  002366        
002128  002367        
002129  002368  func COM1_TX_pin("pin"), 1;        // select the hardware pin for COM1 transmit line
002130  002369  // Syntax: COM1_TX_pin(pin);
002131  002370  // Usage : COM1_TX_pin(PA2); // set COM1 TX to PA2 pin
002132  002371  // Notes : Select the hardware pin for COMx transmit line.
002133  002372  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002134  002373  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002135  002374  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002136  002375  //       : The pin is automatically set to an output.
002137  002376  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002138  002377        
002139  002378  func COM2_TX_pin("pin"), 1;        // select the hardware pin for COM2 transmit line
002140  002379  // Syntax: COM2_TX_pin(pin);
002141  002380  // Usage : COM2_TX_pin(PA2); // set COM2 TX to PA2 pin
002142  002381  // Notes : Select the hardware pin for COMx transmit line.
002143  002382  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002144  002383  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002145  002384  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002146  002385  //       : The pin is automatically set to an output.
002147  002386  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002148  002387        
002149  002388  func COM3_TX_pin("pin"), 1;        // select the hardware pin for COM3 transmit line
002150  002389  // Syntax: COM3_TX_pin(pin);
002151  002390  // Usage : COM3_TX_pin(PA2); // set COM3 TX to PA2 pin
002152  002391  // Notes : Select the hardware pin for COMx transmit line.
002153  002392  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002154  002393  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002155  002394  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002156  002395  //       : The pin is automatically set to an output.
002157  002396  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002158  002397        
002159  002398  func com_Init("buf","bufsize","qualifier"), 0;  // set up a interrupt driven ring buffer for comms
002160  002399  // Syntax: com_Init(buffer, bufsize, qualifier);
002161  002400  // Usage1: com_Init(mybuf, 20, 0);
002162  002401  // Usage2: com_Init(mybuf, 20, ':');
002163  002402  // Notes : initialize a serial capture buffer for the comms input
002164  002403  //       : The program must declare a var array as a circular buffer.
002165  002404  //       : Usage1 declares a circular buffer which will continually
002166  002405  //       : buffer characters.
002167  002406  //       : Usage2 must receive ':' before any characters will
002168  002407  //       : accumulate in the buffer.
002169  002408        
002170  002409  func com1_Init("buf","bufsize","qualifier"), 0;
002171  002410  // Syntax: com1_Init(buffer, bufsize, qualifier);
002172  002411  // Usage1: com1_Init(mybuf, 20, 0);
002173  002412  // Usage2: com1_Init(mybuf, 20, ':');
002174  002413  // Notes : initialize a serial capture buffer for the comms input
002175  002414  //       : The program must declare a var array as a circular buffer.
002176  002415  //       : Usage1 declares a circular buffer which will continually
002177  002416  //       : buffer characters.
002178  002417  //       : Usage2 must receive ':' before any characters will
002179  002418  //       : accumulate in the buffer.
002180  002419        
002181  002420  func com2_Init("buf","bufsize","qualifier"), 0;
002182  002421  // Syntax: com2_Init(buffer, bufsize, qualifier);
002183  002422  // Usage1: com2_Init(mybuf, 20, 0);
002184  002423  // Usage2: com2_Init(mybuf, 20, ':');
002185  002424  // Notes : initialize a serial capture buffer for the comms input
002186  002425  //       : The program must declare a var array as a circular buffer.
002187  002426  //       : Usage1 declares a circular buffer which will continually
002188  002427  //       : buffer characters.
002189  002428  //       : Usage2 must receive ':' before any characters will
002190  002429  //       : accumulate in the buffer.
002191  002430        
002192  002431  func com3_Init("buf","bufsize","qualifier"), 0;
002193  002432  // Syntax: com3_Init(buffer, bufsize, qualifier);
002194  002433  // Usage1: com3_Init(mybuf, 20, 0);
002195  002434  // Usage2: com3_Init(mybuf, 20, ':');
002196  002435  // Notes : initialize a serial capture buffer for the comms input
002197  002436  //       : The program must declare a var array as a circular buffer.
002198  002437  //       : Usage1 declares a circular buffer which will continually
002199  002438  //       : buffer characters.
002200  002439  //       : Usage2 must receive ':' before any characters will
002201  002440  //       : accumulate in the buffer.
002202  002441        
002203  002442        
002204  002443  func serin(), 1;                // read a byte from primary com port COM0
002205  002444  // Syntax: serin();
002206  002445  // Usage : char := serin();
002207  002446  // Notes : Receives a character from the Serial Port COM0. The transmission format is:
002208  002447  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002209  002448  //     : The default Baud Rate for COM0 is 115,200 bits per second or 115,200 baud.
002210  002449  //     : The baud rate can be changed under program control by using the setbaud(...)
002211  002450  //     : or the com_SetBaud(...) function.
002212  002451  //     : COM0 pins cannot be mapped, and are fixed as pins 42 and 33 (host adaptor / programming)
002213  002452  //     : serin may be buffered (refer to com_Init function above)
002214  002453  //     : Returns: -1 if no character is available
002215  002454  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002216  002455  //     : Returns: positive value 0 to 255 for a valid character received
002217  002456        
002218  002457  func serin1(), 1;
002219  002458  // Syntax: serinx();
002220  002459  // Usage : char := serinx();
002221  002460  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002222  002461  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002223  002462  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002224  002463  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002225  002464  //     : serinx may be buffered (refer to comx_Init function above)
002226  002465  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002227  002466  //     : Returns: -1 if no character is available
002228  002467  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002229  002468  //     : Returns: positive value 0 to 255 for a valid character received
002230  002469        
002231  002470  func serin2(), 1;
002232  002471  // Syntax: serinx();
002233  002472  // Usage : char := serinx();
002234  002473  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002235  002474  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002236  002475  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002237  002476  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002238  002477  //     : serinx may be buffered (refer to comx_Init function above)
002239  002478  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002240  002479  //     : Returns: -1 if no character is available
002241  002480  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002242  002481  //     : Returns: positive value 0 to 255 for a valid character received
002243  002482        
002244  002483  func serin3(), 1;
002245  002484  // Syntax: serinx();
002246  002485  // Usage : char := serinx();
002247  002486  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002248  002487  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002249  002488  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002250  002489  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002251  002490  //     : serinx may be buffered (refer to comx_Init function above)
002252  002491  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002253  002492  //     : Returns: -1 if no character is available
002254  002493  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002255  002494  //     : Returns: positive value 0 to 255 for a valid character received
002256  002495        
002257  002496  func serout("char"), 0;                // write a byte to COM0
002258  002497  // Syntax: serout1("char");
002259  002498  // Usage : serout1(ch);
002260  002499  // Notes : send character to COM0
002261  002500        
002262  002501  func serout1("char"), 0;
002263  002502  // Syntax: seroutx("char");
002264  002503  // Usage : serout1(ch);
002265  002504  // Notes : send character to COMx
002266  002505        
002267  002506  func serout2("char"), 0;
002268  002507  // Syntax: seroutx("char");
002269  002508  // Usage : serout1(ch);
002270  002509  // Notes : send character to COMx
002271  002510        
002272  002511  func serout3("char"), 0;
002273  002512  // Syntax: seroutx("char");
002274  002513  // Usage : serout1(ch);
002275  002514  // Notes : send character to COMx
002276  002515        
002277  002516  func com_Reset(), 0;                 // reset the comms receiver
002278  002517  // Syntax: com_Reset();
002279  002518  // Usage : com_Reset();
002280  002519  // Notes : reset comms to default polled mode
002281  002520        
002282  002521  func com1_Reset(), 0;
002283  002522  // Syntax: com_Reset();
002284  002523  // Usage : com_Reset();
002285  002524  // Notes : reset comms to default polled mode
002286  002525        
002287  002526  func com2_Reset(), 0;
002288  002527  // Syntax: com_Reset();
002289  002528  // Usage : com_Reset();
002290  002529  // Notes : reset comms to default polled mode
002291  002530        
002292  002531  func com3_Reset(), 0;
002293  002532  // Syntax: com_Reset();
002294  002533  // Usage : com_Reset();
002295  002534  // Notes : reset comms to default polled mode
002296  002535        
002297  002536  func com_Count(), 1;                // return count of characters in receive buffer
002298  002537  // Syntax: com_Count();
002299  002538  // Usage : arg := com_Count();
002300  002539  // Notes : return count of buffered characters in buffer attachment
002301  002540        
002302  002541  func com1_Count(), 1;
002303  002542  // Syntax: com_Count();
002304  002543  // Usage : arg := com_Count();
002305  002544  // Notes : return count of buffered characters in buffer attachment
002306  002545        
002307  002546  func com2_Count(), 1;
002308  002547  // Syntax: com_Count();
002309  002548  // Usage : arg := com_Count();
002310  002549  // Notes : return count of buffered characters in buffer attachment
002311  002550        
002312  002551  func com3_Count(), 1;
002313  002552  // Syntax: com_Count();
002314  002553  // Usage : arg := com_Count();
002315  002554  // Notes : return count of buffered characters in buffer attachment
002316  002555        
002317  002556  func com_Full(), 1;                // return TRUE if receiver buffer filled to capcity
002318  002557  // Syntax: com_Full();
002319  002558  // Usage : if (com_Full() ,,,, go read buffer;
002320  002559  // Notes : return true if buffer full (not necessarily an error if
002321  002560  //       : buffer is sized to a packet size)
002322  002561        
002323  002562  func com1_Full(), 1;
002324  002563  // Syntax: com_Full();
002325  002564  // Usage : if (com_Full() ,,,, go read buffer;
002326  002565  // Notes : return true if buffer full (not necessarily an error if
002327  002566  //       : buffer is sized to a packet size)
002328  002567        
002329  002568  func com2_Full(), 1;
002330  002569  // Syntax: com_Full();
002331  002570  // Usage : if (com_Full() ,,,, go read buffer;
002332  002571  // Notes : return true if buffer full (not necessarily an error if
002333  002572  //       : buffer is sized to a packet size)
002334  002573        
002335  002574  func com3_Full(), 1;
002336  002575  // Syntax: com_Full();
002337  002576  // Usage : if (com_Full() ,,,, go read buffer;
002338  002577  // Notes : return true if buffer full (not necessarily an error if
002339  002578  //       : buffer is sized to a packet size)
002340  002579        
002341  002580  func com_Error(), 1;                // return comms errors comms error occurred
002342  002581  // Syntax: comx_Error();
002343  002582  // Usage : if (com_Error() ) ...... take recovery action;
002344  002583  // Notes : return non zero if any errors low level comms errors occured
002345  002584  // returns :
002346  002585  // bit0 = Receiver Overflow Error
002347  002586  // bit1 = Receiver Framing Error
002348  002587  // bit2 = Transmit Buffer Overflow
002349  002588        
002350  002589  func com1_Error(), 1;
002351  002590  // Syntax: comx_Error();
002352  002591  // Usage : if (com_Error() ) ...... take recovery action;
002353  002592  // Notes : return non zero if any errors low level comms errors occured
002354  002593  // returns :
002355  002594  // bit0 = Receiver Overflow Error
002356  002595  // bit1 = Receiver Framing Error
002357  002596  // bit2 = Transmit Buffer Overflow
002358  002597        
002359  002598  func com2_Error(), 1;
002360  002599  // Syntax: comx_Error();
002361  002600  // Usage : if (com_Error() ) ...... take recovery action;
002362  002601  // Notes : return non zero if any errors low level comms errors occured
002363  002602  // returns :
002364  002603  // bit0 = Receiver Overflow Error
002365  002604  // bit1 = Receiver Framing Error
002366  002605  // bit2 = Transmit Buffer Overflow
002367  002606        
002368  002607  func com3_Error(), 1;
002369  002608  // Syntax: comx_Error();
002370  002609  // Usage : if (com_Error() ) ...... take recovery action;
002371  002610  // Notes : return non zero if any errors low level comms errors occured
002372  002611  // returns :
002373  002612  // bit0 = Receiver Overflow Error
002374  002613  // bit1 = Receiver Framing Error
002375  002614  // bit2 = Transmit Buffer Overflow
002376  002615        
002377  002616  func com_Sync(), 1;                // returns TRUE if qualifier has been received
002378  002617  // Usage : comx_Sync();
002379  002618  // return true if sync character has been received in com_Init("...") mode
002380  002619        
002381  002620  func com1_Sync(), 1;
002382  002621  // Usage : comx_Sync();
002383  002622  // return true if sync character has been received in com_Init("...") mode
002384  002623        
002385  002624  func com2_Sync(), 1;
002386  002625  // Usage : comx_Sync();
002387  002626  // return true if sync character has been received in com_Init("...") mode
002388  002627        
002389  002628  func com3_Sync(), 1;
002390  002629  // Usage : comx_Sync();
002391  002630  // return true if sync character has been received in com_Init("...") mode
002392  002631        
002393  002632        
002394  002633  func com_TXbuffer("buf", "bufsize", "pin"), 0;    // sets the buffer location for buffered transmission
002395  002634  // Usage : com_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002396  002635  // Usage : com_TXbuffer(0, 0, 0);             // revert to non buffered service
002397  002636  // Notes : initialize a serial buffer for the COM0 output.
002398  002637  //       : The program must declare a var array as a circular buffer.
002399  002638  //       : When a TX buffer is declared for comms, the transmission
002400  002639  //       : of characters becomes non blocking. If the buffer has
002401  002640  //       : insufficient space to accept the next character from a
002402  002641  //       : serout_x() function, the excess characters will be ignored,
002403  002642  //       : and the com_Full_x() error will be asserted.   If the
002404  002643  //       : TX buffer is no longer required, just set the buffer pointer
002405  002644  //       : to zero, the size in this case doesnt matter and is ignored.
002406  002645  //       : The function can resize or reallocated to another buffer at
002407  002646  //       : any time. The buffer is flushed before any changes are made.
002408  002647  //       : "pin" designates an IO pin to control a bi-directional
002409  002648  //       : control device for half duplex mode. "pin" will go HI at the
002410  002649  //       : start of a transmission, and will return low after the final
002411  002650  //       : byte is transmitted. If not required, just set "pin" to zero.
002412  002651        
002413  002652  func com1_TXbuffer("buf", "bufsize", "pin"), 0;
002414  002653  // Usage : com1_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002415  002654  // Usage : com1_TXbuffer(0, 0, 0);              // revert to non buffered service
002416  002655  // Notes : initialize a serial buffer for the COM0 output.
002417  002656  //       : The program must declare a var array as a circular buffer.
002418  002657  //       : When a TX buffer is declared for comms, the transmission
002419  002658  //       : of characters becomes non blocking. If the buffer has
002420  002659  //       : insufficient space to accept the next character from a
002421  002660  //       : serout_x() function, the excess characters will be ignored,
002422  002661  //       : and the com_Full_x() error will be asserted.   If the
002423  002662  //       : TX buffer is no longer required, just set the buffer pointer
002424  002663  //       : to zero, the size in this case doesnt matter and is ignored.
002425  002664  //       : The function can resize or reallocated to another buffer at
002426  002665  //       : any time. The buffer is flushed before any changes are made.
002427  002666  //       : "pin" designates an IO pin to control a bi-directional
002428  002667  //       : control device for half duplex mode. "pin" will go HI at the
002429  002668  //       : start of a transmission, and will return low after the final
002430  002669  //       : byte is transmitted. If not required, just set "pin" to zero.
002431  002670        
002432  002671  func com2_TXbuffer("buf", "bufsize", "pin"), 0;
002433  002672  // Usage : com2_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002434  002673  // Usage : com2_TXbuffer(0, 0, 0);              // revert to non buffered service
002435  002674  // Notes : initialize a serial buffer for the COM0 output.
002436  002675  //       : The program must declare a var array as a circular buffer.
002437  002676  //       : When a TX buffer is declared for comms, the transmission
002438  002677  //       : of characters becomes non blocking. If the buffer has
002439  002678  //       : insufficient space to accept the next character from a
002440  002679  //       : serout_x() function, the excess characters will be ignored,
002441  002680  //       : and the com_Full_x() error will be asserted.   If the
002442  002681  //       : TX buffer is no longer required, just set the buffer pointer
002443  002682  //       : to zero, the size in this case doesnt matter and is ignored.
002444  002683  //       : The function can resize or reallocated to another buffer at
002445  002684  //       : any time. The buffer is flushed before any changes are made.
002446  002685  //       : "pin" designates an IO pin to control a bi-directional
002447  002686  //       : control device for half duplex mode. "pin" will go HI at the
002448  002687  //       : start of a transmission, and will return low after the final
002449  002688  //       : byte is transmitted. If not required, just set "pin" to zero.
002450  002689        
002451  002690  func com3_TXbuffer("buf", "bufsize", "pin"), 0;
002452  002691  // Usage : com3_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002453  002692  // Usage : com3_TXbuffer(0, 0, 0);              // revert to non buffered service
002454  002693  // Notes : initialize a serial buffer for the COM0 output.
002455  002694  //       : The program must declare a var array as a circular buffer.
002456  002695  //       : When a TX buffer is declared for comms, the transmission
002457  002696  //       : of characters becomes non blocking. If the buffer has
002458  002697  //       : insufficient space to accept the next character from a
002459  002698  //       : serout_x() function, the excess characters will be ignored,
002460  002699  //       : and the com_Full_x() error will be asserted.   If the
002461  002700  //       : TX buffer is no longer required, just set the buffer pointer
002462  002701  //       : to zero, the size in this case doesnt matter and is ignored.
002463  002702  //       : The function can resize or reallocated to another buffer at
002464  002703  //       : any time. The buffer is flushed before any changes are made.
002465  002704  //       : "pin" designates an IO pin to control a bi-directional
002466  002705  //       : control device for half duplex mode. "pin" will go HI at the
002467  002706  //       : start of a transmission, and will return low after the final
002468  002707  //       : byte is transmitted. If not required, just set "pin" to zero.
002469  002708        
002470  002709        
002471  002710  func com_TXcount(), 1;                // return count of characters in COM0 TX buffer
002472  002711  // Syntax: com_TXcount();
002473  002712  // Usage : arg := com_Count();
002474  002713  // Notes : return count of characters remaining in COM0 transmit buffer
002475  002714  //       : that was previously allocated with com_TXbuffer(...);
002476  002715        
002477  002716  func com1_TXcount(), 1;
002478  002717  // Syntax: com_TXcount();
002479  002718  // Usage : arg := com_Count();
002480  002719  // Notes : return count of characters remaining in COM0 transmit buffer
002481  002720  //       : that was previously allocated with com_TXbuffer(...);
002482  002721        
002483  002722  func com2_TXcount(), 1;
002484  002723  // Syntax: com_TXcount();
002485  002724  // Usage : arg := com_Count();
002486  002725  // Notes : return count of characters remaining in COM0 transmit buffer
002487  002726  //       : that was previously allocated with com_TXbuffer(...);
002488  002727        
002489  002728  func com3_TXcount(), 1;
002490  002729  // Syntax: com_TXcount();
002491  002730  // Usage : arg := com_Count();
002492  002731  // Notes : return count of characters remaining in COM0 transmit buffer
002493  002732  //       : that was previously allocated with com_TXbuffer(...);
002494  002733        
002495  002734  func com_TXemptyEvent("function"), 1;  // sets a function to be called when COM0 TX buffer empty
002496  002735  // Usage : arg := com_TXemptyEvent();
002497  002736  // Notes : If a comms TX buffer that was previously allocated with
002498  002737  //       : com_TXbuffer(...);, this function can be used to set up
002499  002738  //       : a function to be called when the COM0 TX buffer is empty.
002500  002739  //       : This is useful for either reloading the TX buffer, setting
002501  002740  //       : or clearing a pin to change the direction of eg a RS485
002502  002741  //       : line driver, or any other form of traffic control.
002503  002742  //       : The event function must not have any parameters.
002504  002743  //       : To disable the event, simply call com_TXemptyEvent(0).
002505  002744  //       : com_TXbuffer(...); also resets any active event.
002506  002745  //       : com_TXemptyEvent returns any previous event function
002507  002746  //       : address, or zero if there was no previous function.
002508  002747        
002509  002748  func com1_TXemptyEvent("function"), 1;
002510  002749  // Usage : arg := com1_TXemptyEvent();
002511  002750  // Notes : If a comms TX buffer that was previously allocated with
002512  002751  //       : com_TXbuffer(...);, this function can be used to set up
002513  002752  //       : a function to be called when the COM0 TX buffer is empty.
002514  002753  //       : This is useful for either reloading the TX buffer, setting
002515  002754  //       : or clearing a pin to change the direction of eg a RS485
002516  002755  //       : line driver, or any other form of traffic control.
002517  002756  //       : The event function must not have any parameters.
002518  002757  //       : To disable the event, simply call com_TXemptyEvent(0).
002519  002758  //       : com_TXbuffer(...); also resets any active event.
002520  002759  //       : com_TXemptyEvent returns any previous event function
002521  002760  //       : address, or zero if there was no previous function.
002522  002761        
002523  002762  func com2_TXemptyEvent("function"), 1;
002524  002763  // Usage : arg := com2_TXemptyEvent();
002525  002764  // Notes : If a comms TX buffer that was previously allocated with
002526  002765  //       : com_TXbuffer(...);, this function can be used to set up
002527  002766  //       : a function to be called when the COM0 TX buffer is empty.
002528  002767  //       : This is useful for either reloading the TX buffer, setting
002529  002768  //       : or clearing a pin to change the direction of eg a RS485
002530  002769  //       : line driver, or any other form of traffic control.
002531  002770  //       : The event function must not have any parameters.
002532  002771  //       : To disable the event, simply call com_TXemptyEvent(0).
002533  002772  //       : com_TXbuffer(...); also resets any active event.
002534  002773  //       : com_TXemptyEvent returns any previous event function
002535  002774  //       : address, or zero if there was no previous function.
002536  002775        
002537  002776  func com3_TXemptyEvent("function"), 1;
002538  002777  // Usage : arg := com3_TXemptyEvent();
002539  002778  // Notes : If a comms TX buffer that was previously allocated with
002540  002779  //       : com_TXbuffer(...);, this function can be used to set up
002541  002780  //       : a function to be called when the COM0 TX buffer is empty.
002542  002781  //       : This is useful for either reloading the TX buffer, setting
002543  002782  //       : or clearing a pin to change the direction of eg a RS485
002544  002783  //       : line driver, or any other form of traffic control.
002545  002784  //       : The event function must not have any parameters.
002546  002785  //       : To disable the event, simply call com_TXemptyEvent(0).
002547  002786  //       : com_TXbuffer(...); also resets any active event.
002548  002787  //       : com_TXemptyEvent returns any previous event function
002549  002788  //       : address, or zero if there was no previous function.
002550  002789        
002551  002790  func com_TXbufferHold("state"), 1; // hold or release a com_TXbuffer
002552  002791  // Usage : arg := com_TXbufferHold(OFF);  // start sending the buffer
002553  002792  // Notes : Expecting that a comms TX buffer that was previously allocated with
002554  002793  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002555  002794  //       : the buffer being sent wile it is being loaded. Mormally, when
002556  002795  //       : using buffered comms, the transmit process will begin
002557  002796  //       : immediately. This is often undesirable for 2 reasons,
002558  002797  //       : 1] you may wish to build a packet then send it later
002559  002798  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002560  002799  //       : as the FIFO buffer is constantly trying to empty while
002561  002800  //       : you are busy tring to fill it.
002562  002801  // return -1 if function is called illegally when TX comms is not buffered.
002563  002802  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002564  002803  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002565  002804        
002566  002805  func com1_TXbufferHold("state"), 1;
002567  002806  // Usage : arg := com1_TXbufferHold(OFF);  // start sending the buffer
002568  002807  // Notes : Expecting that a comms TX buffer that was previously allocated with
002569  002808  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002570  002809  //       : the buffer being sent wile it is being loaded. Mormally, when
002571  002810  //       : using buffered comms, the transmit process will begin
002572  002811  //       : immediately. This is often undesirable for 2 reasons,
002573  002812  //       : 1] you may wish to build a packet then send it later
002574  002813  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002575  002814  //       : as the FIFO buffer is constantly trying to empty while
002576  002815  //       : you are busy tring to fill it.
002577  002816  // return -1 if function is called illegally when TX comms is not buffered.
002578  002817  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002579  002818  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002580  002819        
002581  002820  func com2_TXbufferHold("state"), 1;
002582  002821  // Usage : arg := com2_TXbufferHold(OFF);  // start sending the buffer
002583  002822  // Notes : Expecting that a comms TX buffer that was previously allocated with
002584  002823  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002585  002824  //       : the buffer being sent wile it is being loaded. Mormally, when
002586  002825  //       : using buffered comms, the transmit process will begin
002587  002826  //       : immediately. This is often undesirable for 2 reasons,
002588  002827  //       : 1] you may wish to build a packet then send it later
002589  002828  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002590  002829  //       : as the FIFO buffer is constantly trying to empty while
002591  002830  //       : you are busy tring to fill it.
002592  002831  // return -1 if function is called illegally when TX comms is not buffered.
002593  002832  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002594  002833  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002595  002834        
002596  002835  func com3_TXbufferHold("state"), 1;
002597  002836  // Usage : arg := com3_TXbufferHold(OFF);  // start sending the buffer
002598  002837  // Notes : Expecting that a comms TX buffer that was previously allocated with
002599  002838  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002600  002839  //       : the buffer being sent wile it is being loaded. Mormally, when
002601  002840  //       : using buffered comms, the transmit process will begin
002602  002841  //       : immediately. This is often undesirable for 2 reasons,
002603  002842  //       : 1] you may wish to build a packet then send it later
002604  002843  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002605  002844  //       : as the FIFO buffer is constantly trying to empty while
002606  002845  //       : you are busy tring to fill it.
002607  002846  // return -1 if function is called illegally when TX comms is not buffered.
002608  002847  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002609  002848  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002610  002849        
002611  002850  func com_Mode("8" ,"N", "1", "comport"), 1 ;
002612  002851  // Syntax   : comx_Mode("databits", "parity", "Stopbits", "comport");
002613  002852  // Usage    : comx_Mode(8, 'N', 1, COM0);                        // set COM0 to 8N1
002614  002853  // *Notes   : Data Bits must be 8
002615  002854  //          : Parity may be 'N', 'O' or 'E'.
002616  002855  //          : Stop Bits may be 1 or 2.
002617  002856  // returns true if mode was acceptable
002618  002857        
002619  002858  func com_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
002620  002859  // Syntax   : com_TXblock("buf", "bufsize");
002621  002860  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
002622  002861  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
002623  002862  //          : if a transmit buffer is active and space is available this function will return almost
002624  002863  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
002625  002864        
002626  002865  func com_RXblock("buf", "bufsize"), 0;                       // commence a block reception
002627  002866  // Syntax   : com_RXblock("buf", "bufsize");
002628  002867  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
002629  002868  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
002630  002869  //          : if a receive buffer is active and bufsize characters are available this function will return almost
002631  002870  //          : immediately otherwise it will block until until the required bytes are received.
002632  002871        
002633  002872  func __reserved30(), 0; // do not remove
002634  002873        
002635  002874  //------------------------------------------------------------------//
002636  002875  //        Function Prototypes for I2C
002637  002876  //------------------------------------------------------------------//
002638  002877  func I2C1_Open("speed", "SCLpin", "SDApin"), 1;
002639  002878  // Syntax : I2C1_Openx(speed, SCLpin, SDApin),
002640  002879  // Usage  : I2C1_Open(I2C_MED, PA2, PA3);
002641  002880  // Notes  : configures the required I2C module
002642  002881  //        : see 'I2C timing related constants' and 'pin constants'
002643  002882  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002644  002883  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002645  002884  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002646  002885  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002647  002886  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002648  002887  // Returns: True if successful
002649  002888        
002650  002889        
002651  002890  func I2C2_Open("speed", "SCLpin", "SDApin"), 1;
002652  002891  // Syntax : I2C2_Openx(speed, SCLpin, SDApin),
002653  002892  // Usage  : I2C2_Open(I2C_MED, PA2, PA3);
002654  002893  // Notes  : configures the required I2C module
002655  002894  //        : see 'I2C timing related constants' and 'pin constants'
002656  002895  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002657  002896  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002658  002897  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002659  002898  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002660  002899  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002661  002900  // Returns: True if successful
002662  002901        
002663  002902        
002664  002903  func I2C3_Open("speed", "SCLpin", "SDApin"), 1;
002665  002904  // Syntax : I2C3_Openx(speed, SCLpin, SDApin),
002666  002905  // Usage  : I2C3_Open(I2C_MED, PA2, PA3);
002667  002906  // Notes  : configures the required I2C module
002668  002907  //        : see 'I2C timing related constants' and 'pin constants'
002669  002908  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002670  002909  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002671  002910  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002672  002911  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002673  002912  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002674  002913  // Returns: True if successful
002675  002914        
002676  002915        
002677  002916  func I2C1_Close(), 0;
002678  002917  // Usage : I2C1_Close();
002679  002918  // Notes : disables the I2C1 module.
002680  002919        
002681  002920  func I2C2_Close(), 0;
002682  002921  // Usage : I2C2_Close();
002683  002922  // Notes : disables the I2C2 module.
002684  002923        
002685  002924  func I2C3_Close(), 0;
002686  002925  // Usage : I2C3_Close();
002687  002926  // Notes : disables the I2C3 module.
002688  002927        
002689  002928  func I2C1_Start(), 1;
002690  002929  // Syntax: I2C1_Start();
002691  002930  // Usage : I2C1_Start();
002692  002931  // Notes : generates a Start condition.
002693  002932  //       : returns true if successful (usually ignored)
002694  002933        
002695  002934  func I2C2_Start(), 1;
002696  002935  // Syntax: I2C2_Start();
002697  002936  // Usage : I2C2_Start();
002698  002937  // Notes : generates a Start condition.
002699  002938  //       : returns true if successful (usually ignored)
002700  002939        
002701  002940  func I2C3_Start(), 1;
002702  002941  // Syntax: I2C3_Start();
002703  002942  // Usage : I2C3_Start();
002704  002943  // Notes : generates a Start condition.
002705  002944  //       : returns true if successful (usually ignored)
002706  002945        
002707  002946  func I2C1_Stop(), 1;
002708  002947  // Syntax: I2C1_Stop();
002709  002948  // Usage : I2C1_Stop();
002710  002949  // Notes : generates a Stop condition.
002711  002950  //       : returns true if successful (usually ignored)
002712  002951        
002713  002952  func I2C2_Stop(), 1;
002714  002953  // Syntax: I2C2_Stop();
002715  002954  // Usage : I2C2_Stop();
002716  002955  // Notes : generates a Stop condition.
002717  002956  //       : returns true if successful (usually ignored)
002718  002957        
002719  002958  func I2C3_Stop(), 1;
002720  002959  // Syntax: I2C3_Stop();
002721  002960  // Usage : I2C3_Stop();
002722  002961  // Notes : generates a Stop condition.
002723  002962  //       : returns true if successful (usually ignored)
002724  002963        
002725  002964  func I2C1_Restart(), 1;
002726  002965  // Syntax: I2C1_Restart();
002727  002966  // Usage : I2C1_Restart();
002728  002967  // Notes : generates a Restart condition.
002729  002968  //       : returns true if successful (usually ignored)
002730  002969        
002731  002970  func I2C2_Restart(), 1;
002732  002971  // Syntax: I2C2_Restart();
002733  002972  // Usage : I2C2_Restart();
002734  002973  // Notes : generates a Restart condition.
002735  002974  //       : returns true if successful (usually ignored)
002736  002975        
002737  002976  func I2C3_Restart(), 1;
002738  002977  // Syntax: I2C3_Restart();
002739  002978  // Usage : I2C3_Restart();
002740  002979  // Notes : generates a Restart condition.
002741  002980  //       : returns true if successful (usually ignored)
002742  002981        
002743  002982  func I2C1_Read(), 1;
002744  002983  // Syntax: I2C1_Read();
002745  002984  // Usage : ch := I2C1_Read();
002746  002985  // Notes : reads a single byte from the I2C Bus.
002747  002986        
002748  002987  func I2C2_Read(), 1;
002749  002988  // Syntax: I2C2_Read();
002750  002989  // Usage : ch := I2C2_Read();
002751  002990  // Notes : reads a single byte from the I2C Bus.
002752  002991        
002753  002992  func I2C3_Read(), 1;
002754  002993  // Syntax: I2C3_Read();
002755  002994  // Usage : ch := I2C3_Read();
002756  002995  // Notes : reads a single byte from the I2C Bus.
002757  002996        
002758  002997  func I2C1_Write("byte"), 1;
002759  002998  // Syntax: I2C1_Write(byte);
002760  002999  // Usage : r := I2C1_Write(ch);
002761  003000  // Notes : is used to write a byte to the I2C bus.
002762  003001  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002763  003002        
002764  003003  func I2C2_Write("byte"), 1;
002765  003004  // Syntax: I2C2_Write(byte);
002766  003005  // Usage : r := I2C2_Write(ch);
002767  003006  // Notes : is used to write a byte to the I2C bus.
002768  003007  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002769  003008        
002770  003009  func I2C3_Write("byte"), 1;
002771  003010  // Syntax: I2C3_Write(byte);
002772  003011  // Usage : r := I2C3_Write(ch);
002773  003012  // Notes : is used to write a byte to the I2C bus.
002774  003013  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002775  003014        
002776  003015  func I2C1_Ack(), 0;
002777  003016  // Syntax: I2C1_Ack();
002778  003017  // Usage : I2C1_Ack();
002779  003018  // Notes : generates the acknowledge condition.
002780  003019        
002781  003020  func I2C2_Ack(), 0;
002782  003021  // Syntax: I2C2_Ack();
002783  003022  // Usage : I2C2_Ack();
002784  003023  // Notes : generates the acknowledge condition.
002785  003024        
002786  003025  func I2C3_Ack(), 0;
002787  003026  // Syntax: I2C3_Ack();
002788  003027  // Usage : I2C3_Ack();
002789  003028  // Notes : generates the acknowledge condition.
002790  003029        
002791  003030  func I2C1_Nack(), 0;
002792  003031  // Syntax: I2C1_Nack();
002793  003032  // Usage : I2C1_Nack();
002794  003033  // Notes : generates the negative acknowledge condition.
002795  003034        
002796  003035  func I2C2_Nack(), 0;
002797  003036  // Syntax: I2C2_Nack();
002798  003037  // Usage : I2C2_Nack();
002799  003038  // Notes : generates the negative acknowledge condition.
002800  003039        
002801  003040  func I2C3_Nack(), 0;
002802  003041  // Syntax: I2C3_Nack();
002803  003042  // Usage : I2C3_Nack();
002804  003043  // Notes : generates the negative acknowledge condition.
002805  003044        
002806  003045  func I2C1_AckStatus(), 1;
002807  003046  // Syntax: I2C1_AckStatus();
002808  003047  // Usage : r := I2C1_AckStatus();
002809  003048  // Notes : returns the ACK status from the device.
002810  003049        
002811  003050  func I2C2_AckStatus(), 1;
002812  003051  // Syntax: I2C2_AckStatus();
002813  003052  // Usage : r := I2C2_AckStatus();
002814  003053  // Notes : returns the ACK status from the device.
002815  003054        
002816  003055  func I2C3_AckStatus(), 1;
002817  003056  // Syntax: I2C3_AckStatus();
002818  003057  // Usage : r := I2C3_AckStatus();
002819  003058  // Notes : returns the ACK status from the device.
002820  003059        
002821  003060  func I2C1_AckPoll("control"), 1;
002822  003061  // Syntax: I2C1_AckPoll();
002823  003062  // Usage : r := I2C1_AckPoll(0xA0);
002824  003063  // Notes : waits for a device to return from ACK polling.
002825  003064        
002826  003065  func I2C2_AckPoll("control"), 1;
002827  003066  // Syntax: I2C2_AckPoll();
002828  003067  // Usage : r := I2C2_AckPoll(0xA0);
002829  003068  // Notes : waits for a device to return from ACK polling.
002830  003069        
002831  003070  func I2C3_AckPoll("control"), 1;
002832  003071  // Syntax: I2C3_AckPoll();
002833  003072  // Usage : r := I2C3_AckPoll(0xA0);
002834  003073  // Notes : waits for a device to return from ACK polling.
002835  003074        
002836  003075  func I2C1_Idle(), 1;
002837  003076  // Syntax : I2C1_Idle();
002838  003077  // Usage  : r := I2C1_Idle();
002839  003078  // Notes  : waits until the I2C Bus is Inactive.
002840  003079  //        : Times out if bus not idle within 1 second
002841  003080  // Returns: TRUE if successful, else failed (timed out)
002842  003081        
002843  003082  func I2C2_Idle(), 1;
002844  003083  // Syntax : I2C2_Idle();
002845  003084  // Usage  : r := I2C2_Idle();
002846  003085  // Notes  : waits until the I2C Bus is Inactive.
002847  003086  //        : Times out if bus not idle within 1 second
002848  003087  // Returns: TRUE if successful, else failed (timed out)
002849  003088        
002850  003089  func I2C3_Idle(), 1;
002851  003090  // Syntax : I2C3_Idle();
002852  003091  // Usage  : r := I2C3_Idle();
002853  003092  // Notes  : waits until the I2C Bus is Inactive.
002854  003093  //        : Times out if bus not idle within 1 second
002855  003094  // Returns: TRUE if successful, else failed (timed out)
002856  003095        
002857  003096        
002858  003097  func I2C1_Gets("buffer", "size"), 1;
002859  003098  // Syntax: I2C1_Gets("buffer", "size");
002860  003099  // Usage : r := I2C1_Gets(mybuf, 16);
002861  003100  // Notes : only reads up to "size" characters into "buffer"
002862  003101  //       : Reads up to asciiz terminator including terminator
002863  003102        
002864  003103  func I2C2_Gets("buffer", "size"), 1;
002865  003104  // Syntax: I2C2_Gets("buffer", "size");
002866  003105  // Usage : r := I2C2_Gets(mybuf, 16);
002867  003106  // Notes : only reads up to "size" characters into "buffer"
002868  003107  //       : Reads up to asciiz terminator including terminator
002869  003108        
002870  003109  func I2C3_Gets("buffer", "size"), 1;
002871  003110  // Syntax: I2C3_Gets("buffer", "size");
002872  003111  // Usage : r := I2C3_Gets(mybuf, 16);
002873  003112  // Notes : only reads up to "size" characters into "buffer"
002874  003113  //       : Reads up to asciiz terminator including terminator
002875  003114        
002876  003115  func I2C1_Getn("buffer", "size"), 1;
002877  003116  // Syntax: I2C1_Gets("buffer", "size");
002878  003117  // Usage : r := I2C1_Gets(mybuf, 16);
002879  003118  // Notes : reads "size" bytes into "buffer"
002880  003119  //       :
002881  003120        
002882  003121  func I2C2_Getn("buffer", "size"), 1;
002883  003122  // Syntax: I2C2_Gets("buffer", "size");
002884  003123  // Usage : r := I2C2_Gets(mybuf, 16);
002885  003124  // Notes : reads "size" bytes into "buffer"
002886  003125  //       :
002887  003126        
002888  003127  func I2C3_Getn("buffer", "size"), 1;
002889  003128  // Syntax: I2C3_Gets("buffer", "size");
002890  003129  // Usage : r := I2C3_Gets(mybuf, 16);
002891  003130  // Notes : reads "size" bytes into "buffer"
002892  003131  //       :
002893  003132        
002894  003133  func I2C1_Puts("buffer"), 1;
002895  003134  // Syntax: I2C1_Puts("buffer");
002896  003135  // Usage : r := I2C1_Puts(mybuf);
002897  003136  // Notes : writes an asciiz string to the I2C device
002898  003137  //       : returns count of characters written
002899  003138        
002900  003139  func I2C2_Puts("buffer"), 1;
002901  003140  // Syntax: I2C2_Puts("buffer");
002902  003141  // Usage : r := I2C2_Puts(mybuf);
002903  003142  // Notes : writes an asciiz string to the I2C device
002904  003143  //       : returns count of characters written
002905  003144        
002906  003145  func I2C3_Puts("buffer"), 1;
002907  003146  // Syntax: I2C3_Puts("buffer");
002908  003147  // Usage : r := I2C3_Puts(mybuf);
002909  003148  // Notes : writes an asciiz string to the I2C device
002910  003149  //       : returns count of characters written
002911  003150        
002912  003151  func I2C1_Putn("buffer", "count"), 1;
002913  003152  // Syntax: I2C1_Putn("buffer","count");
002914  003153  // Usage : r := I2C1_Puts(mybuf,10);
002915  003154  // Notes : writes up to "size" bytes to the I2C device
002916  003155  //       : returns number of bytes written
002917  003156        
002918  003157  func I2C2_Putn("buffer", "count"), 1;
002919  003158  // Syntax: I2C2_Putn("buffer","count");
002920  003159  // Usage : r := I2C2_Puts(mybuf,10);
002921  003160  // Notes : writes up to "size" bytes to the I2C device
002922  003161  //       : returns number of bytes written
002923  003162        
002924  003163  func I2C3_Putn("buffer", "count"), 1;
002925  003164  // Syntax: I2C3_Putn("buffer","count");
002926  003165  // Usage : r := I2C3_Puts(mybuf,10);
002927  003166  // Notes : writes up to "size" bytes to the I2C device
002928  003167  //       : returns number of bytes written
002929  003168        
002930  003169        
002931  003170  func spi_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002932  003171  // Syntax   : spi_ReadBlock("buf", "bufsize");
002933  003172  // Usage    : spi_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002934  003173  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002935  003174        
002936  003175  func spi1_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002937  003176  // Syntax   : spi1_ReadBlock("buf", "bufsize");
002938  003177  // Usage    : spi1_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002939  003178  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002940  003179        
002941  003180  func spi2_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002942  003181  // Syntax   : spi2_ReadBlock("buf", "bufsize");
002943  003182  // Usage    : spi2_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002944  003183  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002945  003184        
002946  003185  func spi3_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002947  003186  // Syntax   : spi3_ReadBlock("buf", "bufsize");
002948  003187  // Usage    : spi3_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002949  003188  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002950  003189        
002951  003190  // I2C timing related constants
002952  003191  #CONST
002953  003199  #END
002954  003200        
002955  003201        
002956  003202        
002957  003203  //------------------------------------------------------------------//
002958  003204  // Direct uSD (SPI0) card SPI functions                             //
002959  003205  //------------------------------------------------------------------//
002960  003206  func spi_Init("speed","ip_mode","op_mode"), 0;  // set the SPI port, not used if uSD active
002961  003207  func spi_Read(), 1;                             // read a raw byte from SPI (lowers CS)
002962  003208  func spi_Write("byte"), 0;                      // write a raw byte to SPI (lowers CS)
002963  003209  func spi_Disable(), 0;                          // disable SPI reading or writing (raise CS)
002964  003210                                                  //
002965  003211        
002966  003212  //------------------------------------------------------------------//
002967  003213  // Function prototypes for SPI1, SPI2 and SPI3                      //
002968  003214  //------------------------------------------------------------------//
002969  003215  func SPI1_SDO_pin("pin"), 1;                // select the hardware pin for SPI1 transmit line
002970  003216  // Syntax: SPI_SDO_pin(pin);
002971  003217  // Usage : SPI_SDO_pin(PA1); // set SPI SDO to PA1 pin
002972  003218  // Notes : Select the hardware pin for SPIx transmit line.
002973  003219  //       : Note that multiple pins can be connected simmultaneously.
002974  003220  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002975  003221  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002976  003222  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002977  003223  //       : The pin is automatically set to an output.
002978  003224  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002979  003225        
002980  003226  func SPI2_SDO_pin("pin"), 1;                // select the hardware pin for SPI2 transmit line
002981  003227  // Syntax: SPI2_SDO_pin(pin);
002982  003228  // Usage : SPI2_SDO_pin(PA1); // set SPI2 SDO to PA1 pin
002983  003229  // Notes : Select the hardware pin for SPIx transmit line.
002984  003230  //       : Note that multiple pins can be connected simmultaneously.
002985  003231  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002986  003232  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002987  003233  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002988  003234  //       : The pin is automatically set to an output.
002989  003235  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002990  003236        
002991  003237  func SPI3_SDO_pin("pin"), 1;                // select the hardware pin for SPI3 transmit line
002992  003238  // Syntax: SPI3_SDO_pin(pin);
002993  003239  // Usage : SPI3_SDO_pin(PA1); // set SPI3 SDO to PA1 pin
002994  003240  // Notes : Select the hardware pin for SPIx transmit line.
002995  003241  //       : Note that multiple pins can be connected simmultaneously.
002996  003242  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002997  003243  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002998  003244  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002999  003245  //       : The pin is automatically set to an output.
003000  003246  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003001  003247        
003002  003248  func SPI1_SDI_pin("pin"), 1;                // select the hardware pin for SPI1 receive line
003003  003249  // Syntax: SPI1_SDI_pin(pin);
003004  003250  // Usage : SPI1_SDI_pin(PA3); // set SPI1 SDI to PA3 pin
003005  003251  // Notes : Selects the hardware pin for SPIx receive line.
003006  003252  //       : Note that only a single pin can be mapped to SPI SDI.
003007  003253  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003008  003254  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003009  003255  //       : If the pin argument is 0 the function has no effect
003010  003256  //       : The pin is automatically set to an input.
003011  003257  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003012  003258  //       : it is necessary to configure the SDI pin first, eg
003013  003259  //       :     SPI1_SDI_pin(PA3);     // configure SPI1 SDI to PA3 (this disconnects anything else)
003014  003260  //       :     SPI1_SDO_pin(PA3));    // configure SPI1 SDO to PA3
003015  003261  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003016  003262        
003017  003263  func SPI2_SDI_pin("pin"), 1;                // select the hardware pin for SPI2 receive line
003018  003264  // Syntax: SPI2_SDI_pin(pin);
003019  003265  // Usage : SPI2_SDI_pin(PA3); // set SPI2 SDI to PA3 pin
003020  003266  // Notes : Selects the hardware pin for SPIx receive line.
003021  003267  //       : Note that only a single pin can be mapped to SPI SDI.
003022  003268  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003023  003269  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003024  003270  //       : If the pin argument is 0 the function has no effect
003025  003271  //       : The pin is automatically set to an input.
003026  003272  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003027  003273  //       : it is necessary to configure the SDI pin first, eg
003028  003274  //       :     SPI2_SDI_pin(PA3);     // configure SPI2 SDI to PA3 (this disconnects anything else)
003029  003275  //       :     SPI2_SDO_pin(PA3));    // configure SPI2 SDO to PA3
003030  003276  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003031  003277        
003032  003278  func SPI3_SDI_pin("pin"), 1;                // select the hardware pin for SPI2 receive line
003033  003279  // Syntax: SPI3_SDI_pin(pin);
003034  003280  // Usage : SPI3_SDI_pin(PA3); // set SPI3 SDI to PA3 pin
003035  003281  // Notes : Selects the hardware pin for SPIx receive line.
003036  003282  //       : Note that only a single pin can be mapped to SPI SDI.
003037  003283  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003038  003284  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003039  003285  //       : If the pin argument is 0 the function has no effect
003040  003286  //       : The pin is automatically set to an input.
003041  003287  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003042  003288  //       : it is necessary to configure the SDI pin first, eg
003043  003289  //       :     SPI3_SDI_pin(PA3);     // configure SPI3 SDI to PA3 (this disconnects anything else)
003044  003290  //       :     SPI3_SDO_pin(PA3));    // configure SPI3 SDO to PA3
003045  003291  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003046  003292        
003047  003293  func SPI1_SCK_pin("pin"), 1;                // select the hardware pin for SPI1 clock line
003048  003294  // Syntax: SPI1_SCK_pin(pin);
003049  003295  // Usage : SPI1_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003050  003296  // Notes : Selects the hardware pin for SPI clock line.
003051  003297  //       : Note that only a single pin should be mapped to spi SCK.
003052  003298  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003053  003299  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003054  003300  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003055  003301  //       : The pin is automatically set to an output.
003056  003302  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003057  003303        
003058  003304  func SPI2_SCK_pin("pin"), 1;                // select the hardware pin for SPI2 clock line
003059  003305  // Syntax: SPI2_SCK_pin(pin);
003060  003306  // Usage : SPI2_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003061  003307  // Notes : Selects the hardware pin for SPI clock line.
003062  003308  //       : Note that only a single pin should be mapped to spi SCK.
003063  003309  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003064  003310  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003065  003311  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003066  003312  //       : The pin is automatically set to an output.
003067  003313  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003068  003314        
003069  003315  func SPI3_SCK_pin("pin"), 1;                // select the hardware pin for SPI3 clock line
003070  003316  // Syntax: SPI3_SCK_pin(pin);
003071  003317  // Usage : SPI3_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003072  003318  // Notes : Selects the hardware pin for SPI clock line.
003073  003319  //       : Note that only a single pin should be mapped to spi SCK.
003074  003320  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003075  003321  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003076  003322  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003077  003323  //       : The pin is automatically set to an output.
003078  003324  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003079  003325        
003080  003326        
003081  003327  func SPI1_Init("speed","mode"), 1;              // set the SPI1 port
003082  003328  func SPI2_Init("speed","mode"), 1;              // set the SPI2 port
003083  003329  func SPI3_Init("speed","mode"), 1;              // set the SPI3 port
003084  003330        
003085  003331        
003086  003332  //------------------------------------------------------------------------------
003087  003333  // Constants for SPI1, SPI2 an SPI3 "mode"
003088  003334  //------------------------------------------------------------------------------
003089  003335  #CONST
003090  003352  #END
003091  003353        
003092  003354  //------------------------------------------------------------------------------
003093  003355  // Constants for SPI1, SPI2 an SPI3 "speed"
003094  003356  //------------------------------------------------------------------------------
003095  003357  #CONST
003096  003374  #END
003097  003375        
003098  003376        
003099  003377  func SPI1_Read(), 1;                                 // read a raw byte from SPI1
003100  003378  func SPI2_Read(), 1;                                 // read a raw byte from SPI2
003101  003379  func SPI3_Read(), 1;                                 // read a raw byte from SPI3
003102  003380        
003103  003381  func SPI1_Write("byte"), 1;                          // write a raw byte to SPI1
003104  003382  func SPI2_Write("byte"), 1;                          // write a raw byte to SPI2
003105  003383  func SPI3_Write("byte"), 1;                          // write a raw byte to SPI3
003106  003384        
003107  003385  func spi_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003108  003386  // Syntax   : spi_WriteBlock("buf", "bufsize");
003109  003387  // Usage    : spi_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003110  003388  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003111  003389        
003112  003390  func spi1_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003113  003391  // Syntax   : spi1_WriteBlock("buf", "bufsize");
003114  003392  // Usage    : spi1_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003115  003393  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003116  003394        
003117  003395  func spi2_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003118  003396  // Syntax   : spi2_WriteBlock("buf", "bufsize");
003119  003397  // Usage    : spi2_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003120  003398  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003121  003399        
003122  003400  func spi3_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003123  003401  // Syntax   : spi3_WriteBlock("buf", "bufsize");
003124  003402  // Usage    : spi3_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003125  003403  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003126  003404        
003127  003405  //------------------------------------------------------------------//
003128  003406  // Display Access                                                   //
003129  003407  //------------------------------------------------------------------//
003130  003408  func disp_SetReg("register", "data"), 0;
003131  003409  // Syntax: display_SetReg(register, data);
003132  003410  // Usage : display_SetReg(arg1, arg2);
003133  003411  // Notes : Sets uLCD specific display driver registers. Refer
003134  003412  //       : to appropriate display driver data sheet.
003135  003413        
003136  003414  func disp_setGRAM("x1","y1","x2","y2"), 0;    // set GRAM window
003137  003415  // Syntax: disp_setGRAM(x1, y1, x2, y2);
003138  003416  // Usage : disp_setGRAM(arg1, arg2, arg3, arg4);
003139  003417  // Notes : Prepares the GRAM area for user access.
003140  003418  //       : Data can now be written with disp_GRAM.
003141  003419  //       : GRAM will be set accordingly for the correct screen mode.
003142  003420  //       : the LO word of the 32 bit pixel count is returned. This is
003143  003421  //       : usually all that is needed unlse GRAM area exceeds 256^2
003144  003422  //       : A copy of the 32bit value can be found in
003145  003423  //       : GRAM_PIXEL_COUNT_LO and GRAM_PIXEL_COUNT_HI
003146  003424        
003147  003425  func disp_WrGRAM("colour"), 0;
003148  003426  // Syntax: display_WrGRAM(colour);
003149  003427  // Usage : display_WrGRAM(arg);
003150  003428  // Notes : Data can be written to the GRAM consecutively using
003151  003429  //       : this function once the GRAM access window has been setup.
003152  003430        
003153  003431  func disp_WriteControl("value"), 0;             // write a control byte to the display
003154  003432        
003155  003433  func disp_WriteWord("value"), 0;                // write a word to the display
003156  003434        
003157  003435        
003158  003436  func disp_ReadWord(), 1;                        // read a word from the display
003159  003437  // Syntax: disp_ReadWord();
003160  003438  // Usage : x:=disp_ReadWord();
003161  003439  // Notes : Read a word from the controller
003162  003440  // Eg:   : disp_WriteControl(0);         // select Ilitek ID register
003163  003441  //       : print(disp_ReadWord());        // print ID
003164  003442  //       : (Many displays are write only)
003165  003443        
003166  003444        
003167  003445  // NB only available on certain displays, check individual data sheets
003168  003446  func sys_StoreTouchCalibration(), 1;
003169  003447  // Syntax: sys_StoreTouchCalibration();
003170  003448  // Usage : r := sys_StoreTouchCalibration();
003171  003449  // Notes : Store the touch calibration values in non-volatile memory.
003172  003450  //       : Returns true if the values have been accepted and stored,
003173  003451  //       : else returns false if write could not be performed, or
003174  003452  //       : touch calibration values are improbable.
003175  003453  //       : The values that are stored are obtained from:-
003176  003454  //       : TOUCH_XMINCAL             78  // touch calibration value
003177  003455  //       : TOUCH_YMINCAL             79  // touch calibration value
003178  003456  //       : TOUCH_XMAXCAL             80  // touch calibration value
003179  003457  //       : TOUCH_YMAXCAL             81  // touch calibration value
003180  003458  //       : refer to the 4DGL example touchCalibrate.4DG for further information.
003181  003459  //       : This function is not supported on uVGA, Capacitive touch
003182  003460  //       : and 4.3" resistive touch modules.
003183  003461        
003184  003462  // NB only available on certain displays, check individual data sheets
003185  003463  func disp_Sync("line"), 0;                      //  (uVGA only)  wait till scanline reaches "line"
003186  003464  // Syntax: disp_Sync(line);
003187  003465  // Usage : disp_Sync(480);
003188  003466  // Notes : Waits till the hardware gets to a certain line.
003189  003467  //       : Allows the program to synchronise writing to the hardware for flicker free operation.
003190  003468  //       : Some experimentation may be needed to find an optimum line for disp_Sync
003191  003469  //       : depending on the graphics operation. The higher the value, the slower
003192  003470  //       : the throughput. A cetain point will be reached (number of scanlines + blanking lines
003193  003471  //       : within the vertical retrace period) where it will just 'hang up' stopping the
003194  003472  //       : entire process. Eg, in 640x480 mode, if the 'lines' value is 507, operation will
003195  003473  //       : be slowest (as its actually right at the end of the blanking period) and 508
003196  003474  //       : will cause a hangup situation as it is above the highes scanline value.
003197  003475  //       : Currently, this function is only supported on displays with SSD1963 driver.
003198  003476        
003199  003477  func disp_Init(), 0;                           // initialize display with required tables. New in v0.7
003200  003478  // Syntax: disp_Init();                        New in v0.7
003201  003479  // Usage : disp_Init();
003202  003480  // Notes : Initialises or reinitialises the display.
003203  003481  //       : Normally used after restoration of peripheral power
003204  003482  //       : and after DeepSleep.
003205  003483        
003206  003484  func disp_Disconnect(), 0;                     // Disconnect display to ensure reduced power after disabling peripheral power. New in v0.7
003207  003485  // Syntax: disp_Disconnect();                  New in v0.7
003208  003486  // Usage : disp_Disconnect();
003209  003487  // Notes : Disconnects the display driver pins and/or reconfigures it to achieve
003210  003488  //       : its lowest possible power consumption. Use after disabling peripheral power
003211  003489  //       : to ensure the minimal power usage by the display.
003212  003490  //       : disp_Init() should be used to reinitialise the display.
003213  003491        
003214  003492  func disp_BlitPixelsFromCOM0(), 0;                     // Writes current GRAM window pixels to the display from the COM port
003215  003493  // Syntax: disp_BlitPixelsFromCOM0();                  New in v1.1
003216  003494  // Usage : disp_BlitPixelsFromCOM0();
003217  003495  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
003218  003496  //       : display from the specified com port.
003219  003497        
003220  003498  func __reserved42(), 0; // do not remove
003221  003499        
003222  003500        
003223  003501  //------------------------------------------------------------------//
003224  003502  //        Image Control Function Prototypes                         //
003225  003503  //------------------------------------------------------------------//
003226  003504  func img_SetPosition("handle", "index", "xpos", "ypos"), 1;
003227  003505  // Syntax: img_SetPosition(handle, index, xpos, ypos);
003228  003506  // Usage : r := img_SetPosition(hImageList, imagenum, x, y);
003229  003507  // Notes : set the position where the image will be displayed
003230  003508  //       : returns true if index was ok and function was successful.
003231  003509  //       : you may turn off an image so when img_Refresh is called,
003232  003510  //       : the image will not be shown
003233  003511        
003234  003512  func img_Enable("handle", "index"), 1;
003235  003513  // Syntax: img_Enable(handle, index);
003236  003514  // Usage : r := img_Enable(hImageList, imagenum);
003237  003515  // Notes : enable image in a image list
003238  003516  //       : returns true if index was ok and function was successful.
003239  003517  //       : this is the default state so when img_Refresh is called,
003240  003518  //       : all the images in the list will be shown
003241  003519  //       : if index is set to -1, all of the images are enabled
003242  003520        
003243  003521  func img_Disable("handle", "index"), 1;
003244  003522  // Syntax: img_Disable(handle, index);
003245  003523  // Usage : r := img_Disable(hImageList, imagenum);
003246  003524  // Notes : disable image in a image list
003247  003525  //       : returns true if index was ok and function was successful.
003248  003526  //       : you must turn off an image so when img_Refresh is called,
003249  003527  //       : the image will not be shown.
003250  003528  //       : if index is set to -1, all of the images are disabled
003251  003529        
003252  003530        
003253  003531  func img_Darken("handle", "index"), 1;
003254  003532  // Syntax: img_Darken(handle, index);
003255  003533  // Usage : r := img_Darken(hImageList, imagenum);
003256  003534  // Notes : darken image in a image list
003257  003535  //       : returns true if index was ok and function was successful.
003258  003536  //       : if index is set to -1, all of the images are darkened
003259  003537  //       : NB:- this feature will only work for the next refresh, then
003260  003538  //       : the image reverts back to normal when displayed again.
003261  003539        
003262  003540        
003263  003541  func img_Lighten("handle", "index"), 1;
003264  003542  // Syntax: img_Lighten(handle, index);
003265  003543  // Usage : r := img_Lighten(hImageList, imagenum);
003266  003544  // Notes : lighten image in a image list
003267  003545  //       : returns true if index was ok and function was successful.
003268  003546  //       : if index is set to -1, all of the images are lightened
003269  003547  //       : NB:- this feature will only work for the next refresh, then
003270  003548  //       : the image reverts back to normal when displayed again.
003271  003549        
003272  003550  func img_SetWord("handle", "index", "offset", "word"), 1;
003273  003551  // Syntax: img_SetWord(handle, index, offset, word);
003274  003552  // Usage : img_SetWord(hndl, 5, IMAGE_XPOS, 10);
003275  003553  // Notes : set specified word (0-7) in a image entry
003276  003554  //       : returns TRUE if successful, return value usually ignored.
003277  003555        
003278  003556  func img_GetWord("handle", "index", "offset"), 1;
003279  003557  // Syntax: myvar := img_GetWord("handle", "index", "offset");
003280  003558  // Usage : myvar := img_GetWord(hndl, 5, IMAGE_YPOS);
003281  003559  // Notes : returns specified word (0-14) from an image entry
003282  003560  //       : refer to image control entry offsets.
003283  003561        
003284  003562  func img_Show("handle", "index"), 1;
003285  003563  // Syntax: img_Show(handle, index);
003286  003564  // Usage : display image entry (regardless of enable/disable)
003287  003565  //       : returns TRUE if successful, return value usually ignored.
003288  003566        
003289  003567  func img_SetAttributes("handle", "index","value"), 1;
003290  003568  // Syntax: img_SetAttributes("handle", "index","offset");
003291  003569  // Usage : img_SetAttributes(hndl, 5, I_TOPMOST);
003292  003570  // Notes : This function SETS one or more bits in the IMAGE_FLAGS field
003293  003571  //       : of an image control entry. "value" refers to various bits in
003294  003572  //       : the image control entry (see image attribute flags).
003295  003573  //       : A '1' bit in the "value" field SETS the respective bit
003296  003574  //       : in the IMAGE_FLAGS field of the image control entry.
003297  003575  //       : returns TRUE if successful, return value usually ignored.
003298  003576        
003299  003577  func img_ClearAttributes("handle", "index","value"), 1;
003300  003578  // Syntax: img_ClearAttributes("handle", "index","offset");
003301  003579  // Usage : img_ClearAttributes(hndl, 5, I_TOPMOST);
003302  003580  // Notes : This function CLEARS one or more bits in the IMAGE_FLAGS field
003303  003581  //       : of an image control entry. "value" refers to various bits in
003304  003582  //       : the image control entry (see image attribute flags)
003305  003583  //       : a '1' bit in the "value" field CLEARS the respective bit
003306  003584  //       : in the IMAGE_FLAGS field of the image control entry.
003307  003585  //       : returns TRUE if successful, return value usually ignored.
003308  003586        
003309  003587  func img_Touched("handle", "index"), 1;
003310  003588  // Syntax: r := img_Touched(handle, index);
003311  003589  // Usage : img_Touched(hndl, 17);
003312  003590  //       : returns -1 if image not touched, or returns index
003313  003591  // Notes : if index is passed as -1, function tests all images,
003314  003592  //       : and returns -1 if image not touched, or returns index.
003315  003593        
003316  003594        
003317  003595  func img_SelectReadPosition("handle", "index", "frame", "x", "y"), 1;
003318  003596  // Syntax: img_SelectReadPosition(handle, index, frame, xpos, ypos);
003319  003597  // Usage : r := img_SelectReadPosition(hImageList, imagenum, frame, x, y);
003320  003598  // Notes : set a position in an image control for sequential reading
003321  003599  //       : of pixels from the uSD card (fat16 or raw modes supported)
003322  003600  //       : No image window area is set, the image will not be shown
003323  003601  //       : This function provides a means of preparing to load an image,
003324  003602  //       : or part of an image, to an array. (see img_SequentialRead)
003325  003603  //Returns: returns true if index was ok and function was successful.
003326  003604        
003327  003605        
003328  003606  func img_SequentialRead("count", "ptr"), 1;  // read pixels from selected read position of an image
003329  003607  // Syntax: img_SequentialRead(count, ptr);
003330  003608  // Usage1: r := img_SequentialRead(imgwidth, myArray);    // read 1 line from image control to array
003331  003609  // Usage2: r := img_SequentialRead(123, 0);            // skip 123 words from sequential stream
003332  003610  // Usage3: r := img_SequentialRead(20, 1);            // write 20 pixels to current GRAM position from stream
003333  003611  // Notes : once a position has ben set with the img_SelectReadPosition function,
003334  003612  //       : this function can then used for sequential reading of pixels from
003335  003613  //       : image storage.
003336  003614  //       : if "ptr" is 0, "count" pixels from the stream are simply skipped.
003337  003615  //       : if "ptr" is 1, "count" pixels are written to the GRAM area,
003338  003616  //       : else "ptr" must point to a valid array that is at least
003339  003617  //       : the size of "count".
003340  003618  //       : or part of an image, to an array. (see img_SequentialRead)
003341  003619  //       : returns TRUE if function succeded.
003342  003620        
003343  003621  func __reserved43(), 0; // do not remove
003344  003622  func __reserved44(), 0; // do not remove
003345  003623  func __reserved45(), 0; // do not remove
003346  003624  func __reserved46(), 0; // do not remove
003347  003625        
003348  003626  // image control header offsets
003349  003627  #CONST
003350  003634  #END
003351  003635        
003352  003636  // image control entry offsets
003353  003637  #CONST
003354  003652  #END
003355  003653        
003356  003654  // image attribute flags (in IMAGE_FLAGS)
003357  003655  // for img_SetAttributes(...) and img_ClearAttributes(...)
003358  003656  #CONST
003359  003670  #END
003360  003671        
003361  003672        
003362  003673  //------------------------------------------------------------------//
003363  003674  //        Timer Function Prototypes
003364  003675  //------------------------------------------------------------------//
003365  003676  func sys_T(), 1;
003366  003677  // Syntax: sys_T();
003367  003678  // Usage : t := sys_T();
003368  003679  // Notes : return the current value of the rolling system timer (1msec) LO word
003369  003680        
003370  003681  func sys_T_HI(), 1;
003371  003682  // Syntax: sys_T_HI();
003372  003683  // Usage : t := sys_T_HI();
003373  003684  // Notes : return the current value of the rolling system timer (1msec) HI word
003374  003685        
003375  003686  func sys_SetTimer("timernum","value"), 0;
003376  003687  // Syntax: sys_SetTimer("timernum", "value");
003377  003688  // Usage : sys_SetTimer(TIMER5, 10000);
003378  003689  // Notes : set a countdown on the selected timer, or 'top up' if required.
003379  003690  //       : There ar 8 timers TIMER0 to TIMER7 which stop at the count of 0
003380  003691  //       : Maximum timeout period is 65.535 seconds
003381  003692  //       : A timer can be read with the sys_GetTimer("timernum") function
003382  003693        
003383  003694  func sys_GetTimer("timernum"), 1;
003384  003695  // Syntax: t := sys_GetTimer("timernum");
003385  003696  // Usage : t := sys_GetTimer(TIMER3);
003386  003697  // Notes : returns 0 if timer has expired, or the current countdown value.
003387  003698  //       : There ar 8 timers TIMER0 to TIMER7 which stop at the count of 0
003388  003699  //       : Maximum timeout period is 65.535 seconds
003389  003700  //       : A timer must be set with the sys_SetTimer("timernum","value") function
003390  003701        
003391  003702  func sys_SetTimerEvent("timernum","function"), 1;
003392  003703  // Syntax: sys_SetTimerFunction("timernum", "function");
003393  003704  // Usage : sys_SetTimer(TIMER5, myfunc);
003394  003705  // Notes : set a function to be called for selected timer.
003395  003706  //       : When the timer reaches zero, the function is called.
003396  003707  //       : The called function must not have any parameters
003397  003708  //       : sys_SetTimerEvent returns any previous event function
003398  003709  //       : address, or zero if there was no previous function.
003399  003710        
003400  003711  func sys_EventQueue(), 1;
003401  003712  // Syntax: sys_EventQueue();
003402  003713  // Usage : tasks := sys_EventQueue();
003403  003714  // Notes : returns the max number of events that were pending
003404  003715  //       : in the timer queue since the last call to this function.
003405  003716  //       : This can be used to assess timer event overhead burden,
003406  003717  //       : especially after or during a sys_EventsPostpone action.
003407  003718        
003408  003719  func sys_EventsPostpone(), 0;
003409  003720  // Syntax: sys_EventPostpone();
003410  003721  // Usage : sys_EventPostpone();   // postpone the event queue
003411  003722  // Notes : postpone any events until the sys_EventResume function is executed
003412  003723  //       : The timer event queue will continue to queue events, but no action
003413  003724  //       : will take place untill a sys_EventResume function is encountered.
003414  003725  //       : The queue will continue to receive up to 32 events before discarding
003415  003726  //       : any further events. This function is required to allow a sequence of
003416  003727  //       : instructions or functions to occur that would otherwise be corrupted
003417  003728  //       : by an event occuring during the sequence of instructions or functions.
003418  003729  //       : A good example of this is when you set a position to print, if there
003419  003730  //       : was no way of locking the current sequence, an event may occur which
003420  003731  //       : does a similar thing, and a contention would occur - printing to
003421  003732  //       : the wrong position. This function should be used wisely, if any action
003422  003733  //       : that is required would take considerable time, it is better to disable
003423  003734  //       : any conflicting event functions with a bypass flag, then restart the
003424  003735  //       : conflicting event by re-issuing a timer value.
003425  003736        
003426  003737  func sys_EventsResume(), 0;
003427  003738  // Syntax: sys_EventsResume();
003428  003739  // Usage : sys_EventsResume();   // resume the event queue
003429  003740  // Notes : resume any postponed events. The queue will try to execute any timer
003430  003741  //       : events that were incurred during the postponed period.
003431  003742        
003432  003743        
003433  003744  func sys_GetTime(), 0;
003434  003745  // Syntax: sys_GetTime();
003435  003746  // Usage : to(mystring); sys_GetTime();   // save current time string to buffer
003436  003747  // Notes : print the system time in the format eg "6:10:45"
003437  003748  //       : Can be captured to a buffer using the to( function
003438  003749  //       : Returns nothing.
003439  003750        
003440  003751  func sys_SetTime("hours", "mins", "secs"), 1;
003441  003752  // Syntax: sys_SetTime(h, m, s);
003442  003753  // Usage : sys_SetTime(10, 0, 0);   // set the system time
003443  003754  // Notes : Used to set clock to correct time after power up or suspension
003444  003755  //Returns: Returns true if valid time.
003445  003756        
003446  003757  func sys_GetDate(), 0;
003447  003758  // Syntax: sys_GetDate();
003448  003759  // Usage : to(mystring); sys_GetDate();   // save current time string to buffer
003449  003760  // Notes : print the system date in the format eg "25-09-2012"
003450  003761  //       : Can be captured to a buffer using the to( function
003451  003762  //       : Returns nothing.
003452  003763        
003453  003764  func sys_SetDate("year", "month", "day"), 1;
003454  003765  // Syntax: sys_SetDate(y, m, d);
003455  003766  // Usage : sys_SetDate(10, 0, 0);   // set the system time
003456  003767  // Notes : Used to set clock to correct date after power up or suspension
003457  003768  //Returns: Returns true if valid date.
003458  003769        
003459  003770  func sys_Sleep("units"), 1;
003460  003771  // Syntax: t := sys_Sleep("units");
003461  003772  // Usage : t := sys_Sleep(10);
003462  003773  // Notes : sets the display into low power mode for a period of time.
003463  003774  //       : Touching the touch screen will also wake from sleep.
003464  003775  //       : as will bus Change Interrupts.
003465  003776  //       : Returns remaining sleep units.
003466  003777        
003467  003778  func iterator("offset"), 0;
003468  003779  // Syntax: t :=  iterator("offset");
003469  003780  // Usage : t :=  iterator(10);
003470  003781  // Notes : set the iterator size for ++/--
003471  003782  //       : The next postinc,postdec,preinc of predec will alter
003472  003783  //       : by the specified value.
003473  003784  //       : The offset will return to 1 after the next operation.
003474  003785        
003475  003786  func sys_DeepSleep("units"), 1;               // put the module into its lowest power consumption mode. New in v0.7
003476  003787  // Syntax: t := sys_DeepSleep("units");    New in v0.7
003477  003788  // Usage : t := sys_DeepSleep(10);
003478  003789  // Notes : sets the display and processor into lowest power mode for a period of time.
003479  003790  //       : When returning from DeepSleep the display should be reinitialised
003480  003791  //       : with disp_Init().
003481  003792  //       : Touching the touch screen will also wake from sleep.
003482  003793  //       : Returns remaining sleep units.
003483  003794        
003484  003795  //------------------------------------------------------------------//
003485  003796  //         Touch Screen Function Prototypes
003486  003797  //------------------------------------------------------------------//
003487  003798        
003488  003799  func touch_DetectRegion("x1" ,"y1", "x2", "y2"), 0;
003489  003800  // Syntax: touch_DetectRegion(x1, y1, x2, y2);
003490  003801  // Usage : touch_DetectRegion(arg1, arg2, arg3, arg4);
003491  003802  // Notes : Specifies a new touch detect region on the screen
003492  003803  //       : such that only touch activity in that region will
003493  003804  //       : be reported by the status poll touch_Get(TOUCH_STATUS);
003494  003805        
003495  003806  func touch_Set("mode"), 0;
003496  003807  // Syntax: touch_Set(mode);
003497  003808  // Usage : touch_Set(arg);
003498  003809  // Notes : Sets various Touch Screen related parameters
003499  003810  //       :
003500  003811  //       : mode = TOUCH_ENABLE (mode 0)  Enable Touch Screen
003501  003812  //       : touch_Set(TOUCH_ENABLE);
003502  003813  //       : Enables and initialises Touch Screen hardware
003503  003814  //       :
003504  003815  //       : mode = TOUCH_DISABLE (mode 1)  Disable Touch Screen
003505  003816  //       : touch_Set(TOUCH_DISABLE );
003506  003817  //       : Disables the Touch Screen
003507  003818  //       : Note: Touch Screen runs in the background and disabling
003508  003819  //       : it when not in use will free up extra resources
003509  003820  //       : such as 4DVM CPU cycles.
003510  003821  //       :
003511  003822  //       : mode = TOUCH_REGIONDEFAULT (mode 2)  Default Touch Region
003512  003823  //       : touch_Set(TOUCH_REGIONDEFAULT);
003513  003824  //       : This will reset the current active region to default
003514  003825  //       : to the full screen without the application having to
003515  003826  //       : set a new active region for the full screen.
003516  003827  //       : (NB for 'no touch' devices - like uVGAII or OLED's/LCD's
003517  003828  //       : that requre to be interfaced with an external pointing
003518  003829  //       : device, values that are poked into TOUCH_DRIVE will be
003519  003830  //       : read with the touch_Get() function)
003520  003831        
003521  003832        
003522  003833  func touch_Get("mode"), 1;
003523  003834  // Syntax: touch_Get(mode);
003524  003835  // Usage : arg1 := touch_Get(arg);
003525  003836  // Notes : Returns various Touch Screen parameters to caller
003526  003837  //       :
003527  003838  //       : mode = TOUCH_STATUS  (mode 0)
003528  003839  //       : var := touch_Get(TOUCH_STATUS);
003529  003840  //       : Returns the various states of the touch screen
003530  003841  //       : 0 = NOTOUCH
003531  003842  //       : 1 = TOUCH_PRESSED
003532  003843  //       : 2 = TOUCH_RELEASED
003533  003844  //       : 3 = TOUCH_MOVING
003534  003845  //       :
003535  003846  //       : mode = TOUCH_GETX   (mode 1)
003536  003847  //       : var := touch_Get(TOUCH_GETX);
003537  003848  //       : Returns the X coordinates of the touch
003538  003849  //       :
003539  003850  //       : mode = TOUCH_GETY   (mode 2)
003540  003851  //       : var := touch_Get(TOUCH_GETY);
003541  003852  //       : Returns the Y coordinates of the touch
003542  003853        
003543  003854        
003544  003855  //touch_Set() related constants
003545  003856  #CONST
003546  003860  #END
003547  003861        
003548  003862  //touch_Get() related constants
003549  003863  #CONST
003550  003871  #END
003551  003872        
003552  003873  func touch_TestBox("&rect"), 1;
003553  003874  // Syntax   : touch_Test(rect);
003554  003875  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=20; r[3]:=30;
003555  003876  //          : result := touch_Test(r); // check area at 100,200,119,229
003556  003877  // Notes    : rect is an array of 4 vars, x1, y1, width, height (using boxed co-ordinates)
003557  003878  // returns  : Returns true if last touch co-ordinates are within the boxed test area.
003558  003879        
003559  003880  func touch_TestArea("&rect"), 1;
003560  003881  // Syntax   : touch_Test(rect);
003561  003882  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=119; r[3]:=129;
003562  003883  //          : result := touch_Test(r); // check area at 100,200,119,229
003563  003884  // Notes    : rect is an array of 4 vars, x1, y1, x2, y2 (using absolute co-ordinates)
003564  003885  // returns  : Returns true if last touch co-ordinates are within the absolute co-ordinate test area.
003565  003886        
003566  003887        
003567  003888  func __reserved51(), 0; // do not remove
003568  003889  func __reserved52(), 0; // do not remove
003569  003890        
003570  003891  //------------------------------------------------------------------//
003571  003892  //        Memory Allocation Function Prototypes
003572  003893  //------------------------------------------------------------------//
003573  003894        
003574  003895  func mem_Alloc("size"), 1;
003575  003896  // Syntax: mem_Alloc(bytesize);
003576  003897  // Usage : myvar := mem_Alloc(100);
003577  003898  // Notes : Allocate a block of memory to pointer myvar
003578  003899  //       : The allocated memory contains garbage but is a fast allocation.
003579  003900  //       : The block must later be released with mem_Free();
003580  003901  //       : returns 0 if function fails
003581  003902        
003582  003903  func mem_AllocV("size"), 1;
003583  003904  // Syntax: mem_AllocV(bytesize);
003584  003905  // Usage : myvar := mem_AllocV(100);
003585  003906  // Notes : Allocate a block of memory to pointer myvar
003586  003907  //       : The block of memory is filled with signature values
003587  003908  //       : the block starts with A5,5A then fills with incrementing
003588  003909  //       : number eg:- A5,5A,00,01,02,03...FF,00,11....
003589  003910  //       : This can be helpful when debugging
003590  003911  //       : The block must later be released with mem_Free();
003591  003912  //       : returns 0 if function fails
003592  003913        
003593  003914  func mem_AllocZ("size"), 1;
003594  003915  // Syntax: mem_AllocZ(bytesize);
003595  003916  // Usage : myvar := mem_AllocC(100);
003596  003917  // Notes : Allocate a zeroed block of memory to pointer myvar
003597  003918  //       : The block of memory is filled with zeroes
003598  003919  //       : The block must later be released with mem_Free();
003599  003920  //       : returns 0 if function fails
003600  003921        
003601  003922  func mem_Realloc("ptr", "size"), 1;
003602  003923  // Syntax: myvar := mem_Realloc("ptr", "size");
003603  003924  // Usage : myvar := mem_Realloc(ptr, size);
003604  003925  // Notes : The function may move the memory block to a new location,
003605  003926  //       : in which case the new location is returned.
003606  003927  //       : The content of the memory block is preserved up to the lesser
003607  003928  //       : of the new and old sizes, even if the block is moved.
003608  003929  //       : If the new size is larger, the value of the newly allocated
003609  003930  //       : portion is indeterminate. In case that ptr is NULL,
003610  003931  //       : the function behaves exactly as mem_Alloc, assigning a new block
003611  003932  //       : of size bytes and returning a pointer to the beginning of it.
003612  003933  //       : In case that the size is 0, the memory previously allocated in
003613  003934  //       : ptr is deallocated as if a call to mem_Free()was made, and a NULL
003614  003935  //       : pointer is returned.
003615  003936        
003616  003937  func mem_Free("allocation"), 1;
003617  003938  // Syntax: myvar := mem_Free(allocation);
003618  003939  // Usage : myvar := mem_Free(myvar);
003619  003940  // Notes : De-allocate a block of memory previously created with
003620  003941  //       : mem_Alloc(...), mem_AllocV(...); or mem_AllocZ(...);
003621  003942  //       : returns 0 if function fails
003622  003943        
003623  003944  func mem_Heap(), 1;
003624  003945  // Syntax: myvar := mem_Heap();
003625  003946  // Usage : myvar := mem_Heap();
003626  003947  // Notes : returns bytecount available in heap
003627  003948  //       :
003628  003949        
003629  003950  func mem_Set("ptr","char","size"), 1;
003630  003951  // Syntax: mem_Set(ptr,char,bytesize);
003631  003952  // Usage : mem_Set(p, 'A', 100);
003632  003953  // Notes : fill a block of memory with a byte value
003633  003954  //       : Note that count is a byte count, this facilitates
003634  003955  //       : clearing word aligned byte arrays when using word
003635  003956  //       : aligned packed strings.
003636  003957  //       : returns ptr
003637  003958        
003638  003959  func mem_Copy("src", "dest", "bytecount"), 1;
003639  003960  // Syntax: myvar := mem_Copy(src, dest, bytesize);
003640  003961  // Usage : myvar := mem_Copy(p1, p2, 100);
003641  003962  // Notes : copy a word aligned block of memory from src to dest
003642  003963  //       : Note that count is a byte count, this facilitates
003643  003964  //       : copying word aligned byte arrays when using word
003644  003965  //       : aligned packed strings.
003645  003966  //       : returns src
003646  003967        
003647  003968  func mem_Compare("ptr1","ptr2","count"), 1;
003648  003969  // Syntax: myvar := mem_Compare(ptr1,ptr2,bytesize);
003649  003970  // Usage : myvar := mem_Compare(p1, p2, 100);
003650  003971  // Notes : compare word aligned blocks of memory at src, dest
003651  003972  //       : Note that count is a byte count, this facilitates
003652  003973  //       : comparing word aligned byte arrays when using word
003653  003974  //       : aligned packed strings.
003654  003975  //       : returns 0 if we have a match
003655  003976        
003656  003977  func __reserved53(), 0; // do not remove
003657  003978  func __reserved54(), 0; // do not remove
003658  003979        
003659  003980  //------------------------------------------------------------------//
003660  003981  //        FAT16 Function Prototypes
003661  003982  //------------------------------------------------------------------//
003662  003983        
003663  003984  func file_Error(), 1;
003664  003985  // Syntax: myvar := file_Error();
003665  003986  // Usage : e := file_Error();
003666  003987  // Notes : return the most recent file error.
003667  003988  //       :
003668  003989        
003669  003990  func file_Count("filename"), 1;
003670  003991  // Syntax: count := file_Count("filename");
003671  003992  // Usage : count := file_Count("*.4dg");
003672  003993  // Notes : returns number of files found that match the criteria
003673  003994        
003674  003995  func file_Dir("filename"), 1;
003675  003996  // Syntax: count := file_Dir("filename");
003676  003997  // Usage : count := file_Dir("*.4dg");
003677  003998  // Notes : streams a string of filenames that agree with the search key
003678  003999  //       : returns number of files found that match the criteria
003679  004000        
003680  004001  func file_FindFirst("fname"), 1;
003681  004002  // Syntax: res := file_FindFirst("fname");
003682  004003  // Usage : if (file_FindFirst("*.4xe") ....
003683  004004  // Notes : returns true if at least 1 file exists
003684  004005  //       : that satisfies the file argument.
003685  004006  //       : Wildcards are usually used so if
003686  004007  //       : file_FindFirst returns true, further
003687  004008  //       : tests can be made using file_FindNext();
003688  004009  //       : to find all the files that match the
003689  004010  //       : wildcard class. Note that the stream behaviour
003690  004011  //       : is the same as file_Dir.
003691  004012  //       :
003692  004013        
003693  004014  func file_FindNext(), 1;
003694  004015  // Syntax: res := file_FindNext();
003695  004016  // Usage : while ((file_FindNext()) ....
003696  004017  // Notes : returns true if more file exists
003697  004018  //       : that satisfies the file argument
003698  004019  //       : that was given for  file_FindFirst.
003699  004020  //       : Wildcards must be used for
003700  004021  //       : file_FindFirst, else this function will
003701  004022  //       : always return zero as the only occurence
003702  004023  //       : will have already been found.
003703  004024  //       : Note that the stream behaviour
003704  004025  //       : is the same as file_Dir.
003705  004026  //       :
003706  004027        
003707  004028  func file_Exists("fname"), 1;
003708  004029  // Syntax: res := file_Exists("fname"),
003709  004030  // Usage : if(file_Exists("myfile") ....
003710  004031  // Notes : returns true if file exists
003711  004032  //       :
003712  004033        
003713  004034  func file_Open("fname", "mode"), 1;
003714  004035  // Syntax: handle := file_Open("fname","mode"),
003715  004036  // Usage : handle := file_Open("myfile.txt", 'r');
003716  004037  // Notes : returns handle if file exists
003717  004038  //       :
003718  004039        
003719  004040  func file_Close("handle"), 1;
003720  004041  // Syntax: res := file_Close("handle");
003721  004042  // Usage : res := file_Close(hnd1);
003722  004043  // Notes : returns true if file closed ok
003723  004044  //       :
003724  004045        
003725  004046  func file_Read("*dest", "size", "handle"), 1;
003726  004047  // Syntax: res := file_Read("*dest", "size", "handle"),
003727  004048  // Usage : res := file_Read(memblock,20,hnd1);
003728  004049  // Notes : returns number of characters read
003729  004050  //       : if "dest" is zero, data is read direct to GRAM window
003730  004051  //       :
003731  004052        
003732  004053        
003733  004054  func file_Seek("handle", "HiWord", "LoWord"), 1;
003734  004055  // Syntax: res := file_Seek("handle", "HiWord", "LoWord")
003735  004056  // Usage : res := file_Seek(hSource, 0, 0x1234);
003736  004057  // Notes : set file position to 0x00001234 (byte position 4660)
003737  004058  //       : for the file handle so subsequent data may be read
003738  004059  //       : from that position onwards with file_GetC(...),
003739  004060  //       : file_GetW(...) or file_GetS(...), or an image
003740  004061  //       : can be displayed with file_Image(...)
003741  004062  // Notes : returns true if ok, usually ignored
003742  004063        
003743  004064  func file_Index("handle", "HiSize", "LoSize","recordnum"), 1;
003744  004065  // Syntax: file_Index("handle", "HiSize", "LoSize","recordnum"), 1;
003745  004066  // Usage : res := file_Index(hsource, 0, 1000, 123), 1;
003746  004067  // Notes : set file seek position to 123000
003747  004068  //       : for the file handle so subsequent data may be read
003748  004069  //       : from that record position onwards with file_GetC(...),
003749  004070  //       : file_GetW(...) or file_GetS(...), or an image
003750  004071  //       : can be displayed with file_Image(...)
003751  004072  // Notes : returns true if ok, usually ignored
003752  004073        
003753  004074  func file_Tell("handle", "&HiWord", "&LoWord"), 1;
003754  004075  // Syntax: file_Tell("handle", &HiWord, &LoWord);
003755  004076  // Usage : file_Tell(fhndl, &SizeHi, &SizeLo);
003756  004077  // Notes : Reads the 32 bit file pointer and stores it into 2 variables.
003757  004078  //       : returns true if function succeeded
003758  004079        
003759  004080  func file_Write("*source", "size", "handle"), 1;
003760  004081  // Syntax: res := fwrite("*source", "size", "handle"),
003761  004082  // Usage : res := fwrite(memblock, 20, hnd1);
003762  004083  // Notes : returns number of bytes written
003763  004084  //       :
003764  004085        
003765  004086  func file_Size("handle", "&HiWord", "&LoWord"), 1;
003766  004087  // Syntax: file_Size("handle", &HiWord, &LoWord);
003767  004088  // Usage : file_Size(fhndl, &SizeHi, &SizeLo);
003768  004089  // Notes : Reads the 32 bit file size and stores it into 2 variables.
003769  004090  //       : returns true if function succeeded
003770  004091        
003771  004092  func file_Image("x", "y", "handle"), 1;
003772  004093  // Syntax: file_Image(x, y, handle);
003773  004094  // Usage : file_Image(10, 10, hnd1);
003774  004095  // Notes : Display an image from a file at the current file position.
003775  004096  //       : The image is displayed at x,y (with respect to top left corner).
003776  004097  //       : If there is more than 1 image in the file, it can be
003777  004098  //       : accessed with file_Seek(...)
003778  004099        
003779  004100  func file_ScreenCapture("x", "y", "width", "height", "handle"), 1;
003780  004101  // Syntax: file_ScreenCapture(x, y, w, h, handle);
003781  004102  // Usage : file_ScreenCapture(10, 10, 50,50, hnd1);
003782  004103  // Notes : Save a image from screen to file at the current file position.
003783  004104  //       : The image can later be displayed with file_Image(...);
003784  004105  //       : The file may be opened in append mode to accumulate multiple
003785  004106  //       : images. Later, the images can be accessed with file_Seek(...);
003786  004107  //       : Note that the image will be sector aligned.
003787  004108  //       : All image headers must start on a sector boundary.
003788  004109  //       : The image is saved from x, y (with respect to top left corner)
003789  004110  //       : and the capture area is determined by "width" and "height".
003790  004111  //       : returns 0 if function succeeded
003791  004112        
003792  004113  func file_PutC("char","handle"), 1;
003793  004114  // Syntax: file_PutC("char", "handle");
003794  004115  // Usage : file_PutC('x', hndl);
003795  004116  // Notes : returns true if function succeeded
003796  004117        
003797  004118  func file_GetC("handle"), 1;
003798  004119  // Syntax: file_GetC("handle");
003799  004120  // Usage : mychar := fgetC("handle");
003800  004121  // Notes : returns next char from file
003801  004122        
003802  004123  func file_PutW("word","handle"), 1;
003803  004124  // Syntax: file_PutW("word","handle");
003804  004125  // Usage : file_PutW(0x1234, hndl);
003805  004126  // Notes : returns true if function succeeded
003806  004127        
003807  004128  func file_GetW("handle"), 1;
003808  004129  // Syntax: file_GetW("handle");
003809  004130  // Usage : myword := fgetW("handle");
003810  004131  // Notes : returns next word in file
003811  004132        
003812  004133  func file_PutS("*source", "handle"), 1;
003813  004134  // Syntax: res := file_Puts("*source", "handle"),
003814  004135  // Usage : res := file_Puts(mystring, hnd1);
003815  004136  // Notes : returns number of characters written
003816  004137  //       :
003817  004138        
003818  004139  func file_GetS("*string", "size", "handle"), 1;
003819  004140  // Syntax: res := file_Gets("*string", "size", "handle");
003820  004141  // Usage : res := file_Gets(mystr , 81, hnd1); // read up to 80 chars
003821  004142  // Notes : get a string from a file
003822  004143  //       : returns pointer to string or null if failed.
003823  004144  //       : file_GetS(...) automatically appends a null-terminator to the data read.
003824  004145  //       : NB:- only reads up to "size-1" characters into "string"
003825  004146  //       : file_GetS(...) will stop reading when any of the following conditions are true:
003826  004147  //       : A] It has read n-1 bytes (one character is reserved for the null-terminator)
003827  004148  //       : B] It encounters a newline character (a line-feed in the compilers tested here), or
003828  004149  //       : C] It reaches the end of file
003829  004150  //       : D] A read error occurs.
003830  004151        
003831  004152        
003832  004153  func file_Erase("fname"), 1;
003833  004154  // Syntax: res := file_Erase("fname");
003834  004155  // Usage : res := file_Erase("myfile.txt");
003835  004156  // Notes : returns true if successful
003836  004157  //       :
003837  004158        
003838  004159  func file_Rewind("handle"), 1;
003839  004160  // Syntax: res := file_Rewind("handle");
003840  004161  // Usage : res := file_Rewind(hnd1);
003841  004162  // Notes : returns true if file rewound ok (usually ignored)
003842  004163  //       : resets the file pointer the the beginning of the open file.
003843  004164        
003844  004165  func file_LoadFunction("fname.4xe"), 1;
003845  004166  // Syntax: res := file_LoadFunction("fname.4fn");
003846  004167  // Usage : myfunc := file_LoadFunction(myfuncname);
003847  004168  // Notes : Load a function or program from disk and
003848  004169  //       : return a function pointer to the allocation.
003849  004170  //       : The function can then be invoked just like any other
003850  004171  //       : function would be called via a function pointer.
003851  004172  //       : Parameters may be passed to it in a conventional way.
003852  004173  //       : The function may be discarded at any time when no
003853  004174  //       : longer required, thus freeing its memory resources.
003854  004175  //       : The loaded function can be discarded with mem_Free(..)
003855  004176  //       : eg:
003856  004177  //       : popupWindow := file_LoadFunction("popupWindow1.4fn");
003857  004178  //       : if(!popupWindow) goto LoadFunctionFailed; // could not load the function !!!
003858  004179  //       : then elsewhere in your program:-
003859  004180  //       : res := popupWindow(MYMODE,"My Title","My Popup Text");
003860  004181  //       : if(res == QUIT_APPLICATION) goto exitApp;
003861  004182  //       : Later in your program, when popupWindow is no longer
003862  004183  //       : required for the application:-
003863  004184  //       : res := mem_Free(popupWindow);
003864  004185  //       : if(!res) goto FreeFunctionFailed; // should never happen if memory not corrupted
003865  004186  //       : The callers stack is shared by the loaded function,
003866  004187  //       : however any global variables in the loaded function
003867  004188  //       : are private to that function.
003868  004189  //
003869  004190        
003870  004191  func file_Run("fname.4xe", "arglistptr"), 1;
003871  004192  // Syntax: res := file_Run("fname.4xe","arglistptr");
003872  004193  // Usage : res := file_Run(fname, argptr);
003873  004194  // Notes : current program releases any allocated memory but
003874  004195  //       : retains the stack and global memory.
003875  004196  //       : If arglistptr is 0, no arguments are passed, else
003876  004197  //       : arglist points to an array, the first element being
003877  004198  //       : the number of elements in the array.
003878  004199  //       : func 'main' in the called program accepts
003879  004200  //       : the arguments, if any. The arguments can only
003880  004201  //       : be passed by value, no pointers or references can be
003881  004202  //       : used as all memory is cleared before the file
003882  004203  //       : is loaded. Refer to file_Exec and file_LoadFunction
003883  004204  //       : for functions that can pass by reference.
003884  004205        
003885  004206  func file_Exec("fname.4xe", "arglistptr"), 1;
003886  004207  // Syntax: res := file_Exec("fname.4xe","arglistptr");
003887  004208  // Usage : res := file_Exec("fname.4xe","arglistptr");
003888  004209  // Notes : returns like a function, current program
003889  004210  //       : calling program is kept active and control returns to it.
003890  004211  //       : If arglistptr is 0, no arguments are passed, else
003891  004212  //       : arglist points to an array, the first element being
003892  004213  //       : the number of elements in the array.
003893  004214  //       : func 'main' in the called program accepts the arguments.
003894  004215  //       : This function is similar to file_LoadFunction(...), however,
003895  004216  //       : the function argument list is passed by pointer, and
003896  004217  //       : the memory consumed by the function is released as
003897  004218  //       : soon as the function completes.
003898  004219        
003899  004220  func file_LoadImageControl("fname1", "fname2", "mode"), 1;
003900  004221  // Syntax: hImagelist := file_LoadImageControl ("controlfile", "imagefile", "mode"),
003901  004222  // Usage : hImagelist := file_LoadImageControl ("resource.dat", "resource.gci", 0);
003902  004223  // Notes : Reads a control file to create an image list.
003903  004224  //       : Returns NULL if function fails.
003904  004225  //       : Returns a handle (pointer to the memory allocation) to the
003905  004226  //       : image control list that has been created.
003906  004227  //       : "fname1" is the control list filename "*.dat"
003907  004228  //       : "fname2" is the image filename "*.gci"
003908  004229        
003909  004230  // Notes : This function Calculates the size of a chunk of memory required for
003910  004231  //       : a image list and populates it from the image control file ("*.dat")
003911  004232  //       : therefore, when imagelist is no longer required, you must de-allocate
003912  004233  //       : the image list memory by using eg:- mem_Free(hImagelist);
003913  004234  //       : to restore the heap.
003914  004235  //       :
003915  004236  //       : mode 0:- it is assumed that there is a graphics file with the
003916  004237  //       : file extension "fname2.gci". In this case, the images have been stored
003917  004238  //       : in a FAT16 file concurrently, and the offsets that ar derived from the
003918  004239  //       : "fname1.dat" file are saved in the image control so that the image control
003919  004240  //       : can open the file (*.gci) and us file_Seek to get to the position of the
003920  004241  //       : image which can then automatically be displayed using file_Image(xpos, ypos, hSource);
003921  004242  //       : mode 0 builds the image control quickly as it only scans the *.dat file
003922  004243  //       : for the file offsets and save them in the relevant entries in the image control.
003923  004244  //       : The penalty is that images take longer to find when displayed due to file_Seek
003924  004245  //       : overheads.
003925  004246  //
003926  004247  //       : mode 1:- it is assumed that there is a graphics file with the
003927  004248  //       : file extension "fname2.gci". In this case, the images have been stored
003928  004249  //       : in a FAT16 file concurrently, and the offset of the images are saved
003929  004250  //       : in the image control so that image file (*.gci) can be mapped to directly.
003930  004251  //       : The absolute cluster/sector is mapped so file seek does not need to be called
003931  004252  //       : internally. This means that there is no seek time penalty, however, the
003932  004253  //       : image list takes a lot longer to build, as all the seeking is done at control
003933  004254  //       : build time.
003934  004255        
003935  004256  //       : mode 2:- the graphics file with the is placed in a partitioned area
003936  004257  //       : In this case, the images have been stored in a in a known raw area of the FAT16
003937  004258  //       : disk, and the absolute address of the images are saved in the DAT file
003938  004259  //       : This is the fastest operation of the image control as there is no seeking
003939  004260  //       : or other disk activity taking place.
003940  004261        
003941  004262  func file_Mount(), 1;
003942  004263  // Syntax: r := file_Mount();
003943  004264  // Usage : r := file_Mount();
003944  004265  // Notes : Create a control block for FAT16 and mount the File System
003945  004266        
003946  004267  func file_Unmount(), 0;
003947  004268  // Syntax: file_Unmount();
003948  004269  // Usage : file_Unmount();
003949  004270  // Notes : release any control block and buffers for FAT16
003950  004271  //       : and unmount the File System
003951  004272        
003952  004273  func file_PlayWAV("fname1"), 1;
003953  004274  // Syntax: file_PlayWAV("fname1");
003954  004275  // Usage : file_PlayWAV("ding.wav");
003955  004276  // Notes : Play a wave file with filename "fname1"
003956  004277  //       : This function automatically grabs a chunk
003957  004278  //       : of memory for a file buffer, and a wave
003958  004279  //       : buffer. The minimum memory requirement is
003959  004280  //       : about 580 bytes for the disk io service and
003960  004281  //       : a minimum wave buffer size of 1024. The siz
003961  004282  //       : of the wave buffer allocation
003962  004283  //       : can be increased by the snd_BufSize function.
003963  004284  //       : The default size 1024 bytes.
003964  004285  //       : NB the memory is only required during the
003965  004286  //       : duration of play, and is automatically
003966  004287  //       : released while not in use.
003967  004288  //       : See the Sound Class services for other associated controls.
003968  004289  //       : If there are no errors, returns number of blocks to play (1 to 32767)
003969  004290  //       : If errors occured, the folling is returned
003970  004291  //       : -7  : Insufficient memory available for WAV buffer and file
003971  004292  //       : -6  : cant play this rate
003972  004293  //       : -5  : no data chunk found in first rsector
003973  004294  //       : -4  : no format data
003974  004295  //       : -3  : no wave chunk signature
003975  004296  //       : -2  : bad wave file format
003976  004297  //       : -1  : file not found
003977  004298        
003978  004299  func file_Rename("fname1", "fname2"), 1;     // rename a file
003979  004300  // Syntax: file_Rename ("oldname", "newname"),
003980  004301  // Usage : file_Rename ("file.txt", "file.bak");
003981  004302  // Notes : Renames a file on uSD.
003982  004303  //       : Returns FALSE if function fails. (file does not exist, or new filename already exists)
003983  004304  //       : Returns TRUE, if successful.
003984  004305        
003985  004306  func file_SetDate("handle", "year", "month", "day", "hour", "Minute", "Second") , 1; // Sets date and time for an open file
003986  004307  // Syntax: res := file_SetDate("handle", "year", "month", "day", "hour", "Minute", "Second) ;
003987  004308  // Usage : res := file_SetDate(hndl, 2014, 10, 31, 10, 0, 0)
003988  004309  // Notes : year is a 4 digit year
003989  004310  //       : Due to limitations of FAT16 only even seconds are stored
003990  004311  //       : The handle must be closed before the file information is updated
003991  004312  //       : returns TRUE if date + time + handle valid
003992  004313  //       : returns FLAST if handle invalid, or date or time not valid (only simple checking performed).
003993  004314        
003994  004315  func __reserved57(), 0; // do not remove
003995  004316  func __reserved58(), 0; // do not remove
003996  004317        
003997  004318        
003998  004319  //------------------------------------------------------------------------------
003999  004320  // FILEIO Error Code Constants
004000  004321  //------------------------------------------------------------------------------
004001  004322  #CONST
004002  004348  #END
004003  004349        
004004  004350  //------------------------------------------------------------------------------
004005  004351  // DISK struct offsets
004006  004352  //------------------------------------------------------------------------------
004007  004353  #CONST
004008  004370  #END
004009  004371        
004010  004372  //------------------------------------------------------------------------------
004011  004373  // FILE struct offsets
004012  004374  //------------------------------------------------------------------------------
004013  004375  #CONST
004014  004394  #END
004015  004395        
004016  004396        
004017  004397  //------------------------------------------------------------------//
004018  004398  //        Sound Class Services
004019  004399  //------------------------------------------------------------------//
004020  004400        
004021  004401  func snd_Volume("var"), 0;
004022  004402  // Syntax: snd_Volume("var");
004023  004403  // Usage : snd_Volume(30);
004024  004404  // Notes : set sound playback volume.  Var must
004025  004405  //       : be in the range from 8 (min volume)
004026  004406  //       : to 127 (max volume). If var is less
004027  004407  //       : than 8 volume is set to 8, and if
004028  004408  //       : var > 127 it is set to 127.
004029  004409        
004030  004410  func snd_Pitch("pitch"), 1;
004031  004411  // func snd_Pitch("freq"), 1;
004032  004412  // func snd_Pitch(7000), 1; // play the wave file with a sample frequency of 7khz
004033  004413  // Notes : sets the samples playback rate to a different frequency
004034  004414  //       : The minimum value is 4khz
004035  004415  //       : Setting the pitch to zero restores the original sample rate
004036  004416  //       : Return value is the samples original sample rate.
004037  004417        
004038  004418  func snd_BufSize("var"), 0;
004039  004419  // Syntax: snd_BufSize("var");
004040  004420  // Usage : snd_BufSize(2);
004041  004421  // Notes : specify the a memory chunk size for the wavefile buffer.
004042  004422  //       : default size 1024 bytes.
004043  004423  //       : 0 = 1024 bytes (default)
004044  004424  //       : 1 = 2048 bytes
004045  004425  //       : 2 = 4096 bytes
004046  004426  //       : 3 = 8192 bytes
004047  004427        
004048  004428  func snd_Stop(), 0;
004049  004429  // Syntax: snd_Stop();
004050  004430  // Usage : snd_Stop();
004051  004431  // Notes : stop any sound that is playing, releasing
004052  004432  //       : buffers and closes any open wav file.
004053  004433        
004054  004434  func snd_Pause(), 0;
004055  004435  // Syntax: snd_Pause();
004056  004436  // Usage : snd_Pause();
004057  004437  // Notes : pauses any sound that is playing, does nothing
004058  004438  //       : until sound is resumed with snd_Continue().
004059  004439  //       : The sample cam be terminated with snd_Stop.
004060  004440  //       : buffers and closes any open wav file.
004061  004441        
004062  004442  func snd_Continue(), 0;
004063  004443  // Syntax: snd_Continue();
004064  004444  // Usage : snd_Continue();
004065  004445  // Notes : resume any sound that is paused by snd_Pause.
004066  004446        
004067  004447  func snd_Playing(), 1;
004068  004448  // Syntax: snd_Playing();
004069  004449  // Usage : r := snd_Playing();
004070  004450  // Notes : returns 0 if sound has finished playing,
004071  004451  //       : else return number of 512 byte blocks to go.
004072  004452        
004073  004453  func snd_Freq("Freq", "Duration"), 1;
004074  004454  // Syntax: snd_Freq("Freq", "Duration");
004075  004455  // Usage : r := snd_Freq(1000, 2000);
004076  004456  // Notes : Returns 0 if note cannot be played because a wav file is playing
004077  004457  //       : else return True.
004078  004458  //       : Minimum Freq is 20
004079  004459  //       : This will produce a pure Square wave and is designed for driving
004080  004460  //       : Piezo transducers which require this sort of drive. It can also be
004081  004461  //       : used to drive the amp on displays with audio.
004082  004462        
004083  004463        
004084  004464  func __reserved60(), 0; // do not remove
004085  004465  func __reserved61(), 0; // do not remove
004086  004466  func __reserved62(), 0; // do not remove
004087  004467        
004088  004468  //=========================================================================================================
004089  004469  // String functions
004090  004470  //=========================================================================================================
004091  004471        
004092  004472  func str_Ptr("&var"), 1;
004093  004473  // Syntax: str_Ptr(&var);
004094  004474  // Usage : p := str_Ptr(&var);
004095  004475  // Notes : return a byte pointer to a word region
004096  004476        
004097  004477  func str_GetD("&ptr", "&var"), 1;
004098  004478  // Syntax: str_GetD(&ptr, &var);
004099  004479  // Usage : ok := str_GetD(&ptr, &var);
004100  004480  // Notes : convert number in a string to DWORD ( myvar[2] )
004101  004481  //       : returns true if function succeeds, advancing ptr
004102  004482        
004103  004483  func str_GetW("&ptr", "&var"), 1;
004104  004484  // Syntax: str_GetW(&ptr, &var);
004105  004485  // Usage : ok := str_GetW(&ptr, &var);
004106  004486  // Notes : convert number in a string to WORD ( myvar )
004107  004487  //       : returns true if function succeeds, advancing ptr
004108  004488        
004109  004489  func str_GetHexW("&ptr", "&var"), 1;
004110  004490  // Syntax: str_GetHexW(&ptr, &var);
004111  004491  // Usage : ok := str_GetHexW(&ptr, &var);
004112  004492  // Notes : convert HEX number in a string to WORD ( myvar )
004113  004493  //       : returns true if function succeeds, advancing ptr
004114  004494        
004115  004495  func str_GetC("&ptr", "&var"), 1;
004116  004496  // Syntax: str_GetC(&ptr, &var);
004117  004497  // Usage : ok := str_GetC(&ptr, &var);
004118  004498  // Notes : get a valid ascii char in a string to WORD ( myvar )
004119  004499  //       : returns true if function succeeds, advancing ptr
004120  004500        
004121  004501  func str_GetByte("ptr"), 1;
004122  004502  // Syntax: str_GetByte(ptr);
004123  004503  // Usage : myvar := str_GetByte(ptr);
004124  004504  // Notes : get a byte to myvar
004125  004505  //       : returns value
004126  004506        
004127  004507  func str_GetWord("ptr"), 1;
004128  004508  // Syntax: GetWord(ptr);
004129  004509  // Usage : GetWord(ptr);
004130  004510  // Notes : get a word to myvar
004131  004511  //       : returns value
004132  004512        
004133  004513  func str_PutByte("ptr","val"), 0;
004134  004514  // Syntax: str_PutByte(ptr);
004135  004515  // Usage : myvar := str_PutByte(ptr);
004136  004516  // Notes : put a byte at ptr
004137  004517  //       : returns value
004138  004518        
004139  004519  func str_PutWord("ptr","val"), 0;
004140  004520  // Syntax: str_PutWord("ptr","val");
004141  004521  // Usage : str_PutWord(p,100);
004142  004522  // Notes : put word 100 at current pointer location
004143  004523  //       : returns value
004144  004524        
004145  004525  func str_Match("&ptr", "*str"), 1;
004146  004526  // Syntax: str_Match(&ptr, *str);
004147  004527  // Usage : r := str_Match(&p, "hello");
004148  004528  // Notes : Case sensitive match
004149  004529  //       : returns true if function succeded, andvancing pointer to position past
004150  004530  //       : the matched item. Note that any whitespace characters are skipped
004151  004531  //       : in the source string prior to the test.
004152  004532        
004153  004533  func str_MatchI("&ptr", "*str"), 1;
004154  004534  // Syntax: str_MatchI(&ptr, *str);
004155  004535  // Usage : r := str_MatchI(&p, "hello");
004156  004536  // Notes : Case insensitive match
004157  004537  //       : returns true if function succeded, andvancing pointer to position past
004158  004538  //       : the matched item. Note that any whitespace characters are skipped
004159  004539  //       : in the source string prior to the test.
004160  004540        
004161  004541  func str_Find("&ptr", "*str"), 1;
004162  004542  // Syntax: str_Find(&ptr, *str);
004163  004543  // Usage : n := str_Find(&p, "hello");
004164  004544  // Notes : given the address of a pointer to a source string as the
004165  004545  //       : first argument, and a pointer to a test string as the second
004166  004546  //       : argument, attempt to find the position of the matching string
004167  004547  //       : in the source string. The test is performed with case sensitivity.
004168  004548  //       : return 0 if not found, else returns the address of the first
004169  004549  //       : character of the match. NB:- The source pointer is not altered.
004170  004550        
004171  004551  func str_FindI("&ptr", "*str"), 1;
004172  004552  // Syntax: str_Find(&ptr, *str);
004173  004553  // Usage : n := str_Find(&p, "hello");
004174  004554  // Notes : given the address of a pointer to a source string as the
004175  004555  //       : first argument, and a pointer to a test string as the second
004176  004556  //       : argument, attempt to find the position of the matching string
004177  004557  //       : in the source string. The test is performed with no case
004178  004558  //       : sensitivity, eg upper and lower case chars are accepted.
004179  004559  //       : return 0 if not found, else returns the address of the first
004180  004560  //       : character of the match. NB:- The source pointer is not altered.
004181  004561        
004182  004562  func str_Length("ptr"), 1;
004183  004563  // Syntax: str_Length(ptr);
004184  004564  // Usage : len := str_Ptr(mystring);
004185  004565  // Notes : return the length of a byte aligned string excluding terminator
004186  004566        
004187  004567  func str_Printf("&ptr", "*format"), 1;
004188  004568  // Syntax: str_Printf("&ptr", "*format");
004189  004569  // Usage : r := str_Printf(&p, "hello");
004190  004570  // Notes : refer to documentation
004191  004571  //       :
004192  004572        
004193  004573  func str_Cat("dest","src"), 1;
004194  004574  // Syntax: str_Append("&dest","&src");
004195  004575  // Usage : str_Append(&buf,"Hello");
004196  004576  // Notes : Appends a copy of the source string to the destination string.
004197  004577  //       : The terminating null character in destination is overwritten by
004198  004578  //       : the first character of source, and a new null-character is appended
004199  004579  //       : at the end of the new string formed by the concatenation of both in destination.
004200  004580  //       : returns destination.
004201  004581        
004202  004582  func str_CatN("dest","src","count"), 1;
004203  004583  // Syntax: str_Append("&dest","&src","count");
004204  004584  // Usage : str_Append(&buf,"Monday",3);
004205  004585  // Notes : Appends a copy of the source string to the destination string.
004206  004586  //       : The number of characters copied is limited by "count".
004207  004587  //       : The terminating null character in destination is overwritten by
004208  004588  //       : the first character of source, and a new null-character is appended
004209  004589  //       : at the end of the new string formed by the concatenation of both in destination.
004210  004590  //       : returns destination.
004211  004591        
004212  004592        
004213  004593  func str_ByteMove("src", "dest", "count"), 1;
004214  004594  // Syntax   : str_ByteMove(src, dest, bytecount);
004215  004595  // Input    : STR *source points to byte aligned source.
004216  004596  //          : STR *dest   points to byte aligned destination.
004217  004597  //          : VAR count   number of bytes to transfer.
004218  004598  // Usage    : nextpos := str_ByteMove(s, d, 100);
004219  004599  // Notes    : copy bytes from "src" to "dest", stopping only
004220  004600  //          : when "count" is exhausted.
004221  004601  //          : No terminator is appended, it is purely a
004222  004602  //          : byte copy, and any zeroes encountered will
004223  004603  //          : also be copied.
004224  004604  // Returns  : returns a pointer to the end of the destination
004225  004605  //          : (which is "dest" + "count")
004226  004606        
004227  004607        
004228  004608  func str_Copy("dest", "src"), 1;
004229  004609  // Syntax   : str_Copy(dest, src);
004230  004610  // Input    : STR *dest   points to byte aligned destination.
004231  004611  //          : STR *source points to byte aligned source.
004232  004612  // Usage    : nextplace := str_Copy(d, s);
004233  004613  // Notes    : copy a string from "src" to "dest", stopping only
004234  004614  //          : when the end of source string "src" is encountered
004235  004615  //          : (0x00 terminator).
004236  004616  //          : The terminator is always appended, even if "src" is
004237  004617  //          : an empty string.
004238  004618  // Returns  : returns a pointer to the 0x00 string terminator at
004239  004619  //          : end of "dest" (which is "dest" + str_Length(src); )
004240  004620        
004241  004621        
004242  004622  func str_CopyN("dest", "src", "count"), 1;
004243  004623  // Syntax   : str_CopyN(dest, src, bytecount);
004244  004624  // Input    : STR *dest   points to byte aligned destination.
004245  004625  //          : STR *source points to byte aligned source.
004246  004626  //          : VAR count   max number of chars to copy.
004247  004627  // Usage    : nextplace := str_CopyN(d, s, 100);
004248  004628  // Notes    : copy a string from "src" to "dest", stopping only
004249  004629  //          : when "count" is exhausted, or end of source
004250  004630  //          : string "str" is encountered (0x00 string terminator).
004251  004631  //          : The terminator is always appended, even if
004252  004632  //          : "count" is zero, or "src" is a null string.
004253  004633  // Returns  : returns a pointer to the 0x00 string terminator
004254  004634  //          : (which is "dest" + whatever was copied)
004255  004635        
004256  004636        
004257  004637  func __reserved63(), 0; // do not remove
004258  004638  func __reserved64(), 0; // do not remove
004259  004639  func __reserved65(), 0; // do not remove
004260  004640  func __reserved66(), 0; // do not remove
004261  004641        
004262  004642  //=========================================================================================================
004263  004643  // FLASH memory functions
004264  004644  //=========================================================================================================
004265  004645  func flash_GetByte("bank", "ptr"), 1;
004266  004646  // Syntax   : flash_GetByte(bank, ptr);
004267  004647  // Usage    : myvar := flash_GetByte(FLASHBANK_2, 0x0017); // read first byte in data statement of bank 2
004268  004648  // Notes    : Reads a single byte from any flash location.
004269  004649  //          : If the bank is read protected, only the first 2 bytes can be read (0x55, 0xAA)
004270  004650  //          : which is the header signature for a valid program.
004271  004651  // Returns  : the byte value from the location
004272  004652        
004273  004653        
004274  004654  func flash_GetWord("bank", "ptr"), 1;
004275  004655  // Syntax   : flash_GetWord(bank, ptr);
004276  004656  // Usage    : myvar := flash_GetWord(FLASHBANK_2, 0x0000); // read first word in flash bank  (0xAA55)
004277  004657  // Notes    : Reads a single word from any flash location.
004278  004658  //          : The pointer is byte aligned.
004279  004659  //          : If the bank is read protected, only the first word can be read
004280  004660  //          : which is the header signature for a valid program (0xAA55).
004281  004661  // Returns  : the byte value from the location
004282  004662        
004283  004663        
004284  004664  func flash_Copy("bank", "ptr", "dest", "count"), 1;
004285  004665  // Syntax   : flash_Copy(bank, ptr);
004286  004666  // Usage    : myvar := flash_Copy(FLASHBANK_2, 0x1234, mybuf, 20); // read 20 bytes from FLASHBANK_2 starting from 0x1234
004287  004667  // Notes    : Copies bytes from any flash locations to a user buffer.
004288  004668  //          : The destination pointer is byte aligned, so a str_Ptr must be raised to get correct address.
004289  004669  //          : If the bank is read protected, 0 bytes will be read
004290  004670  //          : which is the header signature for a valid program (0xAA55).
004291  004671  // Returns  : the count of bytes transferred.
004292  004672        
004293  004673        
004294  004674  func flash_Run("bank"), 1;
004295  004675  // Syntax    : flash_Run(bankx);
004296  004676  // Usage     : res := flash_Run(FLASHBANK_5);
004297  004677  // Notes     : Restarts the processor, running code from the required
004298  004678  //           : flash bank. bank may be a variable, or one of the
004299  004679  //           : pre-defined constants:-
004300  004680  //           :    FLASHBANK_0                 //0x00
004301  004681  //           :    FLASHBANK_1                 //0x01
004302  004682  //           :    FLASHBANK_2                 //0x02
004303  004683  //           :    FLASHBANK_3                 //0x03
004304  004684  //           :    FLASHBANK_4                 //0x04
004305  004685  //           :    FLASHBANK_5                 //0x05
004306  004686  // returns    : This function should net return as it restarts
004307  004687  //        : the processor and jumps to the required bank,
004308  004688  //        : If it does return, -1 indicates incorrect/invalid
004309  004689  //        : bank number, and -2 indicates no valid program
004310  004690  //        : in the selected bank.
004311  004691        
004312  004692  func flash_Bank(), 1;
004313  004693  // Syntax   : flash_Bank();
004314  004694  // Usage    : myvar := flash_Bank();
004315  004695  // Notes    : Identifies which flash bank the code is running from.
004316  004696  // Returns  : The FLASH bank that code is currently running from, 0-5.
004317  004697        
004318  004698        
004319  004699  func flash_EraseBank("bank", "confirmation"), 1;
004320  004700  // Syntax   : flash_EraseBank(bank, confirmation);
004321  004701  // Usage    : result := flash_EraseBank(FLASHBANK_3, 0xDEAD); // erase an entire flash bank, confirm overwrite of protected program
004322  004702  // Notes    : This function should be used with extreme caution.
004323  004703  //          : The selected bank will be completely erased regardless of FLASH_WRITE_PROTECT status
004324  004704  //          : if the confirmation value is set to hex 0xDEAD. If confirmation is any other value,
004325  004705  //          : a protected bank will not be erased, and function will return with 0
004326  004706  //          : If the destination bank is the same as the execution bank, the processor will reset
004327  004707  //          : upon completion of erase. If the "bank" argument is set to ALL (-1) and confirmation is set to 0xDEAD
004328  004708  //          : FLASHBANK_0 thru FLASHBANK_5 are cleared.
004329  004709  //          : Used with caution, this is a good way to 'clean up' the entire flash when starting new projects.
004330  004710  // Returns  : returns true if the function succeeded
004331  004711  //          : NB:- reset processor if program is erasing itself, or the ALL bank option is selected.
004332  004712        
004333  004713  func flash_LoadFile("bank", "filename"), 1;
004334  004714  // Syntax   : flash_LoadFile(bank, ptr);
004335  004715  // Usage    : result := flash_LoadFile(FLASHBANK_2, "TETRIS10.EXE"); // load the file from disk into FLASHBANK_2
004336  004716  // Notes    : Copies a file from uSD to the required flashbank.
004337  004717  //          : The destination bank cannont be the execution bank, or a bank that is write protected
004338  004718  // Returns  : returns true if the function succeeded.
004339  004719        
004340  004720        
004341  004721  func flash_WriteBlock("sourceptr", "bank", "page"), 1;
004342  004722  // Syntax   : flash_WriteBlock(pbuf, bank, page);
004343  004723  // Usage    : result := flash_WriteBlock(buffer, FLASHBANK_5, 8); // store the 2k buffer to FLASHBANK_5, location 16384
004344  004724  // Notes    : Copies a 2kbyte buffer to the required flashbank in block 0-15.
004345  004725  //          : The address of each block is 0, 2048, 4096 etc, determined by the page number 0-15.
004346  004726  //          : The destination bank cannot be an execution bank, or a program bank that is write protected.
004347  004727  // Returns  : returns true if the function succeeded.
004348  004728        
004349  004729        
004350  004730  func flash_putstr("bank", "ptr"), 1;
004351  004731  // Syntax   : flash_putstr(bank, ptr);
004352  004732  // Usage    : flash_Copy(FLASHBANK_2, 350); // print a string from FLASHBANK_2, location 350
004353  004733  // Notes    : Works the same as putstr, however, the source of the asciiz string is in FLASH storage
004354  004734  //          : Output may be redirected with the to(..) function. Bit15 of ptr is assumed 0.
004355  004735  // Returns  : True if function succeeds, usually ignored. 0 if bank is read protected
004356  004736        
004357  004737  func flash_Blit16("bank", "offset", "count"), 1;
004358  004738  // Syntax   : flash_Blit16(bank, offset, pixelcount);
004359  004739  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit16(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (800 bytes)
004360  004740  // Notes    : Blit an image to a GRAM window from FLASH storage.
004361  004741  //          : Image is stored 16bits per pixel (565) in a linear fashion to suit the GRAM mechanism
004362  004742  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004363  004743        
004364  004744  func flash_Blit8("bank", "offset", "count"), 1;
004365  004745  // Syntax   : flash_Blit8(bank, offset, pixelcount);
004366  004746  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit8(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (400 bytes)
004367  004747  // Notes    : Blit an image to a GRAM window from FLASH storage.
004368  004748  //          : Image is stored 8 bits per pixel (332 format) in a linear fashion to suit the GRAM mechanism
004369  004749  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004370  004750        
004371  004751  func flash_Blit4("bank", "offset", "count", "palette16colour"), 1;
004372  004752  // Syntax   : flash_Blit16(bank, offset, pixelcount, pal16);
004373  004753  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit4(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (200 bytes packed 4:4)
004374  004754  // Notes    : Blit an image to a GRAM window from FLASH storage.
004375  004755  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 16 x 16bit colours
004376  004756  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004377  004757        
004378  004758  func flash_Blit2("bank", "offset", "count", "palette4colour"), 1;
004379  004759  // Syntax   : flash_Blit16(bank, offset, pixelcount, pal4);
004380  004760  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit2(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (100 bytes packed 2:2:2:2)
004381  004761  // Notes    : Blit an image to a GRAM window from FLASH storage.
004382  004762  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 4 x 16bit colours
004383  004763  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004384  004764        
004385  004765  func flash_Blit1("bank", "offset", "count", "pallete2colour"), 1;
004386  004766  // Syntax   : flash_Blit1(bank, offset, pixelcount, pal2);
004387  004767  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit1(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (50 bytes packed 1:1:1:1:1:1:1:1)
004388  004768  // Notes    : Blit an image to a GRAM window from FLASH storage.
004389  004769  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 2 x 16bit colours
004390  004770  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004391  004771        
004392  004772  func flash_Exec("bank", "arglistptr"), 1;
004393  004773  // Syntax: res := flash_Exec("bank","arglistptr");
004394  004774  // Usage : res := flash_Exec("bank","arglistptr");
004395  004775  // Notes : returns like a function, current program
004396  004776  //       : calling program is kept active and control returns to it.
004397  004777  //       : If arglistptr is 0, no arguments are passed, else
004398  004778  //       : arglist points to an array, the first element being
004399  004779  //       : the number of elements in the array.
004400  004780  //       : func 'main' in the called bank accepts the arguments.
004401  004781  // WARNING Not currently implemented!
004402  004782        
004403  004783        
004404  004784  func __reserved68(), 0; // do not remove
004405  004785  func __reserved69(), 0; // do not remove
004406  004786  func __reserved70(), 0; // do not remove
004407  004787        
004408  004788  //=========================================================================================================
004409  004789  // I/O and hardware functions
004410  004790  //=========================================================================================================
004411  004791        
004412  004792        
004413  004793        
004414  004794        
004415  004795  func pin_Pulseout("pin", "value"), 1;        // non blocking (program execution continues during pulse)
004416  004796  func pin_PulseoutB("pin", "value"), 1;    // blocking (program execution suspended during pulse)
004417  004797  // Syntax: pin_Pulseout(pin, value);
004418  004798  // Usage : pin_Pulseout(PA3, 100);                 // output 100msec pulse on PA3
004419  004799  // Notes : only available on PA0 to PA9
004420  004800  //       : Invert the state of an output for "value" milliseconds.
004421  004801  //       : pulseout is non blocking, that is, code execution may continue while
004422  004802  //       : a pulse is occuring, and pulses can occur on multiple pins simultaneously.
004423  004803  //       : If not already an output, pin is automatically made a push/pull output,
004424  004804  //       : and the last state of its output latch will determine pulse polarity.
004425  004805  //       : It's its open drain state is not altered if the pin was already an output.
004426  004806  //       : If pulseout is called while pulseout is still active, the pulse timer
004427  004807  //       : will simply be updated with the new "value" and the pulse will continue
004428  004808  //       : with the extended value.
004429  004809  //       : returns true if the pin number is legal (usually ignored)
004430  004810        
004431  004811        
004432  004812  func pin_Counter("pin", "mode", "OVFfunction"), 1;
004433  004813  // Syntax: pin_Counter(pin, mode, userfunc);
004434  004814  // Usage : pin_Counter(PA5, 1, stopfunc);         // count rising edge pulses on pin PA5, call stopfunc on overflow
004435  004815  // Notes : only available on PA4 to PA9
004436  004816  //       : Connect a counter to a pin to count transistions, and optionally call an event function
004437  004817  //       : when the 16bit counter wraps from 0xFFFF to zero. The counter can be read or written
004438  004818  //       : to at any time with peekW and pokeW, therefore, the count may be set to eg 0xFFF0 so that eg:
004439  004819  //       : user function "OVFfuction" will be called after 16 pulses. If "OVFfunction" is set to zero, only the
004440  004820  //       : counter will increment, and simply wrap back to zero from 0xFFFF. If "OVFfunction" points to a user
004441  004821  //       : function, wnen the event fires, pin_Counter will be disabled, and will need to be re-armed (ie '1shot' operation)
004442  004822  //       : The pin may be configured as an input or output, the function behaves the same.
004443  004823  //       : All six pin counters may be active simultaneously, and the maximum frequency of pin transistions
004444  004824  //       : should not exceed a few Khz in mode 1 and 2and are usually used for simple process control counting.
004445  004825  //       : "mode" has the following effect:-
004446  004826  //       : mode COUNT_OFF(0)  = disconnect the counter from the pin, "OVFfunction" therefore ignored, and counting is inhibited.
004447  004827  //       : mode COUNT_RISE(1) = increment on every rising edge
004448  004828  //       : mode COUNT_FALL(2) = increment on every falling edge
004449  004829  //       : mode COUNT_EDGE(3) = increment on every rising and falling edge
004450  004830        
004451  004831  //------------------------------------------------------------------//
004452  004832  // pin counter mode constants                                       //
004453  004833  //------------------------------------------------------------------//
004454  004834  #CONST
004455  004839  #END
004456  004840        
004457  004841  func Qencoder1("PHApin", "PHBpin", "mode"), 1;
004458  004842  // Syntax: Qencoder1(pinA, pinB, mode);
004459  004843  // Usage : Qencoder1(PA4, PA5, stopfunc);         // connect PA4 and PA5 pins to qudrature encoder module #1
004460  004844  // Notes : not available on pins PA14 and PA15
004461  004845  //       : Connect a quadrature encoder to a pair of pins The position counter and delta can be read
004462  004846  //       : or written to at any time with peekW and pokeW using the following constants:-
004463  004847  //       : It is necessary to configure the pins first, depending on your requirements, eg
004464  004848  //       :           pin_Set(PIN_INP_HI, PA4);     // PA4 as input, with pullup to Vcc
004465  004849  //       : or maybe  pin_Set(PIN_INP, PA4);        // PA4 as input, no pullup or pulldown
004466  004850  //       : Returns true if the pin numbers are legal (usually ignored)
004467  004851  //    QEN1_COUNTER_LO
004468  004852  //    QEN1_COUNTER_HI
004469  004853  //    QEN1_DELTA This is reset to 0 when read
004470  004854        
004471  004855  func Qencoder2("PHApin", "PHBpin", "mode"), 1;
004472  004856  // Syntax: Qencoder2(pinA, pinB, mode);
004473  004857  // Usage : Qencoder2(PA4, PA5, stopfunc);         // connect PA4 and PA5 pins to qudrature encoder module #2
004474  004858  // Notes : not available on pins PA14 and PA15
004475  004859  //       : Connect a quadrature encoder to a pair of pins The position counter and delta can be read
004476  004860  //       : or written to at any time with peekW and pokeW using the following constants:-
004477  004861  //       : It is necessary to configure the pins first, depending on your requirements, eg
004478  004862  //       :           pin_Set(PIN_INP_HI, PA4);     // PA4 as input, with pullup to Vcc
004479  004863  //       : or maybe  pin_Set(PIN_INP, PA4);        // PA4 as input, no pullup or pulldown
004480  004864  //       : Returns true if the pin numbers are legal (usually ignored)
004481  004865  //    QEN2_COUNTER_LO
004482  004866  //    QEN2_COUNTER_HI
004483  004867  //    QEN2_DELTA This is reset to 0 when read
004484  004868        
004485  004869        
004486  004870  func Qencoder1Reset(), 0;
004487  004871  // Syntax: Qencoder1Reset();
004488  004872  // Usage : Qencoder1Reset();     // reset the counter and delta value for encoder #1
004489  004873  // Notes :
004490  004874  //    QEN1_COUNTER_LO is reset to zero
004491  004875  //    QEN1_COUNTER_HI is reset to zero
004492  004876  //    QEN1_DELTA is reset to zero
004493  004877        
004494  004878  func Qencoder2Reset(), 0;
004495  004879  // Syntax: Qencoder2Reset();
004496  004880  // Usage : Qencoder2Reset();     // reset the counter and delta value for encoder #2
004497  004881  // Notes :
004498  004882  //    QEN2_COUNTER_LO is reset to zero
004499  004883  //    QEN2_COUNTER_HI is reset to zero
004500  004884  //    QEN2_DELTA is reset to zero
004501  004885        
004502  004886        
004503  004887  func pin_PulseoutCount("pin", "freq", "count", "function"), 1;        // pulse pin at freq count times calling function when complete
004504  004888  // Syntax: pin_PulseoutCount(pin, freq, count, function);
004505  004889  // Usage : pin_PulseoutCount(PA4, 1000, 5000, 0);            // output 5000 1msec pulses on PA3
004506  004890  // Notes : only available on PA4 to PA9, maximum 3 active at any one time
004507  004891  //       : Invert the state of an output at a "freq" freuency "count" times.
004508  004892  //       : PulseoutCount is non blocking, that is, code execution may continue while
004509  004893  //       : pulses are occuring, and pulses can occur on multiple pins simultaneously.
004510  004894  //       : If not already an output, pin is automatically made a push/pull output,
004511  004895  //       : and the last state of its output latch will determine pulse polarity.
004512  004896  //       : It's its open drain state is not altered if the pin was already an output.
004513  004897  //       : If PulseoutCount is called while PulseoutCount is still active, the pulse counter
004514  004898  //       : will simply have the new "value" added to it.
004515  004899  //       : returns false if the pin number is illegal, freq is < 10, or all counters in use
004516  004900  //       : returns true if the pin number is legal (usually ignored)
004517  004901        
004518  004902  func __reserved72(), 0; // do not remove
004519  004903        
004520  004904  func pwm_Init("pin", "mode", "value"), 1;    // set pin PA4-PA9 for the required PWM mode and select its source
004521  004905  // Syntax: pwm_Init(pin, value);
004522  004906  // Usage : pwm_Init(PA4, 1, 500);                 // output 50% duty cycle on PA4
004523  004907  // Notes : only available on PA4 to PA9
004524  004908  //       : Mode PWM_OFF(0)    : Turn off the PWM (pin is left as output)
004525  004909  //       : Mode PWM_PLAIN(1)  : Plain PWM value is 0-1000, corresponding to 0-100% duty cycle.
004526  004910  //       :                    : Raw frequency ~70khz. A value of 1 is not valid
004527  004911  //       : Mode PWM_SERVO(2)  : Servo PWM value is 100-200, corresponding to 1.00 to 2.00 ms
004528  004912  //       :                    : Values of 0 to 600 are valid (0-6ms), but should be used with caution.
004529  004913  //       :                    : Repetition rate ~50hz or 20ms
004530  004914  //       : Mode PWM_BINARY(3) : Binary PWM value is 0-1024, corresponding to 0-100% duty cycle.
004531  004915  //       :                    : Raw frequency ~68khz. A value of 1 is not valid
004532  004916  //       : pwm_Init is non blocking and the pwm continues until turn off
004533  004917  //       : Returns true if the pin number is legal (usually ignored)
004534  004918        
004535  004919  //------------------------------------------------------------------------------
004536  004920  // PWM Constants
004537  004921  //------------------------------------------------------------------------------
004538  004922  #CONST
004539  004927  #END
004540  004928        
004541  004929  func OW_Reset("pin"), 1;                             // issue 1wire reset command
004542  004930  // Syntax   : OW_Reset(PA0);
004543  004931  // Usage    : OW_Reset(PA0);
004544  004932  // Notes    : Only available on PA0 to PA13
004545  004933  //          : Resets  ONEWIRE device
004546  004934  //          : Returns the status, 0 = ACK.
004547  004935  //          :
004548  004936        
004549  004937  func OW_Read("pin"), 1;                              // read data from 1wire bus
004550  004938  // Syntax   : OW_Read(PA0);
004551  004939  // Usage    : arg1 := OW_Read(PA0);
004552  004940  // Notes    : Only available on PA0 to PA13
004553  004941  //          : Reads value of the ONEWIRE pin
004554  004942  //          : that was previously selected for ONEWIRE comms.
004555  004943  //          :
004556  004944  //          : pin = 0 : the next byte from the ONEWIRE bus
004557  004945        
004558  004946  func OW_Read9("pin"), 1;                             // read data from 1wire bus, 9bit mode
004559  004947  // Syntax   : OW_Read9(PA0);
004560  004948  // Usage    : OW_Read9(PA0);
004561  004949  // Notes    : Only available on PA0 to PA13
004562  004950  //          : Reads 9 bit value of the appropriate ONEWIRE pin
004563  004951  //          : that was previously selected for ONEWIRE comms.
004564  004952  //          :
004565  004953  //          : read the 9 bits from the ONEWIRE bus
004566  004954        
004567  004955  func OW_Write("pin", "value"), 0;                      // write value to 1wire device
004568  004956  // Syntax   : OW_Write(PA0, arg);
004569  004957  // Usage    : OW_Write(PA0, arg);
004570  004958  // Notes    : Only available on PA0 to PA13
004571  004959  //          : Sends ONEWIRE data on the appropriate
004572  004960  //          : pin that was previously  selected as ONEWIRE comms.
004573  004961  //          :
004574  004962  //          : write arg to the ONEWIRE bus
004575  004963        
004576  004964  func __reserved77(), 0; // do not remove
004577  004965  func __reserved78(), 0; // do not remove
004578  004966        
004579  004967  func sys_GetDateVar("&year", "&month", "&day"), 0;              // get year, month, day into variables
004580  004968  // Syntax: sys_GetDateVar(&year, &month, &day);
004581  004969  // Usage : sys_GetDateVar(&year, &month, &day);
004582  004970  // Notes : Retrieves the date values into variables
004583  004971        
004584  004972  func sys_GetTimeVar("&hour", "&minute", "&second", "&msecs"), 0;              // get hour, minute, second, millseconds into variables
004585  004973  // Syntax: sys_GetTimeVar(&hour, &minute, &second, &msecs);
004586  004974  // Usage : sys_GetTimeVar(&hour, &minute, &second, &msecs);
004587  004975  // Notes : Retrieves the time values into variables
004588  004976        
004589  004977  func sys_PmmC(), 0;
004590  004978  // Syntax: sys_PmmC();
004591  004979  // Usage : to(mystring); sys_PmmC();   // save PmmC name and revision string to buffer
004592  004980  // Notes : print the system PmmC name and revision eg "Diablo16\n1.0"
004593  004981  //       : Can be captured to a buffer using the to( function
004594  004982  //       : Returns nothing.
004595  004983        
004596  004984  func sys_Driver(), 0;
004597  004985  // Syntax: sys_Driver();
004598  004986  // Usage : to(mystring); sys_Driver();   // save Driver name and date string to buffer
004599  004987  // Notes : print the system PmmC name and revision eg "uLCD-32WDTU-A\n130411"
004600  004988  //       : Can be captured to a buffer using the to( function
004601  004989  //       : Returns nothing.
004602  004990        
004603  004991  func gfx_Scope("left", "width", "yzero", "n", "xstep", "Yamp", "colorbg", "&old_y1", "&new_y1", "color1", "&old_y2", "&new_y2", "color2", "&old_y3", "&new_y3", "color3", "&old_y4", "&new_y4", "color4"), 0;
004604  004992  // Notes : Draws up to 4 waveforms from table(s) of vertices at the specified origin.
004605  004993  //       : "Left" is the left margin, "Width" is the width, "yzero" is the y position
004606  004994  //       : that corresponds to a y value of zero, normally "Top" + "Height" for
004607  004995  //       : a graph, or "Top" + "Height"/2 for a scope. "n" is the number of
004608  004996  //       : elements in each buffer. This will need to be greater than "width" for negative
004609  004997  //       : "xstep" values. "Yamp" is for amplification in the Y direction, 100 is unity.
004610  004998  //       : pass 0 as the address for any unused traces
004611  004999  //       : X position is incremented each point by "xstep" pixels.
004612  005000  //       : Y values are derived from a Y buffer "newy" (signed values).
004613  005001  //       : 2 buffers need to be supplied, "newy" contains new
004614  005002  //       : points to be drawn, "oldy" contains most recent set
004615  005003  //       : of points to be un-drawn. After the waveform is drawn,
004616  005004  //       : "newy" buffer is automatically copied to "oldy" buffer.
004617  005005        
004618  005006        
004619  005007  func ana_HS("rate", "samples", "&IO1", "&IO2", "&IO3", "&IO4", "COMPLETEfunction"), 0;
004620  005008  // Syntax: ana_HS(rate, samples, IO1buf, IO2buf, IO3buf, IO4buf, userFunction);
004621  005009  // Usage : ana_HS(1000, 10, IO1buf, 0, 0, 0, myFunc);
004622  005010  // Notes : Collects "samples" samples at "rate" frequency for 0 to 4 analogue pins
004623  005011  //       : and calls "COMPLETEfunction" when done.
004624  005012  //       : "rate" is samples in 100 of samples per second
004625  005013  //       : Any unused IOx pins should have their buffer addresses set to 0
004626  005014  //       : For performance reasons samples are taken in chunks of 32, thus if you
004627  005015  //       : request 33 samples there will be a delay of 31 samples before
004628  005016  //       : "COMPLETEfunction" is called
004629  005017  //       : If Touch is enabled this function should be called no more than once per
004630  005018  //       : millisecond, otherwise touch behaviour could be eratic.
004631  005019        
004632  005020        
004633  005021  func sys_ErrorMessage("msgnum"), 1;
004634  005022        
004635  005023  //==============================//
004636  005024  // NeoPixel specific functions  //
004637  005025  //==============================//
004638  005026        
004639  005027  func NP_Write("pin", "data", "size", "Options", "RepeatFirst", "Repeat", "RepeatLast"), 1;    // Write a string of colours to a NeoPixel 'display'
004640  005028  // Syntax: NP_Write(pin, data, size, Options, RepeatFirst, Repeat, RepeatLast);
004641  005029  // Usage : NP_Write(PA4, data, 50, NP_565, 10, 0, 0);                 
004642  005030  // Notes : pin         : The I/O pin for the operation PA0 to PA13
004643  005031  //       : data        : Address of data to be sent
004644  005032  //       : size        : number of colour 'sets' to follow
004645  005033  //       : Options     : format of colour data to be sent, NP_565, NP_RGB, or NP_XRGB. i.e. 2, 3 or 4 bytes per colour
004646  005034  //       : RepeatFirst : Number of times to repeat the first colour (0 means first colour is not considered 'special')
004647  005035  //       : Repeat      : Number of times to repeat the colours between first and last
004648  005036  //       : RepeatLast  : Number of times to repeat the last colour (0 means last colour is not considered 'special')
004649  005037  //       : Returns true if the pin number is legal (usually ignored)
004650  005038  //       : Due to the critical timing requirements of the NeoPixel, the system Timer is disabled during this operation.
004651  005039  //       : Comms Interrupts should also be disabled by the user, otherwise errors may occur.
004652  005040        
004653  005041  // NeoPixel related constants
004654  005042  #CONST
004655  005046  #END
004656  005047        
004657  005048  func __reserved85(), 0; // do not remove
004658  005049  func __reserved86(), 0; // do not remove
004659  005050        
004660  005051  //==============================================//
004661  005052  // spi flash device specific functions          //
004662  005053  //==============================================//
004663  005054        
004664  005055  func spiflash_SIG("spi#", "enablepin"), 1;         // read Jedec signature from SPI Flash device
004665  005056  // Syntax   : spiflash_SIG("spi#","enablepin");
004666  005057  // Usage    : var := spiflash_SIG(SPI1, PA0);
004667  005058  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004668  005059  //          : spi_Init(...) function, the Electronic Signature of the device can be read using this function. The only
004669  005060  //          : devices supported so far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004670  005061  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004671  005062  //          : Release from Deep Power-down, and Read Electronic Signature. Only the low order byte is valid, the upper
004672  005063  //          : byte is ignored.
004673  005064        
004674  005065  func spiflash_ID("spi#", "enablepin"), 1;          // read ID code from FLASH device
004675  005066  // Syntax   : spiflash_ID("spi#","enablepin");
004676  005067  // Usage    : var := spiflash_ID(SPI1, PA0);
004677  005068  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004678  005069  //          : spi_Init(...) function, the memory type and capacity from the flash device can be read using this function
004679  005070  //          : The only devices supported so far M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004680  005071  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004681  005072  //          : Reads the memory type and capacity from the serial FLASH device. Hi byte contains type, and low byte
004682  005073  //          : contains capacity. Refer to the device data sheet for further information.
004683  005074        
004684  005075  func spiflash_BulkErase("spi#", "enablepin"), 0;    // erase the entire FLASH device
004685  005076  // Syntax   : spiflash_BulkErase("spi#","enablepin");
004686  005077  // Usage    : spiflash_BulkErase(SPI1, PA0);
004687  005078  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004688  005079  //          : spi_Init(...) function, the FLASH device can be completely erased using this function. The only devices
004689  005080  //          : supported so far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004690  005081  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004691  005082  //          : Erases the entire flash media device. The function returns no value, and the operation can take up to 80
004692  005083  //          : seconds depending on the size of the flash device. Note that not all devices support this command.
004693  005084        
004694  005085  func spiflash_BlockErase("spi#", "enablepin", "block"), 0;            // erase the required 64k flash block
004695  005086  // Syntax   : spiflash_BlockErase("spi#", "enablepin", "block")
004696  005087  // Usage    : var := spiflash_BlockErase(SPI1, PA0, block_num)
004697  005088  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004698  005089  //          : spi_Init(...) function, the FLASH block can be erased using this function. The only devices supported so
004699  005090  //          : far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004700  005091  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004701  005092  //          : E.g. there are 32 x 64K blocks on a 2Mb flash device.
004702  005093  //          : blockAddress The address of the 64k FLASH block to be erased.
004703  005094  //          : Erases the required block in a FLASH media device. The function returns no value, and the operation
004704  005095  //          : can take up to 3 milliseconds.
004705  005096        
004706  005097  func spiflash_SetAdd("spi#", "HiWord", "LoWord"), 0;           // set stream byte address
004707  005098  // Syntax: spiflash_SetAdd(AddHiWord, AddLoWord);
004708  005099  // Usage : spiflash_SetAdd(SPI1, arg1, arg2);
004709  005100  // Notes : Set FLASH internal Address pointer for bytewise access on the specified SPI port
004710  005101        
004711  005102  func spiflash_Read("*dest", "size", "spi#", "enablepin"), 1;
004712  005103  // Syntax: res := spiflash_Read("*dest", "size", "spi#", "enablepin"),
004713  005104  // Usage : res := spiflash_Read(memblock, 20, SPI1, PA0);
004714  005105  // Notes : Reads the specified number of bytes from the FLASH memory device on the specified SPI port and enable pin
004715  005106  //       : into the specified destination. The destination is a string pointer (i.e. BYTE aligned). The source
004716  005107  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004717  005108  //       : returns number of characters read
004718  005109  //       : if "dest" is zero, data is read direct to GRAM window
004719  005110  //       :
004720  005111        
004721  005112  func spiflash_Write("*source", "size", "spi#", "enablepin"), 1;
004722  005113  // Syntax: res := fwrite("*source", "size", "spi#", "enablepin"),
004723  005114  // Usage : res := fwrite(memblock, 20, SPI1, PA0);
004724  005115  // Notes : Writes the specified number of bytes to the FLASH memory device on the specified SPI port and enable pin
004725  005116  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004726  005117  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004727  005118  //       : returns number of bytes written
004728  005119  //       :
004729  005120        
004730  005121  func spiflash_Image("x", "y", "spi#", "enablepin"), 1;
004731  005122  // Syntax: spiflash_Image(x, y, "spi#", "enablepin");
004732  005123  // Usage : spiflash_Image(10, 10, SPI1, PA0);
004733  005124  // Notes : Display an image from a file at the current FLASH position set by spiflash_SetAdd()
004734  005125  //       : The image is displayed at x,y (with respect to top left corner).
004735  005126        
004736  005127  func spiflash_PutC("char", "spi#", "enablepin"), 0;
004737  005128  // Syntax: spiflash_PutC("char", "spi#", "enablepin");
004738  005129  // Usage : spiflash_PutC('x', SPI1, PA0);
004739  005130  // Notes : Writes a character (or byte) to the FLASH memory device on the specified SPI port and enable pin
004740  005131  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004741  005132  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004742  005133        
004743  005134  func spiflash_GetC("spi#", "enablepin"), 1;
004744  005135  // Syntax: spiflash_GetC("spi#", "enablepin");
004745  005136  // Usage : mychar := fgetC(SPI1, PA0);
004746  005137  // Notes : Reads a character (or byte) from the FLASH memory device on the specified SPI port and enable pin
004747  005138  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004748  005139  //       : by subsequent reads or writes.
004749  005140  //       : returns next char from file
004750  005141        
004751  005142  func spiflash_PutW("word", "spi#", "enablepin"), 0;
004752  005143  // Syntax: spiflash_PutW("word", "spi#", "enablepin");
004753  005144  // Usage : spiflash_PutW(0x1234, SPI1, PA0);
004754  005145  // Notes : Writes a word to the FLASH memory device on the specified SPI port and enable pin
004755  005146  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004756  005147  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004757  005148        
004758  005149  func spiflash_GetW("spi#", "enablepin"), 1;
004759  005150  // Syntax: spiflash_GetW("spi#", "enablepin");
004760  005151  // Usage : myword := fgetW(SPI1, PA0);
004761  005152  // Notes : Reads a word from the FLASH memory device on the specified SPI port and enable pin
004762  005153  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004763  005154  //       : by subsequent reads or writes.
004764  005155  // Notes : returns next word in file
004765  005156        
004766  005157  func spiflash_PutS("*source", "spi#", "enablepin"), 1;
004767  005158  // Syntax: res := spiflash_Puts("*source", "spi#", "enablepin"),
004768  005159  // Usage : res := spiflash_Puts(mystring, SPI1, PA0);
004769  005160  // Notes : Writes a string to the FLASH memory device on the specified SPI port and enable pin
004770  005161  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004771  005162  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004772  005163  //       : returns number of characters written
004773  005164  //       :
004774  005165        
004775  005166  func spiflash_GetS("*string", "size", "spi#", "enablepin"), 1;
004776  005167  // Syntax: res := spiflash_Gets("*string", "size", "spi#", "enablepin");
004777  005168  // Usage : res := spiflash_Gets(mystr , 81, SPI1, PA0); // read up to 80 chars
004778  005169  // Notes : Reads a string from the FLASH memory device on the specified SPI port and enable pin
004779  005170  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004780  005171  //       : by subsequent reads or writes.
004781  005172  //       : returns pointer to string or null if failed.
004782  005173  //       : spiflash_GetS(...) automatically appends a null-terminator to the data read.
004783  005174  //       : NB:- only reads up to "size-1" characters into "string"
004784  005175  //       : spiflash_GetS(...) will stop reading when any of the following conditions are true:
004785  005176  //       : A] It has read n-1 bytes (one character is reserved for the null-terminator)
004786  005177  //       : B] It encounters a newline character (a line-feed in the compilers tested here), or
004787  005178  //       : C] It reaches the end of file
004788  005179  //       : D] A read error occurs.
004789  005180        
004790  005181  func spiflash_LoadFunction("spi#", "enablepin"), 1;
004791  005182  // Syntax: res := spiflash_LoadFunction("spi#", "enablepin");
004792  005183  // Usage : myfunc := spiflash_LoadFunction(SPI1, PA0);
004793  005184  // Notes : Load a function or program from the FLASH memory device on the specified SPI port and enable pin at
004794  005185  //       : the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes and
004795  005186  //       : return a function pointer to the allocation.
004796  005187  //       : The function can then be invoked just like any other
004797  005188  //       : function would be called via a function pointer.
004798  005189  //       : Parameters may be passed to it in a conventional way.
004799  005190  //       : The function may be discarded at any time when no
004800  005191  //       : longer required, thus freeing its memory resources.
004801  005192  //       : The loaded function can be discarded with mem_Free(..)
004802  005193  //       : eg:
004803  005194  //       : popupWindow := spiflash_LoadFunction("popupWindow1.4fn");
004804  005195  //       : if(!popupWindow) goto LoadFunctionFailed; // could not load the function !!!
004805  005196  //       : then elsewhere in your program:-
004806  005197  //       : res := popupWindow(MYMODE,"My Title","My Popup Text");
004807  005198  //       : if(res == QUIT_APPLICATION) goto exitApp;
004808  005199  //       : Later in your program, when popupWindow is no longer
004809  005200  //       : required for the application:-
004810  005201  //       : res := mem_Free(popupWindow);
004811  005202  //       : if(!res) goto FreeFunctionFailed; // should never happen if memory not corrupted
004812  005203  //       : The callers stack is shared by the loaded function,
004813  005204  //       : however any global variables in the loaded function
004814  005205  //       : are private to that function.
004815  005206  //
004816  005207        
004817  005208  func spiflash_Run("spi#", "enablepin", "arglistptr"), 1;
004818  005209  // Syntax: res := spiflash_Run("spi#", "enablepin", "arglistptr");
004819  005210  // Usage : res := spiflash_Run(SPI1, PA0, argptr);
004820  005211  // Notes : current program releases any allocated memory but
004821  005212  //       : retains the stack and global memory.
004822  005213  //       : If arglistptr is 0, no arguments are passed, else
004823  005214  //       : arglist points to an array, the first element being
004824  005215  //       : the number of elements in the array.
004825  005216  //       : func 'main' in the called program accepts
004826  005217  //       : the arguments, if any. The arguments can only
004827  005218  //       : be passed by value, no pointers or references can be
004828  005219  //       : used as all memory is cleared before the file
004829  005220  //       : is loaded. Refer to spiflash_Exec and spiflash_LoadFunction
004830  005221  //       : for functions that can pass by reference.
004831  005222        
004832  005223  func spiflash_Exec("spi#", "enablepin", "arglistptr"), 1;
004833  005224  // Syntax: res := spiflash_Exec("spi#", "enablepin", "arglistptr");
004834  005225  // Usage : res := spiflash_Exec(SPI1, PA0, "arglistptr");
004835  005226  // Notes : returns like a function, current program
004836  005227  //       : calling program is kept active and control returns to it.
004837  005228  //       : If arglistptr is 0, no arguments are passed, else
004838  005229  //       : arglist points to an array, the first element being
004839  005230  //       : the number of elements in the array.
004840  005231  //       : func 'main' in the called program accepts the arguments.
004841  005232  //       : This function is similar to spiflash_LoadFunction(...), however,
004842  005233  //       : the function argument list is passed by pointer, and
004843  005234  //       : the memory consumed by the function is released as
004844  005235  //       : soon as the function completes.
004845  005236        
004846  005237  func spiflash_LoadImageControl("spi#", "enablepin"), 1;
004847  005238  // Syntax: hImagelist := spiflash_LoadImageControl ("spi#", "enablepin"),
004848  005239  // Usage : hImagelist := spiflash_LoadImageControl (SPI1, PA0);
004849  005240  // Notes : Reads a control file to create an image list from the FLASH memory device on the specified SPI port
004850  005241  //       : and enable pin. The source is the address set by spiflash_SetAdd(), or incremented by subsequent reads
004851  005242  //       : or writes. The ".dat" file is first and is immediately followed a ^Z and then by the ".gci' file.
004852  005243  //       : Returns NULL if function fails.
004853  005244  //       : Returns a handle (pointer to the memory allocation) to the
004854  005245  //       : image control list that has been created.
004855  005246        
004856  005247  // Notes : This function Calculates the size of a chunk of memory required for
004857  005248  //       : a image list and populates it from the image control file ("*.dat")
004858  005249  //       : therefore, when imagelist is no longer required, you must de-allocate
004859  005250  //       : the image list memory by using eg:- mem_Free(hImagelist);
004860  005251  //       : to restore the heap.
004861  005252  //       :
004862  005253        
004863  005254  func spiflash_PlayWAV("spi#", "enablepin"), 1;
004864  005255  // Syntax: spiflash_PlayWAV("spi#", "enablepin");
004865  005256  // Usage : spiflash_PlayWAV(SPI1, PA0);
004866  005257  // Notes : Play a wave file from the FLASH memory device on the specified SPI port and enable pin.
004867  005258  //       : The source is the address set by spiflash_SetAdd(), or incremented by subsequent reads
004868  005259  //       : or writes.
004869  005260  //       : This function automatically grabs a chunk
004870  005261  //       : of memory for a file buffer, and a wave
004871  005262  //       : buffer. The minimum memory requirement is
004872  005263  //       : about 580 bytes for the disk io service and
004873  005264  //       : a minimum wave buffer size of 1024. The size
004874  005265  //       : of the wave buffer allocation
004875  005266  //       : can be increased by the snd_BufSize function.
004876  005267  //       : The default size 1024 bytes.
004877  005268  //       : NB the memory is only required during the
004878  005269  //       : duration of play, and is automatically
004879  005270  //       : released while not in use.
004880  005271  //       : See the Sound Class services for other associated controls.
004881  005272  //       : If there are no errors, returns number of blocks to play (1 to 32767)
004882  005273  //       : If errors occured, the folling is returned
004883  005274  //       : -7  : Insufficient memory available for WAV buffer and file
004884  005275  //       : -6  : cant play this rate
004885  005276  //       : -5  : no data chunk found in first rsector
004886  005277  //       : -4  : no format data
004887  005278  //       : -3  : no wave chunk signature
004888  005279  //       : -2  : bad wave file format
004889  005280  //       : -1  : file not found
004890  005281        
004891  005282  //==============================================//
004892  005283  // more com functions                           //
004893  005284  //==============================================//
004894  005285        
004895  005286  func com1_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004896  005287  // Syntax   : com1_TXblock("buf", "bufsize");
004897  005288  // Usage    : com1_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004898  005289  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004899  005290  //          : if a transmit buffer is active and space is available this function will return almost
004900  005291  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004901  005292        
004902  005293  func com1_RXblock("buf", "bufsize"), 0;                       // commence a block reception
004903  005294  // Syntax   : com1_RXblock("buf", "bufsize");
004904  005295  // Usage    : com1_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004905  005296  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004906  005297  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004907  005298  //          : immediately otherwise it will block until until the required bytes are received.
004908  005299        
004909  005300  func com2_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004910  005301  // Syntax   : com_TXblock("buf", "bufsize");
004911  005302  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004912  005303  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004913  005304  //          : if a transmit buffer is active and space is available this function will return almost
004914  005305  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004915  005306        
004916  005307  func com2_RXblock("buf", "bufsize"), 0;                       // commence an block reception
004917  005308  // Syntax   : com_RXblock("buf", "bufsize");
004918  005309  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004919  005310  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004920  005311  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004921  005312  //          : immediately otherwise it will block until until the required bytes are received.
004922  005313        
004923  005314  func com3_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004924  005315  // Syntax   : com_TXblock("buf", "bufsize");
004925  005316  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004926  005317  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004927  005318  //          : if a transmit buffer is active and space is available this function will return almost
004928  005319  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004929  005320        
004930  005321  func com3_RXblock("buf", "bufsize"), 0;                       // commence an block reception
004931  005322  // Syntax   : com_RXblock("buf", "bufsize");
004932  005323  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004933  005324  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004934  005325  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004935  005326  //          : immediately otherwise it will block until until the required bytes are received.
004936  005327        
004937  005328  func disp_BlitPixelsFromCOM1(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004938  005329  // Syntax: disp_BlitPixelsFromCOM1();                  New in v1.1
004939  005330  // Usage : disp_BlitPixelsFromCOM1();
004940  005331  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004941  005332  //       : display from the specified com port.
004942  005333        
004943  005334  func disp_BlitPixelsFromCOM2(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004944  005335  // Syntax: disp_BlitPixelsFromCOM2();                  New in v1.1
004945  005336  // Usage : disp_BlitPixelsFromCOM2();
004946  005337  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004947  005338  //       : display from the specified com port.
004948  005339        
004949  005340  func disp_BlitPixelsFromCOM3(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004950  005341  // Syntax: disp_BlitPixelsFromCOM3();                  New in v1.1
004951  005342  // Usage : disp_BlitPixelsFromCOM3();
004952  005343  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004953  005344  //       : display from the specified com port.
004954  005345        
004955  005346        
004956  005347  //==============================================//
004957  005348  // crc generation functions                     //
004958  005349  //==============================================//
004959  005350        
004960  005351  func crc_CSUM_8("buf","count"), 1;                      // given a pointer to a buffer and a byte count, calculate the 8bit LRC
004961  005352  // *Notes   : (if you calculate all of the incoming data
004962  005353  //          : INCLUDING the CRC, the result should be 0x00
004963  005354  //          : This is equivalent to simple addition of all bytes
004964  005355  //          : and returning the negated sum an 8 bit value.
004965  005356  //          : For the standard test string "123456789",
004966  005357  //          : crc_CSUM_8 will return 0x0023.
004967  005358        
004968  005359        
004969  005360  func crc_16("buf","count"), 1;                      // given a pointer to a buffer and a byte count, calculate CRC16
004970  005361  // *Notes   : The "mode" argument may be READ, WRITE or CHECK
004971  005362  //          : (if you calculate all of the incoming data
004972  005363  //          : INCLUDING the CRC, the result should be 0x0000
004973  005364  //          : For the standard test string "123456789",
004974  005365  //          : crc_16 will return 0xBB3D.
004975  005366        
004976  005367        
004977  005368  func crc_MODBUS("buf","count"), 1;                  // given a pointer to a buffer and a byte count, calculate CRC16 for MODBUS
004978  005369  // *Notes   : (if you calculate all of the incoming data
004979  005370  //          : INCLUDING the CRC, the result should be 0x0000
004980  005371  //          : For the standard test string "123456789",
004981  005372  //          : crc_MODBUS will return 0x4B37.
004982  005373        
004983  005374        
004984  005375  func crc_CCITT("buf","count","seed"), 1;            // given a pointer to a buffer, byte count and seed, calculate the 16bit CRC for seed
004985  005376  // *Notes   : (if you calculate all of the incoming data
004986  005377  //          : INCLUDING the CRC, the result should be 0x0000
004987  005378  //          : For the standard test string "123456789",
004988  005379  //          : crc_CCITT will return the following:-
004989  005380  //          : seed = 0 (XMODEM protocol) result = 0x31C3
004990  005381  //          : seed = 0xFFFF, result = 0x29B1
004991  005382  //          : seed = 0x1D0F, result = 0xE5CC
004992  005383        
004993  005384        
004994  005385  //------------------------------------------------------------------//
004995  005386  // CONSTANTS
004996  005387  //------------------------------------------------------------------//
004997  005388        
004998  005389  #CONST
004999  005393  #END
005000  005394        
005001  005395  // timebase constants for timebase_init
005002  005396  // NB only TB2 and TB4 can be used for synchronous A2D sampling.
005003  005397  #CONST
005004  005408  #END
005005  005409        
005006  005410        
005007  005411  // generic constants
005008  005412  #CONST
005009  005420  #END
005010  005421        
005011  005422        
005012  005423        
005013  005424  //gfx_Get() related constants
005014  005425  #CONST
005015  005434  #END
005016  005435        
005017  005436        
005018  005437        
005019  005438        
005020  005439  #CONST
005021  005452  #END
005022  005453        
005023  005454        
005024  005455  #CONST
005025  005480  #END
005026  005481        
005027  005482        
005028  005483        
005029  005484        
005030  005485  // timer control  related constants
005031  005486  #CONST
005032  005495  #END
005033  005496        
005034  005497        
005035  005498        
005036  005499  //------------------------------------------------------------------------------
005037  005500  // system WORD variables accesible with peekW and pokeW or pointer access
005038  005501  // Note that the txt_Set variables (0-15) and gfx_set variables (16-31)
005039  005502  // can also be accessed with peekW and pokeW
005040  005503  //------------------------------------------------------------------------------
005041  005504        
005042  005505  #CONST
005043  005600  #END
005044  005601        
005045  005602  #CONST
005046  005767  #END
005047  005768        
005048  005769        
005049  005770        
005050  005771  //==================================================================================================
005051  005772        
005052  005773        
005053  005774        
005054  000013      #ENDIF
005055  000014        
005056  000015      #CONST
005057  000094      #END
005058  000095        
005059  000096  //===========================================================================================
005060  000097        
005061  000098        
005062  000002        
005063  000003  // generated 5/15/2015 6:43:41 AM
005064  000004        
005065  000005        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\4DGL_16bitColours.fnc

005066  000006  #inherit "4DGL_16bitColours.fnc"
005067  000006  #inherit "4DGL_16bitColours.fnc"
005068  000004  */
005069  000005        
005070  000006        
005071  000007        
005072  000008  #CONST
005073  000149  #END
005074  000150        
005075  000007        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\VisualConst.inc

005076  000008  #inherit "VisualConst.inc"
005077  000008  #inherit "VisualConst.inc"
005078  000001  // Line Patterns
005079  000002  #constant  LPCOARSE    0xF0F0
005080  000002  #constant  LPCOARSE    0xF0F0
005081  000003  #constant  LPMEDIUM    0x3333
005082  000003  #constant  LPMEDIUM    0x3333
005083  000004  #constant  LPFINE      0xAAAA
005084  000004  #constant  LPFINE      0xAAAA
005085  000005  #constant  LPDASHDOT   0x03CF
005086  000005  #constant  LPDASHDOT   0x03CF
005087  000006  #constant  LPDASHDOTDOT 0x0333
005088  000006  #constant  LPDASHDOTDOT 0x0333
005089  000007  #constant  LPSOLID     0x0000
005090  000007  #constant  LPSOLID     0x0000
005091  000009        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\XYposToDegree.inc

005092  000010  #inherit "XYposToDegree.inc"
005093  000010  #inherit "XYposToDegree.inc"
005094  000001  //
005095  000002  // Routine to convert X/Y (Relative to 0,0) position into Degrees
005096  000003  // 0 Degrees is straight down to suit rotary objects
005097  000004  //
005098  000005        
005099  000017  #END
5100  006B
5101  006C
5102  006D
5103  006E
5104  006F
5105  0070
5106  0071
5107  0072
5108  0073
5109  0074
5110  0075
5111  0076
5112  0077
5113  0078
5114  0079
5115  007A
5116  007B
5117  007C
5118  007D
5119  007E
5120  007F
5121  0080
5122  0081
5123  0082
5124  0083
5125  0084
5126  0085
5127  0086
5128  0087
5129  0088
5130  0089
5131  008A
5132  008B
5133  008C
5134  008D
5135  008E
5136  008F
5137  0090
5138  0091
5139  0092
5140  0093
5141  0094
5142  0095
5143  0096
5144  0097
5145  0098
5146  0099
5147  009A
5148  009B
5149  009C
5150  009D
5151  009E
5152  009F
5153  00A0
5154  00A1
5155  00A2
5156  00A3
5157  00A4
5158  00A5
5159  00A6
5160  00A7
5161  00A8
5162  00A9
5163  00AA
5164  00AB
5165  00AC
5166  00AD
5167  00AE
5168  00AF
5169  00B0
5170  00B1
5171  00B2
5172  00B3
5173  00B4
5174  00B5
5175  00B6
5176  00B7
5177  00B8
5178  00B9
5179  00BA
5180  00BB
5181  00BC
5182  00BD
5183  00BE
5184  00BF
5185  00C0
5186  00C1
5187  00C2
5188  00C3
5189  00C4
5190  00C5
5191  00C6
5192  00C7
5193  00C8
5194  00C9
5195  00CA
5196  00CB
5197  00CC
5198  00CD
5199  00CE
5200  00CF
005201  000018        
005202  000019  func XYposToDegree(var curX, var curY)
005203  000020      var delta, deg, adj ;
005204  000021      if (curY < 0)
005205  000022          if (curX < 0)
005206  000023              adj := 1 ;
005207  000024              deg := 90 ;
005208  000025          else
005209  000026              adj := 2 ;
005210  000027              deg := 180 ;
005211  000028          endif
005212  000029      else
005213  000030          if (curX < 0)
005214  000031              deg := 0 ;
005215  000032              adj := 2 ;
005216  000033          else
005217  000034              deg := 270 ;
005218  000035              adj := 1 ;
005219  000036          endif
005220  000037      endif
005221  000038        
005222  000039      curX := ABS(curX) ;
005223  000040      curY := ABS(curY) ;
005224  000041      if (curX < curY)
005225  000042          adj &= 1 ;
005226  000043      else
005227  000044          adj &= 2 ;
005228  000045          SWAP(&curX, &curY) ;
005229  000046      endif
005230  000047      delta := arctan[(curX * 100) / curY] ;
005231  000048      if (adj)
005232  000049          deg += 90 - delta ;
005233  000050      else
005234  000051          deg += delta ;
005235  000052      endif
005236  000053        
005237  000054      return deg ;
005238  000055  endfunc
005239  000056        
005240  000011        
file C:\Users\User\Google Drive\NASA RMC\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\ScreenConst.inc

005241  000012  #inherit "ScreenConst.inc"
005242  000012  #inherit "ScreenConst.inc"
005243  000001  // File generated 5/15/2015 6:41:38 AM
005244  000002  // Warning! This is a generated file, any manual changes will be
005245  000003  // lost during the next generation.
005246  000004        
005247  000005  // object indexes into ImageControl
005248  000006  #CONST
005249  000261  #END
005250  000262        
005251  000263  #IFNOT EXISTS NOGLOBALS
005252  000264  var hndl ;
005253  000265  #ENDIF
005254  000013        
005255  000014        
005256  000015  #constant IPDatasize 22
005257  000015  #constant IPDatasize 22
005258  000016        
005259  000017  #CONST
005260  000021  #END
005261  000022        
005262  000023  #CONST
005263  000130  #END
005264  000131        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\ColourRoutines.inc

005265  000132  #inherit "ColourRoutines.inc"
005266  000132  #inherit "ColourRoutines.inc"
005267  000001  // color conversion routines seem to be based on http://support.microsoft.com/kb/29240
005268  000002  // My copy seem to have been around since the MSDOS days, I don't know if it came from another source
005269  000003  #CONST
005270  000019  #END
005271  000020        
005272  000021  var red, green, blue ;
005273  000022  var h, l, s ;
005274  000023        
005275  000024  func RGBs2COL(var r, var g, var b)
005276  000025      return (b >> 2) | (g & 0x7E) << 4 | (r & 0x7c) << 9  ;
005277  000026  endfunc
005278  000027        
005279  000028  func c565toRGBs(var i565)
005280  000029      red   := (i565 & 0xF800) >> 9 ;
005281  000030      green := (i565 & 0x07E0) >> 4 ;
005282  000031      blue  := (i565 & 0x001F) << 2 ;
005283  000032  endfunc
005284  000033        
005285  000034  func RGB2HLS()
005286  000035      var  cMax, cMin, Rdelta, Gdelta, Bdelta, cMpM, cMmM ;
005287  000036      // calculate lightness
005288  000037      cMax := MAX( MAX(red,green), blue);
005289  000038      cMin := MIN( MIN(red,green), blue);
005290  000039      cMpM := cMax+cMin ;
005291  000040      cMmM := cMax-cMin ;
005292  000041        
005293  000042      l := ( (cMpM*HLSMAX) + RGBMAX ) / RGBMAXm2;
005294  000043        
005295  000044      if (cMax == cMin) // r=g=b --> achromatic case
005296  000045          s := 0;
005297  000046          h := UNDEFINED;
005298  000047      else // chromatic case
005299  000048          // saturation
005300  000049          if (l <= (HLSMAX/2))
005301  000050              s := ( (cMmM*HLSMAX) + (cMpM / 2) ) / cMpM ;
005302  000051          else
005303  000052              s := ( (cMmM*HLSMAX) + ((RGBMAXm2-cMpM) / 2) ) / (RGBMAXm2-cMpM);
005304  000053          endif
005305  000054        
005306  000055          // hue
005307  000056          Rdelta := ( ((cMax-red)* HLSMAXd6) + (cMmM / 2) ) / cMmM;
005308  000057          Gdelta := ( ((cMax-green)* HLSMAXd6) + (cMmM / 2) ) / cMmM;
005309  000058          Bdelta := ( ((cMax-blue)* HLSMAXd6) + (cMmM / 2) ) / cMmM;
005310  000059        
005311  000060          if (red == cMax)
005312  000061              h := Bdelta - Gdelta ;
005313  000062          else if (green == cMax)
005314  000063              h := HLSMAXd3 + Rdelta - Bdelta ;
005315  000064          else
005316  000065              h := HLSMAXm2d3 + Gdelta - Rdelta;
005317  000066          endif
005318  000067        
005319  000068          if (h < 0) h += HLSMAX;
005320  000069          if (h > HLSMAX) h -= HLSMAX;
005321  000070      endif
005322  000071   endfunc
005323  000072        
005324  000073  func hue_RGB(var Hin, var M1, var M2)
005325  000074      var Value ;
005326  000075      if (Hin < 0)
005327  000076          Hin += HLSMAX ;
005328  000077      else if (Hin > HLSMAX)
005329  000078          Hin -= HLSMAX ;
005330  000079      endif
005331  000080        
005332  000081      if (Hin < HLSMAXd6)
005333  000082          Value := M1 + ( (M2 - M1) * Hin + HLSMAXd12 ) / HLSMAXd6 ;
005334  000083      else if (Hin < HLSMAXd2 )
005335  000084          Value := M2 ;
005336  000085      else if (Hin < HLSMAXm2d3)
005337  000086          Value := M1 + ( (M2 - M1) * (HLSMAXm2d3 - Hin) + HLSMAXd12) / HLSMAXd6 ;
005338  000087      else
005339  000088          Value := M1 ;
005340  000089      endif
005341  000090      return Value ;
005342  000091  endfunc
005343  000092        
005344  000093  func HLS2RGB(var H, var L, var S)
005345  000094      var M1, M2 ;
005346  000095        
005347  000096      if (S == 0)
005348  000097          red   := L ;
005349  000098          green := L ;
005350  000099          blue  := L ;
005351  000100      else
005352  000101          if (L <= HLSMAXd2)
005353  000102              M2 := (L * (HLSMAX + S) + HLSMAXd2) / HLSMAX ;
005354  000103          else
005355  000104              M2 := L + S - ((L * S + HLSMAXd2) / HLSMAX) ;
005356  000105          endif
005357  000106        
005358  000107          M1 := 2 * L - M2 ;
005359  000108          // Determine levels of primary colours.
005360  000109          if ((H > HLSMAX ) || (H < 0)) h := 0 ;
005361  000110          red   := hue_RGB( H+HLSMAXd3, M1, M2 ) ;
005362  000111          green := hue_RGB( H,          M1, M2 ) ;
005363  000112          blue  := hue_RGB( H-HLSMAXd3, M1, M2 ) ;
005364  000113      endif
005365  000114        
005366  000115   endfunc
005367  000133        
005368  000134  func ColorpickerArrow(var oldp, var pos, var color)
005369  000135      gfx_TriangleFilled(pos-6, oldp+6,
005370  000136                         pos,   oldp,
005371  000137                         pos,   oldp+12, color) ;
005372  000138  endfunc
005373  000139        
005374  000140  var cptop, cpleft, cpheight, cpwidth, cpTpH, cpLpW, cpBGcol ;
005375  000141        
005376  000142  func getcpvars(var imgIdx)
005377  000143      cptop    := img_GetWord(hndl, imgIdx, IMAGE_YPOS);
005378  000144      cpleft   := img_GetWord(hndl, imgIdx, IMAGE_XPOS);
005379  000145      cpheight := img_GetWord(hndl, imgIdx, IMAGE_HEIGHT);
005380  000146      cpwidth  := img_GetWord(hndl, imgIdx, IMAGE_WIDTH);
005381  000147      cpBGcol  := img_GetWord(hndl, imgIdx, IMAGE_TAG2);
005382  000148      cpTpH    := cptop+cpheight ;
005383  000149      cpLpW    := cpleft+cpwidth ;
005384  000150      cpheight -= 12 ;
005385  000151  endfunc
005386  000152        
005387  000153  func setCpHSl(var imgobj, var objobj, var newColor)
005388  000154      var i, j ;
005389  000155      getcpvars(imgobj) ;
005390  000156      img_SetWord(hndl, imgobj, IMAGE_DELAY, newColor); // IMAGE_DELAY is used as current color
005391  000157      c565toRGBs(newColor) ;
005392  000158      RGB2HLS() ;
005393  000159      ColorpickerArrow(cpVars[objobj], cpLpW, cpBGcol) ;          // 'erase' old arrow
005394  000160      cpVars[objobj] := cpTpH - ( cpheight * l / HLSMAX) - 12;
005395  000161      ColorpickerArrow(cpVars[objobj], cpLpW, LIGHTGREY) ;
005396  000162      for (i := 0; i < cpheight; i++)
005397  000163          j := i * HLSMAX / cpheight ;
005398  000164          HLS2RGB(h, j, s) ;
005399  000165          gfx_Hline(cpTpH-7-i,cpLpW-22,cpLpW-7,RGBs2COL(red,green,blue)) ;
005400  000166      next
005401  000167      endfunc
005402  000486  #END
5403  1BA9
5404  1BAA
5405  1BAB
5406  1BAC
5407  1BAD
5408  1BAE
5409  1BAF
5410  1BB0
5411  1BB1
5412  1BB2
5413  1BB3
5414  1BB4
5415  1BB5
5416  1BB6
5417  1BB7
5418  1BB8
5419  1BB9
5420  1BBA
5421  1BBB
5422  1BBC
5423  1BBD
5424  1BBE
5425  1BBF
5426  1BC0
5427  1BC1
5428  1BC2
5429  1BC3
5430  1BC4
5431  1BC5
5432  1BC6
5433  1BC7
5434  1BC8
5435  1BC9
5436  1BCA
5437  1BCB
5438  1BCC
5439  1BCD
5440  1BCE
5441  1BCF
5442  1BD0
5443  1BD1
5444  1BD2
5445  1BD3
5446  1BD4
5447  1BD5
5448  1BD6
5449  1BD7
5450  1BD8
5451  1BD9
5452  1BDA
5453  1BDB
5454  1BDC
5455  1BDD
5456  1BDE
5457  1BDF
5458  1BE0
5459  1BE1
5460  1BE2
5461  1BE3
5462  1BE4
5463  1BE5
5464  1BE6
5465  1BE7
5466  1BE8
5467  1BE9
5468  1BEA
5469  1BEB
5470  1BEC
5471  1BED
5472  1BEE
5473  1BEF
5474  1BF0
5475  1BF1
5476  1BF2
5477  1BF3
5478  1BF4
5479  1BF5
5480  1BF6
5481  1BF7
5482  1BF8
5483  1BF9
5484  1BFA
5485  1BFB
5486  1BFC
5487  1BFD
5488  1BFE
5489  1BFF
5490  1C00
5491  1C01
5492  1C02
5493  1C03
5494  1C04
5495  1C05
5496  1C06
5497  1C07
5498  1C08
5499  1C09
5500  1C0A
5501  1C0B
5502  1C0C
5503  1C0D
5504  1C0E
5505  1C0F
5506  1C10
5507  1C11
5508  1C12
5509  1C13
5510  1C14
5511  1C15
5512  1C16
5513  1C17
5514  1C18
5515  1C19
5516  1C1A
5517  1C1B
5518  1C1C
5519  1C1D
5520  1C1E
5521  1C1F
5522  1C20
5523  1C21
5524  1C22
5525  1C23
5526  1C24
5527  1C25
5528  1C26
5529  1C27
5530  1C28
5531  1C29
5532  1C2A
5533  1C2B
5534  1C2C
5535  1C2D
5536  1C2E
5537  1C2F
5538  1C30
5539  1C31
5540  1C32
5541  1C33
5542  1C34
5543  1C35
5544  1C36
5545  1C37
5546  1C38
5547  1C39
5548  1C3A
5549  1C3B
5550  1C3C
5551  1C3D
5552  1C3E
5553  1C3F
5554  1C40
5555  1C41
5556  1C42
5557  1C43
5558  1C44
5559  1C45
5560  1C46
5561  1C47
5562  1C48
5563  1C49
5564  1C4A
5565  1C4B
5566  1C4C
5567  1C4D
5568  1C4E
5569  1C4F
5570  1C50
5571  1C51
5572  1C52
5573  1C53
5574  1C54
5575  1C55
5576  1C56
5577  1C57
5578  1C58
5579  1C59
5580  1C5A
5581  1C5B
5582  1C5C
5583  1C5D
5584  1C5E
5585  1C5F
5586  1C60
5587  1C61
5588  1C62
5589  1C63
5590  1C64
5591  1C65
5592  1C66
5593  1C67
5594  1C68
5595  1C69
5596  1C6A
5597  1C6B
5598  1C6C
5599  1C6D
5600  1C6E
5601  1C6F
5602  1C70
5603  1C71
5604  1C72
5605  1C73
5606  1C74
5607  1C75
5608  1C76
5609  1C77
5610  1C78
5611  1C79
5612  1C7A
5613  1C7B
5614  1C7C
5615  1C7D
5616  1C7E
5617  1C7F
5618  1C80
5619  1C81
5620  1C82
5621  1C83
5622  1C84
5623  1C85
5624  1C86
5625  1C87
5626  1C88
5627  1C89
5628  1C8A
5629  1C8B
5630  1C8C
5631  1C8D
5632  1C8E
5633  1C8F
5634  1C90
5635  1C91
5636  1C92
5637  1C93
5638  1C94
5639  1C95
5640  1C96
5641  1C97
5642  1C98
5643  1C99
5644  1C9A
5645  1C9B
5646  1C9C
5647  1C9D
5648  1C9E
5649  1C9F
5650  1CA0
5651  1CA1
5652  1CA2
5653  1CA3
5654  1CA4
5655  1CA5
5656  1CA6
5657  1CA7
5658  1CA8
5659  1CA9
5660  1CAA
5661  1CAB
5662  1CAC
5663  1CAD
5664  1CAE
5665  1CAF
5666  1CB0
5667  1CB1
5668  1CB2
5669  1CB3
5670  1CB4
5671  1CB5
5672  1CB6
5673  1CB7
5674  1CB8
5675  1CB9
5676  1CBA
5677  1CBB
5678  1CBC
5679  1CBD
5680  1CBE
5681  1CBF
5682  1CC0
5683  1CC1
5684  1CC2
5685  1CC3
5686  1CC4
5687  1CC5
5688  1CC6
5689  1CC7
5690  1CC8
5691  1CC9
5692  1CCA
5693  1CCB
5694  1CCC
5695  1CCD
5696  1CCE
5697  1CCF
5698  1CD0
5699  1CD1
5700  1CD2
5701  1CD3
5702  1CD4
5703  1CD5
5704  1CD6
5705  1CD7
5706  1CD8
5707  1CD9
5708  1CDA
5709  1CDB
5710  1CDC
5711  1CDD
5712  1CDE
5713  1CDF
5714  1CE0
5715  1CE1
5716  1CE2
5717  1CE3
5718  1CE4
5719  1CE5
5720  1CE6
5721  1CE7
5722  1CE8
5723  1CE9
5724  1CEA
5725  1CEB
5726  1CEC
5727  1CED
5728  1CEE
5729  1CEF
5730  1CF0
5731  1CF1
5732  1CF2
5733  1CF3
5734  1CF4
5735  1CF5
5736  1CF6
5737  1CF7
5738  1CF8
5739  1CF9
5740  1CFA
5741  1CFB
5742  1CFC
5743  1CFD
5744  1CFE
5745  1CFF
5746  1D00
5747  1D01
5748  1D02
5749  1D03
5750  1D04
5751  1D05
5752  1D06
5753  1D07
5754  1D08
5755  1D09
5756  1D0A
5757  1D0B
5758  1D0C
5759  1D0D
5760  1D0E
5761  1D0F
5762  1D10
5763  1D11
5764  1D12
5765  1D13
5766  1D14
5767  1D15
5768  1D16
5769  1D17
5770  1D18
5771  1D19
5772  1D1A
5773  1D1B
5774  1D1C
5775  1D1D
5776  1D1E
5777  1D1F
5778  1D20
5779  1D21
5780  1D22
5781  1D23
5782  1D24
5783  1D25
5784  1D26
5785  1D27
5786  1D28
5787  1D29
5788  1D2A
5789  1D2B
5790  1D2C
5791  1D2D
5792  1D2E
5793  1D2F
5794  1D30
5795  1D31
5796  1D32
5797  1D33
5798  1D34
5799  1D35
5800  1D36
5801  1D37
5802  1D38
5803  1D39
5804  1D3A
5805  1D3B
5806  1D3C
5807  1D3D
5808  1D3E
5809  1D3F
5810  1D40
5811  1D41
5812  1D42
5813  1D43
5814  1D44
5815  1D45
5816  1D46
5817  1D47
5818  1D48
5819  1D49
5820  1D4A
5821  1D4B
5822  1D4C
5823  1D4D
5824  1D4E
5825  1D4F
5826  1D50
5827  1D51
5828  1D52
5829  1D53
5830  1D54
5831  1D55
5832  1D56
5833  1D57
5834  1D58
5835  1D59
5836  1D5A
5837  1D5B
5838  1D5C
5839  1D5D
5840  1D5E
5841  1D5F
5842  1D60
5843  1D61
5844  1D62
5845  1D63
5846  1D64
5847  1D65
5848  1D66
5849  1D67
5850  1D68
5851  1D69
5852  1D6A
5853  1D6B
5854  1D6C
5855  1D6D
5856  1D6E
5857  1D6F
5858  1D70
5859  1D71
5860  1D72
5861  1D73
5862  1D74
5863  1D75
5864  1D76
5865  1D77
5866  1D78
5867  1D79
5868  1D7A
5869  1D7B
5870  1D7C
5871  1D7D
5872  1D7E
5873  1D7F
5874  1D80
5875  1D81
5876  1D82
5877  1D83
5878  1D84
5879  1D85
5880  1D86
5881  1D87
5882  1D88
5883  1D89
5884  1D8A
5885  1D8B
5886  1D8C
5887  1D8D
5888  1D8E
5889  1D8F
5890  1D90
5891  1D91
5892  1D92
5893  1D93
5894  1D94
5895  1D95
5896  1D96
5897  1D97
5898  1D98
5899  1D99
5900  1D9A
5901  1D9B
5902  1D9C
5903  1D9D
5904  1D9E
5905  1D9F
5906  1DA0
5907  1DA1
5908  1DA2
5909  1DA3
5910  1DA4
5911  1DA5
5912  1DA6
5913  1DA7
5914  1DA8
5915  1DA9
5916  1DAA
5917  1DAB
5918  1DAC
5919  1DAD
5920  1DAE
5921  1DAF
5922  1DB0
5923  1DB1
5924  1DB2
5925  1DB3
5926  1DB4
5927  1DB5
5928  1DB6
5929  1DB7
5930  1DB8
5931  1DB9
5932  1DBA
5933  1DBB
5934  1DBC
5935  1DBD
5936  1DBE
5937  1DBF
5938  1DC0
5939  1DC1
5940  1DC2
5941  1DC3
5942  1DC4
5943  1DC5
5944  1DC6
5945  1DC7
5946  1DC8
5947  1DC9
5948  1DCA
5949  1DCB
5950  1DCC
5951  1DCD
5952  1DCE
5953  1DCF
5954  1DD0
5955  1DD1
5956  1DD2
5957  1DD3
5958  1DD4
5959  1DD5
5960  1DD6
5961  1DD7
5962  1DD8
5963  1DD9
5964  1DDA
5965  1DDB
5966  1DDC
5967  1DDD
5968  1DDE
5969  1DDF
5970  1DE0
5971  1DE1
5972  1DE2
5973  1DE3
5974  1DE4
5975  1DE5
5976  1DE6
5977  1DE7
5978  1DE8
5979  1DE9
5980  1DEA
5981  1DEB
5982  1DEC
5983  1DED
5984  1DEE
5985  1DEF
5986  1DF0
5987  1DF1
5988  1DF2
5989  1DF3
5990  1DF4
5991  1DF5
5992  1DF6
5993  1DF7
5994  1DF8
5995  1DF9
5996  1DFA
5997  1DFB
5998  1DFC
5999  1DFD
6000  1DFE
6001  1DFF
6002  1E00
6003  1E01
6004  1E02
6005  1E03
6006  1E04
6007  1E05
6008  1E06
6009  1E07
6010  1E08
6011  1E09
6012  1E0A
6013  1E0B
6014  1E0C
6015  1E0D
6016  1E0E
6017  1E0F
6018  1E10
6019  1E11
6020  1E12
6021  1E13
6022  1E14
6023  1E15
6024  1E16
6025  1E17
6026  1E18
6027  1E19
6028  1E1A
6029  1E1B
6030  1E1C
6031  1E1D
6032  1E1E
6033  1E1F
6034  1E20
6035  1E21
6036  1E22
6037  1E23
6038  1E24
6039  1E25
6040  1E26
6041  1E27
6042  1E28
6043  1E29
6044  1E2A
6045  1E2B
6046  1E2C
6047  1E2D
6048  1E2E
6049  1E2F
6050  1E30
6051  1E31
6052  1E32
6053  1E33
6054  1E34
6055  1E35
6056  1E36
6057  1E37
6058  1E38
6059  1E39
6060  1E3A
6061  1E3B
6062  1E3C
6063  1E3D
6064  1E3E
6065  1E3F
6066  1E40
6067  1E41
6068  1E42
6069  1E43
6070  1E44
6071  1E45
6072  1E46
6073  1E47
6074  1E48
6075  1E49
6076  1E4A
6077  1E4B
6078  1E4C
6079  1E4D
6080  1E4E
6081  1E4F
6082  1E50
6083  1E51
6084  1E52
6085  1E53
6086  1E54
6087  1E55
6088  1E56
6089  1E57
6090  1E58
6091  1E59
6092  1E5A
6093  1E5B
6094  1E5C
6095  1E5D
6096  1E5E
6097  1E5F
6098  1E60
6099  1E61
6100  1E62
6101  1E63
6102  1E64
6103  1E65
6104  1E66
6105  1E67
6106  1E68
6107  1E69
6108  1E6A
6109  1E6B
6110  1E6C
6111  1E6D
6112  1E6E
6113  1E6F
6114  1E70
6115  1E71
6116  1E72
6117  1E73
6118  1E74
6119  1E75
6120  1E76
6121  1E77
6122  1E78
6123  1E79
6124  1E7A
6125  1E7B
6126  1E7C
6127  1E7D
6128  1E7E
6129  1E7F
6130  1E80
6131  1E81
6132  1E82
6133  1E83
6134  1E84
6135  1E85
6136  1E86
6137  1E87
6138  1E88
6139  1E89
6140  1E8A
6141  1E8B
6142  1E8C
6143  1E8D
6144  1E8E
6145  1E8F
6146  1E90
6147  1E91
6148  1E92
6149  1E93
6150  1E94
6151  1E95
6152  1E96
6153  1E97
6154  1E98
6155  1E99
6156  1E9A
6157  1E9B
6158  1E9C
6159  1E9D
6160  1E9E
6161  1E9F
6162  1EA0
6163  1EA1
6164  1EA2
6165  1EA3
6166  1EA4
6167  1EA5
6168  1EA6
6169  1EA7
6170  1EA8
6171  1EA9
6172  1EAA
6173  1EAB
6174  1EAC
6175  1EAD
6176  1EAE
6177  1EAF
6178  1EB0
6179  1EB1
6180  1EB2
6181  1EB3
6182  1EB4
6183  1EB5
6184  1EB6
6185  1EB7
6186  1EB8
6187  1EB9
6188  1EBA
6189  1EBB
6190  1EBC
6191  1EBD
6192  1EBE
6193  1EBF
6194  1EC0
6195  1EC1
6196  1EC2
6197  1EC3
6198  1EC4
6199  1EC5
6200  1EC6
6201  1EC7
6202  1EC8
6203  1EC9
6204  1ECA
6205  1ECB
6206  1ECC
6207  1ECD
6208  1ECE
6209  1ECF
6210  1ED0
6211  1ED1
6212  1ED2
6213  1ED3
6214  1ED4
6215  1ED5
6216  1ED6
6217  1ED7
6218  1ED8
6219  1ED9
6220  1EDA
6221  1EDB
6222  1EDC
6223  1EDD
6224  1EDE
6225  1EDF
6226  1EE0
6227  1EE1
6228  1EE2
6229  1EE3
6230  1EE4
6231  1EE5
6232  1EE6
6233  1EE7
6234  1EE8
6235  1EE9
6236  1EEA
6237  1EEB
6238  1EEC
6239  1EED
6240  1EEE
6241  1EEF
6242  1EF0
6243  1EF1
6244  1EF2
6245  1EF3
6246  1EF4
6247  1EF5
6248  1EF6
6249  1EF7
6250  1EF8
6251  1EF9
6252  1EFA
6253  1EFB
6254  1EFC
6255  1EFD
6256  1EFE
6257  1EFF
6258  1F00
6259  1F01
6260  1F02
6261  1F03
6262  1F04
6263  1F05
6264  1F06
6265  1F07
6266  1F08
6267  1F09
6268  1F0A
6269  1F0B
6270  1F0C
6271  1F0D
6272  1F0E
6273  1F0F
6274  1F10
6275  1F11
6276  1F12
6277  1F13
6278  1F14
6279  1F15
6280  1F16
6281  1F17
6282  1F18
6283  1F19
6284  1F1A
6285  1F1B
6286  1F1C
6287  1F1D
6288  1F1E
6289  1F1F
6290  1F20
6291  1F21
6292  1F22
6293  1F23
6294  1F24
6295  1F25
6296  1F26
6297  1F27
6298  1F28
6299  1F29
6300  1F2A
6301  1F2B
6302  1F2C
6303  1F2D
6304  1F2E
6305  1F2F
6306  1F30
6307  1F31
6308  1F32
6309  1F33
6310  1F34
6311  1F35
6312  1F36
6313  1F37
6314  1F38
6315  1F39
6316  1F3A
6317  1F3B
6318  1F3C
6319  1F3D
6320  1F3E
6321  1F3F
6322  1F40
6323  1F41
6324  1F42
6325  1F43
6326  1F44
6327  1F45
6328  1F46
6329  1F47
6330  1F48
6331  1F49
6332  1F4A
6333  1F4B
6334  1F4C
6335  1F4D
6336  1F4E
6337  1F4F
6338  1F50
6339  1F51
6340  1F52
6341  1F53
6342  1F54
6343  1F55
6344  1F56
6345  1F57
6346  1F58
6347  1F59
6348  1F5A
6349  1F5B
6350  1F5C
6351  1F5D
6352  1F5E
6353  1F5F
6354  1F60
6355  1F61
6356  1F62
6357  1F63
6358  1F64
6359  1F65
6360  1F66
6361  1F67
6362  1F68
6363  1F69
6364  1F6A
6365  1F6B
6366  1F6C
6367  1F6D
6368  1F6E
6369  1F6F
6370  1F70
6371  1F71
6372  1F72
6373  1F73
6374  1F74
6375  1F75
6376  1F76
6377  1F77
6378  1F78
6379  1F79
6380  1F7A
6381  1F7B
6382  1F7C
6383  1F7D
6384  1F7E
6385  1F7F
6386  1F80
6387  1F81
6388  1F82
6389  1F83
6390  1F84
6391  1F85
6392  1F86
6393  1F87
6394  1F88
6395  1F89
6396  1F8A
6397  1F8B
6398  1F8C
6399  1F8D
6400  1F8E
6401  1F8F
6402  1F90
6403  1F91
6404  1F92
6405  1F93
6406  1F94
6407  1F95
6408  1F96
6409  1F97
6410  1F98
6411  1F99
6412  1F9A
6413  1F9B
6414  1F9C
6415  1F9D
6416  1F9E
6417  1F9F
6418  1FA0
6419  1FA1
6420  1FA2
6421  1FA3
6422  1FA4
6423  1FA5
6424  1FA6
6425  1FA7
6426  1FA8
6427  1FA9
6428  1FAA
6429  1FAB
6430  1FAC
6431  1FAD
6432  1FAE
6433  1FAF
6434  1FB0
6435  1FB1
6436  1FB2
6437  1FB3
6438  1FB4
6439  1FB5
6440  1FB6
6441  1FB7
6442  1FB8
6443  1FB9
6444  1FBA
6445  1FBB
6446  1FBC
6447  1FBD
6448  1FBE
6449  1FBF
6450  1FC0
6451  1FC1
6452  1FC2
6453  1FC3
6454  1FC4
6455  1FC5
6456  1FC6
6457  1FC7
6458  1FC8
6459  1FC9
6460  1FCA
6461  1FCB
6462  1FCC
6463  1FCD
6464  1FCE
6465  1FCF
6466  1FD0
6467  1FD1
6468  1FD2
6469  1FD3
6470  1FD4
6471  1FD5
6472  1FD6
6473  1FD7
6474  1FD8
6475  1FD9
6476  1FDA
6477  1FDB
6478  1FDC
6479  1FDD
6480  1FDE
6481  1FDF
6482  1FE0
6483  1FE1
6484  1FE2
6485  1FE3
6486  1FE4
6487  1FE5
6488  1FE6
6489  1FE7
6490  1FE8
6491  1FE9
6492  1FEA
6493  1FEB
6494  1FEC
6495  1FED
6496  1FEE
6497  1FEF
6498  1FF0
6499  1FF1
6500  1FF2
6501  1FF3
6502  1FF4
6503  1FF5
6504  1FF6
6505  1FF7
6506  1FF8
6507  1FF9
6508  1FFA
6509  1FFB
6510  1FFC
6511  1FFD
6512  1FFE
6513  1FFF
6514  2000
6515  2001
6516  2002
6517  2003
6518  2004
6519  2005
6520  2006
6521  2007
6522  2008
6523  2009
6524  200A
6525  200B
6526  200C
6527  200D
6528  200E
6529  200F
6530  2010
6531  2011
6532  2012
6533  2013
6534  2014
6535  2015
6536  2016
6537  2017
6538  2018
6539  2019
6540  201A
6541  201B
6542  201C
6543  201D
6544  201E
6545  201F
6546  2020
6547  2021
6548  2022
6549  2023
6550  2024
6551  2025
6552  2026
6553  2027
6554  2028
6555  2029
6556  202A
6557  202B
6558  202C
6559  202D
6560  202E
6561  202F
6562  2030
6563  2031
6564  2032
6565  2033
6566  2034
6567  2035
6568  2036
6569  2037
6570  2038
6571  2039
6572  203A
6573  203B
6574  203C
6575  203D
6576  203E
6577  203F
6578  2040
6579  2041
6580  2042
6581  2043
6582  2044
6583  2045
6584  2046
6585  2047
6586  2048
6587  2049
6588  204A
6589  204B
6590  204C
6591  204D
6592  204E
6593  204F
6594  2050
6595  2051
6596  2052
6597  2053
6598  2054
6599  2055
6600  2056
6601  2057
6602  2058
6603  2059
6604  205A
6605  205B
6606  205C
6607  205D
6608  205E
6609  205F
6610  2060
6611  2061
6612  2062
6613  2063
6614  2064
6615  2065
6616  2066
6617  2067
6618  2068
6619  2069
6620  206A
6621  206B
6622  206C
6623  206D
6624  206E
6625  206F
6626  2070
6627  2071
6628  2072
6629  2073
6630  2074
6631  2075
6632  2076
6633  2077
6634  2078
6635  2079
6636  207A
6637  207B
6638  207C
6639  207D
6640  207E
6641  207F
6642  2080
6643  2081
6644  2082
6645  2083
6646  2084
6647  2085
6648  2086
6649  2087
6650  2088
6651  2089
6652  208A
6653  208B
6654  208C
6655  208D
6656  208E
6657  208F
6658  2090
6659  2091
6660  2092
6661  2093
6662  2094
6663  2095
6664  2096
6665  2097
6666  2098
6667  2099
6668  209A
6669  209B
6670  209C
6671  209D
6672  209E
6673  209F
6674  20A0
6675  20A1
6676  20A2
6677  20A3
6678  20A4
6679  20A5
6680  20A6
6681  20A7
6682  20A8
6683  20A9
6684  20AA
6685  20AB
6686  20AC
6687  20AD
6688  20AE
6689  20AF
6690  20B0
6691  20B1
6692  20B2
6693  20B3
6694  20B4
6695  20B5
6696  20B6
6697  20B7
6698  20B8
6699  20B9
6700  20BA
6701  20BB
6702  20BC
6703  20BD
6704  20BE
6705  20BF
6706  20C0
6707  20C1
6708  20C2
6709  20C3
6710  20C4
6711  20C5
6712  20C6
6713  20C7
6714  20C8
6715  20C9
6716  20CA
6717  20CB
6718  20CC
6719  20CD
6720  20CE
6721  20CF
6722  20D0
6723  20D1
6724  20D2
6725  20D3
6726  20D4
6727  20D5
6728  20D6
6729  20D7
6730  20D8
6731  20D9
6732  20DA
6733  20DB
6734  20DC
6735  20DD
6736  20DE
6737  20DF
6738  20E0
6739  20E1
6740  20E2
6741  20E3
6742  20E4
6743  20E5
6744  20E6
6745  20E7
6746  20E8
6747  20E9
6748  20EA
6749  20EB
6750  20EC
6751  20ED
6752  20EE
6753  20EF
6754  20F0
6755  20F1
6756  20F2
6757  20F3
6758  20F4
6759  20F5
6760  20F6
6761  20F7
6762  20F8
6763  20F9
6764  20FA
6765  20FB
6766  20FC
6767  20FD
6768  20FE
6769  20FF
6770  2100
6771  2101
6772  2102
6773  2103
6774  2104
6775  2105
6776  2106
6777  2107
6778  2108
6779  2109
6780  210A
6781  210B
6782  210C
6783  210D
6784  210E
6785  210F
6786  2110
6787  2111
6788  2112
6789  2113
6790  2114
6791  2115
6792  2116
6793  2117
6794  2118
6795  2119
6796  211A
6797  211B
6798  211C
6799  211D
6800  211E
6801  211F
6802  2120
6803  2121
6804  2122
6805  2123
6806  2124
6807  2125
6808  2126
6809  2127
6810  2128
6811  2129
6812  212A
6813  212B
6814  212C
6815  212D
6816  212E
6817  212F
6818  2130
6819  2131
6820  2132
6821  2133
6822  2134
6823  2135
6824  2136
6825  2137
6826  2138
6827  2139
6828  213A
6829  213B
6830  213C
6831  213D
6832  213E
6833  213F
6834  2140
6835  2141
6836  2142
6837  2143
6838  2144
6839  2145
6840  2146
6841  2147
6842  2148
6843  2149
6844  214A
6845  214B
6846  214C
6847  214D
6848  214E
6849  214F
6850  2150
6851  2151
6852  2152
6853  2153
6854  2154
6855  2155
6856  2156
6857  2157
6858  2158
6859  2159
6860  215A
6861  215B
6862  215C
6863  215D
6864  215E
6865  215F
6866  2160
6867  2161
6868  2162
6869  2163
6870  2164
6871  2165
6872  2166
6873  2167
6874  2168
6875  2169
6876  216A
6877  216B
6878  216C
6879  216D
6880  216E
6881  216F
6882  2170
6883  2171
6884  2172
6885  2173
6886  2174
6887  2175
6888  2176
6889  2177
6890  2178
6891  2179
6892  217A
6893  217B
6894  217C
6895  217D
6896  217E
6897  217F
6898  2180
6899  2181
6900  2182
6901  2183
6902  2184
6903  2185
6904  2186
6905  2187
6906  2188
6907  2189
6908  218A
6909  218B
6910  218C
6911  218D
6912  218E
6913  218F
6914  2190
6915  2191
6916  2192
6917  2193
6918  2194
6919  2195
6920  2196
6921  2197
6922  2198
6923  2199
6924  219A
6925  219B
6926  219C
6927  219D
6928  219E
6929  219F
6930  21A0
6931  21A1
6932  21A2
6933  21A3
6934  21A4
6935  21A5
6936  21A6
6937  21A7
6938  21A8
6939  21A9
6940  21AA
6941  21AB
6942  21AC
6943  21AD
6944  21AE
6945  21AF
6946  21B0
6947  21B1
6948  21B2
6949  21B3
6950  21B4
6951  21B5
6952  21B6
6953  21B7
6954  21B8
6955  21B9
6956  21BA
6957  21BB
6958  21BC
6959  21BD
6960  21BE
6961  21BF
6962  21C0
6963  21C1
6964  21C2
6965  21C3
6966  21C4
6967  21C5
6968  21C6
6969  21C7
6970  21C8
6971  21C9
6972  21CA
6973  21CB
6974  21CC
6975  21CD
6976  21CE
6977  21CF
6978  21D0
6979  21D1
6980  21D2
6981  21D3
6982  21D4
6983  21D5
6984  21D6
6985  21D7
6986  21D8
6987  21D9
6988  21DA
6989  21DB
6990  21DC
6991  21DD
6992  21DE
6993  21DF
6994  21E0
6995  21E1
6996  21E2
6997  21E3
6998  21E4
6999  21E5
7000  21E6
7001  21E7
7002  21E8
7003  21E9
7004  21EA
7005  21EB
7006  21EC
7007  21ED
7008  21EE
7009  21EF
7010  21F0
7011  21F1
7012  21F2
7013  21F3
7014  21F4
7015  21F5
7016  21F6
7017  21F7
7018  21F8
7019  21F9
7020  21FA
7021  21FB
7022  21FC
7023  21FD
7024  21FE
7025  21FF
7026  2200
7027  2201
7028  2202
7029  2203
7030  2204
7031  2205
7032  2206
7033  2207
7034  2208
7035  2209
7036  220A
7037  220B
7038  220C
7039  220D
7040  220E
7041  220F
7042  2210
7043  2211
7044  2212
7045  2213
7046  2214
7047  2215
7048  2216
7049  2217
7050  2218
7051  2219
7052  221A
7053  221B
7054  221C
7055  221D
7056  221E
7057  221F
7058  2220
7059  2221
7060  2222
7061  2223
7062  2224
7063  2225
7064  2226
7065  2227
7066  2228
7067  2229
7068  222A
7069  222B
7070  222C
7071  222D
7072  222E
7073  222F
7074  2230
7075  2231
7076  2232
7077  2233
7078  2234
7079  2235
7080  2236
7081  2237
7082  2238
7083  2239
7084  223A
7085  223B
7086  223C
7087  223D
7088  223E
7089  223F
7090  2240
7091  2241
7092  2242
7093  2243
7094  2244
7095  2245
7096  2246
7097  2247
7098  2248
7099  2249
7100  224A
7101  224B
7102  224C
7103  224D
7104  224E
7105  224F
7106  2250
7107  2251
7108  2252
7109  2253
7110  2254
7111  2255
7112  2256
7113  2257
7114  2258
7115  2259
7116  225A
7117  225B
7118  225C
7119  225D
7120  225E
7121  225F
7122  2260
7123  2261
7124  2262
7125  2263
7126  2264
7127  2265
7128  2266
7129  2267
7130  2268
7131  2269
7132  226A
7133  226B
7134  226C
7135  226D
7136  226E
7137  226F
7138  2270
7139  2271
7140  2272
7141  2273
7142  2274
7143  2275
7144  2276
7145  2277
7146  2278
7147  2279
7148  227A
7149  227B
7150  227C
7151  227D
7152  227E
7153  227F
7154  2280
7155  2281
7156  2282
7157  2283
7158  2284
7159  2285
7160  2286
7161  2287
7162  2288
7163  2289
7164  228A
7165  228B
7166  228C
7167  228D
7168  228E
7169  228F
7170  2290
7171  2291
7172  2292
7173  2293
7174  2294
7175  2295
7176  2296
7177  2297
7178  2298
7179  2299
7180  229A
7181  229B
7182  229C
7183  229D
7184  229E
7185  229F
7186  22A0
7187  22A1
7188  22A2
7189  22A3
7190  22A4
7191  22A5
7192  22A6
7193  22A7
7194  22A8
7195  22A9
7196  22AA
7197  22AB
7198  22AC
7199  22AD
7200  22AE
7201  22AF
7202  22B0
7203  22B1
7204  22B2
7205  22B3
7206  22B4
7207  22B5
7208  22B6
7209  22B7
7210  22B8
7211  22B9
7212  22BA
7213  22BB
7214  22BC
7215  22BD
7216  22BE
7217  22BF
7218  22C0
7219  22C1
7220  22C2
7221  22C3
7222  22C4
7223  22C5
7224  22C6
7225  22C7
7226  22C8
7227  22C9
7228  22CA
7229  22CB
7230  22CC
7231  22CD
7232  22CE
7233  22CF
7234  22D0
7235  22D1
7236  22D2
7237  22D3
7238  22D4
7239  22D5
7240  22D6
7241  22D7
7242  22D8
7243  22D9
7244  22DA
7245  22DB
7246  22DC
7247  22DD
7248  22DE
7249  22DF
7250  22E0
7251  22E1
7252  22E2
7253  22E3
7254  22E4
7255  22E5
7256  22E6
7257  22E7
7258  22E8
7259  22E9
7260  22EA
7261  22EB
7262  22EC
7263  22ED
7264  22EE
7265  22EF
7266  22F0
7267  22F1
7268  22F2
7269  22F3
7270  22F4
7271  22F5
7272  22F6
7273  22F7
7274  22F8
7275  22F9
7276  22FA
7277  22FB
7278  22FC
7279  22FD
7280  22FE
7281  22FF
7282  2300
7283  2301
7284  2302
7285  2303
7286  2304
7287  2305
7288  2306
7289  2307
7290  2308
7291  2309
7292  230A
7293  230B
7294  230C
7295  230D
7296  230E
7297  230F
7298  2310
7299  2311
7300  2312
7301  2313
7302  2314
7303  2315
7304  2316
7305  2317
7306  2318
7307  2319
7308  231A
7309  231B
7310  231C
7311  231D
7312  231E
7313  231F
7314  2320
7315  2321
7316  2322
7317  2323
7318  2324
7319  2325
7320  2326
7321  2327
7322  2328
7323  2329
7324  232A
7325  232B
7326  232C
7327  232D
7328  232E
7329  232F
7330  2330
7331  2331
7332  2332
7333  2333
7334  2334
7335  2335
7336  2336
7337  2337
7338  2338
7339  2339
7340  233A
7341  233B
7342  233C
7343  233D
7344  233E
7345  233F
7346  2340
7347  2341
7348  2342
7349  2343
7350  2344
7351  2345
7352  2346
7353  2347
7354  2348
7355  2349
7356  234A
7357  234B
7358  234C
7359  234D
7360  234E
7361  234F
7362  2350
7363  2351
7364  2352
7365  2353
7366  2354
7367  2355
7368  2356
7369  2357
7370  2358
7371  2359
7372  235A
7373  235B
7374  235C
7375  235D
7376  235E
7377  235F
7378  2360
7379  2361
7380  2362
7381  2363
7382  2364
7383  2365
7384  2366
7385  2367
7386  2368
7387  2369
7388  236A
7389  236B
7390  236C
7391  236D
7392  236E
7393  236F
7394  2370
7395  2371
7396  2372
7397  2373
7398  2374
7399  2375
7400  2376
7401  2377
7402  2378
7403  2379
7404  237A
7405  237B
7406  237C
7407  237D
7408  237E
7409  237F
7410  2380
7411  2381
7412  2382
7413  2383
7414  2384
7415  2385
7416  2386
7417  2387
7418  2388
7419  2389
7420  238A
7421  238B
7422  238C
7423  238D
7424  238E
7425  238F
7426  2390
7427  2391
7428  2392
7429  2393
7430  2394
7431  2395
7432  2396
7433  2397
7434  2398
7435  2399
7436  239A
7437  239B
7438  239C
7439  239D
7440  239E
7441  239F
7442  23A0
7443  23A1
7444  23A2
7445  23A3
7446  23A4
7447  23A5
7448  23A6
7449  23A7
7450  23A8
7451  23A9
7452  23AA
7453  23AB
7454  23AC
7455  23AD
7456  23AE
7457  23AF
7458  23B0
7459  23B1
7460  23B2
7461  23B3
7462  23B4
7463  23B5
7464  23B6
7465  23B7
7466  23B8
7467  23B9
7468  23BA
7469  23BB
7470  23BC
7471  23BD
7472  23BE
7473  23BF
7474  23C0
7475  23C1
7476  23C2
7477  23C3
7478  23C4
7479  23C5
7480  23C6
7481  23C7
7482  23C8
7483  23C9
7484  23CA
7485  23CB
7486  23CC
7487  23CD
7488  23CE
7489  23CF
7490  23D0
7491  23D1
7492  23D2
7493  23D3
7494  23D4
7495  23D5
7496  23D6
7497  23D7
7498  23D8
7499  23D9
7500  23DA
7501  23DB
7502  23DC
7503  23DD
7504  23DE
7505  23DF
7506  23E0
7507  23E1
7508  23E2
7509  23E3
7510  23E4
7511  23E5
7512  23E6
7513  23E7
7514  23E8
7515  23E9
7516  23EA
7517  23EB
7518  23EC
7519  23ED
7520  23EE
7521  23EF
7522  23F0
7523  23F1
7524  23F2
7525  23F3
7526  23F4
7527  23F5
7528  23F6
7529  23F7
7530  23F8
7531  23F9
7532  23FA
7533  23FB
7534  23FC
7535  23FD
7536  23FE
7537  23FF
7538  2400
7539  2401
7540  2402
7541  2403
7542  2404
7543  2405
7544  2406
7545  2407
7546  2408
7547  2409
7548  240A
7549  240B
7550  240C
7551  240D
7552  240E
7553  240F
7554  2410
7555  2411
7556  2412
7557  2413
7558  2414
7559  2415
7560  2416
7561  2417
7562  2418
7563  2419
7564  241A
7565  241B
7566  241C
7567  241D
7568  241E
7569  241F
7570  2420
7571  2421
7572  2422
7573  2423
7574  2424
7575  2425
7576  2426
7577  2427
7578  2428
7579  2429
7580  242A
7581  242B
7582  242C
7583  242D
7584  242E
7585  242F
7586  2430
7587  2431
7588  2432
7589  2433
7590  2434
7591  2435
7592  2436
7593  2437
7594  2438
7595  2439
7596  243A
7597  243B
7598  243C
7599  243D
7600  243E
7601  243F
7602  2440
7603  2441
7604  2442
7605  2443
7606  2444
7607  2445
7608  2446
7609  2447
7610  2448
7611  2449
7612  244A
7613  244B
7614  244C
7615  244D
7616  244E
7617  244F
7618  2450
7619  2451
7620  2452
7621  2453
7622  2454
7623  2455
7624  2456
7625  2457
7626  2458
7627  2459
7628  245A
7629  245B
7630  245C
7631  245D
7632  245E
7633  245F
7634  2460
7635  2461
7636  2462
7637  2463
7638  2464
7639  2465
7640  2466
7641  2467
7642  2468
7643  2469
7644  246A
7645  246B
7646  246C
7647  246D
7648  246E
7649  246F
7650  2470
7651  2471
7652  2472
7653  2473
7654  2474
7655  2475
7656  2476
7657  2477
7658  2478
7659  2479
7660  247A
7661  247B
7662  247C
7663  247D
7664  247E
7665  247F
7666  2480
7667  2481
7668  2482
7669  2483
7670  2484
7671  2485
7672  2486
7673  2487
7674  2488
7675  2489
7676  248A
7677  248B
7678  248C
7679  248D
7680  248E
7681  248F
7682  2490
7683  2491
7684  2492
7685  2493
7686  2494
7687  2495
7688  2496
7689  2497
7690  2498
7691  2499
7692  249A
7693  249B
7694  249C
7695  249D
7696  249E
7697  249F
7698  24A0
7699  24A1
7700  24A2
7701  24A3
7702  24A4
7703  24A5
7704  24A6
7705  24A7
7706  24A8
7707  24A9
7708  24AA
7709  24AB
7710  24AC
7711  24AD
7712  24AE
7713  24AF
7714  24B0
7715  24B1
7716  24B2
7717  24B3
7718  24B4
7719  24B5
7720  24B6
7721  24B7
7722  24B8
7723  24B9
7724  24BA
7725  24BB
7726  24BC
7727  24BD
7728  24BE
7729  24BF
7730  24C0
7731  24C1
7732  24C2
7733  24C3
7734  24C4
7735  24C5
7736  24C6
7737  24C7
7738  24C8
7739  24C9
7740  24CA
7741  24CB
7742  24CC
7743  24CD
7744  24CE
7745  24CF
7746  24D0
7747  24D1
7748  24D2
7749  24D3
7750  24D4
7751  24D5
7752  24D6
7753  24D7
7754  24D8
7755  24D9
7756  24DA
7757  24DB
7758  24DC
7759  24DD
7760  24DE
7761  24DF
7762  24E0
7763  24E1
7764  24E2
7765  24E3
7766  24E4
7767  24E5
7768  24E6
7769  24E7
7770  24E8
7771  24E9
7772  24EA
7773  24EB
7774  24EC
7775  24ED
7776  24EE
7777  24EF
7778  24F0
7779  24F1
7780  24F2
7781  24F3
7782  24F4
7783  24F5
7784  24F6
7785  24F7
7786  24F8
7787  24F9
7788  24FA
7789  24FB
7790  24FC
7791  24FD
7792  24FE
7793  24FF
7794  2500
7795  2501
7796  2502
7797  2503
7798  2504
7799  2505
7800  2506
7801  2507
7802  2508
7803  2509
7804  250A
7805  250B
7806  250C
7807  250D
7808  250E
7809  250F
7810  2510
7811  2511
7812  2512
7813  2513
7814  2514
7815  2515
7816  2516
7817  2517
7818  2518
7819  2519
7820  251A
7821  251B
7822  251C
7823  251D
7824  251E
7825  251F
7826  2520
7827  2521
7828  2522
7829  2523
7830  2524
7831  2525
7832  2526
7833  2527
7834  2528
7835  2529
7836  252A
7837  252B
7838  252C
7839  252D
7840  252E
7841  252F
7842  2530
7843  2531
7844  2532
7845  2533
7846  2534
7847  2535
7848  2536
7849  2537
7850  2538
7851  2539
7852  253A
7853  253B
7854  253C
7855  253D
7856  253E
7857  253F
7858  2540
7859  2541
7860  2542
7861  2543
7862  2544
7863  2545
7864  2546
7865  2547
7866  2548
7867  2549
7868  254A
7869  254B
7870  254C
7871  254D
7872  254E
7873  254F
7874  2550
7875  2551
7876  2552
7877  2553
7878  2554
7879  2555
7880  2556
7881  2557
7882  2558
7883  2559
7884  255A
7885  255B
7886  255C
7887  255D
7888  255E
7889  255F
7890  2560
7891  2561
7892  2562
7893  2563
7894  2564
7895  2565
7896  2566
7897  2567
7898  2568
7899  2569
7900  256A
7901  256B
7902  256C
7903  256D
7904  256E
7905  256F
7906  2570
7907  2571
7908  2572
7909  2573
7910  2574
7911  2575
7912  2576
7913  2577
7914  2578
7915  2579
7916  257A
7917  257B
7918  257C
7919  257D
7920  257E
7921  257F
7922  2580
7923  2581
7924  2582
7925  2583
7926  2584
7927  2585
7928  2586
7929  2587
7930  2588
7931  2589
7932  258A
7933  258B
7934  258C
7935  258D
7936  258E
7937  258F
7938  2590
7939  2591
7940  2592
7941  2593
7942  2594
7943  2595
7944  2596
7945  2597
7946  2598
7947  2599
7948  259A
7949  259B
7950  259C
7951  259D
7952  259E
7953  259F
7954  25A0
7955  25A1
7956  25A2
7957  25A3
7958  25A4
7959  25A5
7960  25A6
7961  25A7
7962  25A8
7963  25A9
7964  25AA
7965  25AB
7966  25AC
7967  25AD
7968  25AE
7969  25AF
7970  25B0
7971  25B1
7972  25B2
7973  25B3
7974  25B4
7975  25B5
7976  25B6
7977  25B7
7978  25B8
7979  25B9
7980  25BA
7981  25BB
7982  25BC
7983  25BD
7984  25BE
7985  25BF
7986  25C0
7987  25C1
7988  25C2
7989  25C3
7990  25C4
7991  25C5
7992  25C6
7993  25C7
7994  25C8
7995  25C9
7996  25CA
7997  25CB
7998  25CC
7999  25CD
8000  25CE
8001  25CF
8002  25D0
8003  25D1
8004  25D2
8005  25D3
8006  25D4
8007  25D5
8008  25D6
8009  25D7
8010  25D8
8011  25D9
8012  25DA
8013  25DB
8014  25DC
8015  25DD
8016  25DE
8017  25DF
8018  25E0
8019  25E1
8020  25E2
8021  25E3
8022  25E4
8023  25E5
8024  25E6
8025  25E7
8026  25E8
8027  25E9
8028  25EA
8029  25EB
8030  25EC
8031  25ED
8032  25EE
8033  25EF
8034  25F0
8035  25F1
8036  25F2
8037  25F3
8038  25F4
8039  25F5
8040  25F6
8041  25F7
8042  25F8
8043  25F9
8044  25FA
8045  25FB
8046  25FC
8047  25FD
8048  25FE
8049  25FF
8050  2600
8051  2601
8052  2602
8053  2603
8054  2604
8055  2605
8056  2606
8057  2607
8058  2608
8059  2609
8060  260A
8061  260B
8062  260C
8063  260D
8064  260E
8065  260F
8066  2610
8067  2611
8068  2612
8069  2613
8070  2614
8071  2615
8072  2616
8073  2617
8074  2618
8075  2619
8076  261A
8077  261B
8078  261C
8079  261D
8080  261E
8081  261F
8082  2620
8083  2621
8084  2622
8085  2623
8086  2624
8087  2625
8088  2626
8089  2627
8090  2628
8091  2629
8092  262A
8093  262B
8094  262C
8095  262D
8096  262E
8097  262F
8098  2630
8099  2631
8100  2632
8101  2633
8102  2634
8103  2635
8104  2636
8105  2637
8106  2638
8107  2639
8108  263A
8109  263B
8110  263C
8111  263D
8112  263E
8113  263F
8114  2640
8115  2641
8116  2642
8117  2643
8118  2644
8119  2645
8120  2646
8121  2647
8122  2648
8123  2649
8124  264A
8125  264B
8126  264C
8127  264D
8128  264E
8129  264F
8130  2650
8131  2651
8132  2652
8133  2653
8134  2654
8135  2655
8136  2656
8137  2657
8138  2658
8139  2659
8140  265A
8141  265B
8142  265C
8143  265D
8144  265E
8145  265F
8146  2660
8147  2661
8148  2662
8149  2663
8150  2664
8151  2665
8152  2666
8153  2667
8154  2668
8155  2669
8156  266A
8157  266B
8158  266C
8159  266D
8160  266E
8161  266F
8162  2670
8163  2671
8164  2672
8165  2673
8166  2674
8167  2675
8168  2676
8169  2677
8170  2678
8171  2679
8172  267A
8173  267B
8174  267C
8175  267D
8176  267E
8177  267F
8178  2680
8179  2681
8180  2682
8181  2683
8182  2684
8183  2685
8184  2686
8185  2687
8186  2688
8187  2689
8188  268A
8189  268B
8190  268C
8191  268D
8192  268E
8193  268F
8194  2690
8195  2691
8196  2692
8197  2693
8198  2694
8199  2695
8200  2696
8201  2697
8202  2698
8203  2699
8204  269A
8205  269B
8206  269C
8207  269D
8208  269E
8209  269F
8210  26A0
8211  26A1
8212  26A2
8213  26A3
8214  26A4
8215  26A5
8216  26A6
8217  26A7
8218  26A8
8219  26A9
8220  26AA
8221  26AB
8222  26AC
8223  26AD
8224  26AE
8225  26AF
8226  26B0
8227  26B1
8228  26B2
8229  26B3
8230  26B4
8231  26B5
8232  26B6
8233  26B7
8234  26B8
8235  26B9
8236  26BA
8237  26BB
8238  26BC
8239  26BD
8240  26BE
8241  26BF
8242  26C0
8243  26C1
8244  26C2
8245  26C3
8246  26C4
8247  26C5
8248  26C6
8249  26C7
8250  26C8
8251  26C9
8252  26CA
8253  26CB
8254  26CC
8255  26CD
8256  26CE
8257  26CF
8258  26D0
8259  26D1
8260  26D2
8261  26D3
8262  26D4
8263  26D5
8264  26D6
8265  26D7
8266  26D8
8267  26D9
8268  26DA
8269  26DB
8270  26DC
8271  26DD
8272  26DE
8273  26DF
8274  26E0
8275  26E1
8276  26E2
8277  26E3
8278  26E4
8279  26E5
8280  26E6
8281  26E7
8282  26E8
8283  26E9
8284  26EA
8285  26EB
8286  26EC
8287  26ED
8288  26EE
8289  26EF
8290  26F0
8291  26F1
8292  26F2
8293  26F3
8294  26F4
8295  26F5
8296  26F6
8297  26F7
8298  26F8
8299  26F9
8300  26FA
8301  26FB
8302  26FC
8303  26FD
8304  26FE
8305  26FF
8306  2700
8307  2701
8308  2702
8309  2703
8310  2704
8311  2705
8312  2706
8313  2707
8314  2708
8315  2709
8316  270A
8317  270B
8318  270C
8319  270D
8320  270E
8321  270F
8322  2710
8323  2711
8324  2712
8325  2713
8326  2714
8327  2715
8328  2716
8329  2717
8330  2718
8331  2719
8332  271A
8333  271B
8334  271C
8335  271D
8336  271E
8337  271F
8338  2720
8339  2721
8340  2722
8341  2723
8342  2724
8343  2725
8344  2726
8345  2727
8346  2728
8347  2729
8348  272A
8349  272B
8350  272C
8351  272D
8352  272E
8353  272F
8354  2730
8355  2731
8356  2732
8357  2733
8358  2734
8359  2735
8360  2736
8361  2737
8362  2738
8363  2739
8364  273A
8365  273B
8366  273C
8367  273D
8368  273E
8369  273F
8370  2740
8371  2741
8372  2742
8373  2743
8374  2744
8375  2745
8376  2746
8377  2747
8378  2748
8379  2749
8380  274A
8381  274B
8382  274C
8383  274D
8384  274E
8385  274F
8386  2750
8387  2751
8388  2752
8389  2753
8390  2754
8391  2755
8392  2756
8393  2757
8394  2758
8395  2759
8396  275A
8397  275B
8398  275C
8399  275D
8400  275E
8401  275F
8402  2760
8403  2761
8404  2762
8405  2763
8406  2764
8407  2765
8408  2766
8409  2767
8410  2768
8411  2769
8412  276A
8413  276B
8414  276C
8415  276D
8416  276E
8417  276F
8418  2770
8419  2771
8420  2772
8421  2773
8422  2774
8423  2775
8424  2776
8425  2777
8426  2778
8427  2779
8428  277A
8429  277B
8430  277C
8431  277D
8432  277E
8433  277F
8434  2780
8435  2781
8436  2782
8437  2783
8438  2784
8439  2785
8440  2786
8441  2787
8442  2788
8443  2789
8444  278A
8445  278B
8446  278C
8447  278D
8448  278E
8449  278F
8450  2790
8451  2791
8452  2792
8453  2793
8454  2794
8455  2795
8456  2796
8457  2797
8458  2798
8459  2799
8460  279A
8461  279B
8462  279C
8463  279D
8464  279E
8465  279F
8466  27A0
8467  27A1
8468  27A2
8469  27A3
8470  27A4
8471  27A5
8472  27A6
8473  27A7
8474  27A8
8475  27A9
8476  27AA
8477  27AB
8478  27AC
8479  27AD
8480  27AE
8481  27AF
8482  27B0
8483  27B1
8484  27B2
8485  27B3
8486  27B4
8487  27B5
8488  27B6
8489  27B7
8490  27B8
8491  27B9
8492  27BA
8493  27BB
8494  27BC
8495  27BD
8496  27BE
8497  27BF
8498  27C0
8499  27C1
8500  27C2
8501  27C3
8502  27C4
8503  27C5
8504  27C6
8505  27C7
8506  27C8
8507  27C9
8508  27CA
8509  27CB
8510  27CC
8511  27CD
8512  27CE
8513  27CF
8514  27D0
8515  27D1
8516  27D2
8517  27D3
8518  27D4
8519  27D5
8520  27D6
8521  27D7
8522  27D8
8523  27D9
8524  27DA
8525  27DB
8526  27DC
8527  27DD
8528  27DE
8529  27DF
8530  27E0
8531  27E1
8532  27E2
8533  27E3
8534  27E4
8535  27E5
8536  27E6
8537  27E7
8538  27E8
8539  27E9
8540  27EA
8541  27EB
8542  27EC
8543  27ED
8544  27EE
8545  27EF
8546  27F0
8547  27F1
8548  27F2
8549  27F3
8550  27F4
8551  27F5
8552  27F6
8553  27F7
8554  27F8
8555  27F9
8556  27FA
8557  27FB
8558  27FC
8559  27FD
8560  27FE
8561  27FF
8562  2800
8563  2801
8564  2802
8565  2803
8566  2804
8567  2805
8568  2806
8569  2807
8570  2808
8571  2809
8572  280A
8573  280B
8574  280C
8575  280D
8576  280E
8577  280F
8578  2810
8579  2811
8580  2812
8581  2813
8582  2814
8583  2815
8584  2816
8585  2817
8586  2818
8587  2819
8588  281A
8589  281B
8590  281C
8591  281D
8592  281E
8593  281F
8594  2820
8595  2821
8596  2822
8597  2823
8598  2824
8599  2825
8600  2826
8601  2827
8602  2828
8603  2829
8604  282A
8605  282B
8606  282C
8607  282D
8608  282E
8609  282F
8610  2830
8611  2831
8612  2832
8613  2833
8614  2834
8615  2835
8616  2836
8617  2837
8618  2838
8619  2839
8620  283A
8621  283B
8622  283C
8623  283D
8624  283E
8625  283F
8626  2840
8627  2841
8628  2842
8629  2843
8630  2844
8631  2845
8632  2846
8633  2847
8634  2848
8635  2849
8636  284A
8637  284B
8638  284C
8639  284D
8640  284E
8641  284F
8642  2850
8643  2851
8644  2852
8645  2853
8646  2854
8647  2855
8648  2856
8649  2857
8650  2858
8651  2859
8652  285A
8653  285B
8654  285C
8655  285D
8656  285E
8657  285F
8658  2860
8659  2861
8660  2862
8661  2863
8662  2864
8663  2865
8664  2866
8665  2867
8666  2868
8667  2869
8668  286A
8669  286B
8670  286C
8671  286D
8672  286E
8673  286F
8674  2870
8675  2871
8676  2872
8677  2873
8678  2874
8679  2875
8680  2876
8681  2877
8682  2878
8683  2879
8684  287A
8685  287B
8686  287C
8687  287D
8688  287E
8689  287F
8690  2880
8691  2881
8692  2882
8693  2883
8694  2884
8695  2885
8696  2886
8697  2887
8698  2888
8699  2889
8700  288A
8701  288B
8702  288C
8703  288D
8704  288E
8705  288F
8706  2890
8707  2891
8708  2892
8709  2893
8710  2894
8711  2895
8712  2896
8713  2897
8714  2898
8715  2899
8716  289A
8717  289B
8718  289C
8719  289D
8720  289E
8721  289F
8722  28A0
8723  28A1
8724  28A2
8725  28A3
8726  28A4
8727  28A5
8728  28A6
8729  28A7
8730  28A8
8731  28A9
8732  28AA
8733  28AB
8734  28AC
8735  28AD
8736  28AE
8737  28AF
8738  28B0
8739  28B1
8740  28B2
8741  28B3
8742  28B4
8743  28B5
8744  28B6
8745  28B7
8746  28B8
8747  28B9
8748  28BA
8749  28BB
8750  28BC
8751  28BD
8752  28BE
8753  28BF
8754  28C0
8755  28C1
8756  28C2
8757  28C3
8758  28C4
8759  28C5
8760  28C6
8761  28C7
8762  28C8
8763  28C9
8764  28CA
8765  28CB
8766  28CC
8767  28CD
8768  28CE
8769  28CF
8770  28D0
8771  28D1
8772  28D2
8773  28D3
8774  28D4
8775  28D5
8776  28D6
8777  28D7
8778  28D8
8779  28D9
8780  28DA
8781  28DB
8782  28DC
8783  28DD
8784  28DE
8785  28DF
8786  28E0
8787  28E1
8788  28E2
8789  28E3
8790  28E4
8791  28E5
8792  28E6
8793  28E7
8794  28E8
8795  28E9
8796  28EA
8797  28EB
8798  28EC
8799  28ED
8800  28EE
8801  28EF
8802  28F0
8803  28F1
8804  28F2
8805  28F3
8806  28F4
8807  28F5
8808  28F6
8809  28F7
8810  28F8
8811  28F9
8812  28FA
8813  28FB
8814  28FC
8815  28FD
8816  28FE
8817  28FF
8818  2900
8819  2901
8820  2902
8821  2903
8822  2904
8823  2905
8824  2906
8825  2907
8826  2908
8827  2909
8828  290A
8829  290B
8830  290C
8831  290D
8832  290E
8833  290F
8834  2910
8835  2911
8836  2912
8837  2913
8838  2914
8839  2915
8840  2916
8841  2917
8842  2918
8843  2919
8844  291A
8845  291B
8846  291C
8847  291D
8848  291E
8849  291F
8850  2920
8851  2921
8852  2922
8853  2923
8854  2924
8855  2925
8856  2926
8857  2927
8858  2928
8859  2929
8860  292A
8861  292B
8862  292C
8863  292D
8864  292E
8865  292F
8866  2930
8867  2931
8868  2932
8869  2933
8870  2934
8871  2935
8872  2936
8873  2937
8874  2938
8875  2939
8876  293A
8877  293B
8878  293C
8879  293D
8880  293E
8881  293F
8882  2940
8883  2941
8884  2942
8885  2943
8886  2944
8887  2945
8888  2946
8889  2947
8890  2948
8891  2949
8892  294A
8893  294B
8894  294C
8895  294D
8896  294E
8897  294F
8898  2950
8899  2951
8900  2952
8901  2953
8902  2954
8903  2955
8904  2956
8905  2957
8906  2958
8907  2959
8908  295A
8909  295B
8910  295C
8911  295D
8912  295E
8913  295F
8914  2960
8915  2961
8916  2962
8917  2963
8918  2964
8919  2965
8920  2966
8921  2967
8922  2968
8923  2969
8924  296A
8925  296B
8926  296C
8927  296D
8928  296E
8929  296F
8930  2970
8931  2971
8932  2972
8933  2973
8934  2974
8935  2975
8936  2976
8937  2977
8938  2978
8939  2979
8940  297A
8941  297B
8942  297C
8943  297D
8944  297E
8945  297F
8946  2980
8947  2981
8948  2982
8949  2983
8950  2984
8951  2985
8952  2986
8953  2987
8954  2988
8955  2989
8956  298A
8957  298B
8958  298C
8959  298D
8960  298E
8961  298F
8962  2990
8963  2991
8964  2992
8965  2993
8966  2994
8967  2995
8968  2996
8969  2997
8970  2998
8971  2999
8972  299A
8973  299B
8974  299C
8975  299D
8976  299E
8977  299F
8978  29A0
8979  29A1
8980  29A2
8981  29A3
8982  29A4
8983  29A5
8984  29A6
8985  29A7
8986  29A8
8987  29A9
8988  29AA
8989  29AB
8990  29AC
8991  29AD
8992  29AE
8993  29AF
8994  29B0
8995  29B1
8996  29B2
8997  29B3
8998  29B4
8999  29B5
9000  29B6
9001  29B7
9002  29B8
9003  29B9
9004  29BA
9005  29BB
9006  29BC
9007  29BD
9008  29BE
9009  29BF
9010  29C0
9011  29C1
9012  29C2
9013  29C3
9014  29C4
9015  29C5
9016  29C6
9017  29C7
9018  29C8
9019  29C9
9020  29CA
9021  29CB
9022  29CC
9023  29CD
9024  29CE
9025  29CF
9026  29D0
9027  29D1
9028  29D2
9029  29D3
9030  29D4
9031  29D5
9032  29D6
9033  29D7
9034  29D8
9035  29D9
9036  29DA
9037  29DB
9038  29DC
9039  29DD
9040  29DE
9041  29DF
9042  29E0
9043  29E1
9044  29E2
9045  29E3
9046  29E4
9047  29E5
9048  29E6
9049  29E7
9050  29E8
9051  29E9
9052  29EA
9053  29EB
9054  29EC
9055  29ED
9056  29EE
9057  29EF
9058  29F0
9059  29F1
9060  29F2
9061  29F3
9062  29F4
9063  29F5
9064  29F6
9065  29F7
9066  29F8
9067  29F9
9068  29FA
9069  29FB
9070  29FC
9071  29FD
9072  29FE
9073  29FF
9074  2A00
9075  2A01
9076  2A02
9077  2A03
9078  2A04
9079  2A05
9080  2A06
9081  2A07
9082  2A08
9083  2A09
9084  2A0A
9085  2A0B
9086  2A0C
9087  2A0D
9088  2A0E
9089  2A0F
9090  2A10
9091  2A11
9092  2A12
9093  2A13
9094  2A14
9095  2A15
9096  2A16
9097  2A17
9098  2A18
9099  2A19
9100  2A1A
9101  2A1B
9102  2A1C
9103  2A1D
9104  2A1E
9105  2A1F
9106  2A20
9107  2A21
9108  2A22
9109  2A23
9110  2A24
9111  2A25
9112  2A26
9113  2A27
9114  2A28
9115  2A29
9116  2A2A
9117  2A2B
9118  2A2C
9119  2A2D
9120  2A2E
9121  2A2F
9122  2A30
9123  2A31
9124  2A32
9125  2A33
9126  2A34
9127  2A35
9128  2A36
9129  2A37
9130  2A38
9131  2A39
9132  2A3A
9133  2A3B
9134  2A3C
9135  2A3D
9136  2A3E
9137  2A3F
9138  2A40
9139  2A41
9140  2A42
9141  2A43
9142  2A44
9143  2A45
9144  2A46
9145  2A47
9146  2A48
9147  2A49
9148  2A4A
9149  2A4B
9150  2A4C
9151  2A4D
9152  2A4E
9153  2A4F
9154  2A50
9155  2A51
9156  2A52
9157  2A53
9158  2A54
9159  2A55
9160  2A56
9161  2A57
9162  2A58
9163  2A59
9164  2A5A
9165  2A5B
9166  2A5C
9167  2A5D
9168  2A5E
9169  2A5F
9170  2A60
9171  2A61
9172  2A62
9173  2A63
9174  2A64
9175  2A65
9176  2A66
9177  2A67
9178  2A68
9179  2A69
9180  2A6A
9181  2A6B
9182  2A6C
9183  2A6D
9184  2A6E
9185  2A6F
9186  2A70
9187  2A71
9188  2A72
9189  2A73
9190  2A74
9191  2A75
9192  2A76
9193  2A77
9194  2A78
9195  2A79
9196  2A7A
9197  2A7B
9198  2A7C
9199  2A7D
9200  2A7E
9201  2A7F
9202  2A80
9203  2A81
9204  2A82
9205  2A83
9206  2A84
9207  2A85
9208  2A86
9209  2A87
9210  2A88
9211  2A89
9212  2A8A
9213  2A8B
9214  2A8C
9215  2A8D
9216  2A8E
9217  2A8F
9218  2A90
9219  2A91
9220  2A92
9221  2A93
9222  2A94
9223  2A95
9224  2A96
9225  2A97
9226  2A98
9227  2A99
9228  2A9A
9229  2A9B
9230  2A9C
9231  2A9D
9232  2A9E
9233  2A9F
9234  2AA0
9235  2AA1
9236  2AA2
9237  2AA3
9238  2AA4
9239  2AA5
9240  2AA6
9241  2AA7
9242  2AA8
9243  2AA9
9244  2AAA
9245  2AAB
9246  2AAC
9247  2AAD
9248  2AAE
9249  2AAF
9250  2AB0
9251  2AB1
9252  2AB2
9253  2AB3
9254  2AB4
9255  2AB5
9256  2AB6
9257  2AB7
9258  2AB8
9259  2AB9
9260  2ABA
9261  2ABB
9262  2ABC
9263  2ABD
9264  2ABE
9265  2ABF
9266  2AC0
9267  2AC1
9268  2AC2
9269  2AC3
9270  2AC4
9271  2AC5
9272  2AC6
9273  2AC7
9274  2AC8
9275  2AC9
9276  2ACA
9277  2ACB
9278  2ACC
9279  2ACD
9280  2ACE
9281  2ACF
9282  2AD0
9283  2AD1
9284  2AD2
9285  2AD3
9286  2AD4
9287  2AD5
9288  2AD6
9289  2AD7
9290  2AD8
9291  2AD9
9292  2ADA
9293  2ADB
9294  2ADC
9295  2ADD
9296  2ADE
9297  2ADF
9298  2AE0
9299  2AE1
9300  2AE2
9301  2AE3
9302  2AE4
9303  2AE5
9304  2AE6
9305  2AE7
9306  2AE8
9307  2AE9
9308  2AEA
9309  2AEB
9310  2AEC
9311  2AED
9312  2AEE
9313  2AEF
9314  2AF0
9315  2AF1
9316  2AF2
9317  2AF3
9318  2AF4
9319  2AF5
9320  2AF6
9321  2AF7
9322  2AF8
9323  2AF9
9324  2AFA
9325  2AFB
9326  2AFC
9327  2AFD
9328  2AFE
9329  2AFF
9330  2B00
9331  2B01
9332  2B02
9333  2B03
9334  2B04
9335  2B05
9336  2B06
9337  2B07
9338  2B08
9339  2B09
9340  2B0A
9341  2B0B
9342  2B0C
9343  2B0D
9344  2B0E
9345  2B0F
9346  2B10
9347  2B11
9348  2B12
9349  2B13
9350  2B14
9351  2B15
9352  2B16
9353  2B17
9354  2B18
9355  2B19
9356  2B1A
9357  2B1B
9358  2B1C
9359  2B1D
9360  2B1E
9361  2B1F
9362  2B20
9363  2B21
9364  2B22
9365  2B23
9366  2B24
9367  2B25
9368  2B26
9369  2B27
9370  2B28
9371  2B29
9372  2B2A
9373  2B2B
9374  2B2C
9375  2B2D
9376  2B2E
9377  2B2F
9378  2B30
9379  2B31
9380  2B32
9381  2B33
9382  2B34
9383  2B35
9384  2B36
9385  2B37
9386  2B38
9387  2B39
9388  2B3A
9389  2B3B
9390  2B3C
9391  2B3D
9392  2B3E
9393  2B3F
9394  2B40
9395  2B41
9396  2B42
9397  2B43
9398  2B44
9399  2B45
9400  2B46
9401  2B47
9402  2B48
9403  2B49
9404  2B4A
9405  2B4B
9406  2B4C
9407  2B4D
9408  2B4E
9409  2B4F
9410  2B50
9411  2B51
9412  2B52
9413  2B53
9414  2B54
9415  2B55
9416  2B56
9417  2B57
9418  2B58
9419  2B59
9420  2B5A
9421  2B5B
9422  2B5C
9423  2B5D
9424  2B5E
9425  2B5F
9426  2B60
9427  2B61
9428  2B62
9429  2B63
9430  2B64
9431  2B65
9432  2B66
9433  2B67
9434  2B68
9435  2B69
9436  2B6A
9437  2B6B
9438  2B6C
9439  2B6D
9440  2B6E
9441  2B6F
9442  2B70
9443  2B71
9444  2B72
9445  2B73
9446  2B74
9447  2B75
9448  2B76
9449  2B77
9450  2B78
9451  2B79
9452  2B7A
9453  2B7B
9454  2B7C
9455  2B7D
9456  2B7E
9457  2B7F
9458  2B80
9459  2B81
9460  2B82
9461  2B83
9462  2B84
9463  2B85
9464  2B86
9465  2B87
9466  2B88
9467  2B89
9468  2B8A
9469  2B8B
9470  2B8C
9471  2B8D
9472  2B8E
9473  2B8F
9474  2B90
9475  2B91
9476  2B92
9477  2B93
9478  2B94
9479  2B95
9480  2B96
9481  2B97
9482  2B98
9483  2B99
9484  2B9A
9485  2B9B
9486  2B9C
9487  2B9D
9488  2B9E
9489  2B9F
9490  2BA0
9491  2BA1
9492  2BA2
9493  2BA3
9494  2BA4
9495  2BA5
9496  2BA6
9497  2BA7
9498  2BA8
9499  2BA9
9500  2BAA
9501  2BAB
9502  2BAC
9503  2BAD
9504  2BAE
9505  2BAF
9506  2BB0
9507  2BB1
9508  2BB2
9509  2BB3
9510  2BB4
9511  2BB5
9512  2BB6
9513  2BB7
9514  2BB8
9515  2BB9
9516  2BBA
9517  2BBB
9518  2BBC
9519  2BBD
9520  2BBE
9521  2BBF
9522  2BC0
9523  2BC1
9524  2BC2
9525  2BC3
9526  2BC4
9527  2BC5
9528  2BC6
9529  2BC7
9530  2BC8
9531  2BC9
9532  2BCA
9533  2BCB
9534  2BCC
9535  2BCD
9536  2BCE
9537  2BCF
9538  2BD0
9539  2BD1
9540  2BD2
9541  2BD3
9542  2BD4
9543  2BD5
9544  2BD6
9545  2BD7
9546  2BD8
9547  2BD9
9548  2BDA
9549  2BDB
9550  2BDC
9551  2BDD
9552  2BDE
9553  2BDF
9554  2BE0
9555  2BE1
9556  2BE2
9557  2BE3
9558  2BE4
9559  2BE5
9560  2BE6
9561  2BE7
9562  2BE8
9563  2BE9
9564  2BEA
9565  2BEB
9566  2BEC
9567  2BED
9568  2BEE
9569  2BEF
9570  2BF0
9571  2BF1
9572  2BF2
9573  2BF3
9574  2BF4
9575  2BF5
9576  2BF6
9577  2BF7
9578  2BF8
9579  2BF9
9580  2BFA
9581  2BFB
9582  2BFC
9583  2BFD
9584  2BFE
9585  2BFF
9586  2C00
9587  2C01
9588  2C02
9589  2C03
9590  2C04
9591  2C05
9592  2C06
9593  2C07
9594  2C08
9595  2C09
9596  2C0A
9597  2C0B
9598  2C0C
9599  2C0D
9600  2C0E
9601  2C0F
9602  2C10
9603  2C11
9604  2C12
9605  2C13
9606  2C14
9607  2C15
9608  2C16
9609  2C17
9610  2C18
9611  2C19
9612  2C1A
9613  2C1B
9614  2C1C
9615  2C1D
9616  2C1E
9617  2C1F
9618  2C20
9619  2C21
9620  2C22
9621  2C23
9622  2C24
9623  2C25
9624  2C26
9625  2C27
9626  2C28
9627  2C29
9628  2C2A
9629  2C2B
9630  2C2C
9631  2C2D
9632  2C2E
9633  2C2F
9634  2C30
9635  2C31
9636  2C32
9637  2C33
9638  2C34
9639  2C35
9640  2C36
9641  2C37
9642  2C38
9643  2C39
9644  2C3A
9645  2C3B
9646  2C3C
9647  2C3D
9648  2C3E
9649  2C3F
9650  2C40
9651  2C41
9652  2C42
9653  2C43
9654  2C44
9655  2C45
9656  2C46
9657  2C47
9658  2C48
9659  2C49
9660  2C4A
9661  2C4B
9662  2C4C
9663  2C4D
9664  2C4E
9665  2C4F
9666  2C50
9667  2C51
9668  2C52
9669  2C53
9670  2C54
9671  2C55
9672  2C56
9673  2C57
9674  2C58
9675  2C59
9676  2C5A
9677  2C5B
9678  2C5C
9679  2C5D
9680  2C5E
9681  2C5F
9682  2C60
9683  2C61
9684  2C62
9685  2C63
9686  2C64
9687  2C65
9688  2C66
9689  2C67
9690  2C68
9691  2C69
9692  2C6A
9693  2C6B
9694  2C6C
9695  2C6D
9696  2C6E
9697  2C6F
9698  2C70
9699  2C71
9700  2C72
9701  2C73
9702  2C74
9703  2C75
9704  2C76
9705  2C77
9706  2C78
9707  2C79
9708  2C7A
9709  2C7B
9710  2C7C
9711  2C7D
9712  2C7E
9713  2C7F
9714  2C80
9715  2C81
9716  2C82
9717  2C83
9718  2C84
9719  2C85
9720  2C86
9721  2C87
9722  2C88
9723  2C89
9724  2C8A
9725  2C8B
9726  2C8C
9727  2C8D
9728  2C8E
9729  2C8F
9730  2C90
9731  2C91
9732  2C92
9733  2C93
9734  2C94
9735  2C95
9736  2C96
9737  2C97
9738  2C98
9739  2C99
9740  2C9A
9741  2C9B
9742  2C9C
9743  2C9D
9744  2C9E
9745  2C9F
9746  2CA0
9747  2CA1
9748  2CA2
9749  2CA3
9750  2CA4
9751  2CA5
9752  2CA6
9753  2CA7
9754  2CA8
9755  2CA9
9756  2CAA
9757  2CAB
9758  2CAC
9759  2CAD
9760  2CAE
9761  2CAF
9762  2CB0
9763  2CB1
9764  2CB2
9765  2CB3
9766  2CB4
9767  2CB5
9768  2CB6
9769  2CB7
9770  2CB8
9771  2CB9
9772  2CBA
9773  2CBB
9774  2CBC
9775  2CBD
9776  2CBE
9777  2CBF
9778  2CC0
9779  2CC1
9780  2CC2
9781  2CC3
9782  2CC4
9783  2CC5
9784  2CC6
9785  2CC7
9786  2CC8
9787  2CC9
9788  2CCA
9789  2CCB
9790  2CCC
9791  2CCD
9792  2CCE
9793  2CCF
9794  2CD0
9795  2CD1
9796  2CD2
9797  2CD3
9798  2CD4
9799  2CD5
9800  2CD6
9801  2CD7
9802  2CD8
9803  2CD9
9804  2CDA
9805  2CDB
9806  2CDC
9807  2CDD
9808  2CDE
9809  2CDF
9810  2CE0
9811  2CE1
9812  2CE2
9813  2CE3
9814  2CE4
9815  2CE5
9816  2CE6
9817  2CE7
9818  2CE8
9819  2CE9
9820  2CEA
9821  2CEB
9822  2CEC
9823  2CED
9824  2CEE
9825  2CEF
9826  2CF0
9827  2CF1
9828  2CF2
9829  2CF3
9830  2CF4
9831  2CF5
9832  2CF6
9833  2CF7
9834  2CF8
9835  2CF9
9836  2CFA
9837  2CFB
9838  2CFC
9839  2CFD
9840  2CFE
9841  2CFF
9842  2D00
9843  2D01
9844  2D02
9845  2D03
9846  2D04
9847  2D05
9848  2D06
9849  2D07
9850  2D08
9851  2D09
9852  2D0A
9853  2D0B
9854  2D0C
9855  2D0D
9856  2D0E
9857  2D0F
9858  2D10
9859  2D11
9860  2D12
9861  2D13
9862  2D14
9863  2D15
9864  2D16
9865  2D17
9866  2D18
9867  2D19
9868  2D1A
9869  2D1B
9870  2D1C
9871  2D1D
9872  2D1E
9873  2D1F
9874  2D20
9875  2D21
9876  2D22
9877  2D23
9878  2D24
9879  2D25
9880  2D26
9881  2D27
9882  2D28
9883  2D29
9884  2D2A
9885  2D2B
9886  2D2C
9887  2D2D
9888  2D2E
9889  2D2F
9890  2D30
9891  2D31
9892  2D32
9893  2D33
9894  2D34
9895  2D35
9896  2D36
9897  2D37
9898  2D38
9899  2D39
9900  2D3A
9901  2D3B
9902  2D3C
9903  2D3D
9904  2D3E
9905  2D3F
9906  2D40
9907  2D41
9908  2D42
9909  2D43
9910  2D44
9911  2D45
9912  2D46
9913  2D47
9914  2D48
9915  2D49
9916  2D4A
9917  2D4B
9918  2D4C
9919  2D4D
9920  2D4E
9921  2D4F
9922  2D50
9923  2D51
9924  2D52
9925  2D53
9926  2D54
9927  2D55
9928  2D56
9929  2D57
9930  2D58
9931  2D59
9932  2D5A
9933  2D5B
9934  2D5C
9935  2D5D
9936  2D5E
9937  2D5F
9938  2D60
9939  2D61
9940  2D62
9941  2D63
9942  2D64
9943  2D65
9944  2D66
9945  2D67
9946  2D68
9947  2D69
9948  2D6A
9949  2D6B
9950  2D6C
9951  2D6D
9952  2D6E
9953  2D6F
9954  2D70
9955  2D71
9956  2D72
9957  2D73
9958  2D74
9959  2D75
9960  2D76
9961  2D77
9962  2D78
9963  2D79
9964  2D7A
9965  2D7B
9966  2D7C
9967  2D7D
9968  2D7E
9969  2D7F
9970  2D80
9971  2D81
9972  2D82
9973  2D83
9974  2D84
9975  2D85
9976  2D86
9977  2D87
9978  2D88
9979  2D89
9980  2D8A
9981  2D8B
9982  2D8C
9983  2D8D
9984  2D8E
9985  2D8F
9986  2D90
9987  2D91
9988  2D92
9989  2D93
9990  2D94
9991  2D95
9992  2D96
9993  2D97
9994  2D98
9995  2D99
9996  2D9A
9997  2D9B
9998  2D9C
9999  2D9D
10000  2D9E
10001  2D9F
10002  2DA0
10003  2DA1
10004  2DA2
10005  2DA3
10006  2DA4
10007  2DA5
10008  2DA6
10009  2DA7
10010  2DA8
10011  2DA9
10012  2DAA
10013  2DAB
10014  2DAC
10015  2DAD
10016  2DAE
10017  2DAF
10018  2DB0
10019  2DB1
10020  2DB2
10021  2DB3
10022  2DB4
10023  2DB5
10024  2DB6
10025  2DB7
10026  2DB8
10027  2DB9
10028  2DBA
10029  2DBB
10030  2DBC
10031  2DBD
10032  2DBE
10033  2DBF
10034  2DC0
10035  2DC1
10036  2DC2
10037  2DC3
10038  2DC4
10039  2DC5
10040  2DC6
10041  2DC7
10042  2DC8
10043  2DC9
10044  2DCA
10045  2DCB
10046  2DCC
10047  2DCD
10048  2DCE
10049  2DCF
10050  2DD0
10051  2DD1
10052  2DD2
10053  2DD3
10054  2DD4
10055  2DD5
10056  2DD6
10057  2DD7
10058  2DD8
10059  2DD9
10060  2DDA
10061  2DDB
10062  2DDC
10063  2DDD
10064  2DDE
10065  2DDF
10066  2DE0
10067  2DE1
10068  2DE2
10069  2DE3
10070  2DE4
10071  2DE5
10072  2DE6
10073  2DE7
10074  2DE8
10075  2DE9
10076  2DEA
10077  2DEB
10078  2DEC
10079  2DED
10080  2DEE
10081  2DEF
10082  2DF0
10083  2DF1
10084  2DF2
10085  2DF3
10086  2DF4
10087  2DF5
10088  2DF6
10089  2DF7
10090  2DF8
10091  2DF9
10092  2DFA
10093  2DFB
10094  2DFC
10095  2DFD
10096  2DFE
10097  2DFF
10098  2E00
10099  2E01
10100  2E02
10101  2E03
10102  2E04
10103  2E05
10104  2E06
10105  2E07
10106  2E08
10107  2E09
10108  2E0A
10109  2E0B
10110  2E0C
10111  2E0D
10112  2E0E
10113  2E0F
10114  2E10
10115  2E11
10116  2E12
10117  2E13
10118  2E14
10119  2E15
10120  2E16
10121  2E17
10122  2E18
10123  2E19
10124  2E1A
10125  2E1B
10126  2E1C
10127  2E1D
10128  2E1E
10129  2E1F
10130  2E20
10131  2E21
10132  2E22
10133  2E23
10134  2E24
10135  2E25
10136  2E26
10137  2E27
10138  2E28
10139  2E29
10140  2E2A
10141  2E2B
10142  2E2C
10143  2E2D
10144  2E2E
10145  2E2F
10146  2E30
10147  2E31
10148  2E32
10149  2E33
10150  2E34
10151  2E35
10152  2E36
10153  2E37
10154  2E38
10155  2E39
10156  2E3A
10157  2E3B
10158  2E3C
10159  2E3D
10160  2E3E
10161  2E3F
10162  2E40
10163  2E41
10164  2E42
10165  2E43
10166  2E44
10167  2E45
10168  2E46
10169  2E47
10170  2E48
10171  2E49
10172  2E4A
10173  2E4B
10174  2E4C
10175  2E4D
10176  2E4E
10177  2E4F
10178  2E50
10179  2E51
10180  2E52
10181  2E53
10182  2E54
10183  2E55
10184  2E56
10185  2E57
10186  2E58
10187  2E59
10188  2E5A
10189  2E5B
10190  2E5C
10191  2E5D
10192  2E5E
10193  2E5F
10194  2E60
10195  2E61
10196  2E62
10197  2E63
10198  2E64
10199  2E65
10200  2E66
10201  2E67
10202  2E68
10203  2E69
10204  2E6A
10205  2E6B
10206  2E6C
10207  2E6D
10208  2E6E
10209  2E6F
10210  2E70
10211  2E71
10212  2E72
10213  2E73
10214  2E74
10215  2E75
10216  2E76
10217  2E77
10218  2E78
10219  2E79
10220  2E7A
10221  2E7B
10222  2E7C
10223  2E7D
10224  2E7E
10225  2E7F
10226  2E80
10227  2E81
10228  2E82
10229  2E83
10230  2E84
10231  2E85
10232  2E86
10233  2E87
10234  2E88
10235  2E89
10236  2E8A
10237  2E8B
10238  2E8C
10239  2E8D
10240  2E8E
10241  2E8F
10242  2E90
10243  2E91
10244  2E92
10245  2E93
10246  2E94
10247  2E95
10248  2E96
10249  2E97
10250  2E98
10251  2E99
10252  2E9A
10253  2E9B
10254  2E9C
10255  2E9D
10256  2E9E
10257  2E9F
10258  2EA0
10259  2EA1
10260  2EA2
10261  2EA3
10262  2EA4
10263  2EA5
10264  2EA6
10265  2EA7
10266  2EA8
10267  2EA9
10268  2EAA
10269  2EAB
10270  2EAC
10271  2EAD
10272  2EAE
10273  2EAF
10274  2EB0
10275  2EB1
10276  2EB2
10277  2EB3
10278  2EB4
10279  2EB5
10280  2EB6
10281  2EB7
10282  2EB8
10283  2EB9
10284  2EBA
10285  2EBB
10286  2EBC
10287  2EBD
10288  2EBE
10289  2EBF
10290  2EC0
10291  2EC1
10292  2EC2
10293  2EC3
10294  2EC4
10295  2EC5
10296  2EC6
10297  2EC7
10298  2EC8
10299  2EC9
10300  2ECA
10301  2ECB
10302  2ECC
10303  2ECD
10304  2ECE
10305  2ECF
10306  2ED0
10307  2ED1
10308  2ED2
10309  2ED3
10310  2ED4
10311  2ED5
10312  2ED6
10313  2ED7
10314  2ED8
10315  2ED9
10316  2EDA
10317  2EDB
10318  2EDC
10319  2EDD
10320  2EDE
10321  2EDF
10322  2EE0
10323  2EE1
10324  2EE2
10325  2EE3
10326  2EE4
10327  2EE5
10328  2EE6
10329  2EE7
10330  2EE8
10331  2EE9
10332  2EEA
10333  2EEB
10334  2EEC
10335  2EED
10336  2EEE
10337  2EEF
10338  2EF0
10339  2EF1
10340  2EF2
10341  2EF3
10342  2EF4
10343  2EF5
10344  2EF6
10345  2EF7
10346  2EF8
10347  2EF9
10348  2EFA
10349  2EFB
10350  2EFC
10351  2EFD
10352  2EFE
10353  2EFF
10354  2F00
10355  2F01
10356  2F02
10357  2F03
10358  2F04
10359  2F05
10360  2F06
10361  2F07
10362  2F08
10363  2F09
10364  2F0A
10365  2F0B
10366  2F0C
10367  2F0D
10368  2F0E
10369  2F0F
10370  2F10
10371  2F11
10372  2F12
10373  2F13
10374  2F14
10375  2F15
10376  2F16
10377  2F17
10378  2F18
10379  2F19
10380  2F1A
10381  2F1B
10382  2F1C
10383  2F1D
10384  2F1E
10385  2F1F
10386  2F20
10387  2F21
10388  2F22
10389  2F23
10390  2F24
10391  2F25
10392  2F26
10393  2F27
10394  2F28
10395  2F29
10396  2F2A
10397  2F2B
10398  2F2C
10399  2F2D
10400  2F2E
10401  2F2F
10402  2F30
10403  2F31
10404  2F32
10405  2F33
10406  2F34
10407  2F35
10408  2F36
10409  2F37
10410  2F38
10411  2F39
10412  2F3A
10413  2F3B
10414  2F3C
10415  2F3D
10416  2F3E
10417  2F3F
10418  2F40
10419  2F41
10420  2F42
10421  2F43
10422  2F44
10423  2F45
10424  2F46
10425  2F47
10426  2F48
10427  2F49
10428  2F4A
10429  2F4B
10430  2F4C
10431  2F4D
10432  2F4E
10433  2F4F
10434  2F50
10435  2F51
10436  2F52
10437  2F53
10438  2F54
10439  2F55
10440  2F56
10441  2F57
10442  2F58
10443  2F59
10444  2F5A
10445  2F5B
10446  2F5C
10447  2F5D
10448  2F5E
10449  2F5F
10450  2F60
10451  2F61
10452  2F62
10453  2F63
10454  2F64
10455  2F65
10456  2F66
10457  2F67
10458  2F68
10459  2F69
10460  2F6A
10461  2F6B
10462  2F6C
10463  2F6D
10464  2F6E
10465  2F6F
10466  2F70
10467  2F71
10468  2F72
10469  2F73
10470  2F74
10471  2F75
10472  2F76
10473  2F77
10474  2F78
10475  2F79
10476  2F7A
10477  2F7B
10478  2F7C
10479  2F7D
10480  2F7E
10481  2F7F
10482  2F80
10483  2F81
10484  2F82
10485  2F83
10486  2F84
10487  2F85
10488  2F86
10489  2F87
10490  2F88
10491  2F89
10492  2F8A
10493  2F8B
10494  2F8C
10495  2F8D
10496  2F8E
10497  2F8F
10498  2F90
10499  2F91
10500  2F92
10501  2F93
10502  2F94
10503  2F95
10504  2F96
10505  2F97
10506  2F98
10507  2F99
10508  2F9A
10509  2F9B
10510  2F9C
10511  2F9D
10512  2F9E
10513  2F9F
10514  2FA0
10515  2FA1
10516  2FA2
10517  2FA3
10518  2FA4
10519  2FA5
10520  2FA6
10521  2FA7
10522  2FA8
10523  2FA9
10524  2FAA
10525  2FAB
10526  2FAC
10527  2FAD
10528  2FAE
10529  2FAF
10530  2FB0
10531  2FB1
10532  2FB2
10533  2FB3
10534  2FB4
10535  2FB5
10536  2FB6
10537  2FB7
10538  2FB8
10539  2FB9
10540  2FBA
10541  2FBB
10542  2FBC
10543  2FBD
10544  2FBE
10545  2FBF
10546  2FC0
10547  2FC1
10548  2FC2
10549  2FC3
10550  2FC4
10551  2FC5
10552  2FC6
10553  2FC7
10554  2FC8
10555  2FC9
10556  2FCA
10557  2FCB
10558  2FCC
10559  2FCD
10560  2FCE
10561  2FCF
10562  2FD0
10563  2FD1
10564  2FD2
10565  2FD3
10566  2FD4
10567  2FD5
10568  2FD6
10569  2FD7
10570  2FD8
10571  2FD9
10572  2FDA
10573  2FDB
10574  2FDC
10575  2FDD
10576  2FDE
10577  2FDF
10578  2FE0
10579  2FE1
10580  2FE2
10581  2FE3
10582  2FE4
10583  2FE5
10584  2FE6
10585  2FE7
10586  2FE8
10587  2FE9
10588  2FEA
10589  2FEB
10590  2FEC
10591  2FED
10592  2FEE
10593  2FEF
10594  2FF0
10595  2FF1
10596  2FF2
10597  2FF3
10598  2FF4
10599  2FF5
10600  2FF6
10601  2FF7
10602  2FF8
10603  2FF9
10604  2FFA
10605  2FFB
10606  2FFC
10607  2FFD
10608  2FFE
10609  2FFF
10610  3000
10611  3001
10612  3002
10613  3003
10614  3004
10615  3005
10616  3006
10617  3007
10618  3008
10619  3009
10620  300A
10621  300B
10622  300C
10623  300D
10624  300E
10625  300F
10626  3010
10627  3011
10628  3012
10629  3013
10630  3014
10631  3015
10632  3016
10633  3017
10634  3018
10635  3019
10636  301A
10637  301B
10638  301C
10639  301D
10640  301E
10641  301F
10642  3020
10643  3021
10644  3022
10645  3023
10646  3024
10647  3025
10648  3026
10649  3027
10650  3028
10651  3029
10652  302A
10653  302B
10654  302C
10655  302D
10656  302E
10657  302F
10658  3030
10659  3031
10660  3032
10661  3033
10662  3034
10663  3035
10664  3036
10665  3037
10666  3038
10667  3039
10668  303A
10669  303B
10670  303C
10671  303D
10672  303E
10673  303F
10674  3040
10675  3041
10676  3042
10677  3043
10678  3044
10679  3045
10680  3046
10681  3047
10682  3048
10683  3049
10684  304A
10685  304B
10686  304C
10687  304D
10688  304E
10689  304F
10690  3050
10691  3051
10692  3052
10693  3053
10694  3054
10695  3055
10696  3056
10697  3057
10698  3058
10699  3059
10700  305A
10701  305B
10702  305C
10703  305D
10704  305E
10705  305F
10706  3060
10707  3061
10708  3062
10709  3063
10710  3064
10711  3065
10712  3066
10713  3067
10714  3068
10715  3069
10716  306A
10717  306B
10718  306C
10719  306D
10720  306E
10721  306F
10722  3070
10723  3071
10724  3072
10725  3073
10726  3074
10727  3075
10728  3076
10729  3077
10730  3078
10731  3079
10732  307A
10733  307B
10734  307C
10735  307D
10736  307E
10737  307F
10738  3080
10739  3081
10740  3082
10741  3083
10742  3084
10743  3085
10744  3086
10745  3087
10746  3088
10747  3089
10748  308A
10749  308B
10750  308C
10751  308D
10752  308E
10753  308F
10754  3090
10755  3091
10756  3092
10757  3093
10758  3094
10759  3095
10760  3096
10761  3097
10762  3098
10763  3099
10764  309A
10765  309B
10766  309C
10767  309D
10768  309E
10769  309F
10770  30A0
10771  30A1
10772  30A2
10773  30A3
10774  30A4
10775  30A5
10776  30A6
10777  30A7
10778  30A8
10779  30A9
10780  30AA
10781  30AB
10782  30AC
10783  30AD
10784  30AE
10785  30AF
10786  30B0
10787  30B1
10788  30B2
10789  30B3
10790  30B4
10791  30B5
10792  30B6
10793  30B7
10794  30B8
10795  30B9
10796  30BA
10797  30BB
10798  30BC
10799  30BD
10800  30BE
10801  30BF
10802  30C0
10803  30C1
10804  30C2
10805  30C3
10806  30C4
10807  30C5
10808  30C6
10809  30C7
10810  30C8
10811  30C9
10812  30CA
10813  30CB
10814  30CC
10815  30CD
10816  30CE
10817  30CF
10818  30D0
10819  30D1
10820  30D2
10821  30D3
10822  30D4
10823  30D5
10824  30D6
10825  30D7
10826  30D8
10827  30D9
10828  30DA
10829  30DB
10830  30DC
10831  30DD
10832  30DE
10833  30DF
10834  30E0
10835  30E1
10836  30E2
10837  30E3
10838  30E4
10839  30E5
10840  30E6
10841  30E7
10842  30E8
10843  30E9
10844  30EA
10845  30EB
10846  30EC
10847  30ED
10848  30EE
10849  30EF
10850  30F0
10851  30F1
10852  30F2
10853  30F3
10854  30F4
10855  30F5
10856  30F6
10857  30F7
10858  30F8
10859  30F9
10860  30FA
10861  30FB
10862  30FC
10863  30FD
10864  30FE
10865  30FF
10866  3100
10867  3101
10868  3102
10869  3103
10870  3104
10871  3105
10872  3106
10873  3107
10874  3108
10875  3109
10876  310A
10877  310B
10878  310C
10879  310D
10880  310E
10881  310F
10882  3110
10883  3111
10884  3112
10885  3113
10886  3114
10887  3115
10888  3116
10889  3117
10890  3118
10891  3119
10892  311A
10893  311B
10894  311C
10895  311D
10896  311E
10897  311F
10898  3120
10899  3121
10900  3122
10901  3123
10902  3124
10903  3125
10904  3126
10905  3127
10906  3128
10907  3129
10908  312A
10909  312B
10910  312C
10911  312D
10912  312E
10913  312F
10914  3130
10915  3131
10916  3132
10917  3133
10918  3134
10919  3135
10920  3136
10921  3137
10922  3138
10923  3139
10924  313A
10925  313B
10926  313C
10927  313D
10928  313E
10929  313F
10930  3140
10931  3141
10932  3142
10933  3143
10934  3144
10935  3145
10936  3146
10937  3147
10938  3148
10939  3149
10940  314A
10941  314B
10942  314C
10943  314D
10944  314E
10945  314F
10946  3150
10947  3151
10948  3152
10949  3153
10950  3154
10951  3155
10952  3156
10953  3157
10954  3158
10955  3159
10956  315A
10957  315B
10958  315C
10959  315D
10960  315E
10961  315F
10962  3160
10963  3161
10964  3162
10965  3163
10966  3164
10967  3165
10968  3166
10969  3167
10970  3168
10971  3169
10972  316A
10973  316B
10974  316C
10975  316D
10976  316E
10977  316F
10978  3170
10979  3171
10980  3172
10981  3173
10982  3174
10983  3175
10984  3176
10985  3177
10986  3178
10987  3179
10988  317A
10989  317B
10990  317C
10991  317D
10992  317E
10993  317F
10994  3180
10995  3181
10996  3182
10997  3183
10998  3184
10999  3185
11000  3186
11001  3187
11002  3188
11003  3189
11004  318A
11005  318B
11006  318C
11007  318D
11008  318E
11009  318F
11010  3190
11011  3191
11012  3192
11013  3193
11014  3194
11015  3195
11016  3196
11017  3197
11018  3198
11019  3199
11020  319A
11021  319B
11022  319C
11023  319D
11024  319E
11025  319F
11026  31A0
11027  31A1
11028  31A2
11029  31A3
11030  31A4
11031  31A5
11032  31A6
11033  31A7
11034  31A8
11035  31A9
11036  31AA
11037  31AB
11038  31AC
11039  31AD
11040  31AE
11041  31AF
11042  31B0
11043  31B1
11044  31B2
11045  31B3
11046  31B4
11047  31B5
11048  31B6
11049  31B7
11050  31B8
11051  31B9
11052  31BA
11053  31BB
11054  31BC
11055  31BD
11056  31BE
11057  31BF
11058  31C0
11059  31C1
11060  31C2
11061  31C3
11062  31C4
11063  31C5
11064  31C6
11065  31C7
11066  31C8
11067  31C9
11068  31CA
11069  31CB
11070  31CC
11071  31CD
11072  31CE
11073  31CF
11074  31D0
11075  31D1
11076  31D2
11077  31D3
11078  31D4
11079  31D5
11080  31D6
11081  31D7
11082  31D8
11083  31D9
11084  31DA
11085  31DB
11086  31DC
11087  31DD
11088  31DE
11089  31DF
11090  31E0
11091  31E1
11092  31E2
11093  31E3
11094  31E4
11095  31E5
11096  31E6
11097  31E7
11098  31E8
11099  31E9
11100  31EA
11101  31EB
11102  31EC
11103  31ED
11104  31EE
11105  31EF
11106  31F0
11107  31F1
11108  31F2
11109  31F3
11110  31F4
11111  31F5
11112  31F6
11113  31F7
11114  31F8
11115  31F9
11116  31FA
11117  31FB
11118  31FC
11119  31FD
11120  31FE
11121  31FF
11122  3200
11123  3201
11124  3202
11125  3203
11126  3204
11127  3205
11128  3206
11129  3207
11130  3208
11131  3209
11132  320A
11133  320B
11134  320C
11135  320D
11136  320E
11137  320F
11138  3210
11139  3211
11140  3212
11141  3213
11142  3214
11143  3215
11144  3216
11145  3217
11146  3218
11147  3219
11148  321A
11149  321B
11150  321C
11151  321D
11152  321E
11153  321F
11154  3220
11155  3221
11156  3222
11157  3223
11158  3224
11159  3225
11160  3226
11161  3227
11162  3228
11163  3229
11164  322A
11165  322B
11166  322C
11167  322D
11168  322E
11169  322F
11170  3230
11171  3231
11172  3232
11173  3233
11174  3234
11175  3235
11176  3236
11177  3237
11178  3238
11179  3239
11180  323A
11181  323B
11182  323C
11183  323D
11184  323E
11185  323F
11186  3240
11187  3241
11188  3242
11189  3243
11190  3244
11191  3245
11192  3246
11193  3247
11194  3248
11195  3249
11196  324A
11197  324B
11198  324C
11199  324D
11200  324E
11201  324F
11202  3250
11203  3251
11204  3252
11205  3253
11206  3254
11207  3255
11208  3256
11209  3257
11210  3258
11211  3259
11212  325A
11213  325B
11214  325C
11215  325D
11216  325E
11217  325F
11218  3260
11219  3261
11220  3262
11221  3263
11222  3264
11223  3265
11224  3266
11225  3267
11226  3268
11227  3269
11228  326A
11229  326B
11230  326C
11231  326D
11232  326E
11233  326F
11234  3270
11235  3271
11236  3272
11237  3273
11238  3274
11239  3275
11240  3276
11241  3277
11242  3278
11243  3279
11244  327A
11245  327B
11246  327C
11247  327D
11248  327E
11249  327F
11250  3280
11251  3281
11252  3282
11253  3283
11254  3284
11255  3285
11256  3286
11257  3287
11258  3288
11259  3289
11260  328A
11261  328B
11262  328C
11263  328D
11264  328E
11265  328F
11266  3290
11267  3291
11268  3292
11269  3293
11270  3294
11271  3295
11272  3296
11273  3297
11274  3298
11275  3299
11276  329A
11277  329B
11278  329C
11279  329D
11280  329E
11281  329F
11282  32A0
11283  32A1
11284  32A2
11285  32A3
11286  32A4
11287  32A5
11288  32A6
11289  32A7
11290  32A8
11291  32A9
11292  32AA
11293  32AB
11294  32AC
11295  32AD
11296  32AE
11297  32AF
11298  32B0
11299  32B1
11300  32B2
11301  32B3
11302  32B4
11303  32B5
11304  32B6
11305  32B7
11306  32B8
11307  32B9
11308  32BA
11309  32BB
11310  32BC
11311  32BD
11312  32BE
11313  32BF
11314  32C0
11315  32C1
11316  32C2
11317  32C3
11318  32C4
11319  32C5
11320  32C6
11321  32C7
11322  32C8
11323  32C9
11324  32CA
11325  32CB
11326  32CC
11327  32CD
11328  32CE
11329  32CF
11330  32D0
11331  32D1
11332  32D2
11333  32D3
11334  32D4
11335  32D5
11336  32D6
11337  32D7
11338  32D8
11339  32D9
11340  32DA
11341  32DB
11342  32DC
11343  32DD
11344  32DE
11345  32DF
11346  32E0
11347  32E1
11348  32E2
11349  32E3
11350  32E4
11351  32E5
11352  32E6
11353  32E7
11354  32E8
11355  32E9
11356  32EA
11357  32EB
11358  32EC
11359  32ED
11360  32EE
11361  32EF
11362  32F0
11363  32F1
11364  32F2
11365  32F3
11366  32F4
11367  32F5
11368  32F6
11369  32F7
11370  32F8
11371  32F9
11372  32FA
11373  32FB
11374  32FC
11375  32FD
11376  32FE
11377  32FF
11378  3300
11379  3301
11380  3302
11381  3303
11382  3304
11383  3305
11384  3306
11385  3307
11386  3308
11387  3309
11388  330A
11389  330B
11390  330C
11391  330D
11392  330E
11393  330F
11394  3310
11395  3311
11396  3312
11397  3313
11398  3314
11399  3315
11400  3316
11401  3317
11402  3318
11403  3319
11404  331A
11405  331B
11406  331C
11407  331D
11408  331E
11409  331F
11410  3320
11411  3321
11412  3322
11413  3323
11414  3324
11415  3325
11416  3326
11417  3327
11418  3328
11419  3329
11420  332A
11421  332B
11422  332C
11423  332D
11424  332E
11425  332F
11426  3330
11427  3331
11428  3332
11429  3333
11430  3334
11431  3335
11432  3336
11433  3337
11434  3338
11435  3339
11436  333A
11437  333B
11438  333C
11439  333D
11440  333E
11441  333F
11442  3340
11443  3341
11444  3342
11445  3343
11446  3344
11447  3345
11448  3346
11449  3347
11450  3348
11451  3349
11452  334A
11453  334B
11454  334C
11455  334D
11456  334E
11457  334F
11458  3350
11459  3351
11460  3352
11461  3353
11462  3354
11463  3355
11464  3356
11465  3357
11466  3358
11467  3359
11468  335A
11469  335B
11470  335C
11471  335D
11472  335E
11473  335F
11474  3360
11475  3361
11476  3362
11477  3363
11478  3364
11479  3365
11480  3366
11481  3367
11482  3368
11483  3369
11484  336A
11485  336B
11486  336C
11487  336D
11488  336E
11489  336F
11490  3370
11491  3371
11492  3372
11493  3373
11494  3374
11495  3375
11496  3376
11497  3377
11498  3378
11499  3379
11500  337A
11501  337B
11502  337C
11503  337D
11504  337E
11505  337F
11506  3380
11507  3381
11508  3382
11509  3383
11510  3384
11511  3385
11512  3386
11513  3387
11514  3388
11515  3389
11516  338A
11517  338B
11518  338C
11519  338D
11520  338E
11521  338F
11522  3390
11523  3391
11524  3392
11525  3393
11526  3394
11527  3395
11528  3396
11529  3397
11530  3398
11531  3399
11532  339A
11533  339B
11534  339C
11535  339D
11536  339E
11537  339F
11538  33A0
11539  33A1
11540  33A2
11541  33A3
11542  33A4
11543  33A5
11544  33A6
11545  33A7
11546  33A8
11547  33A9
11548  33AA
11549  33AB
11550  33AC
11551  33AD
11552  33AE
11553  33AF
11554  33B0
11555  33B1
11556  33B2
11557  33B3
11558  33B4
11559  33B5
11560  33B6
11561  33B7
11562  33B8
11563  33B9
11564  33BA
11565  33BB
11566  33BC
11567  33BD
11568  33BE
11569  33BF
11570  33C0
11571  33C1
11572  33C2
11573  33C3
11574  33C4
11575  33C5
11576  33C6
11577  33C7
11578  33C8
11579  33C9
11580  33CA
11581  33CB
11582  33CC
11583  33CD
11584  33CE
11585  33CF
11586  33D0
11587  33D1
11588  33D2
11589  33D3
11590  33D4
11591  33D5
11592  33D6
11593  33D7
11594  33D8
11595  33D9
11596  33DA
11597  33DB
11598  33DC
11599  33DD
11600  33DE
11601  33DF
11602  33E0
11603  33E1
11604  33E2
11605  33E3
11606  33E4
11607  33E5
11608  33E6
11609  33E7
11610  33E8
11611  33E9
11612  33EA
11613  33EB
11614  33EC
11615  33ED
11616  33EE
11617  33EF
11618  33F0
11619  33F1
11620  33F2
11621  33F3
11622  33F4
11623  33F5
11624  33F6
11625  33F7
11626  33F8
11627  33F9
11628  33FA
11629  33FB
11630  33FC
11631  33FD
11632  33FE
11633  33FF
11634  3400
11635  3401
11636  3402
11637  3403
11638  3404
11639  3405
11640  3406
11641  3407
11642  3408
11643  3409
11644  340A
11645  340B
11646  340C
11647  340D
11648  340E
11649  340F
11650  3410
11651  3411
11652  3412
11653  3413
11654  3414
11655  3415
11656  3416
11657  3417
11658  3418
11659  3419
11660  341A
11661  341B
11662  341C
11663  341D
11664  341E
11665  341F
11666  3420
11667  3421
11668  3422
11669  3423
11670  3424
11671  3425
11672  3426
11673  3427
11674  3428
11675  3429
11676  342A
11677  342B
11678  342C
11679  342D
11680  342E
11681  342F
11682  3430
11683  3431
11684  3432
11685  3433
11686  3434
11687  3435
11688  3436
11689  3437
11690  3438
11691  3439
11692  343A
11693  343B
11694  343C
11695  343D
11696  343E
11697  343F
11698  3440
11699  3441
11700  3442
11701  3443
11702  3444
11703  3445
11704  3446
11705  3447
11706  3448
11707  3449
11708  344A
11709  344B
11710  344C
11711  344D
11712  344E
11713  344F
11714  3450
11715  3451
11716  3452
11717  3453
11718  3454
11719  3455
11720  3456
11721  3457
11722  3458
11723  3459
11724  345A
11725  345B
11726  345C
11727  345D
11728  345E
11729  345F
11730  3460
11731  3461
11732  3462
11733  3463
11734  3464
11735  3465
11736  3466
11737  3467
11738  3468
11739  3469
11740  346A
11741  346B
11742  346C
11743  346D
11744  346E
11745  346F
11746  3470
11747  3471
11748  3472
11749  3473
11750  3474
11751  3475
11752  3476
11753  3477
11754  3478
11755  3479
11756  347A
11757  347B
11758  347C
11759  347D
11760  347E
11761  347F
11762  3480
11763  3481
11764  3482
11765  3483
11766  3484
11767  3485
11768  3486
11769  3487
11770  3488
11771  3489
11772  348A
11773  348B
11774  348C
11775  348D
11776  348E
11777  348F
11778  3490
11779  3491
11780  3492
11781  3493
11782  3494
11783  3495
11784  3496
11785  3497
11786  3498
11787  3499
11788  349A
11789  349B
11790  349C
11791  349D
11792  349E
11793  349F
11794  34A0
11795  34A1
11796  34A2
11797  34A3
11798  34A4
11799  34A5
11800  34A6
11801  34A7
11802  34A8
11803  34A9
11804  34AA
11805  34AB
11806  34AC
11807  34AD
11808  34AE
11809  34AF
11810  34B0
11811  34B1
11812  34B2
11813  34B3
11814  34B4
11815  34B5
11816  34B6
11817  34B7
11818  34B8
11819  34B9
11820  34BA
11821  34BB
11822  34BC
11823  34BD
11824  34BE
11825  34BF
11826  34C0
11827  34C1
11828  34C2
11829  34C3
11830  34C4
11831  34C5
11832  34C6
11833  34C7
11834  34C8
11835  34C9
11836  34CA
11837  34CB
11838  34CC
11839  34CD
11840  34CE
11841  34CF
11842  34D0
11843  34D1
11844  34D2
11845  34D3
11846  34D4
11847  34D5
11848  34D6
11849  34D7
11850  34D8
11851  34D9
11852  34DA
11853  34DB
11854  34DC
11855  34DD
11856  34DE
11857  34DF
11858  34E0
11859  34E1
11860  34E2
11861  34E3
11862  34E4
11863  34E5
11864  34E6
11865  34E7
11866  34E8
11867  34E9
11868  34EA
11869  34EB
11870  34EC
11871  34ED
11872  34EE
11873  34EF
11874  34F0
11875  34F1
11876  34F2
11877  34F3
11878  34F4
11879  34F5
11880  34F6
11881  34F7
11882  34F8
11883  34F9
11884  34FA
11885  34FB
11886  34FC
11887  34FD
11888  34FE
11889  34FF
11890  3500
11891  3501
11892  3502
11893  3503
11894  3504
11895  3505
11896  3506
11897  3507
11898  3508
11899  3509
11900  350A
11901  350B
11902  350C
11903  350D
11904  350E
11905  350F
11906  3510
11907  3511
11908  3512
11909  3513
11910  3514
11911  3515
11912  3516
11913  3517
11914  3518
11915  3519
11916  351A
11917  351B
11918  351C
11919  351D
11920  351E
11921  351F
11922  3520
11923  3521
11924  3522
11925  3523
11926  3524
11927  3525
11928  3526
11929  3527
11930  3528
11931  3529
11932  352A
11933  352B
11934  352C
11935  352D
11936  352E
11937  352F
11938  3530
11939  3531
11940  3532
11941  3533
11942  3534
11943  3535
11944  3536
11945  3537
11946  3538
11947  3539
11948  353A
11949  353B
11950  353C
11951  353D
11952  353E
11953  353F
11954  3540
11955  3541
11956  3542
11957  3543
11958  3544
11959  3545
11960  3546
11961  3547
11962  3548
11963  3549
11964  354A
11965  354B
11966  354C
11967  354D
11968  354E
11969  354F
11970  3550
11971  3551
11972  3552
11973  3553
11974  3554
11975  3555
11976  3556
11977  3557
11978  3558
11979  3559
11980  355A
11981  355B
11982  355C
11983  355D
11984  355E
11985  355F
11986  3560
11987  3561
11988  3562
11989  3563
11990  3564
11991  3565
11992  3566
11993  3567
11994  3568
11995  3569
11996  356A
11997  356B
11998  356C
11999  356D
12000  356E
12001  356F
12002  3570
12003  3571
12004  3572
12005  3573
12006  3574
12007  3575
12008  3576
12009  3577
12010  3578
12011  3579
12012  357A
12013  357B
12014  357C
12015  357D
12016  357E
12017  357F
12018  3580
12019  3581
12020  3582
12021  3583
12022  3584
12023  3585
12024  3586
12025  3587
12026  3588
12027  3589
12028  358A
12029  358B
12030  358C
12031  358D
12032  358E
12033  358F
12034  3590
12035  3591
12036  3592
12037  3593
12038  3594
12039  3595
12040  3596
12041  3597
12042  3598
12043  3599
12044  359A
12045  359B
12046  359C
12047  359D
12048  359E
12049  359F
12050  35A0
12051  35A1
12052  35A2
12053  35A3
12054  35A4
12055  35A5
12056  35A6
12057  35A7
12058  35A8
12059  35A9
12060  35AA
12061  35AB
12062  35AC
12063  35AD
12064  35AE
12065  35AF
12066  35B0
12067  35B1
12068  35B2
12069  35B3
12070  35B4
12071  35B5
12072  35B6
12073  35B7
12074  35B8
12075  35B9
12076  35BA
12077  35BB
12078  35BC
12079  35BD
12080  35BE
12081  35BF
12082  35C0
12083  35C1
12084  35C2
12085  35C3
12086  35C4
12087  35C5
12088  35C6
12089  35C7
12090  35C8
12091  35C9
12092  35CA
12093  35CB
12094  35CC
12095  35CD
12096  35CE
12097  35CF
12098  35D0
12099  35D1
12100  35D2
12101  35D3
12102  35D4
12103  35D5
12104  35D6
12105  35D7
12106  35D8
12107  35D9
12108  35DA
12109  35DB
12110  35DC
12111  35DD
12112  35DE
12113  35DF
12114  35E0
12115  35E1
12116  35E2
12117  35E3
12118  35E4
12119  35E5
12120  35E6
12121  35E7
12122  35E8
12123  35E9
12124  35EA
12125  35EB
12126  35EC
12127  35ED
12128  35EE
12129  35EF
12130  35F0
12131  35F1
12132  35F2
12133  35F3
12134  35F4
12135  35F5
12136  35F6
12137  35F7
12138  35F8
12139  35F9
12140  35FA
12141  35FB
12142  35FC
12143  35FD
12144  35FE
12145  35FF
12146  3600
12147  3601
12148  3602
12149  3603
12150  3604
12151  3605
12152  3606
12153  3607
12154  3608
12155  3609
12156  360A
12157  360B
12158  360C
12159  360D
12160  360E
12161  360F
12162  3610
12163  3611
12164  3612
12165  3613
12166  3614
12167  3615
12168  3616
12169  3617
12170  3618
12171  3619
12172  361A
12173  361B
12174  361C
12175  361D
12176  361E
12177  361F
12178  3620
12179  3621
12180  3622
12181  3623
12182  3624
12183  3625
12184  3626
12185  3627
12186  3628
12187  3629
12188  362A
12189  362B
12190  362C
12191  362D
12192  362E
12193  362F
12194  3630
12195  3631
12196  3632
12197  3633
12198  3634
12199  3635
12200  3636
12201  3637
12202  3638
12203  3639
12204  363A
12205  363B
12206  363C
12207  363D
12208  363E
12209  363F
12210  3640
12211  3641
12212  3642
12213  3643
12214  3644
12215  3645
12216  3646
12217  3647
12218  3648
12219  3649
12220  364A
12221  364B
12222  364C
12223  364D
12224  364E
12225  364F
12226  3650
12227  3651
12228  3652
12229  3653
12230  3654
12231  3655
12232  3656
12233  3657
12234  3658
12235  3659
12236  365A
12237  365B
12238  365C
12239  365D
12240  365E
12241  365F
12242  3660
12243  3661
12244  3662
12245  3663
12246  3664
12247  3665
12248  3666
12249  3667
12250  3668
12251  3669
12252  366A
12253  366B
12254  366C
12255  366D
12256  366E
12257  366F
12258  3670
12259  3671
12260  3672
12261  3673
12262  3674
12263  3675
12264  3676
12265  3677
12266  3678
12267  3679
12268  367A
12269  367B
12270  367C
12271  367D
12272  367E
12273  367F
12274  3680
12275  3681
12276  3682
12277  3683
12278  3684
12279  3685
12280  3686
12281  3687
12282  3688
12283  3689
12284  368A
12285  368B
12286  368C
12287  368D
12288  368E
12289  368F
12290  3690
12291  3691
12292  3692
12293  3693
12294  3694
12295  3695
12296  3696
12297  3697
12298  3698
12299  3699
12300  369A
12301  369B
12302  369C
12303  369D
12304  369E
12305  369F
12306  36A0
12307  36A1
12308  36A2
12309  36A3
12310  36A4
12311  36A5
12312  36A6
12313  36A7
12314  36A8
12315  36A9
12316  36AA
12317  36AB
12318  36AC
12319  36AD
12320  36AE
12321  36AF
12322  36B0
12323  36B1
12324  36B2
12325  36B3
12326  36B4
12327  36B5
12328  36B6
12329  36B7
12330  36B8
12331  36B9
12332  36BA
12333  36BB
12334  36BC
12335  36BD
12336  36BE
12337  36BF
12338  36C0
12339  36C1
12340  36C2
12341  36C3
12342  36C4
12343  36C5
12344  36C6
12345  36C7
12346  36C8
12347  36C9
12348  36CA
12349  36CB
12350  36CC
12351  36CD
12352  36CE
12353  36CF
12354  36D0
12355  36D1
12356  36D2
12357  36D3
12358  36D4
12359  36D5
12360  36D6
12361  36D7
12362  36D8
12363  36D9
12364  36DA
12365  36DB
12366  36DC
12367  36DD
12368  36DE
12369  36DF
12370  36E0
12371  36E1
12372  36E2
12373  36E3
12374  36E4
12375  36E5
12376  36E6
012377  000487        
012378  000488  var cpVars[2] ;
012379  000489  var scTracebuf[40] ;   // each scope has 8 entries
012380  000490  var scCurpos[5] := [0, 0, 0, 0, 0] ;
12381  1BB3
12382  1BB4
12383  1BB5
12384  1BB6
12385  1BB7
12386  1BB8
12387  1BB9
12388  1BBA
12389  1BBB
12390  1BBC
012391  000491  var sc0Oldval1[116], sc0Newval1[116]  ;
012392  000492  var sc0Oldval2[116], sc0Newval2[116]  ;
012393  000493  var sc1Oldval1[74], sc1Newval1[74]  ;
012394  000494  var sc2Oldval1[74], sc2Newval1[74]  ;
012395  000495  var sc3Oldval1[74], sc3Newval1[74]  ;
012396  000496  var sc4Oldval1[601], sc4Newval1[601]  ;
012397  000497  // Start P2.inc
012398  000498  var oObjects[MaxTotObjects+1] ;                 // address of objects
012399  000499  var CurrentForm ;
012400  000500  var TouchXpos, TouchYpos ;
012401  000501  var InputType, TouchState, CurInputData, pInputIndex ;
012402  000502  var comRX[40], cmd[CMDLenMAX] ;
012403  000503        
012404  000504  var InputCS, OutputCS ;
012405  000505        
012406  000506        
012407  000507        
012408  000508  func seroutCS(var op)
012409  000509      serout(op) ;
012410  000510      OutputCS ^= op ;
012411  000511  endfunc
012412  000512        
012413  000513  func nak0()
012414  000514      serout(NAK) ;
012415  000515      InputCS := 0 ;
012416  000516  endfunc
012417  000517        
012418  000518  func seroutOcs()
012419  000519      serout(OutputCS) ;
012420  000520      OutputCS := 0 ;
012421  000521  endfunc
012422  000522        
012423  000523  func SendReport(var id, var objt, var objn, var val)
012424  000524      seroutCS(id) ;
012425  000525      seroutCS(objt) ;
012426  000526      seroutCS(objn) ;
012427  000527      seroutCS(val >> 8) ; // first 8 bits
012428  000528      seroutCS(val) ;
012429  000529      seroutOcs() ;
012430  000530  endfunc
012431  000531        
012432  000532  func TMul(var p1, var p2, var p3)
012433  000533      var var32[2], var322[2] ;
012434  000534      umul_1616(var32, p1, *(CurInputData+p2)) ;
012435  000535      umul_1616(var322, var32[1], *(CurInputData+p3)) ;
012436  000536      umul_1616(var32, var32[0], *(CurInputData+p3)) ;
012437  000537      return(var32[1] + var322[0]) ;
012438  000538  endfunc
012439  000539        
012440  000540  func ReadObject(var ObjectType, var ObjectIdx)
012441  000541      var j, k, Objects ;
012442  000542      Objects := *(oObjects+ObjectType) ;
012443  000543        
012444  000544      j := 2 + ObjectIdx * 2 + Objects ;
012445  000545       if (ObjectType == tForm)
012446  000546          k := CurrentForm ;
012447  000547      else if ((ObjectType == tCustomdigits) || (ObjectType == tLeddigits))
012448  000548          k := img_GetWord(hndl, *j, IMAGE_TAG2);
012449  000549      else if (ObjectType == tColorPicker)
012450  000550          k := img_GetWord(hndl, *j, IMAGE_DELAY);
012451  000551          else
012452  000552          k := img_GetWord(hndl, *j, IMAGE_INDEX);
012453  000553          if (((ObjectType == tWinButton) || (ObjectType == tAniButton) || (ObjectType == tUserButton) || (ObjectType == t4Dbutton)) && (k)) k := 1 ; // this is not correct for blocked buttons and cannot be fixed as we cannot
012454  000554                                                                                                                                                      // determine if button is momentary or not which is needed for correct answer.
012455  000555      endif
012456  000556      SendReport(REPORT_OBJ, ObjectType, ObjectIdx, k) ;
012457  000557  endfunc
012458  000558        
012459  000559  func Graticule(var x1, var y1, var x2, var y2, var xinc, var yinc, var color)
012460  000560      var TouchYpos ;
012461  000561      x1 += xinc ;
012462  000562      while (x1 < x2)
012463  000563          TouchYpos := y1 + yinc ;
012464  000564          while (TouchYpos < y2)
012465  000565              gfx_PutPixel(x1, TouchYpos, color) ;
012466  000566              TouchYpos += yinc ;
012467  000567          wend
012468  000568          x1 += xinc ;
012469  000569      wend
012470  000570  endfunc
012471  000571        
012472  000572  #CONST
012473  000598  #END
012474  000599  var told[4], tnew[4] ;
012475  000600        
012476  000601  func addressTraces(var ObjectIdx, var scopeIdx)
012477  000602      var i, j ;
012478  000603      j := ObjectIdx * 8 ;
012479  000604      for (i := 0; i < 4 ; i++)
012480  000605          if (i < oScopen[scopeIdx+scTraces])
012481  000606              told[i] := scTracebuf[2*i+j] ;
012482  000607              tnew[i] := scTracebuf[2*i+j+1] ;
012483  000608          else
012484  000609              told[i] := 0 ;
012485  000610              tnew[i] := 0 ;
012486  000611          endif
012487  000612      next
012488  000613  endfunc
012489  000614        
012490  000615  func drawScope(var j)
012491  000616      if (oScopen[j+scForm] == CurrentForm)
012492  000617          if (oScopen[j+scGraticuleVis]) Graticule(oScopen[j+scLeft], oScopen[j+scTop], oScopen[j+scRight], oScopen[j+scBottom],
012493  000618                                                    oScopen[j+scGraticuleXinc], oScopen[j+scGraticuleYinc], oScopen[j+scGraticuleCol]) ;
012494  000619          gfx_Scope(oScopen[j+scLeft], oScopen[j+scWidth], oScopen[j+scYZero],
012495  000620                    oScopen[j+scDataPoints], oScopen[j+scXmag],oScopen[j+scYamp], oScopen[j+scColor],
012496  000621                    told[0],tnew[0],oScopen[j+scTrace1Col], told[1],tnew[1],oScopen[j+scTrace2Col],  told[2],tnew[2],oScopen[j+scTrace3Col],  told[3],tnew[3],oScopen[j+scTrace4Col]
012497  000622                    );
012498  000623          if (oScopen[j+scYLineVis]) gfx_Hline(oScopen[j+scYLineForm], oScopen[j+scLeft], oScopen[j+scRight], oScopen[j+scYLineCol]) ;
012499  000624      endif
012500  000625  endfunc
012501  000626        
012502  000627  func doScope(var ObjectIdx, var NewVal)
012503  000628      var curarr, curtrace, i, j, *p ;
012504  000629      j := ObjectIdx * SCOPEENTS ;
012505  000630      curarr   := scCurpos[ObjectIdx] / oScopen[j+scTraces] ;
012506  000631      curtrace := scCurpos[ObjectIdx] % oScopen[j+scTraces] ;
012507  000632      addressTraces(ObjectIdx, j) ;
012508  000633      p := tnew[curtrace] ;
012509  000634      // move trace
012510  000635      mem_Copy(&p[1], &p[0], (oScopen[j+scDataPoints]-1)*2);    // this will only work in R35 and above PmmC
012511  000636      p[oScopen[j+scDataPoints]-1] := NewVal ;
012512  000637      if (   (curtrace == oScopen[j+scTraces]-1)
012513  000638          && (curarr == oScopen[j+scRefreshInc]-1 ) )
012514  000639          drawScope(j) ;
012515  000640          scCurpos[ObjectIdx] := 0 ;
012516  000641      else
012517  000642          scCurpos[ObjectIdx]++ ;
012518  000643      endif
012519  000644  endfunc
012520  000645        
012521  000646  func WriteObject(var ObjectType, var ObjectIdx, var NewVal)
012522  000647      var i, j, k, Objects ;
012523  000648      ObjectType &= 0x3f ;
012524  000649      if (ObjectType == tForm)
012525  000650          ActivateForm(ObjectIdx) ;
012526  000651      else if (ObjectType == tScope)
012527  000652          doScope(ObjectIdx, NewVal) ;
012528  000653      else
012529  000654          Objects := *(oObjects+ObjectType)+ObjectIdx*2+2 ;
012530  000655          i := *(Objects) ;
012531  000656          switch (ObjectType)
012532  000657              case tWinButton :
012533  000658                  j := InputControls[oWinButtons[ObjectIdx+1]] ;
012534  000659                  break ;
012535  000660              case t4Dbutton :
012536  000661                  j := InputControls[o4Dbuttons[ObjectIdx+1]] ;
012537  000662                  break ;
012538  000663              default : j := -1 ;
012539  000664          endswitch
012540  000665          if (j != -1)
012541  000666              k := img_GetWord(hndl, i , IMAGE_INDEX) ;
012542  000667              NewVal := NewVal << 1 ;
012543  000668              if (OVF())      // button group index change
012544  000669                  if (*(j+InputData+Ofs_IPD_P1))
012545  000670                      k &= 1 ;    // mask off old group index for momentary
012546  000671                  else
012547  000672                      k &= 3 ;    // mask off old group index for toggle
012548  000673                  endif
012549  000674              else            // normal set
012550  000675                  if (*(j+InputData+Ofs_IPD_P2) != -1) TurnOffButtons(*(j+InputData+Ofs_IPD_P2)) ;
012551  000676                  k &= 0xfffc ;    // retain only group index for state set
012552  000677              endif
012553  000678              NewVal |= k ;
012554  000679          endif
012555  000680          if (ObjectType == tColorPicker)
012556  000681              setCpHSl(i, ObjectIdx, NewVal) ;
012557  000682        
012558  000683          else if (ObjectType == tLeddigits)
012559  000684              img_SetWord(hndl, i , IMAGE_TAG2, NewVal); // where state is 0 to 2
012560  000685              ledDigitsDisplay(i, oLeddigitss, oLedDigitsn) ;
012561  000686          else
012562  000687              img_SetWord(hndl, i , IMAGE_INDEX, NewVal); // where state is 0 to 2
012563  000688              img_Show(hndl, i) ; // will only display if form is current
012564  000689          endif
012565  000690      endif
012566  000691  endfunc
012567  000692        
012568  000693  func TurnOffButtons(var group)
012569  000694      var j, k, l;
012570  000695      for (j := 0; j < nInputs; j++)
012571  000696          k := j*IPDatasize ;
012572  000697          if (*(InputData+k+Ofs_IPD_P2) == group)
012573  000698              l := -1 ;
012574  000699               if (*(InputData+k) == t4Dbutton)
012575  000700                  l := o4Dbuttons[*(InputData+k+Ofs_IPD_OBJVIDX)/2] ;
012576  000701                  img_SetWord(hndl, l, IMAGE_INDEX, 0);
012577  000702                  img_Show(hndl, l);      // only shows on current form
012578  000703              else if (*(InputData+k) == tWinButton)
012579  000704                  l := oWinButtons[*(InputData+k+Ofs_IPD_OBJVIDX)/2] ;
012580  000705                  img_SetWord(hndl, l, IMAGE_INDEX, 0);
012581  000706                  img_Show(hndl, l);      // only shows on current form
012582  000707              endif
012583  000708          endif
012584  000709      next
012585  000710  endfunc
012586  000711        
012587  000712        
012588  000713  // WARNING, this code will crash if newval exceeds maximum displayable number
012589  000714  func ledDigitsDisplay(var imgidx, var typeptr, var setptr)
012590  000715      var i, j, k, l, lb, newval ;
012591  000716      if (!((img_GetWord(hndl, imgidx, IMAGE_FLAGS) & I_ENABLED))) return ;  // ;img_GetWord(hndl, imgidx, IMAGE_TAG2) ;if diabled then exit
012592  000717      newval := img_GetWord(hndl, imgidx, IMAGE_TAG2) ;
012593  000718      i := -1 ;
012594  000719      j := *(typeptr) ;
012595  000720      repeat
012596  000721          typeptr += 2 ;
012597  000722          i++ ;
012598  000723          until (*(typeptr) == imgidx);
012599  000724      j := setptr + i*10 ;
012600  000725        
012601  000726      imgidx++ ;
012602  000727      l := 1 ;
012603  000728      for (i := 1; i < *(j+Ofs_Digits_Digits); i++)
012604  000729          l *= 10 ;
012605  000730      next
012606  000731      lb := *(j+Ofs_Digits_LeadingBlanks) ;
012607  000732      for (i := 0; i < *(j+Ofs_Digits_Digits); i++)
012608  000733          k := newval / l ;
012609  000734          newval -= k * l ;
012610  000735          if ( lb && (i < *(j+Ofs_Digits_Digits) - *(j+Ofs_Digits_MinDigits)) )
012611  000736              if (k == 0)
012612  000737                  k := 10 ;
012613  000738              else
012614  000739                  lb := 0 ;
012615  000740              endif
012616  000741          endif
012617  000742          l /= 10 ;
012618  000743          img_SetWord(hndl, imgidx, IMAGE_INDEX, k);
012619  000744          img_SetWord(hndl, imgidx, IMAGE_XPOS, *(j+Ofs_Digits_Left)+i* *(j+Ofs_Digits_Widthdigit)) ;
012620  000745          img_Show(hndl, imgidx);
012621  000746      next
012622  000747  endfunc
012623  000748        
012624  000749        
012625  000750  func ActivateForm(var newform)
012626  000751      var i, j, *p ;
012627  000752        
012628  000753      if (CurrentForm != -1) // deactivate old form, by disabling all inputs
012629  000754          for (i := FormStartIndex[CurrentForm]; i <= FormEndIndex[CurrentForm]; i++)
012630  000755              if (img_GetWord(hndl, i, IMAGE_TAG))
012631  000756                  img_Disable(hndl,i) ;
012632  000757              endif
012633  000758          next
012634  000759      endif
012635  000760      CurrentForm := newform ;
012636  000761      // display newform image or clear to image color
012637  000762      if (FormBGcolors[CurrentForm] != ColorBGimage)
012638  000763          gfx_Set(BACKGROUND_COLOUR,FormBGcolors[CurrentForm]);
012639  000764          gfx_Cls() ;
012640  000765          DoGFXObjects() ;                                    // display GFX 'widgets'
012641  000766      endif
012642  000767        
012643  000768      // enable inputs
012644  000769      for (i := FormStartIndex[CurrentForm]; i < FormEndIndex[CurrentForm]; i++)
012645  000770          j := img_GetWord(hndl, i, IMAGE_TAG) ;
012646  000771          if (j)
012647  000772              j-- ;
012648  000773              img_SetAttributes(hndl, i, I_STAYONTOP+I_ENABLED);        // make sure this is on top of form, if applicable
012649  000774              //if (j != tKeyboard)
012650  000775              if ((j <= tWinButton) || (j >= t4Dbutton) )               // enable inputs
012651  000776                  img_ClearAttributes(hndl, i, I_TOUCH_DISABLE);        // ensure touch is enabled
012652  000777              endif
012653  000778              img_Show(hndl,i) ; // show initialy, if required
012654  000779              if (j == tForm)
012655  000780                  DoGFXObjects() ;                                    // display GFX 'widgets' for image backgruobds
012656  000781              else if (j == tLeddigits)
012657  000782                  ledDigitsDisplay(i, oLeddigitss, oLedDigitsn) ;
012658  000783              endif
012659  000784          endif
012660  000785      next
012661  000786      for (i := 0; i < nScopes; i++)
012662  000787          j := i * SCOPEENTS ;
012663  000788          if (oScopen[j+scForm] == CurrentForm)
012664  000789              addressTraces(i,j) ;
012665  000790              p := told[0] ;
012666  000791              p[0] := -1 ; // force init scope
012667  000792              gfx_RectangleFilled(oScopen[j+scLeft], oScopen[j+scTop], oScopen[j+scRight], oScopen[j+scBottom], oScopen[j+scColor]) ;
012668  000793              if (oScopen[j+scGraticuleVis]) Graticule(oScopen[j+scLeft], oScopen[j+scTop], oScopen[j+scRight], oScopen[j+scBottom],
012669  000794                                                        oScopen[j+scGraticuleXinc], oScopen[j+scGraticuleYinc], oScopen[j+scGraticuleCol]) ;
012670  000795              drawScope(i*SCOPEENTS) ;    // draw scope when activating form, may look a bit first time up....
012671  000796              if (oScopen[j+scYLineVis]) gfx_Hline(oScopen[j+scYLineForm], oScopen[j+scLeft], oScopen[j+scRight], oScopen[j+scYLineCol]) ;
012672  000797          endif
012673  000798      next
012674  000799        
012675  000800  endfunc
012676  000801        
012677  000802  func UpdateObjects(var newval)
012678  000803      var IPidx, otherOBJ ;
012679  000804      if ( ( img_GetWord(hndl, *(pInputIndex), IMAGE_INDEX) != newval) || (TouchState == Ofs_IPD_RELEASE) ) // only bother if values changed, or release
012680  000805        
012681  000806          img_SetWord(hndl, *(pInputIndex), IMAGE_INDEX, newval);
012682  000807      if (img_GetWord(hndl, *(pInputIndex), IMAGE_TAG) != tColorPicker)
012683  000808              img_Show(hndl, *(pInputIndex));      // only shows on current form
012684  000809          endif
012685  000810          if ((InputType == t4Dbutton) || (InputType == tUserButton) || (InputType == tWinButton))
012686  000811              if (*(CurInputData+Ofs_IPD_P1))
012687  000812                  newval &= 1;
012688  000813              else
012689  000814                  newval &= 3;
012690  000815              endif
012691  000816              if (newval > 1) newval := 1;
012692  000817          endif
012693  000818          IPidx := *(CurInputData+TouchState) ;
012694  000819          while(IPidx != 0)
012695  000820              otherOBJ := IPidx + InputData;
012696  000821              if (*(otherOBJ) == OT_REPORT)
012697  000822          SendReport(REPORT_EVENT, InputType, *(otherOBJ+Ofs_IPD_OBJVIDX), newval) ;
012698  000823              else if (*(otherOBJ) == OT_MAGIC)
012699  000824                  IPidx := *(otherOBJ+Ofs_IPD_P5) ;
012700  000825                  IPidx(newval) ;
012701  000826              else if (TouchState == *(otherOBJ+Ofs_IPD_P4))
012702  000827                  if (*(otherOBJ) == OT_ACTIVATE)
012703  000828                      ActivateForm(*(otherOBJ+Ofs_IPD_P2) ) ;
012704  000829                      InputType := tForm ;
012705  000830                  else if (*(otherOBJ) == OT_SETCONST)
012706  000831                      newval := *(otherOBJ+Ofs_IPD_P3) ;
012707  000832                      WriteObject(*(otherOBJ+Ofs_IPD_P1), *(otherOBJ+Ofs_IPD_P2), newval) ;
012708  000833                  else if (*(otherOBJ) == OT_SETANOTHER)
012709  000834                      WriteObject(*(otherOBJ+Ofs_IPD_P1), *(otherOBJ+Ofs_IPD_P2), newval) ;
012710  000835                  else if (*(otherOBJ) == OT_PREVFRAME)
012711  000836                      if (img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX))
012712  000837                          WriteObject(*(otherOBJ+Ofs_IPD_P5),*(otherOBJ+Ofs_IPD_P2),img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX)-1) ;
012713  000838                      endif
012714  000839                      newval := img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) ;
012715  000840                  else if (*(otherOBJ) == OT_NEXTFRAME)
012716  000841                      if (img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) < *(otherOBJ+Ofs_IPD_P3))
012717  000842                          WriteObject(*(otherOBJ+Ofs_IPD_P5),*(otherOBJ+Ofs_IPD_P2),img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX)+1) ;
012718  000843                      endif
012719  000844                      newval := img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) ;
012720  000845                  endif
012721  000846              endif
012722  000847              IPidx := *(otherOBJ+TouchState) ;
012723  000848          wend
012724  000849      endif
012725  000850  endfunc
012726  000851        
012727  000852  // End P2.inc
012728  000853  func DoGFXObjects()
012729  000854      switch (CurrentForm)
012730  000855          case 0:
012731  000856              gfx_RectangleFilled(0, 0, 799, 63, 0x014B) ;
012732  000857              gfx_OutlineColour(WHITE) ;
012733  000858              gfx_LinePattern(LPFINE) ;
012734  000859              gfx_RectangleFilled(0, 64, 799, 77, 0xFE81) ;
012735  000860              gfx_OutlineColour(BLACK) ;
012736  000861              gfx_Panel(PANEL_RAISED, 4, 215, 217, 194, 0x7D79) ;
012737  000862              gfx_Panel(PANEL_RAISED, 224, 216, 212, 193, 0x7D79) ;
012738  000863              gfx_Panel(PANEL_RAISED, 3, 412, 791, 68, 0x7D79) ;
012739  000864              gfx_Panel(PANEL_RAISED, 440, 188, 354, 220, 0x7D79) ;
012740  000865          break ;
012741  000866          case 1:
012742  000867              gfx_RectangleFilled(0, 0, 799, 63, 0x014B) ;
012743  000868              gfx_OutlineColour(WHITE) ;
012744  000869              gfx_LinePattern(LPFINE) ;
012745  000870              gfx_RectangleFilled(0, 64, 799, 77, 0xFE81) ;
012746  000871              gfx_OutlineColour(BLACK) ;
012747  000872              gfx_Panel(PANEL_RAISED, 588, 80, 210, 286, 0x7D79) ;
012748  000873              gfx_Panel(PANEL_RAISED, 380, 80, 210, 286, 0x7D79) ;
012749  000874              gfx_Panel(PANEL_RAISED, 168, 80, 210, 286, 0x7D79) ;
012750  000875              gfx_Panel(PANEL_RAISED, 0, 196, 168, 170, 0x7D79) ;
012751  000876              gfx_Panel(PANEL_RAISED, 0, 367, 799, 113, 0x7D79) ;
012752  000877          break ;
012753  000878          case 2:
012754  000879              gfx_RectangleFilled(0, 0, 799, 63, 0x014B) ;
012755  000880              gfx_OutlineColour(WHITE) ;
012756  000881              gfx_LinePattern(LPFINE) ;
012757  000882              gfx_Panel(PANEL_RAISED, 0, 64, 800, 14, 0xFE81) ;
012758  000883              gfx_OutlineColour(BLACK) ;
012759  000884          break ;
012760  000885          case 3:
012761  000886              gfx_OutlineColour(WHITE) ;
012762  000887              gfx_LinePattern(LPFINE) ;
012763  000888              gfx_RectangleFilled(0, 64, 799, 77, 0xFE81) ;
012764  000889              gfx_OutlineColour(BLACK) ;
012765  000890              gfx_Panel(PANEL_RAISED, 0, 0, 800, 64, 0x014B) ;
012766  000891          break ;
012767  000892          case 4:
012768  000893              gfx_RectangleFilled(0, 0, 799, 63, 0x014B) ;
012769  000894              gfx_OutlineColour(WHITE) ;
012770  000895              gfx_LinePattern(LPFINE) ;
012771  000896              gfx_RectangleFilled(0, 64, 799, 77, 0xFE81) ;
012772  000897              gfx_OutlineColour(BLACK) ;
012773  000898          break ;
012774  000899          case 5:
012775  000900              gfx_OutlineColour(WHITE) ;
012776  000901              gfx_LinePattern(LPFINE) ;
012777  000902              gfx_RectangleFilled(0, 64, 799, 77, 0xFE81) ;
012778  000903              gfx_OutlineColour(BLACK) ;
012779  000904              gfx_RectangleFilled(0, 0, 799, 63, 0x014B) ;
012780  000905          break ;
012781  000906          case 6:
012782  000907              gfx_RectangleFilled(0, 0, 799, 81, 0x014B) ;
012783  000908              gfx_OutlineColour(WHITE) ;
012784  000909              gfx_LinePattern(LPFINE) ;
012785  000910              gfx_RectangleFilled(0, 80, 799, 92, 0xFE81) ;
012786  000911              gfx_OutlineColour(BLACK) ;
012787  000912          break ;
012788  000913          case 7:
012789  000914              gfx_OutlineColour(WHITE) ;
012790  000915              gfx_LinePattern(LPFINE) ;
012791  000916              gfx_RectangleFilled(0, 64, 799, 76, 0xFE81) ;
012792  000917              gfx_OutlineColour(BLACK) ;
012793  000918              gfx_RectangleFilled(0, 0, 799, 63, 0x014B) ;
012794  000919          break ;
012795  000920          case 8:
012796  000921              gfx_RectangleFilled(0, 0, 799, 63, 0x014B) ;
012797  000922              gfx_OutlineColour(WHITE) ;
012798  000923              gfx_LinePattern(LPFINE) ;
012799  000924              gfx_RectangleFilled(0, 64, 799, 76, 0xFE81) ;
012800  000925              gfx_OutlineColour(BLACK) ;
012801  000926          break ;
012802  000927          case 9:
012803  000928              gfx_RectangleFilled(0, 0, 799, 63, 0x014B) ;
012804  000929              gfx_OutlineColour(WHITE) ;
012805  000930              gfx_LinePattern(LPFINE) ;
012806  000931              gfx_RectangleFilled(0, 64, 799, 76, 0xFE81) ;
012807  000932              gfx_OutlineColour(BLACK) ;
012808  000933          break ;
012809  000934          case 11:
012810  000935              gfx_RectangleFilled(0, 0, 799, 63, 0x014B) ;
012811  000936              gfx_OutlineColour(WHITE) ;
012812  000937              gfx_LinePattern(LPFINE) ;
012813  000938              gfx_RectangleFilled(0, 64, 799, 73, 0xFE81) ;
012814  000939              gfx_OutlineColour(BLACK) ;
012815  000940          break ;
012816  000941          case 12:
012817  000942              gfx_RectangleFilled(0, 0, 799, 63, 0x014B) ;
012818  000943              gfx_OutlineColour(WHITE) ;
012819  000944              gfx_LinePattern(LPFINE) ;
012820  000945              gfx_RectangleFilled(0, 64, 799, 73, 0xFE81) ;
012821  000946              gfx_OutlineColour(BLACK) ;
012822  000947          break ;
012823  000948          case 13:
012824  000949              gfx_RectangleFilled(0, 0, 799, 63, 0x014B) ;
012825  000950              gfx_OutlineColour(WHITE) ;
012826  000951              gfx_LinePattern(LPFINE) ;
012827  000952              gfx_RectangleFilled(0, 64, 799, 73, 0xFE81) ;
012828  000953              gfx_OutlineColour(BLACK) ;
012829  000954          break ;
012830  000955          case 14:
012831  000956              gfx_OutlineColour(WHITE) ;
012832  000957              gfx_LinePattern(LPFINE) ;
012833  000958              gfx_RectangleFilled(0, 0, 799, 39, 0x014B) ;
012834  000959              gfx_OutlineColour(BLACK) ;
012835  000960              gfx_RectangleFilled(0, 32, 799, 51, YELLOW) ;
012836  000961              gfx_OutlineColour(WHITE) ;
012837  000962              gfx_LinePattern(LPFINE) ;
012838  000963              gfx_RectangleFilled(0, 364, 799, 479, 0x014B) ;
012839  000964              gfx_OutlineColour(BLACK) ;
012840  000965          break ;
012841  000966          case 15:
012842  000967              gfx_RectangleFilled(0, 0, 799, 63, 0x014B) ;
012843  000968              gfx_OutlineColour(WHITE) ;
012844  000969              gfx_LinePattern(LPFINE) ;
012845  000970              gfx_RectangleFilled(0, 64, 799, 77, 0xFE81) ;
012846  000971              gfx_OutlineColour(BLACK) ;
012847  000972          break ;
012848  000973          case 16:
012849  000974              gfx_RectangleFilled(0, 0, 799, 63, 0x014B) ;
012850  000975              gfx_OutlineColour(WHITE) ;
012851  000976              gfx_LinePattern(LPFINE) ;
012852  000977              gfx_RectangleFilled(0, 64, 799, 77, 0xFE81) ;
012853  000978              gfx_OutlineColour(BLACK) ;
012854  000979              gfx_Panel(PANEL_RAISED, 0, 80, 267, 101, 0x7D79) ;
012855  000980              gfx_Panel(PANEL_RAISED, 268, 80, 267, 101, 0x7D79) ;
012856  000981              gfx_Panel(PANEL_RAISED, 0, 180, 267, 121, 0x7D79) ;
012857  000982              gfx_Panel(PANEL_RAISED, 268, 180, 267, 121, 0x7D79) ;
012858  000983              gfx_Panel(PANEL_RAISED, 0, 301, 535, 179, 0x7D79) ;
012859  000984              gfx_Panel(PANEL_RAISED, 536, 80, 264, 399, 0x7D79) ;
012860  000985          break ;
012861  000986          case 18:
012862  000987              gfx_RectangleFilled(0, 0, 799, 63, 0x014B) ;
012863  000988              gfx_OutlineColour(WHITE) ;
012864  000989              gfx_LinePattern(LPFINE) ;
012865  000990              gfx_RectangleFilled(0, 60, 799, 73, 0xFE81) ;
012866  000991              gfx_OutlineColour(BLACK) ;
012867  000992              gfx_Panel(PANEL_RAISED, 328, 76, 328, 404, 0x7D79) ;
012868  000993              gfx_Panel(PANEL_RAISED, 0, 76, 328, 404, 0x7D79) ;
012869  000994          break ;
012870  000995      endswitch
012871  000996  endfunc
012872  000997        
012873  000998  // Start P3.inc
012874  000999  func main()
012875  001000      var comTX[50], cmdi, i, j, ImageTouched, TouchStatus, oldn ;
012876  001001        
012877  001002      putstr("Mounting...\n");
012878  001003      if (!(file_Mount()))
012879  001004          while(!(file_Mount()))
012880  001005              putstr("Drive not mounted...");
012881  001006              pause(200);
012882  001007              gfx_Cls();
012883  001008              pause(200);
012884  001009          wend
012885  001010      endif
012886  001011  //    gfx_MoveTo(0, 0);
012887  001012  //    print(mem_Heap()," ") ;
012888  001013  //    gfx_TransparentColour(0x0020);
012889  001014  //    gfx_Transparency(ON);
012890  001015        
012891  001016      gfx_ScreenMode(LANDSCAPE) ;
012892  001017        
012893  001018      // open image control
012894  001019      hndl := file_LoadImageControl("SCREEN~1.dat", "SCREEN~1.gci", 1);
012895  001020        
012896  001021      // init 'constants'
012897  001022  // End P3.inc
012898  001023        
012899  001024      oObjects[tDipSwitch] := oDipSwitchs ;
012900  001025      oObjects[tKnob] := oKnobs ;
012901  001026      oObjects[tRockerSwitch] := oRockerSwitchs ;
012902  001027      oObjects[tRotarySwitch] := oRotarySwitchs ;
012903  001028      oObjects[tGSlider] := oGSliders ;
012904  001029      oObjects[tTrackbar] := oTrackbars ;
012905  001030      oObjects[tWinButton] := oWinButtons ;
012906  001031      oObjects[tAngularmeter] := oAngularmeters ;
012907  001032      oObjects[tCoolgauge] := oCoolgauges ;
012908  001033      oObjects[tCustomdigits] := oCustomdigitss ;
012909  001034      oObjects[tForm] := oForms ;
012910  001035      oObjects[tGauge] := oGauges ;
012911  001036      oObjects[tImage] := oImages ;
012912  001037      oObjects[tKeyboard] := oKeyboards ;
012913  001038      oObjects[tLed] := oLeds ;
012914  001039      oObjects[tLeddigits] := oLeddigitss ;
012915  001040      oObjects[tMeter] := oMeters ;
012916  001041      oObjects[tStrings] := oStringss ;
012917  001042      oObjects[tThermometer] := oThermometers ;
012918  001043      oObjects[tUserled] := oUserleds ;
012919  001044      oObjects[tVideo] := oVideos ;
012920  001045      oObjects[tStaticText] := oStaticTexts ;
012921  001046      oObjects[tSounds] := oSoundss ;
012922  001047      oObjects[tTimer] := oTimers ;
012923  001048      oObjects[tSpectrum] := oSpectrums ;
012924  001049      oObjects[tTank] := oTanks ;
012925  001050      oObjects[tUserImages] := oUserImagess ;
012926  001051      oObjects[tPinOutput] := oPinOutputs ;
012927  001052      oObjects[tPinInput] := oPinInputs ;
012928  001053      oObjects[t4Dbutton] := o4Dbuttons ;
012929  001054      oObjects[tAniButton] := oAniButtons ;
012930  001055      oObjects[tColorPicker] := oColorPickers ;
012931  001056      oObjects[tUserButton] := oUserButtons ;
012932  001057      sc0Oldval1[0] := -1 ; // init scope, only needed for first trace
012933  001058      scTracebuf[0] := sc0Oldval1 ;
012934  001059      scTracebuf[1] := sc0Newval1 ;
012935  001060      scTracebuf[2] := sc0Oldval2 ;
012936  001061      scTracebuf[3] := sc0Newval2 ;
012937  001062      sc1Oldval1[0] := -1 ; // init scope, only needed for first trace
012938  001063      scTracebuf[8] := sc1Oldval1 ;
012939  001064      scTracebuf[9] := sc1Newval1 ;
012940  001065      sc2Oldval1[0] := -1 ; // init scope, only needed for first trace
012941  001066      scTracebuf[16] := sc2Oldval1 ;
012942  001067      scTracebuf[17] := sc2Newval1 ;
012943  001068      sc3Oldval1[0] := -1 ; // init scope, only needed for first trace
012944  001069      scTracebuf[24] := sc3Oldval1 ;
012945  001070      scTracebuf[25] := sc3Newval1 ;
012946  001071      sc4Oldval1[0] := -1 ; // init scope, only needed for first trace
012947  001072      scTracebuf[32] := sc4Oldval1 ;
012948  001073      scTracebuf[33] := sc4Newval1 ;
012949  001074      WriteObject(tUserled, 2, 1) ;
012950  001075      WriteObject(tUserled, 4, 1) ;
012951  001076      WriteObject(t4Dbutton, 2, 1) ;
012952  001077  // Start P4.inc
012953  001078      // init comms
012954  001079      com_Init(comRX,CMDLenMAX,0);
012955  001080      com_SetBaud(COM0,25600);
012956  001081      com_TXbuffer(comTX, 100, 0);
012957  001082      // tag 'real' objects
012958  001083      for (i := 0; i <= MaxTotObjects; i++)
012959  001084          if (   (i != tSounds)
012960  001085              && (i != tTimer)
012961  001086              && (i != tPinOutput)
012962  001087              && (i != tPinInput) )
012963  001088              TouchXpos := oObjects[i] ;
012964  001089              TouchYpos := *(TouchXpos) ;
012965  001090              for (ImageTouched := 1; ImageTouched <= TouchYpos; ImageTouched++)
012966  001091                  oldn := *(TouchXpos+ImageTouched*2) ;
012967  001092                  img_SetAttributes(hndl, oldn, I_TOUCH_DISABLE);  // ensure touch is enabled
012968  001093                  if (oldn != -1)
012969  001094                      img_SetWord(hndl, oldn, IMAGE_TAG, i+1);
012970  001095                      img_Disable(hndl, oldn) ;
012971  001096                  endif
012972  001097              next
012973  001098          endif
012974  001099      next
012975  001100        
012976  001101      // display initial form
012977  001102      CurrentForm := -1 ;
012978  001103      ActivateForm(0) ; // need to change this according to first actual form
012979  001104        
012980  001105  // End P4.inc
012981  001106  // Start P5.inc
012982  001107      touch_Set(TOUCH_ENABLE);                            // enable the touch screen
012983  001108      oldn := -1 ;
012984  001109      repeat
012985  001110        
012986  001111          // check comms for command, how to NAK invalid command
012987  001112          if (com_Count() != 0)
012988  001113              i := serin() ;
012989  001114              InputCS ^= i ;               // update checksum
012990  001115                  cmd[cmdi++] := i ;
012991  001116                   if (   (cmd[0] == READ_OBJ)
012992  001117                           && (cmdi == 4)         )
012993  001118                      if (InputCS)
012994  001119                          nak0() ;
012995  001120                      else
012996  001121                          ReadObject(cmd[1], cmd[2]) ;
012997  001122                      endif
012998  001123                      cmdi := 0 ;
012999  001124                  else if (   (cmd[0] == WRITE_OBJ)    // 6 byte write command (gen option)
013000  001125                           && (cmdi == 6)          )
013001  001126                      if (InputCS)
013002  001127                          nak0() ;
013003  001128                      else
013004  001129                          WriteObject(cmd[1], cmd[2], cmd[3] << 8 + cmd[4]) ;
013005  001130                          serout(ACK) ;
013006  001131                      endif
013007  001132                      cmdi := 0 ;
013008  001133                  else if (   (cmd[0] == WRITE_CONTRAST)
013009  001134                           && (cmdi == 3)         )
013010  001135                      if (InputCS)
013011  001136                          nak0() ;
013012  001137                      else
013013  001138                          gfx_Contrast(cmd[1]) ;
013014  001139                          serout(ACK) ;
013015  001140                      endif
013016  001141                      cmdi := 0 ;
013017  001142                  else if (cmdi == 6)    // we have 6 bytes and we've gotten here -> something wrong
013018  001143                      nak0() ;
013019  001144                      cmdi := 0 ;
013020  001145                  endif
013021  001146          endif   // a character is available
013022  001147        
013023  001148        
013024  001149      // touch code processing
013025  001150        
013026  001151          TouchStatus := touch_Get(TOUCH_STATUS);               // get touchscreen status
013027  001152          ImageTouched := img_Touched(hndl,-1) ;
013028  001153          if ((TouchStatus == TOUCH_PRESSED) || (TouchStatus == TOUCH_RELEASED) || (TouchStatus == TOUCH_MOVING))
013029  001154              if ((TouchStatus != TOUCH_RELEASED) && (ImageTouched != oldn) && (oldn != -1))
013030  001155                  TouchStatus := TOUCH_RELEASED ;       // simulate release if we move off object
013031  001156              endif
013032  001157              if (TouchStatus != TOUCH_RELEASED)        // if not released
013033  001158                  if (oldn != -1)
013034  001159                      ImageTouched := oldn ;
013035  001160                  else
013036  001161                      if (oldn != ImageTouched)
013037  001162                  oldn := ImageTouched ;
013038  001163                          TouchStatus := TOUCH_PRESSED ;
013039  001164                      endif
013040  001165                  endif
013041  001166                  TouchXpos  := touch_Get(TOUCH_GETX);
013042  001167                  TouchYpos  := touch_Get(TOUCH_GETY);
013043  001168                  TouchState := Ofs_IPD_DOWN ;
013044  001169              else
013045  001170                  ImageTouched := oldn ;                     // simulate release of what we touched
013046  001171                  oldn := -1 ;                    // prevent double release
013047  001172                  TouchState := Ofs_IPD_RELEASE ;
013048  001173              endif
013049  001174              if (ImageTouched != -1)
013050  001175                          CurInputData := InputControls[ImageTouched] + InputData;
013051  001176                          InputType := *(CurInputData) ;
013052  001177                          i := InputType ;
013053  001178                          if (InputType >= t4Dbutton) i -= 23 ; // adjust to ensure next in gosub
013054  001179                          gosub (i), (cDipswitch, cKnob, cRockerswitch, cRotaryswitch, cSlider, cTrackbar, cWinbutton, c4DButton, cAniButton, cColorPicker, cUserButton) ;
013055  001180              endif
013056  001181          endif
013057  001182   //       if ((n != -1) && (oldn == -1)) oldn := n ;    // save what we touched in case we move off it
013058  001183        
013059  001184          sys_EventsResume() ;
013060  001185      forever
013061  001186        
013062  001187  cDipswitch:
013063  001188        
013064  001189  cKnob:
013065  001190      i := XYposToDegree(TouchXpos-*(CurInputData+Ofs_IPD_P1),      // x - CentreX
013066  001191                         TouchYpos-*(CurInputData+Ofs_IPD_P2)) ;    // y - centreY
013067  001192      if (i < *(CurInputData+Ofs_IPD_P3))                   // anything in the first 'dead zone' is minvalue
013068  001193          i := 0 ;
013069  001194      else
013070  001195          if (i > *(CurInputData+Ofs_IPD_P4))               // anything in the last 'dead zone' is maxvalue
013071  001196              i := *(CurInputData+Ofs_IPD_P5) ;
013072  001197          else
013073  001198              i -= *(CurInputData+Ofs_IPD_P3) ;             // offset by -baseangle
013074  001199          endif
013075  001200      endif
013076  001201  //  i := i * *(input+IPD_P6) / *(input+IPD_P5) ;   // convert degrees to position
013077  001202      i := TMul(i, Ofs_IPD_P6, Ofs_IPD_P7) ;   // convert degrees to position
013078  001203      pInputIndex := oKnobs + *(CurInputData+Ofs_IPD_OBJVIDX) ;
013079  001204      UpdateObjects(i) ;
013080  001205  endsub ;
013081  001206        
013082  001207  cRockerswitch:
013083  001208        
013084  001209  cRotaryswitch:
013085  001210        
013086  001211  cSlider:
013087  001212  cTrackbar:
013088  001213      if (*(CurInputData+Ofs_IPD_P1))
013089  001214          i := TouchXpos - *(CurInputData+Ofs_IPD_P2) ;
013090  001215          if (i < 0)
013091  001216              i := 0 ;
013092  001217          else if (i > *(CurInputData+Ofs_IPD_P3))        // height/width - 17)
013093  001218              i := *(CurInputData+Ofs_IPD_P4) ;           // maxvalue-minvalue
013094  001219          else
013095  001220  //            i := *(input+IPD_P4) * i / *(input+IPD_P3) ;    // max-min - (max-min) * posn / (height-17)
013096  001221              i := TMul(i, Ofs_IPD_P4, Ofs_IPD_P5) ;    // max-min - (max-min) * posn / (height-17)
013097  001222          endif
013098  001223      else
013099  001224          i := TouchYpos - *(CurInputData+Ofs_IPD_P2) ;
013100  001225          if (i < 0)
013101  001226              i := *(CurInputData+Ofs_IPD_P4) ;           // maxvalue-minvalue
013102  001227          else if (i > *(CurInputData+Ofs_IPD_P3))        // height/width - 17)
013103  001228              i := 0 ;
013104  001229          else
013105  001230  //            i := *(input+IPD_P4) - *(input+IPD_P4) * i / *(input+IPD_P3) ;    // max-min - (max-min) * posn / (height-17)
013106  001231              i := *(CurInputData+Ofs_IPD_P4) - TMul(i, Ofs_IPD_P4, Ofs_IPD_P5) ;    // max-min - (max-min) * posn / (height-17)
013107  001232          endif
013108  001233      endif
013109  001234      if (InputType == tGSlider)
013110  001235          pInputIndex := oGSliders ;
013111  001236      else
013112  001237          pInputIndex := oTrackbars ;
013113  001238      endif
013114  001239      pInputIndex += *(CurInputData+Ofs_IPD_OBJVIDX) ;
013115  001240      UpdateObjects(i) ;
013116  001241  endsub ;
013117  001242        
013118  001243  c4DButton:
013119  001244      pInputIndex := o4Dbuttons + *(CurInputData+Ofs_IPD_OBJVIDX) ;
013120  001245      goto gbutton ;
013121  001246  cUserButton:
013122  001247  cWinbutton:
013123  001248      pInputIndex := oWinButtons + *(CurInputData+Ofs_IPD_OBJVIDX) ;
013124  001249  gbutton:
013125  001250      i := img_GetWord(hndl, *(pInputIndex), IMAGE_INDEX) ; // current state
013126  001251      if (*(CurInputData+Ofs_IPD_P1))                                 // momentary, reports 0, but should report 1
013127  001252          if (TouchStatus == TOUCH_RELEASED)
013128  001253              i &= 0xfffe ;
013129  001254              TouchState == Ofs_IPD_DOWN ;
013130  001255          else
013131  001256              i |= 1 ;
013132  001257              TouchState == Ofs_IPD_RELEASE ;
013133  001258          endif
013134  001259      else if (*(CurInputData+Ofs_IPD_P2) == -1)                      // Toggle, reports 0+2, but should report 0+1
013135  001260          if (TouchStatus == TOUCH_RELEASED)                     // only truly change on release
013136  001261              if ((i & 3) == 3)
013137  001262                  i &= 0xfffc ;
013138  001263              else
013139  001264                  i++ ;
013140  001265              endif
013141  001266          else
013142  001267              i |= 1 ;                                      // make down regardless of current state
013143  001268          endif
013144  001269      else                        // group action, up all other buttons on touch press, reports 0 for button down
013145  001270          if (TouchStatus == TOUCH_PRESSED)                     // only truly change on release
013146  001271              TurnOffButtons(*(CurInputData+Ofs_IPD_P2)) ;
013147  001272          endif
013148  001273          i := (i & 0xfffc) | 2 ;
013149  001274      endif
013150  001275        
013151  001276      UpdateObjects(i) ;
013152  001277  endsub ;
013153  001278        
013154  001279  cAniButton:
013155  001280        
013156  001281  cColorPicker:
013157  001282      pInputIndex := oColorPickers + *(CurInputData+Ofs_IPD_OBJVIDX) ;
013158  001283      getcpvars(*(pInputIndex)) ;
013159  001284      i := *(CurInputData+Ofs_IPD_OBJVIDX)/2 - 1 ;
013160  001285      j := gfx_GetPixel(TouchXpos,TouchYpos) ;
013161  001286      if (((TouchYpos >= cptop + 6) && (TouchYpos < cpTpH - 6)) && (j != img_GetWord(hndl, i, IMAGE_DELAY)) )     // within range on height  and changed
013162  001287          if ((TouchXpos >= cpleft) && (TouchXpos < cpLpW-32))          // within range of HS picker
013163  001288              setCpHSl(*(pInputIndex), *(CurInputData+Ofs_IPD_OBJVIDX)/2-1, j) ;
013164  001289          else if ((TouchXpos >= cpLpW-22) && (TouchXpos < cpLpW-6))    // within range of L picker
013165  001290              img_SetWord(hndl, *(pInputIndex), IMAGE_DELAY, j);                                       // IMAGE_DELAY is used as current color
013166  001291              ColorpickerArrow(cpVars[i], cpLpW, cpBGcol) ;          // 'erase' old arrow
013167  001292              cpVars[i] := TouchYpos-6 ;
013168  001293              ColorpickerArrow(cpVars[i], cpLpW, LIGHTGREY) ;
013169  001294          endif
013170  001295        
013171  001296          ImageTouched := rColorPickerRoutines[i] ;
013172  001297          ImageTouched(REPORT_EVENT, InputType, i, j) ;
013173  001298      endif
013174  001299  endsub ;
013175  001300        
013176  001301  endfunc
013177  001302  // End P5.inc
Notice: Check that the function called via pointer  'ImageTouched' requires 4 arguments (line 1297 file:Screen.4DGenieS)
Notice: Check that the function called via pointer  'IPidx' requires 1 argument (line 825 file:Screen.4DGenieS)
Notice: local var 'i' in func 'doScope' is never used (line 628 file:Screen.4DGenieS)


Symbol Table:
name                             decimal         hex
__MAXBANKS                             6  0x00000006 (const dword)  (not used)
__MAXMEM                           32768  0x00008000 (const dword)  (usage 1)
__MAXPROG                          32750  0x00007fee (const dword)  (usage 1)
__PLATFORM                             3  0x00000003 (const dword)  (not used)
__reserved10                        -111  0xffffff91 (PmmC func) args[0] r=0  (not used)
__reserved13                        -123  0xffffff85 (PmmC func) args[0] r=0  (not used)
__reserved14                        -124  0xffffff84 (PmmC func) args[0] r=0  (not used)
__reserved17                        -201  0xffffff37 (PmmC func) args[0] r=0  (not used)
__reserved18                        -202  0xffffff36 (PmmC func) args[0] r=0  (not used)
__reserved19                        -203  0xffffff35 (PmmC func) args[0] r=0  (not used)
__reserved20                        -204  0xffffff34 (PmmC func) args[0] r=0  (not used)
__reserved21                        -205  0xffffff33 (PmmC func) args[0] r=0  (not used)
__reserved22                        -206  0xffffff32 (PmmC func) args[0] r=0  (not used)
__reserved23                        -220  0xffffff24 (PmmC func) args[0] r=0  (not used)
__reserved24                        -221  0xffffff23 (PmmC func) args[0] r=0  (not used)
__reserved25                        -222  0xffffff22 (PmmC func) args[0] r=0  (not used)
__reserved26                        -223  0xffffff21 (PmmC func) args[0] r=0  (not used)
__reserved3                          -69  0xffffffbb (PmmC func) args[0] r=0  (not used)
__reserved30                        -283  0xfffffee5 (PmmC func) args[0] r=0  (not used)
__reserved4                          -70  0xffffffba (PmmC func) args[0] r=0  (not used)
__reserved42                        -373  0xfffffe8b (PmmC func) args[0] r=0  (not used)
__reserved43                        -387  0xfffffe7d (PmmC func) args[0] r=0  (not used)
__reserved44                        -388  0xfffffe7c (PmmC func) args[0] r=0  (not used)
__reserved45                        -389  0xfffffe7b (PmmC func) args[0] r=0  (not used)
__reserved46                        -390  0xfffffe7a (PmmC func) args[0] r=0  (not used)
__reserved5                          -76  0xffffffb4 (PmmC func) args[0] r=0  (not used)
__reserved51                        -411  0xfffffe65 (PmmC func) args[0] r=0  (not used)
__reserved52                        -412  0xfffffe64 (PmmC func) args[0] r=0  (not used)
__reserved53                        -422  0xfffffe5a (PmmC func) args[0] r=0  (not used)
__reserved54                        -423  0xfffffe59 (PmmC func) args[0] r=0  (not used)
__reserved57                        -457  0xfffffe37 (PmmC func) args[0] r=0  (not used)
__reserved58                        -458  0xfffffe36 (PmmC func) args[0] r=0  (not used)
__reserved6                          -77  0xffffffb3 (PmmC func) args[0] r=0  (not used)
__reserved60                        -467  0xfffffe2d (PmmC func) args[0] r=0  (not used)
__reserved61                        -468  0xfffffe2c (PmmC func) args[0] r=0  (not used)
__reserved62                        -469  0xfffffe2b (PmmC func) args[0] r=0  (not used)
__reserved63                        -490  0xfffffe16 (PmmC func) args[0] r=0  (not used)
__reserved64                        -491  0xfffffe15 (PmmC func) args[0] r=0  (not used)
__reserved65                        -492  0xfffffe14 (PmmC func) args[0] r=0  (not used)
__reserved66                        -493  0xfffffe13 (PmmC func) args[0] r=0  (not used)
__reserved68                        -509  0xfffffe03 (PmmC func) args[0] r=0  (not used)
__reserved69                        -510  0xfffffe02 (PmmC func) args[0] r=0  (not used)
__reserved70                        -511  0xfffffe01 (PmmC func) args[0] r=0  (not used)
__reserved72                        -520  0xfffffdf8 (PmmC func) args[0] r=0  (not used)
__reserved77                        -526  0xfffffdf2 (PmmC func) args[0] r=0  (not used)
__reserved78                        -527  0xfffffdf1 (PmmC func) args[0] r=0  (not used)
__reserved85                        -536  0xfffffde8 (PmmC func) args[0] r=0  (not used)
__reserved86                        -537  0xfffffde7 (PmmC func) args[0] r=0  (not used)
__reserved9                         -110  0xffffff92 (PmmC func) args[0] r=0  (not used)
__translate                           -8  0xfffffff8 (PmmC func) args[4] r=1  (not used)
ABS                                  -53  0xffffffcb (PmmC func) args[1] r=1  (usage 6)
ACK                                    6  0x00000006 (const dword)  (usage 6)
ActivateForm                       11469  0x00002ccd (User func) args[1] r=0  (usage 9)
addressTraces                      13489  0x000034b1 (User func) args[2] r=0  (usage 6)
ALICEBLUE                          63455  0x0000f7df (const dword)  (not used)
ALL                                65535  0x0000ffff (const dword)  (not used)
ana_HS                              -533  0xfffffdeb (PmmC func) args[7] r=0  (not used)
ANTIQUEWHITE                       65370  0x0000ff5a (const dword)  (not used)
APPEND                                 0  0x00000000 (const dword)  (not used)
AQUA                                2047  0x000007ff (const dword)  (not used)
AQUAMARINE                         32762  0x00007ffa (const dword)  (not used)
arctan                                 7  0x00000007arctan                                 7  0x00000007 (mem) byte[101] (member of C:\Users\User\Google Drive\NASA RMC\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (usage 3)
AUDIO_ENABLE                          17  0x00000011 (const dword)  (not used)
AZURE                              63487  0x0000f7ff (const dword)  (not used)
BACKGROUND_COLOUR                     17  0x00000011 (const dword)  (usage 3)
BAUD_110                               0  0x00000000 (const dword)  (not used)
BAUD_115200                           13  0x0000000d (const dword)  (not used)
BAUD_1200                              3  0x00000003 (const dword)  (not used)
BAUD_128000                           14  0x0000000e (const dword)  (not used)
BAUD_14400                             7  0x00000007 (const dword)  (not used)
BAUD_19200                             8  0x00000008 (const dword)  (not used)
BAUD_2400                              4  0x00000004 (const dword)  (not used)
BAUD_256000                           15  0x0000000f (const dword)  (not used)
BAUD_300                               1  0x00000001 (const dword)  (not used)
BAUD_300000                           16  0x00000010 (const dword)  (not used)
BAUD_31250                             9  0x00000009 (const dword)  (not used)
BAUD_375000                           17  0x00000011 (const dword)  (not used)
BAUD_38400                            10  0x0000000a (const dword)  (not used)
BAUD_4800                              5  0x00000005 (const dword)  (not used)
BAUD_500000                           18  0x00000012 (const dword)  (not used)
BAUD_56000                            11  0x0000000b (const dword)  (not used)
BAUD_57600                            12  0x0000000c (const dword)  (not used)
BAUD_600                               2  0x00000002 (const dword)  (not used)
BAUD_600000                           19  0x00000013 (const dword)  (not used)
BAUD_9600                              6  0x00000006 (const dword)  (not used)
BEIGE                              63419  0x0000f7bb (const dword)  (not used)
BEVEL_RADIUS                          27  0x0000001b (const dword)  (not used)
BEVEL_SHADOW                          29  0x0000001d (const dword)  (not used)
BEVEL_WIDTH                           28  0x0000001c (const dword)  (not used)
BIN                                    2  0x00000002 (const dword)  (not used)
BIN1                                 258  0x00000102 (const dword)  (not used)
BIN10                               2562  0x00000a02 (const dword)  (not used)
BIN10Z                              6658  0x00001a02 (const dword)  (not used)
BIN10ZB                            10754  0x00002a02 (const dword)  (not used)
BIN11                               2818  0x00000b02 (const dword)  (not used)
BIN11Z                              6914  0x00001b02 (const dword)  (not used)
BIN11ZB                            11010  0x00002b02 (const dword)  (not used)
BIN12                               3074  0x00000c02 (const dword)  (not used)
BIN12Z                              7170  0x00001c02 (const dword)  (not used)
BIN12ZB                            11266  0x00002c02 (const dword)  (not used)
BIN13                               3330  0x00000d02 (const dword)  (not used)
BIN13Z                              7426  0x00001d02 (const dword)  (not used)
BIN13ZB                            11522  0x00002d02 (const dword)  (not used)
BIN14                               3586  0x00000e02 (const dword)  (not used)
BIN14Z                              7682  0x00001e02 (const dword)  (not used)
BIN14ZB                            11778  0x00002e02 (const dword)  (not used)
BIN15                               3842  0x00000f02 (const dword)  (not used)
BIN15Z                              7938  0x00001f02 (const dword)  (not used)
BIN15ZB                            12034  0x00002f02 (const dword)  (not used)
BIN16                                  2  0x00000002 (const dword)  (not used)
BIN16Z                              4098  0x00001002 (const dword)  (not used)
BIN16ZB                             8194  0x00002002 (const dword)  (not used)
BIN1Z                               4354  0x00001102 (const dword)  (not used)
BIN1ZB                              8450  0x00002102 (const dword)  (not used)
BIN2                                 514  0x00000202 (const dword)  (not used)
BIN2Z                               4610  0x00001202 (const dword)  (not used)
BIN2ZB                              8706  0x00002202 (const dword)  (not used)
BIN3                                 770  0x00000302 (const dword)  (not used)
BIN3Z                               4866  0x00001302 (const dword)  (not used)
BIN3ZB                              8962  0x00002302 (const dword)  (not used)
BIN4                                1026  0x00000402 (const dword)  (not used)
BIN4Z                               5122  0x00001402 (const dword)  (not used)
BIN4ZB                              9218  0x00002402 (const dword)  (not used)
BIN5                                1282  0x00000502 (const dword)  (not used)
BIN5Z                               5378  0x00001502 (const dword)  (not used)
BIN5ZB                              9474  0x00002502 (const dword)  (not used)
BIN6                                1538  0x00000602 (const dword)  (not used)
BIN6Z                               5634  0x00001602 (const dword)  (not used)
BIN6ZB                              9730  0x00002602 (const dword)  (not used)
BIN7                                1794  0x00000702 (const dword)  (not used)
BIN7Z                               5890  0x00001702 (const dword)  (not used)
BIN7ZB                              9986  0x00002702 (const dword)  (not used)
BIN8                                2050  0x00000802 (const dword)  (not used)
BIN8Z                               6146  0x00001802 (const dword)  (not used)
BIN8ZB                             10242  0x00002802 (const dword)  (not used)
BIN9                                2306  0x00000902 (const dword)  (not used)
BIN9Z                               6402  0x00001902 (const dword)  (not used)
BIN9ZB                             10498  0x00002902 (const dword)  (not used)
BINZ                                4098  0x00001002 (const dword)  (not used)
BINZB                               8194  0x00002002 (const dword)  (not used)
BISQUE                             65336  0x0000ff38 (const dword)  (not used)
BLACK                                  0  0x00000000 (const dword)  (usage 69)
BLANCHEDALMOND                     65369  0x0000ff59 (const dword)  (not used)
blue                                   6  0x00000006 (mem) word (global)  (usage 21)
BLUE                                  31  0x0000001f (const dword)  (usage 15)
BLUEVIOLET                         35164  0x0000895c (const dword)  (not used)
BOLD                                  16  0x00000010 (const dword)  (not used)
BOTTOM_POS                             5  0x00000005 (const dword)  (not used)
BROWN                              41285  0x0000a145 (const dword)  (not used)
BURLYWOOD                          56784  0x0000ddd0 (const dword)  (not used)
bus_ClearPins                       -119  0xffffff89 (PmmC func) args[1] r=0  (not used)
BUS_RD_PIN                             4  0x00000004 (const dword)  (not used)
bus_Read                            -117  0xffffff8b (PmmC func) args[0] r=1  (not used)
bus_Read8                           -122  0xffffff86 (PmmC func) args[0] r=1  (not used)
bus_SetChangeInterrupt              -120  0xffffff88 (PmmC func) args[2] r=1  (not used)
bus_SetPins                         -118  0xffffff8a (PmmC func) args[1] r=0  (not used)
BUS_WR_PIN                             3  0x00000003 (const dword)  (not used)
bus_Write8                          -121  0xffffff87 (PmmC func) args[1] r=0  (not used)
BUTTON_DOWN                            0  0x00000000 (const dword)  (not used)
BUTTON_UP                              1  0x00000001 (const dword)  (not used)
ByteSwap                             -49  0xffffffcf (PmmC func) args[1] r=1  (not used)
c4DButton                         UNRESOLVED  (not used)
c565toRGBs                         14954  0x00003a6a (User func) args[1] r=0  (usage 3)
C:\Users\User\Google Drive\NASA RMC\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS    2803  0x00000af3 (const ??? 0)  (not used)
CADETBLUE                          23796  0x00005cf4 (const dword)  (not used)
cAniButton                        UNRESOLVED  (not used)
cColorPicker                      UNRESOLVED  (not used)
cDipswitch                        UNRESOLVED  (not used)
charheight                           -12  0xfffffff4 (PmmC func) args[1] r=1  (not used)
CHARTREUSE                         32736  0x00007fe0 (const dword)  (not used)
charwidth                            -11  0xfffffff5 (PmmC func) args[1] r=1  (not used)
CHECKED                                0  0x00000000 (const dword)  (not used)
CHOCOLATE                          54083  0x0000d343 (const dword)  (not used)
CHR                                  129  0x00000081 (const dword)  (not used)
cKnob                             UNRESOLVED  (not used)
CLIPPING                              19  0x00000013 (const dword)  (not used)
cmd                                 4504  0x00001198 (mem) word[80] (global)  (usage 33)
CMDLenMAX                             80  0x00000050 (const dword)  (usage 6)
ColorBGimage                          32  0x00000020 (const dword)  (usage 6)
ColorpickerArrow                   14319  0x000037ef (User func) args[3] r=0  (usage 12)
COLOUR16                               0  0x00000000 (const dword)  (not used)
COLOUR8                                1  0x00000001 (const dword)  (not used)
COM0                               63492  0x0000f804 (const dword)  (usage 3)
COM1                               63493  0x0000f805 (const dword)  (not used)
com1_Count                          -249  0xffffff07 (PmmC func) args[0] r=1  (not used)
com1_Error                          -257  0xfffffeff (PmmC func) args[0] r=1  (not used)
com1_Full                           -253  0xffffff03 (PmmC func) args[0] r=1  (not used)
com1_Init                           -233  0xffffff17 (PmmC func) args[3] r=0  (not used)
com1_Reset                          -245  0xffffff0b (PmmC func) args[0] r=0  (not used)
COM1_RX_pin                         -226  0xffffff1e (PmmC func) args[1] r=1  (not used)
com1_RXblock                        -558  0xfffffdd2 (PmmC func) args[2] r=0  (not used)
com1_Sync                           -261  0xfffffefb (PmmC func) args[0] r=1  (not used)
COM1_TX_pin                         -229  0xffffff1b (PmmC func) args[1] r=1  (not used)
com1_TXblock                        -557  0xfffffdd3 (PmmC func) args[2] r=0  (not used)
com1_TXbuffer                       -265  0xfffffef7 (PmmC func) args[3] r=0  (not used)
com1_TXbufferHold                   -277  0xfffffeeb (PmmC func) args[1] r=1  (not used)
com1_TXcount                        -269  0xfffffef3 (PmmC func) args[0] r=1  (not used)
com1_TXemptyEvent                   -273  0xfffffeef (PmmC func) args[1] r=1  (not used)
COM2                               63494  0x0000f806 (const dword)  (not used)
com2_Count                          -250  0xffffff06 (PmmC func) args[0] r=1  (not used)
com2_Error                          -258  0xfffffefe (PmmC func) args[0] r=1  (not used)
com2_Full                           -254  0xffffff02 (PmmC func) args[0] r=1  (not used)
com2_Init                           -234  0xffffff16 (PmmC func) args[3] r=0  (not used)
com2_Reset                          -246  0xffffff0a (PmmC func) args[0] r=0  (not used)
COM2_RX_pin                         -227  0xffffff1d (PmmC func) args[1] r=1  (not used)
com2_RXblock                        -560  0xfffffdd0 (PmmC func) args[2] r=0  (not used)
com2_Sync                           -262  0xfffffefa (PmmC func) args[0] r=1  (not used)
COM2_TX_pin                         -230  0xffffff1a (PmmC func) args[1] r=1  (not used)
com2_TXblock                        -559  0xfffffdd1 (PmmC func) args[2] r=0  (not used)
com2_TXbuffer                       -266  0xfffffef6 (PmmC func) args[3] r=0  (not used)
com2_TXbufferHold                   -278  0xfffffeea (PmmC func) args[1] r=1  (not used)
com2_TXcount                        -270  0xfffffef2 (PmmC func) args[0] r=1  (not used)
com2_TXemptyEvent                   -274  0xfffffeee (PmmC func) args[1] r=1  (not used)
COM3                               63495  0x0000f807 (const dword)  (not used)
com3_Count                          -251  0xffffff05 (PmmC func) args[0] r=1  (not used)
com3_Error                          -259  0xfffffefd (PmmC func) args[0] r=1  (not used)
com3_Full                           -255  0xffffff01 (PmmC func) args[0] r=1  (not used)
com3_Init                           -235  0xffffff15 (PmmC func) args[3] r=0  (not used)
com3_Reset                          -247  0xffffff09 (PmmC func) args[0] r=0  (not used)
COM3_RX_pin                         -228  0xffffff1c (PmmC func) args[1] r=1  (not used)
com3_RXblock                        -562  0xfffffdce (PmmC func) args[2] r=0  (not used)
com3_Sync                           -263  0xfffffef9 (PmmC func) args[0] r=1  (not used)
COM3_TX_pin                         -231  0xffffff19 (PmmC func) args[1] r=1  (not used)
com3_TXblock                        -561  0xfffffdcf (PmmC func) args[2] r=0  (not used)
com3_TXbuffer                       -267  0xfffffef5 (PmmC func) args[3] r=0  (not used)
com3_TXbufferHold                   -279  0xfffffee9 (PmmC func) args[1] r=1  (not used)
com3_TXcount                        -271  0xfffffef1 (PmmC func) args[0] r=1  (not used)
com3_TXemptyEvent                   -275  0xfffffeed (PmmC func) args[1] r=1  (not used)
com_Count                           -248  0xffffff08 (PmmC func) args[0] r=1  (usage 3)
com_Error                           -256  0xffffff00 (PmmC func) args[0] r=1  (not used)
com_Full                            -252  0xffffff04 (PmmC func) args[0] r=1  (not used)
com_Init                            -232  0xffffff18 (PmmC func) args[3] r=0  (usage 3)
com_Mode                            -280  0xfffffee8 (PmmC func) args[4] r=1  (not used)
com_Reset                           -244  0xffffff0c (PmmC func) args[0] r=0  (not used)
com_RXblock                         -282  0xfffffee6 (PmmC func) args[2] r=0  (not used)
com_SetBaud                         -225  0xffffff1f (PmmC func) args[2] r=1  (usage 3)
com_Sync                            -260  0xfffffefc (PmmC func) args[0] r=1  (not used)
com_TXblock                         -281  0xfffffee7 (PmmC func) args[2] r=0  (not used)
com_TXbuffer                        -264  0xfffffef8 (PmmC func) args[3] r=0  (usage 3)
com_TXbufferHold                    -276  0xfffffeec (PmmC func) args[1] r=1  (not used)
com_TXcount                         -268  0xfffffef4 (PmmC func) args[0] r=1  (not used)
com_TXemptyEvent                    -272  0xfffffef0 (PmmC func) args[1] r=1  (not used)
comRX                               4424  0x00001148 (mem) word[40] (global)  (usage 3)
CONTRAST                              25  0x00000019 (const dword)  (not used)
CORAL                              64490  0x0000fbea (const dword)  (not used)
CORNFLOWERBLUE                     25789  0x000064bd (const dword)  (not used)
CORNSILK                           65499  0x0000ffdb (const dword)  (not used)
COS                                  -58  0xffffffc6 (PmmC func) args[1] r=1  (not used)
COUNT_EDGE                             3  0x00000003 (const dword)  (not used)
COUNT_FALL                             2  0x00000002 (const dword)  (not used)
COUNT_OFF                              0  0x00000000 (const dword)  (not used)
COUNT_RISE                             1  0x00000001 (const dword)  (not used)
cpBGcol                               26  0x0000001a (mem) word (global)  (usage 9)
cpheight                              18  0x00000012 (mem) word (global)  (usage 18)
cpleft                                16  0x00000010 (mem) word (global)  (usage 9)
cpLpW                                 24  0x00000018 (mem) word (global)  (usage 30)
cptop                                 14  0x0000000e (mem) word (global)  (usage 9)
cpTpH                                 22  0x00000016 (mem) word (global)  (usage 12)
cpVars                                28  0x0000001c (mem) word[2] (global)  (usage 18)
cpwidth                               20  0x00000014 (mem) word (global)  (usage 6)
crc_16                              -567  0xfffffdc9 (PmmC func) args[2] r=1  (not used)
crc_CCITT                           -569  0xfffffdc7 (PmmC func) args[3] r=1  (not used)
crc_CSUM_8                          -566  0xfffffdca (PmmC func) args[2] r=1  (not used)
crc_MODBUS                          -568  0xfffffdc8 (PmmC func) args[2] r=1  (not used)
CRIMSON                            55463  0x0000d8a7 (const dword)  (not used)
cRockerswitch                     UNRESOLVED  (not used)
cRotaryswitch                     UNRESOLVED  (not used)
cSlider                           UNRESOLVED  (not used)
cTrackbar                         UNRESOLVED  (not used)
CurInputData                        4420  0x00001144 (mem) word (global)  (usage 93)
CurrentForm                         4410  0x0000113a (mem) word (global)  (usage 39)
cUserButton                       UNRESOLVED  (not used)
cWinbutton                        UNRESOLVED  (not used)
CY                                   -64  0xffffffc0 (PmmC func) args[0] r=1  (not used)
CYAN                                2047  0x000007ff (const dword)  (not used)
DARKBLUE                              17  0x00000011 (const dword)  (not used)
DARKCYAN                            1105  0x00000451 (const dword)  (not used)
DARKGOLDENROD                      48161  0x0000bc21 (const dword)  (not used)
DARKGRAY                           44373  0x0000ad55 (const dword)  (not used)
DARKGREEN                            800  0x00000320 (const dword)  (not used)
DARKKHAKI                          48557  0x0000bdad (const dword)  (not used)
DARKMAGENTA                        34833  0x00008811 (const dword)  (not used)
DARKOLIVEGREEN                     21317  0x00005345 (const dword)  (not used)
DARKORANGE                         64608  0x0000fc60 (const dword)  (not used)
DARKORCHID                         39321  0x00009999 (const dword)  (not used)
DARKRED                            34816  0x00008800 (const dword)  (not used)
DARKSALMON                         60591  0x0000ecaf (const dword)  (not used)
DARKSEAGREEN                       36337  0x00008df1 (const dword)  (not used)
DARKSLATEBLUE                      18929  0x000049f1 (const dword)  (not used)
DARKSLATEGRAY                      10857  0x00002a69 (const dword)  (not used)
DARKTURQUOISE                       1658  0x0000067a (const dword)  (not used)
DARKVIOLET                         36890  0x0000901a (const dword)  (not used)
DEBUG_MODE                            64  0x00000040 (const dword)  (not used)
DEC                                 1290  0x0000050a (const dword)  (not used)
DEC1                                 266  0x0000010a (const dword)  (not used)
DEC1Z                               4362  0x0000110a (const dword)  (not used)
DEC1ZB                              8458  0x0000210a (const dword)  (not used)
DEC2                                 522  0x0000020a (const dword)  (not used)
DEC2Z                               4618  0x0000120a (const dword)  (not used)
DEC2ZB                              8714  0x0000220a (const dword)  (not used)
DEC3                                 778  0x0000030a (const dword)  (not used)
DEC3Z                               4874  0x0000130a (const dword)  (not used)
DEC3ZB                              8970  0x0000230a (const dword)  (not used)
DEC4                                1034  0x0000040a (const dword)  (not used)
DEC4Z                               5130  0x0000140a (const dword)  (not used)
DEC4ZB                              9226  0x0000240a (const dword)  (not used)
DEC5                                1290  0x0000050a (const dword)  (not used)
DEC5Z                               5386  0x0000150a (const dword)  (not used)
DEC5ZB                              9482  0x0000250a (const dword)  (not used)
DECZ                                5386  0x0000150a (const dword)  (not used)
DECZB                               9482  0x0000250a (const dword)  (not used)
DEEPPINK                           63666  0x0000f8b2 (const dword)  (not used)
DEEPSKYBLUE                         1535  0x000005ff (const dword)  (not used)
DIABLO                                 3  0x00000003 (const dword)  (usage 3)
DIMGRAY                            27469  0x00006b4d (const dword)  (not used)
DISABLE                                0  0x00000000 (const dword)  (not used)
DISK_BUF                              15  0x0000000f (const dword)  (not used)
DISK_DATA_HI                           7  0x00000007 (const dword)  (not used)
DISK_DATA_LO                           6  0x00000006 (const dword)  (not used)
DISK_FAT_HI                            3  0x00000003 (const dword)  (not used)
DISK_FAT_LO                            2  0x00000002 (const dword)  (not used)
DISK_FATCOPIES                        12  0x0000000c (const dword)  (not used)
DISK_FATSIZE                          11  0x0000000b (const dword)  (not used)
DISK_FIRST_SECT_HI                     1  0x00000001 (const dword)  (not used)
DISK_FIRST_SECT_LO                     0  0x00000000 (const dword)  (not used)
DISK_MAXCLUS_HI                        9  0x00000009 (const dword)  (not used)
DISK_MAXCLUS_LO                        8  0x00000008 (const dword)  (not used)
DISK_MAXROOT                          10  0x0000000a (const dword)  (not used)
DISK_ROOT_HI                           5  0x00000005 (const dword)  (not used)
DISK_ROOT_LO                           4  0x00000004 (const dword)  (not used)
DISK_SECT_PER_CLUS                    13  0x0000000d (const dword)  (not used)
DISK_TYPE                             14  0x0000000e (const dword)  (not used)
disp_BlitPixelsFromCOM0             -372  0xfffffe8c (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM1             -563  0xfffffdcd (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM2             -564  0xfffffdcc (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM3             -565  0xfffffdcb (PmmC func) args[0] r=0  (not used)
disp_Disconnect                     -371  0xfffffe8d (PmmC func) args[0] r=0  (not used)
disp_Init                           -370  0xfffffe8e (PmmC func) args[0] r=0  (not used)
disp_ReadWord                       -367  0xfffffe91 (PmmC func) args[0] r=1  (not used)
disp_setGRAM                        -363  0xfffffe95 (PmmC func) args[4] r=0  (not used)
disp_SetReg                         -362  0xfffffe96 (PmmC func) args[2] r=0  (not used)
disp_Sync                           -369  0xfffffe8f (PmmC func) args[1] r=0  (not used)
disp_WrGRAM                         -364  0xfffffe94 (PmmC func) args[1] r=0  (not used)
disp_WriteControl                   -365  0xfffffe93 (PmmC func) args[1] r=0  (not used)
disp_WriteWord                      -366  0xfffffe92 (PmmC func) args[1] r=0  (not used)
DODGERBLUE                          7327  0x00001c9f (const dword)  (not used)
DoGFXObjects                        9380  0x000024a4 (User func) args[0] r=0  (usage 6)
doScope                            12958  0x0000329e (User func) args[2] r=0  (usage 3)
DOWN                                   0  0x00000000 (const dword)  (not used)
drawScope                          13158  0x00003366 (User func) args[1] r=0  (usage 6)
DSK                                63490  0x0000f802 (const dword)  (not used)
ENABLE                                 1  0x00000001 (const dword)  (not used)
EVE_SP                               -65  0xffffffbf (PmmC func) args[0] r=1  (not used)
EVE_SSIZE                            -66  0xffffffbe (PmmC func) args[0] r=1  (not used)
EXTERN                               N/A         N/A (macro)  /**/   (not used)
FALSE_REASON                         141  0x0000008d (const dword)  (not used)
FCY_1                                 20  0x00000014 (const dword)  (not used)
FCY_256                               23  0x00000017 (const dword)  (not used)
FCY_64                                22  0x00000016 (const dword)  (not used)
FCY_8                                 21  0x00000015 (const dword)  (not used)
FE_CANNOT_INIT                        15  0x0000000f (const dword)  (not used)
FE_CANNOT_READ_MBR                    16  0x00000010 (const dword)  (not used)
FE_DIR_FULL                           12  0x0000000c (const dword)  (not used)
FE_DISK_FULL                          13  0x0000000d (const dword)  (not used)
FE_DISK_NOT_MNTD                       6  0x00000006 (const dword)  (not used)
FE_EOF                                10  0x0000000a (const dword)  (not used)
FE_FAT_EOF                             9  0x00000009 (const dword)  (not used)
FE_FILE_NOT_FOUND                      7  0x00000007 (const dword)  (not used)
FE_FILE_OVERWRITE                     14  0x0000000e (const dword)  (not used)
FE_FILE_TIMEOUT                       26  0x0000001a (const dword)  (not used)
FE_FIND_ERROR                         19  0x00000013 (const dword)  (not used)
FE_IDE_ERROR                           1  0x00000001 (const dword)  (not used)
FE_INVALID_BR                          5  0x00000005 (const dword)  (not used)
FE_INVALID_CLUSTER                    11  0x0000000b (const dword)  (not used)
FE_INVALID_FILE                        8  0x00000008 (const dword)  (not used)
FE_INVALID_FNAME                      20  0x00000014 (const dword)  (not used)
FE_INVALID_MBR                         4  0x00000004 (const dword)  (not used)
FE_INVALID_MEDIA                      21  0x00000015 (const dword)  (not used)
FE_INVALID_MODE                       18  0x00000012 (const dword)  (not used)
FE_MALLOC_FAILED                      17  0x00000011 (const dword)  (not used)
FE_NOT_PRESENT                         2  0x00000002 (const dword)  (not used)
FE_OK                                  0  0x00000000 (const dword)  (not used)
FE_PARTITION_TYPE                      3  0x00000003 (const dword)  (not used)
FE_SECTOR_READ_FAIL                   22  0x00000016 (const dword)  (not used)
FE_SECTOR_WRITE_FAIL                  23  0x00000017 (const dword)  (not used)
FILE_ATTRIBUTES                       18  0x00000012 (const dword)  (not used)
FILE_BUFFER                           22  0x00000016 (const dword)  (not used)
file_Close                          -431  0xfffffe51 (PmmC func) args[1] r=1  (not used)
file_Count                          -425  0xfffffe57 (PmmC func) args[1] r=1  (not used)
FILE_CURR_CLUSTER                      1  0x00000001 (const dword)  (not used)
FILE_CURR_SECTOR                       2  0x00000002 (const dword)  (not used)
FILE_CURR_SECTOR_POS                   3  0x00000003 (const dword)  (not used)
FILE_CURR_SECTOR_TOP                   4  0x00000004 (const dword)  (not used)
FILE_DATE                             10  0x0000000a (const dword)  (not used)
file_Dir                            -426  0xfffffe56 (PmmC func) args[1] r=1  (not used)
FILE_DISK                             21  0x00000015 (const dword)  (not used)
FILE_ENTRY                            20  0x00000014 (const dword)  (not used)
file_Erase                          -446  0xfffffe42 (PmmC func) args[1] r=1  (not used)
file_Error                          -424  0xfffffe58 (PmmC func) args[0] r=1  (not used)
file_Exec                           -450  0xfffffe3e (PmmC func) args[2] r=1  (not used)
file_Exists                         -429  0xfffffe53 (PmmC func) args[1] r=1  (not used)
file_FindFirst                      -427  0xfffffe55 (PmmC func) args[1] r=1  (not used)
file_FindNext                       -428  0xfffffe54 (PmmC func) args[0] r=1  (not used)
FILE_FIRST_CLUSTER                     0  0x00000000 (const dword)  (not used)
file_GetC                           -441  0xfffffe47 (PmmC func) args[1] r=1  (not used)
file_GetS                           -445  0xfffffe43 (PmmC func) args[3] r=1  (not used)
file_GetW                           -443  0xfffffe45 (PmmC func) args[1] r=1  (not used)
file_Image                          -438  0xfffffe4a (PmmC func) args[3] r=1  (not used)
file_Index                          -434  0xfffffe4e (PmmC func) args[4] r=1  (not used)
file_LoadFunction                   -448  0xfffffe40 (PmmC func) args[1] r=1  (not used)
file_LoadImageControl               -451  0xfffffe3d (PmmC func) args[3] r=1  (usage 3)
FILE_MODE                             17  0x00000011 (const dword)  (not used)
file_Mount                          -452  0xfffffe3c (PmmC func) args[0] r=1  (usage 6)
FILE_NAME                             11  0x0000000b (const dword)  (not used)
file_Open                           -430  0xfffffe52 (PmmC func) args[2] r=1  (not used)
FILE_PAGEFLAG                         19  0x00000013 (const dword)  (not used)
file_PlayWAV                        -454  0xfffffe3a (PmmC func) args[1] r=1  (not used)
file_PutC                           -440  0xfffffe48 (PmmC func) args[2] r=1  (not used)
file_PutS                           -444  0xfffffe44 (PmmC func) args[2] r=1  (not used)
file_PutW                           -442  0xfffffe46 (PmmC func) args[2] r=1  (not used)
file_Read                           -432  0xfffffe50 (PmmC func) args[3] r=1  (not used)
file_Rename                         -455  0xfffffe39 (PmmC func) args[2] r=1  (not used)
file_Rewind                         -447  0xfffffe41 (PmmC func) args[1] r=1  (not used)
file_Run                            -449  0xfffffe3f (PmmC func) args[2] r=1  (not used)
file_ScreenCapture                  -439  0xfffffe49 (PmmC func) args[5] r=1  (not used)
file_Seek                           -433  0xfffffe4f (PmmC func) args[3] r=1  (not used)
FILE_SEEK_POS_HI                       6  0x00000006 (const dword)  (not used)
FILE_SEEK_POS_LO                       5  0x00000005 (const dword)  (not used)
file_SetDate                        -456  0xfffffe38 (PmmC func) args[7] r=1  (not used)
file_Size                           -437  0xfffffe4b (PmmC func) args[3] r=1  (not used)
FILE_SIZE_HI                           8  0x00000008 (const dword)  (not used)
FILE_SIZE_LO                           7  0x00000007 (const dword)  (not used)
file_Tell                           -435  0xfffffe4d (PmmC func) args[3] r=1  (not used)
FILE_TIME                              9  0x00000009 (const dword)  (not used)
file_Unmount                        -453  0xfffffe3b (PmmC func) args[0] r=0  (not used)
file_Write                          -436  0xfffffe4c (PmmC func) args[3] r=1  (not used)
FILLPATTERN_0                      65504  0x0000ffe0 (const dword)  (not used)
FILLPATTERN_1                      65505  0x0000ffe1 (const ??? 0)  (not used)
FILLPATTERN_10                     65514  0x0000ffea (const ??? 0)  (not used)
FILLPATTERN_11                     65515  0x0000ffeb (const ??? 0)  (not used)
FILLPATTERN_12                     65516  0x0000ffec (const ??? 0)  (not used)
FILLPATTERN_13                     65517  0x0000ffed (const ??? 0)  (not used)
FILLPATTERN_14                     65518  0x0000ffee (const ??? 0)  (not used)
FILLPATTERN_15                     65519  0x0000ffef (const ??? 0)  (not used)
FILLPATTERN_16                     65520  0x0000fff0 (const ??? 0)  (not used)
FILLPATTERN_17                     65521  0x0000fff1 (const ??? 0)  (not used)
FILLPATTERN_18                     65522  0x0000fff2 (const ??? 0)  (not used)
FILLPATTERN_19                     65523  0x0000fff3 (const ??? 0)  (not used)
FILLPATTERN_2                      65506  0x0000ffe2 (const ??? 0)  (not used)
FILLPATTERN_20                     65524  0x0000fff4 (const ??? 0)  (not used)
FILLPATTERN_21                     65525  0x0000fff5 (const ??? 0)  (not used)
FILLPATTERN_22                     65526  0x0000fff6 (const ??? 0)  (not used)
FILLPATTERN_23                     65527  0x0000fff7 (const ??? 0)  (not used)
FILLPATTERN_24                     65528  0x0000fff8 (const ??? 0)  (not used)
FILLPATTERN_25                     65529  0x0000fff9 (const ??? 0)  (not used)
FILLPATTERN_26                     65530  0x0000fffa (const ??? 0)  (not used)
FILLPATTERN_27                     65531  0x0000fffb (const ??? 0)  (not used)
FILLPATTERN_28                     65532  0x0000fffc (const ??? 0)  (not used)
FILLPATTERN_29                     65533  0x0000fffd (const ??? 0)  (not used)
FILLPATTERN_3                      65507  0x0000ffe3 (const ??? 0)  (not used)
FILLPATTERN_30                     65534  0x0000fffe (const ??? 0)  (not used)
FILLPATTERN_31                     65535  0x0000ffff (const ??? 0)  (not used)
FILLPATTERN_4                      65508  0x0000ffe4 (const ??? 0)  (not used)
FILLPATTERN_5                      65509  0x0000ffe5 (const ??? 0)  (not used)
FILLPATTERN_6                      65510  0x0000ffe6 (const ??? 0)  (not used)
FILLPATTERN_7                      65511  0x0000ffe7 (const ??? 0)  (not used)
FILLPATTERN_8                      65512  0x0000ffe8 (const ??? 0)  (not used)
FILLPATTERN_9                      65513  0x0000ffe9 (const ??? 0)  (not used)
FIREBRICK                          45316  0x0000b104 (const dword)  (not used)
flash_Bank                          -498  0xfffffe0e (PmmC func) args[0] r=1  (not used)
flash_Blit1                         -507  0xfffffe05 (PmmC func) args[4] r=1  (not used)
flash_Blit16                        -503  0xfffffe09 (PmmC func) args[3] r=1  (not used)
flash_Blit2                         -506  0xfffffe06 (PmmC func) args[4] r=1  (not used)
flash_Blit4                         -505  0xfffffe07 (PmmC func) args[4] r=1  (not used)
flash_Blit8                         -504  0xfffffe08 (PmmC func) args[3] r=1  (not used)
flash_Copy                          -496  0xfffffe10 (PmmC func) args[4] r=1  (not used)
flash_EraseBank                     -499  0xfffffe0d (PmmC func) args[2] r=1  (not used)
flash_Exec                          -508  0xfffffe04 (PmmC func) args[2] r=1  (not used)
flash_GetByte                       -494  0xfffffe12 (PmmC func) args[2] r=1  (not used)
flash_GetWord                       -495  0xfffffe11 (PmmC func) args[2] r=1  (not used)
flash_LoadFile                      -500  0xfffffe0c (PmmC func) args[2] r=1  (not used)
flash_putstr                        -502  0xfffffe0a (PmmC func) args[2] r=1  (not used)
FLASH_READ_PROTECT                    16  0x00000010 (const dword)  (not used)
flash_Run                           -497  0xfffffe0f (PmmC func) args[1] r=1  (not used)
FLASH_WRITE_PROTECT                   32  0x00000020 (const dword)  (not used)
flash_WriteBlock                    -501  0xfffffe0b (PmmC func) args[3] r=1  (not used)
FLASHBANK_0                            0  0x00000000 (const dword)  (not used)
FLASHBANK_1                            1  0x00000001 (const dword)  (not used)
FLASHBANK_2                            2  0x00000002 (const dword)  (not used)
FLASHBANK_3                            3  0x00000003 (const dword)  (not used)
FLASHBANK_4                            4  0x00000004 (const dword)  (not used)
FLASHBANK_5                            5  0x00000005 (const dword)  (not used)
FLORALWHITE                        65502  0x0000ffde (const dword)  (not used)
flt_ABS                              -84  0xffffffac (PmmC func) args[2] r=1  (not used)
flt_ACOS                             -85  0xffffffab (PmmC func) args[2] r=1  (not used)
flt_ADD                              -97  0xffffff9f (PmmC func) args[3] r=1  (not used)
flt_ASIN                             -86  0xffffffaa (PmmC func) args[2] r=1  (not used)
flt_ATAN                             -87  0xffffffa9 (PmmC func) args[2] r=1  (not used)
flt_CEIL                             -90  0xffffffa6 (PmmC func) args[2] r=1  (not used)
flt_COS                              -88  0xffffffa8 (PmmC func) args[2] r=1  (not used)
flt_DIV                             -100  0xffffff9c (PmmC func) args[3] r=1  (not used)
flt_EQ                              -101  0xffffff9b (PmmC func) args[2] r=1  (not used)
flt_EXP                              -89  0xffffffa7 (PmmC func) args[2] r=1  (not used)
flt_FLOOR                            -91  0xffffffa5 (PmmC func) args[2] r=1  (not used)
flt_FTOI                            -108  0xffffff94 (PmmC func) args[1] r=1  (not used)
flt_GE                              -104  0xffffff98 (PmmC func) args[2] r=1  (not used)
flt_GT                              -103  0xffffff99 (PmmC func) args[2] r=1  (not used)
flt_ITOF                             -79  0xffffffb1 (PmmC func) args[2] r=1  (not used)
flt_LE                              -106  0xffffff96 (PmmC func) args[2] r=1  (not used)
flt_LOG                              -93  0xffffffa3 (PmmC func) args[2] r=1  (not used)
flt_LT                              -105  0xffffff97 (PmmC func) args[2] r=1  (not used)
flt_LTOF                             -81  0xffffffaf (PmmC func) args[2] r=1  (not used)
flt_MUL                              -99  0xffffff9d (PmmC func) args[3] r=1  (not used)
flt_NE                              -102  0xffffff9a (PmmC func) args[2] r=1  (not used)
flt_POW                              -96  0xffffffa0 (PmmC func) args[3] r=1  (not used)
flt_PRINT                            -83  0xffffffad (PmmC func) args[2] r=1  (not used)
flt_PRINTxy                         -109  0xffffff93 (PmmC func) args[4] r=1  (not used)
flt_SGN                             -107  0xffffff95 (PmmC func) args[1] r=1  (not used)
flt_SIN                              -92  0xffffffa4 (PmmC func) args[2] r=1  (not used)
flt_SQR                              -94  0xffffffa2 (PmmC func) args[2] r=1  (not used)
flt_SUB                              -98  0xffffff9e (PmmC func) args[3] r=1  (not used)
flt_TAN                              -95  0xffffffa1 (PmmC func) args[2] r=1  (not used)
flt_UITOF                            -80  0xffffffb0 (PmmC func) args[2] r=1  (not used)
flt_ULTOF                            -82  0xffffffae (PmmC func) args[2] r=1  (not used)
flt_VAL                              -78  0xffffffb2 (PmmC func) args[2] r=1  (not used)
FONT1                                  1  0x00000001 (const dword)  (not used)
FONT2                                  2  0x00000002 (const dword)  (not used)
FONT3                                  3  0x00000003 (const dword)  (not used)
FONT_1                                 1  0x00000001 (const dword)  (not used)
FONT_10                               10  0x0000000a (const dword)  (not used)
FONT_11                               11  0x0000000b (const dword)  (not used)
FONT_2                                 2  0x00000002 (const dword)  (not used)
FONT_3                                 3  0x00000003 (const dword)  (not used)
FONT_4                                 4  0x00000004 (const dword)  (not used)
FONT_5                                 5  0x00000005 (const dword)  (not used)
FONT_6                                 6  0x00000006 (const dword)  (not used)
FONT_7                                 7  0x00000007 (const dword)  (not used)
FONT_8                                 8  0x00000008 (const dword)  (not used)
FONT_9                                 9  0x00000009 (const dword)  (not used)
FONT_ID                                2  0x00000002 (const dword)  (not used)
FONT_SIZE                              2  0x00000002 (const dword)  (not used)
FORESTGREEN                         9284  0x00002444 (const dword)  (not used)
FormBGcolors                        6456  0x00001938FormBGcolors                        6456  0x00001938 (mem) word[19] (member of C:\Users\User\Google Drive\NASA RMC\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (usage 6)
FormEndIndex                         146  0x00000092FormEndIndex                         146  0x00000092 (mem) word[19] (member of C:\Users\User\Google Drive\NASA RMC\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (usage 6)
FormStartIndex                       108  0x0000006cFormStartIndex                       108  0x0000006c (mem) word[19] (member of C:\Users\User\Google Drive\NASA RMC\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (usage 6)
FRAME_DELAY                           22  0x00000016 (const dword)  (not used)
FUCHSIA                            63519  0x0000f81f (const dword)  (usage 15)
GAINSBORO                          57083  0x0000defb (const dword)  (not used)
gbutton                           UNRESOLVED  (not used)
getcpvars                          14216  0x00003788 (User func) args[1] r=0  (usage 6)
GFX                                63489  0x0000f801 (const dword)  (not used)
gfx_332to565                        -165  0xffffff5b (PmmC func) args[1] r=1  (not used)
gfx_565to332                        -166  0xffffff5a (PmmC func) args[1] r=1  (not used)
gfx_Arc                             -172  0xffffff54 (PmmC func) args[7] r=0  (not used)
gfx_BevelRadius                     -194  0xffffff3e (PmmC func) args[1] r=1  (not used)
gfx_BevelShadow                     -196  0xffffff3c (PmmC func) args[1] r=1  (not used)
gfx_BevelWidth                      -195  0xffffff3d (PmmC func) args[1] r=1  (not used)
gfx_BGcolour                        -184  0xffffff48 (PmmC func) args[1] r=1  (not used)
GFX_BOTTOM                            51  0x00000033 (const dword)  (not used)
gfx_BoxTo                           -149  0xffffff6b (PmmC func) args[2] r=0  (not used)
gfx_Bullet                          -146  0xffffff6e (PmmC func) args[1] r=0  (not used)
gfx_Button                          -155  0xffffff65 (PmmC func) args[9] r=1  (not used)
gfx_Button2                         -156  0xffffff64 (PmmC func) args[8] r=0  (not used)
gfx_Button3                         -157  0xffffff63 (PmmC func) args[8] r=0  (not used)
gfx_ChangeColour                    -151  0xffffff69 (PmmC func) args[2] r=0  (not used)
gfx_CheckBox                        -158  0xffffff62 (PmmC func) args[8] r=0  (not used)
gfx_Circle                          -136  0xffffff78 (PmmC func) args[4] r=0  (not used)
gfx_CircleFilled                    -137  0xffffff77 (PmmC func) args[4] r=0  (not used)
GFX_CLIP_BOTTOM                      114  0x00000072 (const dword)  (not used)
GFX_CLIP_BOTTOM_VAL                  110  0x0000006e (const dword)  (not used)
GFX_CLIP_LEFT                        111  0x0000006f (const dword)  (not used)
GFX_CLIP_LEFT_VAL                    107  0x0000006b (const dword)  (not used)
GFX_CLIP_RIGHT                       113  0x00000071 (const dword)  (not used)
GFX_CLIP_RIGHT_VAL                   109  0x0000006d (const dword)  (not used)
GFX_CLIP_TOP                         112  0x00000070 (const dword)  (not used)
GFX_CLIP_TOP_VAL                     108  0x0000006c (const dword)  (not used)
gfx_Clipping                        -186  0xffffff46 (PmmC func) args[1] r=1  (not used)
gfx_ClipWindow                      -150  0xffffff6a (PmmC func) args[4] r=0  (not used)
gfx_Cls                             -126  0xffffff82 (PmmC func) args[0] r=0  (usage 6)
gfx_Contrast                        -192  0xffffff40 (PmmC func) args[1] r=1  (usage 3)
gfx_Dot                             -145  0xffffff6f (PmmC func) args[0] r=0  (not used)
gfx_Ellipse                         -153  0xffffff67 (PmmC func) args[5] r=0  (not used)
gfx_EllipseFilled                   -154  0xffffff66 (PmmC func) args[5] r=0  (not used)
gfx_FillPattern                     -170  0xffffff56 (PmmC func) args[2] r=1  (not used)
gfx_FrameDelay                      -189  0xffffff43 (PmmC func) args[1] r=1  (not used)
gfx_Get                             -182  0xffffff4a (PmmC func) args[1] r=1  (not used)
gfx_GetPixel                        -139  0xffffff75 (PmmC func) args[2] r=1  (usage 3)
gfx_Gradient                        -176  0xffffff50 (PmmC func) args[7] r=0  (not used)
gfx_Hline                           -132  0xffffff7c (PmmC func) args[4] r=1  (usage 9)
gfx_IncX                            -147  0xffffff6d (PmmC func) args[0] r=1  (not used)
gfx_IncY                            -148  0xffffff6c (PmmC func) args[0] r=1  (not used)
GFX_LAST_CHAR_HEIGHT                 120  0x00000078 (const dword)  (not used)
GFX_LAST_CHAR_WIDTH                  119  0x00000077 (const dword)  (not used)
GFX_LAST_STR_HEIGHT                  122  0x0000007a (const dword)  (not used)
GFX_LAST_STR_WIDTH                   121  0x00000079 (const dword)  (not used)
GFX_LEFT                              48  0x00000030 (const dword)  (not used)
gfx_Line                            -131  0xffffff7d (PmmC func) args[5] r=0  (not used)
gfx_LinePattern                     -193  0xffffff3f (PmmC func) args[1] r=1  (usage 54)
gfx_LineRel                         -130  0xffffff7e (PmmC func) args[2] r=0  (not used)
gfx_LineTo                          -129  0xffffff7f (PmmC func) args[2] r=0  (not used)
gfx_MoveRel                         -128  0xffffff80 (PmmC func) args[2] r=0  (not used)
gfx_MoveTo                          -127  0xffffff81 (PmmC func) args[2] r=0  (not used)
gfx_ObjectColour                    -185  0xffffff47 (PmmC func) args[1] r=1  (not used)
gfx_Orbit                           -142  0xffffff72 (PmmC func) args[2] r=0  (not used)
gfx_OrbitInit                       -141  0xffffff73 (PmmC func) args[2] r=0  (not used)
gfx_Origin                          -169  0xffffff57 (PmmC func) args[2] r=0  (not used)
gfx_OutlineColour                   -191  0xffffff41 (PmmC func) args[1] r=1  (usage 108)
gfx_Panel                           -161  0xffffff5f (PmmC func) args[6] r=0  (usage 57)
gfx_PenSize                         -183  0xffffff49 (PmmC func) args[1] r=1  (not used)
gfx_PieSlice                        -171  0xffffff55 (PmmC func) args[9] r=0  (not used)
gfx_PointWithinBox                  -199  0xffffff39 (PmmC func) args[3] r=1  (not used)
gfx_PointWithinRectangle            -200  0xffffff38 (PmmC func) args[3] r=1  (not used)
gfx_Polygon                         -144  0xffffff70 (PmmC func) args[4] r=0  (not used)
gfx_PolygonFilled                   -168  0xffffff58 (PmmC func) args[4] r=0  (not used)
gfx_Polyline                        -143  0xffffff71 (PmmC func) args[4] r=0  (not used)
gfx_PutPixel                        -138  0xffffff76 (PmmC func) args[3] r=0  (usage 3)
gfx_RadioButton                     -159  0xffffff61 (PmmC func) args[8] r=0  (not used)
gfx_ReadBresLine                    -178  0xffffff4e (PmmC func) args[5] r=1  (not used)
gfx_ReadGRAMarea                    -180  0xffffff4c (PmmC func) args[5] r=1  (not used)
gfx_Rectangle                       -134  0xffffff7a (PmmC func) args[5] r=0  (not used)
gfx_RectangleFilled                 -135  0xffffff79 (PmmC func) args[5] r=0  (usage 102)
gfx_RGBto565                        -164  0xffffff5c (PmmC func) args[3] r=1  (not used)
GFX_RIGHT                             50  0x00000032 (const dword)  (not used)
gfx_RoundGradient                   -177  0xffffff4f (PmmC func) args[8] r=0  (not used)
gfx_RoundPanel                      -175  0xffffff51 (PmmC func) args[8] r=0  (not used)
gfx_RoundRect                       -173  0xffffff53 (PmmC func) args[6] r=0  (not used)
gfx_Scope                           -532  0xfffffdec (PmmC func) args[19] r=0  (usage 3)
gfx_ScreenCopyPaste                 -163  0xffffff5d (PmmC func) args[6] r=0  (not used)
gfx_ScreenMode                      -190  0xffffff42 (PmmC func) args[1] r=1  (usage 3)
gfx_Set                             -125  0xffffff83 (PmmC func) args[2] r=0  (usage 3)
gfx_SetClipRegion                   -152  0xffffff68 (PmmC func) args[0] r=0  (not used)
gfx_Slider                          -162  0xffffff5e (PmmC func) args[8] r=1  (not used)
gfx_Slider2                         -160  0xffffff60 (PmmC func) args[8] r=1  (not used)
gfx_Surround                        -174  0xffffff52 (PmmC func) args[7] r=0  (not used)
GFX_THUMB_BORDER_DARK                 76  0x0000004c (const dword)  (not used)
GFX_THUMB_BORDER_LIGHT                77  0x0000004d (const dword)  (not used)
GFX_THUMB_PERCENT                     75  0x0000004b (const dword)  (not used)
GFX_TOP                               49  0x00000031 (const dword)  (not used)
GFX_TOUCH_REGION_X1                  103  0x00000067 (const dword)  (not used)
GFX_TOUCH_REGION_X2                  105  0x00000069 (const dword)  (not used)
GFX_TOUCH_REGION_Y1                  104  0x00000068 (const dword)  (not used)
GFX_TOUCH_REGION_Y2                  106  0x0000006a (const dword)  (not used)
gfx_Transparency                    -188  0xffffff44 (PmmC func) args[1] r=1  (not used)
gfx_TransparentColour               -187  0xffffff45 (PmmC func) args[1] r=1  (not used)
gfx_Triangle                        -140  0xffffff74 (PmmC func) args[7] r=0  (not used)
gfx_TriangleFilled                  -167  0xffffff59 (PmmC func) args[7] r=0  (usage 3)
gfx_Vline                           -133  0xffffff7b (PmmC func) args[4] r=1  (not used)
gfx_WriteBresLine                   -179  0xffffff4d (PmmC func) args[5] r=0  (not used)
gfx_WriteGRAMarea                   -181  0xffffff4b (PmmC func) args[5] r=0  (not used)
GFX_X1                                52  0x00000034 (const dword)  (not used)
GFX_X2                                54  0x00000036 (const dword)  (not used)
GFX_X_ORG                             56  0x00000038 (const dword)  (not used)
GFX_XMAX                              46  0x0000002e (const dword)  (not used)
gfx_Xorigin                         -197  0xffffff3b (PmmC func) args[1] r=1  (not used)
GFX_Y1                                53  0x00000035 (const dword)  (not used)
GFX_Y2                                55  0x00000037 (const dword)  (not used)
GFX_Y_ORG                             57  0x00000039 (const dword)  (not used)
GFX_YMAX                              47  0x0000002f (const dword)  (not used)
gfx_Yorigin                         -198  0xffffff3a (PmmC func) args[1] r=1  (not used)
GHOSTWHITE                         65503  0x0000ffdf (const dword)  (not used)
GOLD                               65184  0x0000fea0 (const dword)  (not used)
GOLDENROD                          56612  0x0000dd24 (const dword)  (not used)
GRAD_DOWN                             32  0x00000020 (const dword)  (not used)
GRAD_LEFT                             80  0x00000050 (const dword)  (not used)
GRAD_RIGHT                            48  0x00000030 (const dword)  (not used)
GRAD_UP                               64  0x00000040 (const dword)  (not used)
GRAD_WAVE_HOR                        112  0x00000070 (const dword)  (not used)
GRAD_WAVE_VER                         96  0x00000060 (const dword)  (not used)
GRAM_PIXEL_COUNT_HI                  116  0x00000074 (const dword)  (not used)
GRAM_PIXEL_COUNT_LO                  115  0x00000073 (const dword)  (not used)
Graticule                          13612  0x0000352c (User func) args[7] r=0  (usage 6)
GRAY                               33808  0x00008410 (const dword)  (not used)
GREEN                               1024  0x00000400 (const dword)  (not used)
green                                  4  0x00000004 (mem) word (global)  (usage 24)
GREENYELLOW                        45029  0x0000afe5 (const dword)  (not used)
h                                      8  0x00000008 (mem) word (global)  (usage 30)
HEX                                 5136  0x00001410 (const dword)  (not used)
HEX1                                4368  0x00001110 (const dword)  (not used)
HEX1Z                                272  0x00000110 (const dword)  (not used)
HEX1ZB                              8464  0x00002110 (const dword)  (not used)
HEX2                                4624  0x00001210 (const dword)  (not used)
HEX2Z                                528  0x00000210 (const dword)  (not used)
HEX2ZB                              8720  0x00002210 (const dword)  (not used)
HEX3                                4880  0x00001310 (const dword)  (not used)
HEX3Z                                784  0x00000310 (const dword)  (not used)
HEX3ZB                              8976  0x00002310 (const dword)  (not used)
HEX4                                5136  0x00001410 (const dword)  (not used)
HEX4Z                               1040  0x00000410 (const dword)  (not used)
HEX4ZB                              9232  0x00002410 (const dword)  (not used)
HEXZ                                1040  0x00000410 (const dword)  (not used)
HEXZB                               9232  0x00002410 (const dword)  (not used)
HI                                     1  0x00000001 (const dword)  (not used)
HIbyte                               -48  0xffffffd0 (PmmC func) args[1] r=1  (not used)
HIDE                                   2  0x00000002 (const dword)  (not used)
HLS2RGB                            14349  0x0000380d (User func) args[3] r=0  (usage 3)
HLSMAX                               127  0x0000007f (const dword)  (usage 63)
HLSMAXd12                             10  0x0000000a (const dword)  (usage 6)
HLSMAXd2                              63  0x0000003f (const dword)  (usage 12)
HLSMAXd3                              42  0x0000002a (const dword)  (usage 9)
HLSMAXd6                              21  0x00000015 (const dword)  (usage 18)
HLSMAXm2d3                            84  0x00000054 (const dword)  (usage 9)
hndl                                   0  0x00000000 (mem) word (global)  (usage 138)
HONEYDEW                           63486  0x0000f7fe (const dword)  (not used)
HOTPINK                            64342  0x0000fb56 (const dword)  (not used)
hue_RGB                            14517  0x000038b5 (User func) args[3] r=0  (usage 9)
HYPER                                  3  0x00000003 (const dword)  (not used)
I2C1                               63520  0x0000f820 (const dword)  (not used)
I2C1_Ack                            -305  0xfffffecf (PmmC func) args[0] r=0  (not used)
I2C1_AckPoll                        -314  0xfffffec6 (PmmC func) args[1] r=1  (not used)
I2C1_AckStatus                      -311  0xfffffec9 (PmmC func) args[0] r=1  (not used)
I2C1_Close                          -287  0xfffffee1 (PmmC func) args[0] r=0  (not used)
I2C1_Getn                           -323  0xfffffebd (PmmC func) args[2] r=1  (not used)
I2C1_Gets                           -320  0xfffffec0 (PmmC func) args[2] r=1  (not used)
I2C1_Idle                           -317  0xfffffec3 (PmmC func) args[0] r=1  (not used)
I2C1_Nack                           -308  0xfffffecc (PmmC func) args[0] r=0  (not used)
I2C1_Open                           -284  0xfffffee4 (PmmC func) args[3] r=1  (not used)
I2C1_Putn                           -329  0xfffffeb7 (PmmC func) args[2] r=1  (not used)
I2C1_Puts                           -326  0xfffffeba (PmmC func) args[1] r=1  (not used)
I2C1_Read                           -299  0xfffffed5 (PmmC func) args[0] r=1  (not used)
I2C1_Restart                        -296  0xfffffed8 (PmmC func) args[0] r=1  (not used)
I2C1_Start                          -290  0xfffffede (PmmC func) args[0] r=1  (not used)
I2C1_Stop                           -293  0xfffffedb (PmmC func) args[0] r=1  (not used)
I2C1_Write                          -302  0xfffffed2 (PmmC func) args[1] r=1  (not used)
I2C2                               63521  0x0000f821 (const dword)  (not used)
I2C2_Ack                            -306  0xfffffece (PmmC func) args[0] r=0  (not used)
I2C2_AckPoll                        -315  0xfffffec5 (PmmC func) args[1] r=1  (not used)
I2C2_AckStatus                      -312  0xfffffec8 (PmmC func) args[0] r=1  (not used)
I2C2_Close                          -288  0xfffffee0 (PmmC func) args[0] r=0  (not used)
I2C2_Getn                           -324  0xfffffebc (PmmC func) args[2] r=1  (not used)
I2C2_Gets                           -321  0xfffffebf (PmmC func) args[2] r=1  (not used)
I2C2_Idle                           -318  0xfffffec2 (PmmC func) args[0] r=1  (not used)
I2C2_Nack                           -309  0xfffffecb (PmmC func) args[0] r=0  (not used)
I2C2_Open                           -285  0xfffffee3 (PmmC func) args[3] r=1  (not used)
I2C2_Putn                           -330  0xfffffeb6 (PmmC func) args[2] r=1  (not used)
I2C2_Puts                           -327  0xfffffeb9 (PmmC func) args[1] r=1  (not used)
I2C2_Read                           -300  0xfffffed4 (PmmC func) args[0] r=1  (not used)
I2C2_Restart                        -297  0xfffffed7 (PmmC func) args[0] r=1  (not used)
I2C2_Start                          -291  0xfffffedd (PmmC func) args[0] r=1  (not used)
I2C2_Stop                           -294  0xfffffeda (PmmC func) args[0] r=1  (not used)
I2C2_Write                          -303  0xfffffed1 (PmmC func) args[1] r=1  (not used)
I2C3                               63522  0x0000f822 (const dword)  (not used)
I2C3_Ack                            -307  0xfffffecd (PmmC func) args[0] r=0  (not used)
I2C3_AckPoll                        -316  0xfffffec4 (PmmC func) args[1] r=1  (not used)
I2C3_AckStatus                      -313  0xfffffec7 (PmmC func) args[0] r=1  (not used)
I2C3_Close                          -289  0xfffffedf (PmmC func) args[0] r=0  (not used)
I2C3_Getn                           -325  0xfffffebb (PmmC func) args[2] r=1  (not used)
I2C3_Gets                           -322  0xfffffebe (PmmC func) args[2] r=1  (not used)
I2C3_Idle                           -319  0xfffffec1 (PmmC func) args[0] r=1  (not used)
I2C3_Nack                           -310  0xfffffeca (PmmC func) args[0] r=0  (not used)
I2C3_Open                           -286  0xfffffee2 (PmmC func) args[3] r=1  (not used)
I2C3_Putn                           -331  0xfffffeb5 (PmmC func) args[2] r=1  (not used)
I2C3_Puts                           -328  0xfffffeb8 (PmmC func) args[1] r=1  (not used)
I2C3_Read                           -301  0xfffffed3 (PmmC func) args[0] r=1  (not used)
I2C3_Restart                        -298  0xfffffed6 (PmmC func) args[0] r=1  (not used)
I2C3_Start                          -292  0xfffffedc (PmmC func) args[0] r=1  (not used)
I2C3_Stop                           -295  0xfffffed9 (PmmC func) args[0] r=1  (not used)
I2C3_Write                          -304  0xfffffed0 (PmmC func) args[1] r=1  (not used)
I2C_10KHZ                              3  0x00000003 (const dword)  (not used)
I2C_20KHZ                              4  0x00000004 (const dword)  (not used)
I2C_250KHZ                             6  0x00000006 (const dword)  (not used)
I2C_50KHZ                              5  0x00000005 (const dword)  (not used)
I2C_FAST                               2  0x00000002 (const dword)  (not used)
I2C_MED                                1  0x00000001 (const dword)  (not used)
I2C_SLOW                               0  0x00000000 (const dword)  (not used)
i4Dbutton0                           206  0x000000ce (const ??? 0)  (usage 3)
i4Dbutton1                           210  0x000000d2 (const ??? 0)  (usage 3)
i4Dbutton2                           242  0x000000f2 (const ??? 0)  (usage 3)
I_COLOUR16                            16  0x00000010 (const dword)  (not used)
I_DARKEN                           16384  0x00004000 (const dword)  (not used)
I_ENABLED                          32768  0x00008000 (const dword)  (usage 6)
I_LIGHTEN                           8192  0x00002000 (const dword)  (not used)
I_MOVIE                              128  0x00000080 (const dword)  (not used)
I_NOGROUP                             64  0x00000040 (const dword)  (not used)
I_STAYONTOP                          256  0x00000100 (const dword)  (usage 3)
I_TOPMOST                            512  0x00000200 (const dword)  (not used)
I_TOUCH_DISABLE                       32  0x00000020 (const dword)  (usage 6)
I_TOUCHED                           4096  0x00001000 (const dword)  (not used)
I_X_LOCK                            1024  0x00000400 (const dword)  (not used)
I_Y_LOCK                            2048  0x00000800 (const dword)  (not used)
iAngularmeter0                         7  0x00000007 (const ??? 0)  (usage 3)
iAngularmeter1                        29  0x0000001d (const ??? 0)  (usage 3)
iAngularmeter2                        56  0x00000038 (const ??? 0)  (usage 3)
iAngularmeter3                        30  0x0000001e (const ??? 0)  (usage 3)
iAngularmeter4                       108  0x0000006c (const ??? 0)  (usage 3)
iAngularmeter5                       252  0x000000fc (const ??? 0)  (usage 3)
iAngularmeter6                       253  0x000000fd (const ??? 0)  (usage 3)
iColorpicker0                        179  0x000000b3 (const ??? 0)  (usage 3)
iColorpicker1                        233  0x000000e9 (const ??? 0)  (usage 3)
iCoolgauge0                           65  0x00000041 (const ??? 0)  (usage 3)
iCoolgauge1                           53  0x00000035 (const ??? 0)  (usage 3)
iGauge0                               31  0x0000001f (const ??? 0)  (usage 3)
iiLeddigits0                           9  0x00000009 (const ??? 0)  (not used)
iiLeddigits1                          68  0x00000044 (const ??? 0)  (not used)
iiLeddigits10                         75  0x0000004b (const ??? 0)  (not used)
iiLeddigits11                         23  0x00000017 (const ??? 0)  (not used)
iiLeddigits12                         25  0x00000019 (const ??? 0)  (not used)
iiLeddigits13                         77  0x0000004d (const ??? 0)  (not used)
iiLeddigits14                        127  0x0000007f (const ??? 0)  (not used)
iiLeddigits15                        101  0x00000065 (const ??? 0)  (not used)
iiLeddigits16                        103  0x00000067 (const ??? 0)  (not used)
iiLeddigits19                         37  0x00000025 (const ??? 0)  (not used)
iiLeddigits2                          61  0x0000003d (const ??? 0)  (not used)
iiLeddigits20                        129  0x00000081 (const ??? 0)  (not used)
iiLeddigits21                        131  0x00000083 (const ??? 0)  (not used)
iiLeddigits22                        133  0x00000085 (const ??? 0)  (not used)
iiLeddigits23                        139  0x0000008b (const ??? 0)  (not used)
iiLeddigits24                        141  0x0000008d (const ??? 0)  (not used)
iiLeddigits25                        146  0x00000092 (const ??? 0)  (not used)
iiLeddigits26                        205  0x000000cd (const ??? 0)  (not used)
iiLeddigits27                        158  0x0000009e (const ??? 0)  (not used)
iiLeddigits28                        160  0x000000a0 (const ??? 0)  (not used)
iiLeddigits29                        162  0x000000a2 (const ??? 0)  (not used)
iiLeddigits3                          58  0x0000003a (const ??? 0)  (not used)
iiLeddigits30                        164  0x000000a4 (const ??? 0)  (not used)
iiLeddigits31                        117  0x00000075 (const ??? 0)  (not used)
iiLeddigits32                        219  0x000000db (const ??? 0)  (not used)
iiLeddigits33                        221  0x000000dd (const ??? 0)  (not used)
iiLeddigits4                          40  0x00000028 (const ??? 0)  (not used)
iiLeddigits5                          14  0x0000000e (const ??? 0)  (not used)
iiLeddigits6                          17  0x00000011 (const ??? 0)  (not used)
iiLeddigits7                          71  0x00000047 (const ??? 0)  (not used)
iiLeddigits8                          73  0x00000049 (const ??? 0)  (not used)
iiLeddigits9                          20  0x00000014 (const ??? 0)  (not used)
iImage0                               12  0x0000000c (const ??? 0)  (usage 3)
iImage1                               11  0x0000000b (const ??? 0)  (usage 3)
iKnob0                               202  0x000000ca (const ??? 0)  (usage 3)
iLeddigits0                            8  0x00000008 (const ??? 0)  (usage 3)
iLeddigits1                           67  0x00000043 (const ??? 0)  (usage 3)
iLeddigits10                          74  0x0000004a (const ??? 0)  (usage 3)
iLeddigits11                          22  0x00000016 (const ??? 0)  (usage 3)
iLeddigits12                          24  0x00000018 (const ??? 0)  (usage 3)
iLeddigits13                          76  0x0000004c (const ??? 0)  (usage 3)
iLeddigits14                         126  0x0000007e (const ??? 0)  (usage 3)
iLeddigits15                         100  0x00000064 (const ??? 0)  (usage 3)
iLeddigits16                         102  0x00000066 (const ??? 0)  (usage 3)
iLeddigits19                          36  0x00000024 (const ??? 0)  (usage 3)
iLeddigits2                           60  0x0000003c (const ??? 0)  (usage 3)
iLeddigits20                         128  0x00000080 (const ??? 0)  (usage 3)
iLeddigits21                         130  0x00000082 (const ??? 0)  (usage 3)
iLeddigits22                         132  0x00000084 (const ??? 0)  (usage 3)
iLeddigits23                         138  0x0000008a (const ??? 0)  (usage 3)
iLeddigits24                         140  0x0000008c (const ??? 0)  (usage 3)
iLeddigits25                         145  0x00000091 (const ??? 0)  (usage 3)
iLeddigits26                         204  0x000000cc (const ??? 0)  (usage 3)
iLeddigits27                         157  0x0000009d (const ??? 0)  (usage 3)
iLeddigits28                         159  0x0000009f (const ??? 0)  (usage 3)
iLeddigits29                         161  0x000000a1 (const ??? 0)  (usage 3)
iLeddigits3                           57  0x00000039 (const ??? 0)  (usage 3)
iLeddigits30                         163  0x000000a3 (const ??? 0)  (usage 3)
iLeddigits31                         116  0x00000074 (const ??? 0)  (usage 3)
iLeddigits32                         218  0x000000da (const ??? 0)  (usage 3)
iLeddigits33                         220  0x000000dc (const ??? 0)  (usage 3)
iLeddigits4                           39  0x00000027 (const ??? 0)  (usage 3)
iLeddigits5                           13  0x0000000d (const ??? 0)  (usage 3)
iLeddigits6                           16  0x00000010 (const ??? 0)  (usage 3)
iLeddigits7                           70  0x00000046 (const ??? 0)  (usage 3)
iLeddigits8                           72  0x00000048 (const ??? 0)  (usage 3)
iLeddigits9                           19  0x00000013 (const ??? 0)  (usage 3)
IMAGE_CLUSTER                         10  0x0000000a (const dword)  (not used)
IMAGE_DELAY                            7  0x00000007 (const dword)  (usage 12)
IMAGE_FLAGS                            6  0x00000006 (const dword)  (usage 3)
IMAGE_FRAMES                           8  0x00000008 (const dword)  (not used)
IMAGE_HEIGHT                           5  0x00000005 (const dword)  (usage 3)
IMAGE_HIWORD                           1  0x00000001 (const dword)  (not used)
IMAGE_INDEX                            9  0x00000009 (const dword)  (usage 45)
IMAGE_LOWORD                           0  0x00000000 (const dword)  (not used)
IMAGE_SECTOR                          11  0x0000000b (const dword)  (not used)
IMAGE_TAG                             12  0x0000000c (const dword)  (usage 12)
IMAGE_TAG2                            13  0x0000000d (const dword)  (usage 12)
IMAGE_WIDTH                            4  0x00000004 (const dword)  (usage 3)
IMAGE_XPOS                             2  0x00000002 (const dword)  (usage 6)
IMAGE_YPOS                             3  0x00000003 (const dword)  (usage 3)
img_ClearAttributes                 -383  0xfffffe81 (PmmC func) args[3] r=1  (usage 3)
IMG_COUNT                              0  0x00000000 (const dword)  (not used)
IMG_CURRENT_FRAME                     89  0x00000059 (const dword)  (not used)
img_Darken                          -377  0xfffffe87 (PmmC func) args[2] r=1  (not used)
IMG_DAT_FILENAME                       4  0x00000004 (const dword)  (not used)
img_Disable                         -376  0xfffffe88 (PmmC func) args[2] r=1  (usage 6)
img_Enable                          -375  0xfffffe89 (PmmC func) args[2] r=1  (not used)
IMG_ENTRYLEN                           1  0x00000001 (const dword)  (not used)
IMG_FLAGS                             85  0x00000055 (const dword)  (not used)
IMG_FRAME_COUNT                       86  0x00000056 (const dword)  (not used)
IMG_FRAME_DELAY                       84  0x00000054 (const dword)  (not used)
IMG_GCI_FILENAME                       3  0x00000003 (const dword)  (not used)
IMG_GCIFILE_HANDLE                     5  0x00000005 (const dword)  (not used)
img_GetWord                         -380  0xfffffe84 (PmmC func) args[3] r=1  (usage 69)
IMG_HEIGHT                            83  0x00000053 (const dword)  (not used)
img_Lighten                         -378  0xfffffe86 (PmmC func) args[2] r=1  (not used)
IMG_MODE                               2  0x00000002 (const dword)  (not used)
IMG_PIXEL_COUNT_HI                    88  0x00000058 (const dword)  (not used)
IMG_PIXEL_COUNT_LO                    87  0x00000057 (const dword)  (not used)
img_SelectReadPosition              -385  0xfffffe7f (PmmC func) args[5] r=1  (not used)
img_SequentialRead                  -386  0xfffffe7e (PmmC func) args[2] r=1  (not used)
img_SetAttributes                   -382  0xfffffe82 (PmmC func) args[3] r=1  (usage 6)
img_SetPosition                     -374  0xfffffe8a (PmmC func) args[4] r=1  (not used)
img_SetWord                         -379  0xfffffe85 (PmmC func) args[4] r=1  (usage 30)
img_Show                            -381  0xfffffe83 (PmmC func) args[2] r=1  (usage 18)
img_Touched                         -384  0xfffffe80 (PmmC func) args[2] r=1  (usage 3)
IMG_WIDTH                             82  0x00000052 (const dword)  (not used)
INDIANRED                          51947  0x0000caeb (const dword)  (not used)
INDIGO                             18448  0x00004810 (const dword)  (not used)
InputControls                        184  0x000000b8InputControls                        184  0x000000b8 (mem) word[249] (member of C:\Users\User\Google Drive\NASA RMC\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (usage 9)
InputCS                             4664  0x00001238 (mem) word (global)  (usage 15)
InputData                            682  0x000002aaInputData                            682  0x000002aa (mem) word[2607] (member of C:\Users\User\Google Drive\NASA RMC\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (usage 30)
InputType                           4416  0x00001140 (mem) word (global)  (usage 30)
INVERSE                               64  0x00000040 (const dword)  (not used)
IPDatasize                            22  0x00000016 (const dword)  (usage 3)
isalnum                              -41  0xffffffd7 (PmmC func) args[1] r=1  (not used)
isalpha                              -40  0xffffffd8 (PmmC func) args[1] r=1  (not used)
isdigit                              -36  0xffffffdc (PmmC func) args[1] r=1  (not used)
iSlider0                             109  0x0000006d (const ??? 0)  (usage 3)
islower                              -39  0xffffffd9 (PmmC func) args[1] r=1  (not used)
isprint                              -42  0xffffffd6 (PmmC func) args[1] r=1  (not used)
isspace                              -43  0xffffffd5 (PmmC func) args[1] r=1  (not used)
iStatictext0                           1  0x00000001 (const ??? 0)  (usage 3)
iStatictext1                           0  0x00000000 (const ??? 0)  (usage 3)
iStatictext10                         78  0x0000004e (const ??? 0)  (usage 3)
iStatictext11                         79  0x0000004f (const ??? 0)  (usage 3)
iStatictext12                         80  0x00000050 (const ??? 0)  (usage 3)
iStatictext13                         81  0x00000051 (const ??? 0)  (usage 3)
iStatictext14                         62  0x0000003e (const ??? 0)  (usage 3)
iStatictext15                         63  0x0000003f (const ??? 0)  (usage 3)
iStatictext16                         41  0x00000029 (const ??? 0)  (usage 3)
iStatictext17                         15  0x0000000f (const ??? 0)  (usage 3)
iStatictext18                         18  0x00000012 (const ??? 0)  (usage 3)
iStatictext19                         21  0x00000015 (const ??? 0)  (usage 3)
iStatictext2                          10  0x0000000a (const ??? 0)  (usage 3)
iStatictext20                        134  0x00000086 (const ??? 0)  (usage 3)
iStatictext21                         86  0x00000056 (const ??? 0)  (usage 3)
iStatictext22                        135  0x00000087 (const ??? 0)  (usage 3)
iStatictext23                         44  0x0000002c (const ??? 0)  (usage 3)
iStatictext24                         45  0x0000002d (const ??? 0)  (usage 3)
iStatictext25                         46  0x0000002e (const ??? 0)  (usage 3)
iStatictext26                         47  0x0000002f (const ??? 0)  (usage 3)
iStatictext27                         48  0x00000030 (const ??? 0)  (usage 3)
iStatictext28                         49  0x00000031 (const ??? 0)  (usage 3)
iStatictext29                         50  0x00000032 (const ??? 0)  (usage 3)
iStatictext3                          28  0x0000001c (const ??? 0)  (usage 3)
iStatictext30                         99  0x00000063 (const ??? 0)  (usage 3)
iStatictext31                        104  0x00000068 (const ??? 0)  (usage 3)
iStatictext32                        105  0x00000069 (const ??? 0)  (usage 3)
iStatictext33                        114  0x00000072 (const ??? 0)  (usage 3)
iStatictext34                        119  0x00000077 (const ??? 0)  (usage 3)
iStatictext35                        249  0x000000f9 (const ??? 0)  (usage 3)
iStatictext36                        250  0x000000fa (const ??? 0)  (usage 3)
iStatictext37                         34  0x00000022 (const ??? 0)  (usage 3)
iStatictext38                         35  0x00000023 (const ??? 0)  (usage 3)
iStatictext39                         38  0x00000026 (const ??? 0)  (usage 3)
iStatictext4                          32  0x00000020 (const ??? 0)  (usage 3)
iStatictext40                        136  0x00000088 (const ??? 0)  (usage 3)
iStatictext41                        137  0x00000089 (const ??? 0)  (usage 3)
iStatictext42                        142  0x0000008e (const ??? 0)  (usage 3)
iStatictext43                        143  0x0000008f (const ??? 0)  (usage 3)
iStatictext44                        147  0x00000093 (const ??? 0)  (usage 3)
iStatictext45                        148  0x00000094 (const ??? 0)  (usage 3)
iStatictext46                         64  0x00000040 (const ??? 0)  (usage 3)
iStatictext47                        149  0x00000095 (const ??? 0)  (usage 3)
iStatictext48                        150  0x00000096 (const ??? 0)  (usage 3)
iStatictext49                        153  0x00000099 (const ??? 0)  (usage 3)
iStatictext5                          42  0x0000002a (const ??? 0)  (usage 3)
iStatictext50                        152  0x00000098 (const ??? 0)  (usage 3)
iStatictext51                        181  0x000000b5 (const ??? 0)  (usage 3)
iStatictext52                        189  0x000000bd (const ??? 0)  (usage 3)
iStatictext53                        207  0x000000cf (const ??? 0)  (usage 3)
iStatictext54                        156  0x0000009c (const ??? 0)  (usage 3)
iStatictext55                        165  0x000000a5 (const ??? 0)  (usage 3)
iStatictext56                        166  0x000000a6 (const ??? 0)  (usage 3)
iStatictext57                        118  0x00000076 (const ??? 0)  (usage 3)
iStatictext58                        107  0x0000006b (const ??? 0)  (usage 3)
iStatictext59                        208  0x000000d0 (const ??? 0)  (usage 3)
iStatictext6                          51  0x00000033 (const ??? 0)  (usage 3)
iStatictext60                        209  0x000000d1 (const ??? 0)  (usage 3)
iStatictext61                        211  0x000000d3 (const ??? 0)  (usage 3)
iStatictext62                        212  0x000000d4 (const ??? 0)  (usage 3)
iStatictext63                        222  0x000000de (const ??? 0)  (usage 3)
iStatictext64                        223  0x000000df (const ??? 0)  (usage 3)
iStatictext65                        228  0x000000e4 (const ??? 0)  (usage 3)
iStatictext66                        229  0x000000e5 (const ??? 0)  (usage 3)
iStatictext67                        230  0x000000e6 (const ??? 0)  (usage 3)
iStatictext68                        231  0x000000e7 (const ??? 0)  (usage 3)
iStatictext69                        232  0x000000e8 (const ??? 0)  (usage 3)
iStatictext7                          66  0x00000042 (const ??? 0)  (usage 3)
iStatictext70                        251  0x000000fb (const ??? 0)  (usage 3)
iStatictext8                          59  0x0000003b (const ??? 0)  (usage 3)
iStatictext9                          69  0x00000045 (const ??? 0)  (usage 3)
isupper                              -38  0xffffffda (PmmC func) args[1] r=1  (not used)
iswhite                              -44  0xffffffd4 (PmmC func) args[1] r=1  (not used)
isxdigit                             -37  0xffffffdb (PmmC func) args[1] r=1  (not used)
ITALIC                                32  0x00000020 (const dword)  (not used)
iterator                            -404  0xfffffe6c (PmmC func) args[1] r=0  (not used)
iUserled2                            224  0x000000e0 (const ??? 0)  (usage 3)
iUserled3                            225  0x000000e1 (const ??? 0)  (usage 3)
iUserled4                            226  0x000000e2 (const ??? 0)  (usage 3)
iUserled5                            227  0x000000e3 (const ??? 0)  (usage 3)
IVORY                              65534  0x0000fffe (const dword)  (not used)
iWinbutton0                            2  0x00000002 (const ??? 0)  (usage 3)
iWinbutton1                            3  0x00000003 (const ??? 0)  (usage 3)
iWinbutton10                          55  0x00000037 (const ??? 0)  (usage 3)
iWinbutton11                          82  0x00000052 (const ??? 0)  (usage 3)
iWinbutton12                          83  0x00000053 (const ??? 0)  (usage 3)
iWinbutton13                          87  0x00000057 (const ??? 0)  (usage 3)
iWinbutton14                          88  0x00000058 (const ??? 0)  (usage 3)
iWinbutton15                          84  0x00000054 (const ??? 0)  (usage 3)
iWinbutton16                          89  0x00000059 (const ??? 0)  (usage 3)
iWinbutton17                         201  0x000000c9 (const ??? 0)  (usage 3)
iWinbutton18                          90  0x0000005a (const ??? 0)  (usage 3)
iWinbutton19                          91  0x0000005b (const ??? 0)  (usage 3)
iWinbutton2                            4  0x00000004 (const ??? 0)  (usage 3)
iWinbutton20                          92  0x0000005c (const ??? 0)  (usage 3)
iWinbutton21                         203  0x000000cb (const ??? 0)  (usage 3)
iWinbutton22                          93  0x0000005d (const ??? 0)  (usage 3)
iWinbutton23                          94  0x0000005e (const ??? 0)  (usage 3)
iWinbutton24                          95  0x0000005f (const ??? 0)  (usage 3)
iWinbutton25                         110  0x0000006e (const ??? 0)  (usage 3)
iWinbutton26                         111  0x0000006f (const ??? 0)  (usage 3)
iWinbutton27                         112  0x00000070 (const ??? 0)  (usage 3)
iWinbutton28                         113  0x00000071 (const ??? 0)  (usage 3)
iWinbutton29                         106  0x0000006a (const ??? 0)  (usage 3)
iWinbutton3                            5  0x00000005 (const ??? 0)  (usage 3)
iWinbutton30                         115  0x00000073 (const ??? 0)  (usage 3)
iWinbutton31                         120  0x00000078 (const ??? 0)  (usage 3)
iWinbutton32                          85  0x00000055 (const ??? 0)  (usage 3)
iWinbutton33                         248  0x000000f8 (const ??? 0)  (usage 3)
iWinbutton35                         121  0x00000079 (const ??? 0)  (usage 3)
iWinbutton36                         122  0x0000007a (const ??? 0)  (usage 3)
iWinbutton37                         123  0x0000007b (const ??? 0)  (usage 3)
iWinbutton38                         124  0x0000007c (const ??? 0)  (usage 3)
iWinbutton39                         125  0x0000007d (const ??? 0)  (usage 3)
iWinbutton4                            6  0x00000006 (const ??? 0)  (usage 3)
iWinbutton40                         144  0x00000090 (const ??? 0)  (usage 3)
iWinbutton41                         151  0x00000097 (const ??? 0)  (usage 3)
iWinbutton42                         154  0x0000009a (const ??? 0)  (usage 3)
iWinbutton43                         180  0x000000b4 (const ??? 0)  (usage 3)
iWinbutton44                          26  0x0000001a (const ??? 0)  (usage 3)
iWinbutton45                         182  0x000000b6 (const ??? 0)  (usage 3)
iWinbutton46                         183  0x000000b7 (const ??? 0)  (usage 3)
iWinbutton47                         184  0x000000b8 (const ??? 0)  (usage 3)
iWinbutton48                         185  0x000000b9 (const ??? 0)  (usage 3)
iWinbutton49                         186  0x000000ba (const ??? 0)  (usage 3)
iWinbutton5                           27  0x0000001b (const ??? 0)  (usage 3)
iWinbutton50                         187  0x000000bb (const ??? 0)  (usage 3)
iWinbutton51                         188  0x000000bc (const ??? 0)  (usage 3)
iWinbutton52                          96  0x00000060 (const ??? 0)  (usage 3)
iWinbutton53                         155  0x0000009b (const ??? 0)  (usage 3)
iWinbutton54                         167  0x000000a7 (const ??? 0)  (usage 3)
iWinbutton55                         168  0x000000a8 (const ??? 0)  (usage 3)
iWinbutton56                         169  0x000000a9 (const ??? 0)  (usage 3)
iWinbutton57                         170  0x000000aa (const ??? 0)  (usage 3)
iWinbutton58                         171  0x000000ab (const ??? 0)  (usage 3)
iWinbutton59                         172  0x000000ac (const ??? 0)  (usage 3)
iWinbutton6                           52  0x00000034 (const ??? 0)  (usage 3)
iWinbutton60                         173  0x000000ad (const ??? 0)  (usage 3)
iWinbutton61                         174  0x000000ae (const ??? 0)  (usage 3)
iWinbutton62                         175  0x000000af (const ??? 0)  (usage 3)
iWinbutton63                         176  0x000000b0 (const ??? 0)  (usage 3)
iWinbutton64                         177  0x000000b1 (const ??? 0)  (usage 3)
iWinbutton65                         178  0x000000b2 (const ??? 0)  (usage 3)
iWinbutton66                         190  0x000000be (const ??? 0)  (usage 3)
iWinbutton67                         191  0x000000bf (const ??? 0)  (usage 3)
iWinbutton68                         192  0x000000c0 (const ??? 0)  (usage 3)
iWinbutton69                         193  0x000000c1 (const ??? 0)  (usage 3)
iWinbutton7                           43  0x0000002b (const ??? 0)  (usage 3)
iWinbutton70                         194  0x000000c2 (const ??? 0)  (usage 3)
iWinbutton71                         195  0x000000c3 (const ??? 0)  (usage 3)
iWinbutton72                         196  0x000000c4 (const ??? 0)  (usage 3)
iWinbutton73                         197  0x000000c5 (const ??? 0)  (usage 3)
iWinbutton74                         198  0x000000c6 (const ??? 0)  (usage 3)
iWinbutton75                         199  0x000000c7 (const ??? 0)  (usage 3)
iWinbutton76                         200  0x000000c8 (const ??? 0)  (usage 3)
iWinbutton77                          97  0x00000061 (const ??? 0)  (usage 3)
iWinbutton78                         213  0x000000d5 (const ??? 0)  (usage 3)
iWinbutton79                         214  0x000000d6 (const ??? 0)  (usage 3)
iWinbutton8                           33  0x00000021 (const ??? 0)  (usage 3)
iWinbutton80                         215  0x000000d7 (const ??? 0)  (usage 3)
iWinbutton81                         216  0x000000d8 (const ??? 0)  (usage 3)
iWinbutton82                         217  0x000000d9 (const ??? 0)  (usage 3)
iWinbutton83                         234  0x000000ea (const ??? 0)  (usage 3)
iWinbutton84                         235  0x000000eb (const ??? 0)  (usage 3)
iWinbutton85                         236  0x000000ec (const ??? 0)  (usage 3)
iWinbutton86                         237  0x000000ed (const ??? 0)  (usage 3)
iWinbutton87                         238  0x000000ee (const ??? 0)  (usage 3)
iWinbutton88                         239  0x000000ef (const ??? 0)  (usage 3)
iWinbutton89                         240  0x000000f0 (const ??? 0)  (usage 3)
iWinbutton9                           54  0x00000036 (const ??? 0)  (usage 3)
iWinbutton90                          98  0x00000062 (const ??? 0)  (usage 3)
iWinbutton91                         241  0x000000f1 (const ??? 0)  (usage 3)
iWinbutton92                         243  0x000000f3 (const ??? 0)  (usage 3)
iWinbutton93                         244  0x000000f4 (const ??? 0)  (usage 3)
iWinbutton94                         245  0x000000f5 (const ??? 0)  (usage 3)
iWinbutton95                         246  0x000000f6 (const ??? 0)  (usage 3)
iWinbutton96                         247  0x000000f7 (const ??? 0)  (usage 3)
KHAKI                              63281  0x0000f731 (const dword)  (not used)
kKeyboardKeystrokes                 6494  0x0000195ekKeyboardKeystrokes                 6494  0x0000195e (mem) word[1] (member of C:\Users\User\Google Drive\NASA RMC\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (not used)
l                                     10  0x0000000a (mem) word (global)  (usage 11)
LANDSCAPE                              0  0x00000000 (const dword)  (usage 3)
LANDSCAPE_R                            1  0x00000001 (const dword)  (not used)
LAVENDER                           59199  0x0000e73f (const dword)  (not used)
LAVENDERBLUSH                      65438  0x0000ff9e (const dword)  (not used)
LAWNGREEN                          32736  0x00007fe0 (const dword)  (not used)
ledDigitsDisplay                   12081  0x00002f31 (User func) args[3] r=0  (usage 6)
LEFT_POS                               2  0x00000002 (const dword)  (not used)
LEMONCHIFFON                       65497  0x0000ffd9 (const dword)  (not used)
LIGHTBLUE                          44764  0x0000aedc (const dword)  (not used)
LIGHTCORAL                         62480  0x0000f410 (const dword)  (not used)
LIGHTCYAN                          59391  0x0000e7ff (const dword)  (not used)
LIGHTGOLD                          65498  0x0000ffda (const dword)  (not used)
LIGHTGREEN                         38770  0x00009772 (const dword)  (not used)
LIGHTGREY                          54938  0x0000d69a (const dword)  (usage 6)
LIGHTPINK                          64952  0x0000fdb8 (const dword)  (not used)
LIGHTSALMON                        64783  0x0000fd0f (const dword)  (not used)
LIGHTSEAGREEN                       9621  0x00002595 (const dword)  (not used)
LIGHTSKYBLUE                       34431  0x0000867f (const dword)  (not used)
LIGHTSLATEGRAY                     29779  0x00007453 (const dword)  (not used)
LIGHTSTEELBLUE                     46651  0x0000b63b (const dword)  (not used)
LIGHTYELLOW                        65532  0x0000fffc (const dword)  (not used)
LIME                                2016  0x000007e0 (const dword)  (usage 15)
LIMEGREEN                          13926  0x00003666 (const dword)  (not used)
LINE_PATTERN                          26  0x0000001a (const dword)  (not used)
LINEN                              65436  0x0000ff9c (const dword)  (not used)
LO                                     0  0x00000000 (const dword)  (not used)
LObyte                               -47  0xffffffd1 (PmmC func) args[1] r=1  (not used)
LOCAL                                N/A         N/A (macro) //   (not used)
LPCOARSE                           61680  0x0000f0f0 (const dword)  (not used)
LPDASHDOT                            975  0x000003cf (const dword)  (not used)
LPDASHDOTDOT                         819  0x00000333 (const dword)  (not used)
LPFINE                             43690  0x0000aaaa (const dword)  (usage 54)
LPMEDIUM                           13107  0x00003333 (const dword)  (not used)
LPSOLID                                0  0x00000000 (const dword)  (not used)
M_PA0                                  1  0x00000001 (const dword)  (not used)
M_PA1                                  2  0x00000002 (const dword)  (not used)
M_PA10                              1024  0x00000400 (const dword)  (not used)
M_PA11                              2048  0x00000800 (const dword)  (not used)
M_PA12                              4096  0x00001000 (const dword)  (not used)
M_PA13                              8192  0x00002000 (const dword)  (not used)
M_PA14                             16384  0x00004000 (const dword)  (not used)
M_PA15                             32768  0x00008000 (const dword)  (not used)
M_PA2                                  4  0x00000004 (const dword)  (not used)
M_PA3                                  8  0x00000008 (const dword)  (not used)
M_PA4                                 16  0x00000010 (const dword)  (not used)
M_PA5                                 32  0x00000020 (const dword)  (not used)
M_PA6                                 64  0x00000040 (const dword)  (not used)
M_PA7                                128  0x00000080 (const dword)  (not used)
M_PA8                                256  0x00000100 (const dword)  (not used)
M_PA9                                512  0x00000200 (const dword)  (not used)
MAGENTA                            63519  0x0000f81f (const dword)  (not used)
main                                7244  0x00001c4c (User func) args[0] r=0  (not used)
MAROON                             32768  0x00008000 (const dword)  (not used)
MAX                                  -55  0xffffffc9 (PmmC func) args[2] r=1  (usage 6)
MaxTotObjects                         33  0x00000021 (const dword)  (usage 6)
MDA                                63552  0x0000f840 (const dword)  (not used)
MEDIA_ADDRESS_HI                      91  0x0000005b (const dword)  (not used)
MEDIA_ADDRESS_LO                      90  0x0000005a (const dword)  (not used)
media_Flush                         -218  0xffffff26 (PmmC func) args[0] r=1  (not used)
media_Image                         -217  0xffffff27 (PmmC func) args[2] r=0  (not used)
media_Init                          -219  0xffffff25 (PmmC func) args[0] r=1  (not used)
media_RdSector                      -211  0xffffff2d (PmmC func) args[1] r=1  (not used)
media_ReadByte                      -213  0xffffff2b (PmmC func) args[0] r=1  (not used)
media_ReadWord                      -214  0xffffff2a (PmmC func) args[0] r=1  (not used)
MEDIA_SECTOR_COUNT                    94  0x0000005e (const dword)  (not used)
MEDIA_SECTOR_HI                       93  0x0000005d (const dword)  (not used)
MEDIA_SECTOR_LO                       92  0x0000005c (const dword)  (not used)
media_SetAdd                        -209  0xffffff2f (PmmC func) args[2] r=0  (not used)
media_SetSector                     -210  0xffffff2e (PmmC func) args[2] r=0  (not used)
media_Video                         -207  0xffffff31 (PmmC func) args[2] r=0  (not used)
media_VideoFrame                    -208  0xffffff30 (PmmC func) args[3] r=0  (not used)
media_WriteByte                     -215  0xffffff29 (PmmC func) args[1] r=1  (not used)
media_WriteWord                     -216  0xffffff28 (PmmC func) args[1] r=1  (not used)
media_WrSector                      -212  0xffffff2c (PmmC func) args[1] r=1  (not used)
MEDIUMAQUAMARINE                   26229  0x00006675 (const dword)  (not used)
MEDIUMBLUE                            25  0x00000019 (const dword)  (not used)
MEDIUMORCHID                       47802  0x0000baba (const dword)  (not used)
MEDIUMPURPLE                       37787  0x0000939b (const dword)  (not used)
MEDIUMSEAGREEN                     15758  0x00003d8e (const dword)  (not used)
MEDIUMSLATEBLUE                    31581  0x00007b5d (const dword)  (not used)
MEDIUMSPRINGGREEN                   2003  0x000007d3 (const dword)  (not used)
MEDIUMTURQUOISE                    20121  0x00004e99 (const dword)  (not used)
MEDIUMVIOLETRED                    49328  0x0000c0b0 (const dword)  (not used)
mem_Alloc                           -413  0xfffffe63 (PmmC func) args[1] r=1  (not used)
mem_AllocV                          -414  0xfffffe62 (PmmC func) args[1] r=1  (not used)
mem_AllocZ                          -415  0xfffffe61 (PmmC func) args[1] r=1  (not used)
mem_ArrayOp1                         -67  0xffffffbd (PmmC func) args[4] r=0  (not used)
mem_ArrayOp2                         -68  0xffffffbc (PmmC func) args[5] r=0  (not used)
mem_Compare                         -421  0xfffffe5b (PmmC func) args[3] r=1  (not used)
mem_Copy                            -420  0xfffffe5c (PmmC func) args[3] r=1  (usage 3)
mem_Free                            -417  0xfffffe5f (PmmC func) args[1] r=1  (not used)
mem_Heap                            -418  0xfffffe5e (PmmC func) args[0] r=1  (not used)
mem_Realloc                         -416  0xfffffe60 (PmmC func) args[2] r=1  (not used)
mem_Set                             -419  0xfffffe5d (PmmC func) args[3] r=1  (not used)
MIDI                                   9  0x00000009 (const dword)  (not used)
MIDNIGHTBLUE                        6350  0x000018ce (const dword)  (not used)
MIN                                  -54  0xffffffca (PmmC func) args[2] r=1  (usage 6)
MINTCREAM                          63487  0x0000f7ff (const dword)  (not used)
MISTYROSE                          65340  0x0000ff3c (const dword)  (not used)
MOCCASIN                           65334  0x0000ff36 (const dword)  (not used)
NAK                                   21  0x00000015 (const dword)  (usage 3)
nak0                               14001  0x000036b1 (User func) args[0] r=0  (usage 12)
nAniTimers                             0  0x00000000 (const dword)  (not used)
NAVAJOWHITE                        65269  0x0000fef5 (const dword)  (not used)
NAVY                                  16  0x00000010 (const dword)  (not used)
nInputs                              237  0x000000ed (const dword)  (usage 3)
nObjects                             254  0x000000fe (const dword)  (not used)
NOTOUCH                                0  0x00000000 (const dword)  (not used)
NP_565                                 0  0x00000000 (const dword)  (not used)
NP_RGB                                 1  0x00000001 (const dword)  (not used)
NP_Write                            -535  0xfffffde9 (PmmC func) args[7] r=1  (not used)
NP_XRGB                                2  0x00000002 (const dword)  (not used)
nScopes                                5  0x00000005 (const dword)  (usage 3)
NybleSwap                            -50  0xffffffce (PmmC func) args[1] r=1  (not used)
o4Dbuttons                          6432  0x00001920o4Dbuttons                          6432  0x00001920 (mem) word[4] (member of C:\Users\User\Google Drive\NASA RMC\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (usage 12)
oAngularmeters                      6108  0x000017dcoAngularmeters                      6108  0x000017dc (mem) word[8] (member of C:\Users\User\Google Drive\NASA RMC\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (usage 3)
oAniButtons                         6440  0x00001928oAniButtons                         6440  0x00001928 (mem) word[1] (member of C:\Users\User\Google Drive\NASA RMC\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (usage 3)
OBJECT_COLOUR                         18  0x00000012 (const dword)  (not used)
oColorPickers                       6442  0x0000192aoColorPickers                       6442  0x0000192a (mem) word[3] (member of C:\Users\User\Google Drive\NASA RMC\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (usage 6)
oCoolgauges                         6124  0x000017ecoCoolgauges                         6124  0x000017ec (mem) word[3] (member of C:\Users\User\Google Drive\NASA RMC\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (usage 3)
oCustomdigitss                      6130  0x000017f2oCustomdigitss                      6130  0x000017f2 (mem) word[1] (member of C:\Users\User\Google Drive\NASA RMC\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (usage 3)
oDipSwitchs                         5896  0x00001708oDipSwitchs                         5896  0x00001708 (mem) word[1] (member of C:\Users\User\Google Drive\NASA RMC\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (usage 3)
OFF                                    0  0x00000000 (const dword)  (not used)
oForms                              6132  0x000017f4oForms                              6132  0x000017f4 (mem) word[20] (member of C:\Users\User\Google Drive\NASA RMC\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (usage 3)
Ofs_Digits_Digits                      2  0x00000002 (const dword)  (usage 9)
Ofs_Digits_LeadingBlanks               8  0x00000008 (const dword)  (usage 3)
Ofs_Digits_Left                        0  0x00000000 (const dword)  (usage 3)
Ofs_Digits_MinDigits                   4  0x00000004 (const dword)  (usage 3)
Ofs_Digits_Widthdigit                  6  0x00000006 (const dword)  (usage 3)
Ofs_IPD_DOWN                          16  0x00000010 (const dword)  (usage 6)
Ofs_IPD_OBJVIDX                       20  0x00000014 (const dword)  (usage 30)
Ofs_IPD_P1                             2  0x00000002 (const dword)  (usage 21)
Ofs_IPD_P2                             4  0x00000004 (const dword)  (usage 39)
Ofs_IPD_P3                             6  0x00000006 (const dword)  (usage 18)
Ofs_IPD_P4                             8  0x00000008 (const dword)  (usage 21)
Ofs_IPD_P5                            10  0x0000000a (const dword)  (usage 18)
Ofs_IPD_P6                            12  0x0000000c (const dword)  (usage 21)
Ofs_IPD_P7                            14  0x0000000e (const dword)  (usage 3)
Ofs_IPD_RELEASE                       18  0x00000012 (const dword)  (usage 9)
Ofs_String_Ansi                       22  0x00000016 (const dword)  (not used)
Ofs_String_BGColor                    16  0x00000010 (const dword)  (not used)
Ofs_String_FGColor                    14  0x0000000e (const dword)  (not used)
Ofs_String_FontAttribs                18  0x00000012 (const dword)  (not used)
Ofs_String_Form                       24  0x00000018 (const dword)  (not used)
Ofs_String_Size                        4  0x00000004 (const dword)  (not used)
Ofs_String_StartH                      0  0x00000000 (const dword)  (not used)
Ofs_String_StartL                      2  0x00000002 (const dword)  (not used)
Ofs_String_Transparent                20  0x00000014 (const dword)  (not used)
Ofs_String_x1                          6  0x00000006 (const dword)  (not used)
Ofs_String_x2                         10  0x0000000a (const dword)  (not used)
Ofs_String_y1                          8  0x00000008 (const dword)  (not used)
Ofs_String_y2                         12  0x0000000c (const dword)  (not used)
oGauges                             6172  0x0000181coGauges                             6172  0x0000181c (mem) word[2] (member of C:\Users\User\Google Drive\NASA RMC\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (usage 3)
oGSliders                           5906  0x00001712oGSliders                           5906  0x00001712 (mem) word[2] (member of C:\Users\User\Google Drive\NASA RMC\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (usage 6)
oImages                             6176  0x00001820oImages                             6176  0x00001820 (mem) word[3] (member of C:\Users\User\Google Drive\NASA RMC\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (usage 3)
oKeyboards                          6182  0x00001826oKeyboards                          6182  0x00001826 (mem) word[1] (member of C:\Users\User\Google Drive\NASA RMC\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (usage 3)
oKnobs                              5898  0x0000170aoKnobs                              5898  0x0000170a (mem) word[2] (member of C:\Users\User\Google Drive\NASA RMC\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (usage 6)
OLDLACE                            65468  0x0000ffbc (const dword)  (not used)
oLedDigitsn                         6502  0x00001966oLedDigitsn                         6502  0x00001966 (mem) word[170] (member of C:\Users\User\Google Drive\NASA RMC\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (usage 6)
oLeddigitss                         6186  0x0000182aoLeddigitss                         6186  0x0000182a (mem) word[35] (member of C:\Users\User\Google Drive\NASA RMC\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (usage 9)
oLeds                               6184  0x00001828oLeds                               6184  0x00001828 (mem) word[1] (member of C:\Users\User\Google Drive\NASA RMC\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (usage 3)
OLIVE                              33792  0x00008400 (const dword)  (not used)
OLIVEDRAB                          27748  0x00006c64 (const dword)  (not used)
oMeters                             6256  0x00001870oMeters                             6256  0x00001870 (mem) word[1] (member of C:\Users\User\Google Drive\NASA RMC\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (usage 3)
ON                                     1  0x00000001 (const dword)  (not used)
oObjects                            4342  0x000010f6 (mem) word[34] (global)  (usage 108)
OP1_ADD                                5  0x00000005 (const dword)  (not used)
OP1_AND                                2  0x00000002 (const dword)  (not used)
OP1_BLACKEN                           16  0x00000010 (const dword)  (not used)
OP1_DARKEN                            18  0x00000012 (const dword)  (not used)
OP1_DIV                                8  0x00000008 (const dword)  (not used)
OP1_GRAY                              14  0x0000000e (const dword)  (not used)
OP1_IOR                                3  0x00000003 (const dword)  (not used)
OP1_LIGHTEN                           17  0x00000011 (const dword)  (not used)
OP1_MUL                                7  0x00000007 (const dword)  (not used)
OP1_NOP                                0  0x00000000 (const dword)  (not used)
OP1_REV                                9  0x00000009 (const dword)  (not used)
OP1_ROL                               12  0x0000000c (const dword)  (not used)
OP1_ROR                               13  0x0000000d (const dword)  (not used)
OP1_SET                                1  0x00000001 (const dword)  (not used)
OP1_SHL                               10  0x0000000a (const dword)  (not used)
OP1_SHR                               11  0x0000000b (const dword)  (not used)
OP1_SUB                                6  0x00000006 (const dword)  (not used)
OP1_WHITEN                            15  0x0000000f (const dword)  (not used)
OP1_XOR                                4  0x00000004 (const dword)  (not used)
OP2_ADD                                4  0x00000004 (const dword)  (not used)
OP2_AND                                1  0x00000001 (const dword)  (not used)
OP2_BLEND                              9  0x00000009 (const dword)  (not used)
OP2_COPY                               8  0x00000008 (const dword)  (not used)
OP2_DIV                                7  0x00000007 (const dword)  (not used)
OP2_IOR                                2  0x00000002 (const dword)  (not used)
OP2_MUL                                6  0x00000006 (const dword)  (not used)
OP2_SUB                                5  0x00000005 (const dword)  (not used)
OP2_XOR                                3  0x00000003 (const dword)  (not used)
OPAQUE                                 1  0x00000001 (const dword)  (not used)
oPinInputs                          6430  0x0000191eoPinInputs                          6430  0x0000191e (mem) word[1] (member of C:\Users\User\Google Drive\NASA RMC\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (usage 3)
oPinOutputs                         6454  0x00001936oPinOutputs                         6454  0x00001936 (mem) word[1] (member of C:\Users\User\Google Drive\NASA RMC\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (usage 3)
ORANGE                             64800  0x0000fd20 (const dword)  (not used)
ORANGERED                          64032  0x0000fa20 (const dword)  (not used)
ORCHID                             56218  0x0000db9a (const dword)  (not used)
oRockerSwitchs                      5902  0x0000170eoRockerSwitchs                      5902  0x0000170e (mem) word[1] (member of C:\Users\User\Google Drive\NASA RMC\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (usage 3)
oRotarySwitchs                      5904  0x00001710oRotarySwitchs                      5904  0x00001710 (mem) word[1] (member of C:\Users\User\Google Drive\NASA RMC\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (usage 3)
oScopen                             6842  0x00001abaoScopen                             6842  0x00001aba (mem) word[120] (member of C:\Users\User\Google Drive\NASA RMC\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (usage 153)
oScopes                             6424  0x00001918oScopes                             6424  0x00001918 (mem) word[1] (member of C:\Users\User\Google Drive\NASA RMC\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (not used)
oSoundss                            6452  0x00001934oSoundss                            6452  0x00001934 (mem) word[1] (member of C:\Users\User\Google Drive\NASA RMC\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (usage 3)
oSpectrums                          6422  0x00001916oSpectrums                          6422  0x00001916 (mem) word[1] (member of C:\Users\User\Google Drive\NASA RMC\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (usage 3)
oStaticTexts                        6278  0x00001886oStaticTexts                        6278  0x00001886 (mem) word[72] (member of C:\Users\User\Google Drive\NASA RMC\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (usage 3)
oStringss                           6258  0x00001872oStringss                           6258  0x00001872 (mem) word[1] (member of C:\Users\User\Google Drive\NASA RMC\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (usage 3)
OT_ACTIVATE                          103  0x00000067 (const dword)  (usage 102)
OT_MAGIC                             108  0x0000006c (const dword)  (usage 3)
OT_NEXTFRAME                         104  0x00000068 (const dword)  (usage 3)
OT_NEXTSTRING                        106  0x0000006a (const dword)  (not used)
OT_PREVFRAME                         105  0x00000069 (const dword)  (usage 3)
OT_PREVSTRING                        107  0x0000006b (const dword)  (not used)
OT_REPORT                            100  0x00000064 (const dword)  (usage 303)
OT_SETANOTHER                        102  0x00000066 (const dword)  (usage 6)
OT_SETCONST                          101  0x00000065 (const dword)  (usage 3)
oTanks                              6426  0x0000191aoTanks                              6426  0x0000191a (mem) word[1] (member of C:\Users\User\Google Drive\NASA RMC\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (usage 3)
oThermometers                       6260  0x00001874oThermometers                       6260  0x00001874 (mem) word[1] (member of C:\Users\User\Google Drive\NASA RMC\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (usage 3)
oTimers                             6450  0x00001932oTimers                             6450  0x00001932 (mem) word[1] (member of C:\Users\User\Google Drive\NASA RMC\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (usage 3)
oTrackbars                          5910  0x00001716oTrackbars                          5910  0x00001716 (mem) word[1] (member of C:\Users\User\Google Drive\NASA RMC\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (usage 6)
oUserButtons                        6448  0x00001930oUserButtons                        6448  0x00001930 (mem) word[1] (member of C:\Users\User\Google Drive\NASA RMC\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (usage 3)
oUserImagess                        6428  0x0000191coUserImagess                        6428  0x0000191c (mem) word[1] (member of C:\Users\User\Google Drive\NASA RMC\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (usage 3)
oUserleds                           6262  0x00001876oUserleds                           6262  0x00001876 (mem) word[7] (member of C:\Users\User\Google Drive\NASA RMC\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (usage 3)
OUTLINE                                1  0x00000001 (const dword)  (not used)
OUTLINE_COLOUR                        24  0x00000018 (const dword)  (not used)
OutputCS                            4666  0x0000123a (mem) word (global)  (usage 9)
OVF                                  -63  0xffffffc1 (PmmC func) args[0] r=1  (usage 3)
oVideos                             6276  0x00001884oVideos                             6276  0x00001884 (mem) word[1] (member of C:\Users\User\Google Drive\NASA RMC\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (usage 3)
OW_Read                             -523  0xfffffdf5 (PmmC func) args[1] r=1  (not used)
OW_Read9                            -524  0xfffffdf4 (PmmC func) args[1] r=1  (not used)
OW_Reset                            -522  0xfffffdf6 (PmmC func) args[1] r=1  (not used)
OW_Write                            -525  0xfffffdf3 (PmmC func) args[2] r=0  (not used)
oWinButtons                         5912  0x00001718oWinButtons                         5912  0x00001718 (mem) word[98] (member of C:\Users\User\Google Drive\NASA RMC\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (usage 12)
PA0                                    1  0x00000001 (const dword)  (not used)
PA1                                    2  0x00000002 (const dword)  (not used)
PA10                                  11  0x0000000b (const dword)  (not used)
PA11                                  12  0x0000000c (const dword)  (not used)
PA12                                  13  0x0000000d (const dword)  (not used)
PA13                                  14  0x0000000e (const dword)  (not used)
PA14                                  15  0x0000000f (const dword)  (not used)
PA15                                  16  0x00000010 (const dword)  (not used)
PA2                                    3  0x00000003 (const dword)  (not used)
PA3                                    4  0x00000004 (const dword)  (not used)
PA4                                    5  0x00000005 (const dword)  (not used)
PA5                                    6  0x00000006 (const dword)  (not used)
PA6                                    7  0x00000007 (const dword)  (not used)
PA7                                    8  0x00000008 (const dword)  (not used)
PA8                                    9  0x00000009 (const dword)  (not used)
PA9                                   10  0x0000000a (const dword)  (not used)
PALEGOLDENROD                      61269  0x0000ef55 (const dword)  (not used)
PALEGREEN                          40915  0x00009fd3 (const dword)  (not used)
PALETURQUOISE                      44925  0x0000af7d (const dword)  (not used)
PALEVIOLETRED                      56210  0x0000db92 (const dword)  (not used)
PANEL_FRAME                            3  0x00000003 (const dword)  (not used)
PANEL_HIDE                             2  0x00000002 (const dword)  (not used)
PANEL_RAISED                           1  0x00000001 (const dword)  (usage 57)
PANEL_SUNKEN                           0  0x00000000 (const dword)  (not used)
PAPAYAWHIP                         65402  0x0000ff7a (const dword)  (not used)
pause                                 -6  0xfffffffa (PmmC func) args[1] r=0  (usage 6)
PEACHPUFF                          65239  0x0000fed7 (const dword)  (not used)
peekW                                -34  0xffffffde (PmmC func) args[1] r=1  (not used)
PEN_SIZE                              16  0x00000010 (const dword)  (not used)
PERU                               52263  0x0000cc27 (const dword)  (not used)
PIN_AN                                 5  0x00000005 (const dword)  (not used)
PIN_ANAVG                              6  0x00000006 (const dword)  (not used)
pin_Counter                         -514  0xfffffdfe (PmmC func) args[3] r=1  (not used)
PIN_COUNTER_PA4                      123  0x0000007b (const dword)  (not used)
PIN_COUNTER_PA5                      124  0x0000007c (const dword)  (not used)
PIN_COUNTER_PA6                      125  0x0000007d (const dword)  (not used)
PIN_COUNTER_PA7                      126  0x0000007e (const dword)  (not used)
PIN_COUNTER_PA8                      127  0x0000007f (const dword)  (not used)
PIN_COUNTER_PA9                      128  0x00000080 (const dword)  (not used)
PIN_EVENT_PA4                        129  0x00000081 (const dword)  (not used)
PIN_EVENT_PA5                        130  0x00000082 (const dword)  (not used)
PIN_EVENT_PA6                        131  0x00000083 (const dword)  (not used)
PIN_EVENT_PA7                        132  0x00000084 (const dword)  (not used)
PIN_EVENT_PA8                        133  0x00000085 (const dword)  (not used)
PIN_EVENT_PA9                        134  0x00000086 (const dword)  (not used)
pin_HI                              -113  0xffffff8f (PmmC func) args[1] r=1  (not used)
PIN_INP                                0  0x00000000 (const dword)  (not used)
PIN_INP_HI                             1  0x00000001 (const dword)  (not used)
PIN_INP_LO                             2  0x00000002 (const dword)  (not used)
pin_LO                              -114  0xffffff8e (PmmC func) args[1] r=1  (not used)
PIN_OUT                                3  0x00000003 (const dword)  (not used)
PIN_OUT_OD                             4  0x00000004 (const dword)  (not used)
pin_Pulseout                        -512  0xfffffe00 (PmmC func) args[2] r=1  (not used)
pin_PulseoutB                       -513  0xfffffdff (PmmC func) args[2] r=1  (not used)
pin_PulseoutCount                   -519  0xfffffdf9 (PmmC func) args[4] r=1  (not used)
pin_Read                            -116  0xffffff8c (PmmC func) args[1] r=1  (not used)
pin_Set                             -112  0xffffff90 (PmmC func) args[2] r=1  (not used)
pin_Val                             -115  0xffffff8d (PmmC func) args[2] r=0  (not used)
PINK                               65049  0x0000fe19 (const dword)  (not used)
pInputIndex                         4422  0x00001146 (mem) word (global)  (usage 45)
PLUM                               56603  0x0000dd1b (const dword)  (not used)
pokeW                                -35  0xffffffdd (PmmC func) args[2] r=0  (not used)
PORTRAIT                               2  0x00000002 (const dword)  (not used)
PORTRAIT_R                             3  0x00000003 (const dword)  (not used)
POWDERBLUE                         46876  0x0000b71c (const dword)  (not used)
PROGRESSBAR_HIDE                       2  0x00000002 (const dword)  (not used)
PROGRESSBAR_RAISED                 65535  0x0000ffff (const dword)  (not used)
PROGRESSBAR_SUNKEN                 65534  0x0000fffe (const dword)  (not used)
PTN_BDIAGONAL                      65518  0x0000ffee (const ??? 0)  (not used)
PTN_BRICKS                         65521  0x0000fff1 (const ??? 0)  (not used)
PTN_BS_HORIZONTAL                  65510  0x0000ffe6 (const ??? 0)  (not used)
PTN_BS_VERTICAL                    65509  0x0000ffe5 (const ??? 0)  (not used)
PTN_BSHORIZONTAL                   65516  0x0000ffec (const ??? 0)  (not used)
PTN_BSVERTICAL                     65515  0x0000ffeb (const ??? 0)  (not used)
PTN_CARGONET                       65522  0x0000fff2 (const ??? 0)  (not used)
PTN_CIRCUITS                       65523  0x0000fff3 (const ??? 0)  (not used)
PTN_COBBLESTONES                   65524  0x0000fff4 (const ??? 0)  (not used)
PTN_COURSE_B_DIAGONAL              65512  0x0000ffe8 (const ??? 0)  (not used)
PTN_COURSE_CROSS                   65513  0x0000ffe9 (const ??? 0)  (not used)
PTN_COURSE_DIAGONALCROSS           65514  0x0000ffea (const ??? 0)  (not used)
PTN_COURSE_DOTS                    65508  0x0000ffe4 (const ??? 0)  (not used)
PTN_COURSE_F_DIAGONAL              65511  0x0000ffe7 (const ??? 0)  (not used)
PTN_CROSSES                        65535  0x0000ffff (const ??? 0)  (not used)
PTN_DAISIES                        65525  0x0000fff5 (const ??? 0)  (not used)
PTN_DIZZY                          65526  0x0000fff6 (const ??? 0)  (not used)
PTN_EMPTY                          65504  0x0000ffe0 (const dword)  (not used)
PTN_FDIAGONAL                      65517  0x0000ffed (const ??? 0)  (not used)
PTN_FIELDEFFECT                    65527  0x0000fff7 (const ??? 0)  (not used)
PTN_FINE_CROSS                     65519  0x0000ffef (const ??? 0)  (not used)
PTN_FINE_DIAGONAL_CROSS            65520  0x0000fff0 (const ??? 0)  (not used)
PTN_FINE_DOTS                      65506  0x0000ffe2 (const ??? 0)  (not used)
PTN_KEY                            65528  0x0000fff8 (const ??? 0)  (not used)
PTN_MEDIUM_DOTS                    65507  0x0000ffe3 (const ??? 0)  (not used)
PTN_ROUNDER                        65529  0x0000fff9 (const ??? 0)  (not used)
PTN_SCALES                         65530  0x0000fffa (const ??? 0)  (not used)
PTN_SOLID                          65505  0x0000ffe1 (const ??? 0)  (not used)
PTN_STONE                          65531  0x0000fffb (const ??? 0)  (not used)
PTN_THATCHES                       65532  0x0000fffc (const ??? 0)  (not used)
PTN_TILE                           65533  0x0000fffd (const ??? 0)  (not used)
PTN_WAFFLESREVENGE                 65534  0x0000fffe (const ??? 0)  (not used)
PURPLE                             32784  0x00008010 (const dword)  (not used)
putch                                 -2  0xfffffffe (PmmC func) args[1] r=0  (not used)
putchXY                               -3  0xfffffffd (PmmC func) args[3] r=0  (not used)
putnum                                -7  0xfffffff9 (PmmC func) args[2] r=1  (not used)
putnumXY                             -51  0xffffffcd (PmmC func) args[4] r=1  (not used)
putstr                                -9  0xfffffff7 (PmmC func) args[1] r=1  (usage 6)
putstrCentred                         -5  0xfffffffb (PmmC func) args[3] r=0  (not used)
putstrXY                              -4  0xfffffffc (PmmC func) args[3] r=0  (not used)
PWM_BINARY                             3  0x00000003 (const dword)  (not used)
pwm_Init                            -521  0xfffffdf7 (PmmC func) args[3] r=1  (not used)
PWM_OFF                                0  0x00000000 (const dword)  (not used)
PWM_PLAIN                              1  0x00000001 (const dword)  (not used)
PWM_SERVO                              2  0x00000002 (const dword)  (not used)
QEN1_COUNTER_HI                      136  0x00000088 (const dword)  (not used)
QEN1_COUNTER_LO                      135  0x00000087 (const dword)  (not used)
QEN1_DELTA                           137  0x00000089 (const dword)  (not used)
QEN2_COUNTER_HI                      139  0x0000008b (const dword)  (not used)
QEN2_COUNTER_LO                      138  0x0000008a (const dword)  (not used)
QEN2_DELTA                           140  0x0000008c (const dword)  (not used)
Qencoder1                           -515  0xfffffdfd (PmmC func) args[3] r=1  (not used)
Qencoder1Reset                      -517  0xfffffdfb (PmmC func) args[0] r=0  (not used)
Qencoder2                           -516  0xfffffdfc (PmmC func) args[3] r=1  (not used)
Qencoder2Reset                      -518  0xfffffdfa (PmmC func) args[0] r=0  (not used)
RAND                                 -59  0xffffffc5 (PmmC func) args[0] r=1  (not used)
RANDOM_HI                             33  0x00000021 (const dword)  (not used)
RANDOM_LO                             32  0x00000020 (const dword)  (not used)
RANDVAL                              -60  0xffffffc4 (PmmC func) args[2] r=1  (not used)
rColorPickerRoutines                6498  0x00001962rColorPickerRoutines                6498  0x00001962 (mem) word[2] (member of C:\Users\User\Google Drive\NASA RMC\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (usage 3)
READ_OBJ                               0  0x00000000 (const dword)  (usage 3)
ReadCmd                              128  0x00000080 (const dword)  (not used)
ReadObject                         13683  0x00003573 (User func) args[2] r=0  (usage 3)
RED                                63488  0x0000f800 (const dword)  (usage 15)
red                                    2  0x00000002 (mem) word (global)  (usage 24)
REPORT_EVENT                           7  0x00000007 (const dword)  (usage 6)
REPORT_MAGIC_EVENT_BYTES              10  0x0000000a (const dword)  (not used)
REPORT_MAGIC_EVENT_DBYTES             11  0x0000000b (const dword)  (not used)
REPORT_OBJ                             5  0x00000005 (const dword)  (usage 3)
RGB2HLS                            14647  0x00003937 (User func) args[0] r=0  (usage 3)
RGBMAX                               127  0x0000007f (const dword)  (usage 6)
RGBMAXm2                             254  0x000000fe (const dword)  (usage 9)
RGBs2COL                           14993  0x00003a91 (User func) args[3] r=0  (usage 3)
RIGHT_POS                              4  0x00000004 (const dword)  (not used)
rKeyboardRoutines                   6496  0x00001960rKeyboardRoutines                   6496  0x00001960 (mem) word[1] (member of C:\Users\User\Google Drive\NASA RMC\CHRISTEE (2015)\Software\RouterPIC_Robot (Competition Code)\Screen\Screen.4DWork\Screen.4DGenieS)  (not used)
ROSYBROWN                          48241  0x0000bc71 (const dword)  (not used)
ROYALBLUE                          17244  0x0000435c (const dword)  (not used)
RUNFLASH                             128  0x00000080 (const dword)  (not used)
s                                     12  0x0000000c (mem) word (global)  (usage 12)
SADDLEBROWN                        35362  0x00008a22 (const dword)  (not used)
SALMON                             64526  0x0000fc0e (const dword)  (not used)
SANDYBROWN                         62764  0x0000f52c (const dword)  (not used)
SAVE_TO_DISK                           7  0x00000007 (const dword)  (not used)
sc0Newval1                           354  0x00000162 (mem) word[116] (global)  (usage 3)
sc0Newval2                           818  0x00000332 (mem) word[116] (global)  (usage 3)
sc0Oldval1                           122  0x0000007a (mem) word[116] (global)  (usage 6)
sc0Oldval2                           586  0x0000024a (mem) word[116] (global)  (usage 3)
sc1Newval1                          1198  0x000004ae (mem) word[74] (global)  (usage 3)
sc1Oldval1                          1050  0x0000041a (mem) word[74] (global)  (usage 6)
sc2Newval1                          1494  0x000005d6 (mem) word[74] (global)  (usage 3)
sc2Oldval1                          1346  0x00000542 (mem) word[74] (global)  (usage 6)
sc3Newval1                          1790  0x000006fe (mem) word[74] (global)  (usage 3)
sc3Oldval1                          1642  0x0000066a (mem) word[74] (global)  (usage 6)
sc4Newval1                          3140  0x00000c44 (mem) word[601] (global)  (usage 3)
sc4Oldval1                          1938  0x00000792 (mem) word[601] (global)  (usage 6)
scBottom                              21  0x00000015 (const ??? 0)  (usage 9)
scColor                                0  0x00000000 (const ??? 0)  (usage 6)
scCurpos                             112  0x00000070 (mem) word[5] (global)  (usage 12)
scDataPoints                          22  0x00000016 (const ??? 0)  (usage 9)
scForm                                19  0x00000013 (const ??? 0)  (usage 6)
scGraticuleCol                         1  0x00000001 (const ??? 0)  (usage 6)
scGraticuleVis                         2  0x00000002 (const ??? 0)  (usage 6)
scGraticuleXinc                        3  0x00000003 (const ??? 0)  (usage 6)
scGraticuleYinc                        4  0x00000004 (const ??? 0)  (usage 6)
scLeft                                 5  0x00000005 (const ??? 0)  (usage 18)
SCOPEENTS                             24  0x00000018 (const ??? 0)  (usage 9)
SCREEN_MODE                           23  0x00000017 (const dword)  (not used)
scRefreshInc                           6  0x00000006 (const ??? 0)  (usage 3)
scRight                               20  0x00000014 (const ??? 0)  (usage 15)
scTop                                  7  0x00000007 (const ??? 0)  (usage 9)
scTrace1Col                            8  0x00000008 (const ??? 0)  (usage 3)
scTrace2Col                            9  0x00000009 (const ??? 0)  (usage 3)
scTrace3Col                           10  0x0000000a (const ??? 0)  (usage 3)
scTrace4Col                           11  0x0000000b (const ??? 0)  (usage 3)
scTracebuf                            32  0x00000020 (mem) word[40] (global)  (usage 42)
scTraces                              12  0x0000000c (const ??? 0)  (usage 12)
scWidth                               13  0x0000000d (const ??? 0)  (usage 3)
scXmag                                14  0x0000000e (const ??? 0)  (usage 3)
scYamp                                15  0x0000000f (const ??? 0)  (usage 3)
scYLineCol                            17  0x00000011 (const ??? 0)  (usage 6)
scYLineForm                           16  0x00000010 (const ??? 0)  (usage 6)
scYLineVis                            18  0x00000012 (const ??? 0)  (usage 6)
scYZero                               23  0x00000017 (const ??? 0)  (usage 3)
SEAGREEN                           11338  0x00002c4a (const dword)  (not used)
SEASHELL                           65469  0x0000ffbd (const dword)  (not used)
SEED                                 -61  0xffffffc3 (PmmC func) args[1] r=0  (not used)
SendReport                         13934  0x0000366e (User func) args[4] r=0  (usage 12)
serin                               -236  0xffffff14 (PmmC func) args[0] r=1  (usage 3)
serin1                              -237  0xffffff13 (PmmC func) args[0] r=1  (not used)
serin2                              -238  0xffffff12 (PmmC func) args[0] r=1  (not used)
serin3                              -239  0xffffff11 (PmmC func) args[0] r=1  (not used)
serinX                               N/A         N/A (macro) serin   (not used)
serout                              -240  0xffffff10 (PmmC func) args[1] r=0  (usage 15)
serout1                             -241  0xffffff0f (PmmC func) args[1] r=0  (not used)
serout2                             -242  0xffffff0e (PmmC func) args[1] r=0  (not used)
serout3                             -243  0xffffff0d (PmmC func) args[1] r=0  (not used)
seroutCS                           14017  0x000036c1 (User func) args[1] r=0  (usage 15)
seroutOcs                          13984  0x000036a0 (User func) args[0] r=0  (usage 3)
seroutX                              N/A         N/A (macro) serout   (not used)
setbaud                             -224  0xffffff20 (PmmC func) args[1] r=0  (not used)
setCpHSl                           14036  0x000036d4 (User func) args[3] r=0  (usage 6)
SIENNA                             41605  0x0000a285 (const dword)  (not used)
SILVER                             50712  0x0000c618 (const dword)  (not used)
SIN                                  -57  0xffffffc7 (PmmC func) args[1] r=1  (not used)
SKYBLUE                            34429  0x0000867d (const dword)  (not used)
SLATEBLUE                          27353  0x00006ad9 (const dword)  (not used)
SLATEGRAY                          29714  0x00007412 (const dword)  (not used)
SLIDER_HIDE                            2  0x00000002 (const dword)  (not used)
SLIDER_RAISED                          1  0x00000001 (const dword)  (not used)
SLIDER_SUNKEN                          0  0x00000000 (const dword)  (not used)
snd_BufSize                         -461  0xfffffe33 (PmmC func) args[1] r=0  (not used)
snd_Continue                        -464  0xfffffe30 (PmmC func) args[0] r=0  (not used)
snd_Freq                            -466  0xfffffe2e (PmmC func) args[2] r=1  (not used)
snd_Pause                           -463  0xfffffe31 (PmmC func) args[0] r=0  (not used)
snd_Pitch                           -460  0xfffffe34 (PmmC func) args[1] r=1  (not used)
snd_Playing                         -465  0xfffffe2f (PmmC func) args[0] r=1  (not used)
snd_Stop                            -462  0xfffffe32 (PmmC func) args[0] r=0  (not used)
snd_Volume                          -459  0xfffffe35 (PmmC func) args[1] r=0  (not used)
SNOW                               65503  0x0000ffdf (const dword)  (not used)
SOLID                                  0  0x00000000 (const dword)  (not used)
SPI1                                   1  0x00000001 (const dword)  (not used)
SPI16_MODE_0                           8  0x00000008 (const dword)  (not used)
SPI16_MODE_1                           9  0x00000009 (const dword)  (not used)
SPI16_MODE_2                          10  0x0000000a (const dword)  (not used)
SPI16_MODE_3                          11  0x0000000b (const dword)  (not used)
SPI16_MODE_4                          12  0x0000000c (const dword)  (not used)
SPI16_MODE_5                          13  0x0000000d (const dword)  (not used)
SPI16_MODE_6                          14  0x0000000e (const dword)  (not used)
SPI16_MODE_7                          15  0x0000000f (const dword)  (not used)
SPI1_Init                           -349  0xfffffea3 (PmmC func) args[2] r=1  (not used)
SPI1_Read                           -352  0xfffffea0 (PmmC func) args[0] r=1  (not used)
spi1_ReadBlock                      -333  0xfffffeb3 (PmmC func) args[2] r=0  (not used)
SPI1_SCK_pin                        -346  0xfffffea6 (PmmC func) args[1] r=1  (not used)
SPI1_SDI_pin                        -343  0xfffffea9 (PmmC func) args[1] r=1  (not used)
SPI1_SDO_pin                        -340  0xfffffeac (PmmC func) args[1] r=1  (not used)
SPI1_Write                          -355  0xfffffe9d (PmmC func) args[1] r=1  (not used)
spi1_WriteBlock                     -359  0xfffffe99 (PmmC func) args[2] r=0  (not used)
SPI2                                   2  0x00000002 (const dword)  (not used)
SPI2_Init                           -350  0xfffffea2 (PmmC func) args[2] r=1  (not used)
SPI2_Read                           -353  0xfffffe9f (PmmC func) args[0] r=1  (not used)
spi2_ReadBlock                      -334  0xfffffeb2 (PmmC func) args[2] r=0  (not used)
SPI2_SCK_pin                        -347  0xfffffea5 (PmmC func) args[1] r=1  (not used)
SPI2_SDI_pin                        -344  0xfffffea8 (PmmC func) args[1] r=1  (not used)
SPI2_SDO_pin                        -341  0xfffffeab (PmmC func) args[1] r=1  (not used)
SPI2_Write                          -356  0xfffffe9c (PmmC func) args[1] r=1  (not used)
spi2_WriteBlock                     -360  0xfffffe98 (PmmC func) args[2] r=0  (not used)
SPI3                                   3  0x00000003 (const dword)  (not used)
SPI3_Init                           -351  0xfffffea1 (PmmC func) args[2] r=1  (not used)
SPI3_Read                           -354  0xfffffe9e (PmmC func) args[0] r=1  (not used)
spi3_ReadBlock                      -335  0xfffffeb1 (PmmC func) args[2] r=0  (not used)
SPI3_SCK_pin                        -348  0xfffffea4 (PmmC func) args[1] r=1  (not used)
SPI3_SDI_pin                        -345  0xfffffea7 (PmmC func) args[1] r=1  (not used)
SPI3_SDO_pin                        -342  0xfffffeaa (PmmC func) args[1] r=1  (not used)
SPI3_Write                          -357  0xfffffe9b (PmmC func) args[1] r=1  (not used)
spi3_WriteBlock                     -361  0xfffffe97 (PmmC func) args[2] r=0  (not used)
SPI8_MODE_0                            0  0x00000000 (const dword)  (not used)
SPI8_MODE_1                            1  0x00000001 (const dword)  (not used)
SPI8_MODE_2                            2  0x00000002 (const dword)  (not used)
SPI8_MODE_3                            3  0x00000003 (const dword)  (not used)
SPI8_MODE_4                            4  0x00000004 (const dword)  (not used)
SPI8_MODE_5                            5  0x00000005 (const dword)  (not used)
SPI8_MODE_6                            6  0x00000006 (const dword)  (not used)
SPI8_MODE_7                            7  0x00000007 (const dword)  (not used)
spi_Disable                         -339  0xfffffead (PmmC func) args[0] r=0  (not used)
spi_Init                            -336  0xfffffeb0 (PmmC func) args[3] r=0  (not used)
spi_Read                            -337  0xfffffeaf (PmmC func) args[0] r=1  (not used)
spi_ReadBlock                       -332  0xfffffeb4 (PmmC func) args[2] r=0  (not used)
SPI_SPEED0                             0  0x00000000 (const dword)  (not used)
SPI_SPEED1                             1  0x00000001 (const dword)  (not used)
SPI_SPEED10                           10  0x0000000a (const dword)  (not used)
SPI_SPEED11                           11  0x0000000b (const dword)  (not used)
SPI_SPEED12                           12  0x0000000c (const dword)  (not used)
SPI_SPEED13                           13  0x0000000d (const dword)  (not used)
SPI_SPEED14                           14  0x0000000e (const dword)  (not used)
SPI_SPEED15                           15  0x0000000f (const dword)  (not used)
SPI_SPEED2                             2  0x00000002 (const dword)  (not used)
SPI_SPEED3                             3  0x00000003 (const dword)  (not used)
SPI_SPEED4                             4  0x00000004 (const dword)  (not used)
SPI_SPEED5                             5  0x00000005 (const dword)  (not used)
SPI_SPEED6                             6  0x00000006 (const dword)  (not used)
SPI_SPEED7                             7  0x00000007 (const dword)  (not used)
SPI_SPEED8                             8  0x00000008 (const dword)  (not used)
SPI_SPEED9                             9  0x00000009 (const dword)  (not used)
spi_Write                           -338  0xfffffeae (PmmC func) args[1] r=0  (not used)
spi_WriteBlock                      -358  0xfffffe9a (PmmC func) args[2] r=0  (not used)
spiflash_BlockErase                 -541  0xfffffde3 (PmmC func) args[3] r=0  (not used)
spiflash_BulkErase                  -540  0xfffffde4 (PmmC func) args[2] r=0  (not used)
spiflash_Exec                       -554  0xfffffdd6 (PmmC func) args[3] r=1  (not used)
spiflash_GetC                       -547  0xfffffddd (PmmC func) args[2] r=1  (not used)
spiflash_GetS                       -551  0xfffffdd9 (PmmC func) args[4] r=1  (not used)
spiflash_GetW                       -549  0xfffffddb (PmmC func) args[2] r=1  (not used)
spiflash_ID                         -539  0xfffffde5 (PmmC func) args[2] r=1  (not used)
spiflash_Image                      -545  0xfffffddf (PmmC func) args[4] r=1  (not used)
spiflash_LoadFunction               -552  0xfffffdd8 (PmmC func) args[2] r=1  (not used)
spiflash_LoadImageControl           -555  0xfffffdd5 (PmmC func) args[2] r=1  (not used)
spiflash_PlayWAV                    -556  0xfffffdd4 (PmmC func) args[2] r=1  (not used)
spiflash_PutC                       -546  0xfffffdde (PmmC func) args[3] r=0  (not used)
spiflash_PutS                       -550  0xfffffdda (PmmC func) args[3] r=1  (not used)
spiflash_PutW                       -548  0xfffffddc (PmmC func) args[3] r=0  (not used)
spiflash_Read                       -543  0xfffffde1 (PmmC func) args[4] r=1  (not used)
spiflash_Run                        -553  0xfffffdd7 (PmmC func) args[3] r=1  (not used)
spiflash_SetAdd                     -542  0xfffffde2 (PmmC func) args[3] r=0  (not used)
spiflash_SIG                        -538  0xfffffde6 (PmmC func) args[2] r=1  (not used)
spiflash_Write                      -544  0xfffffde0 (PmmC func) args[4] r=1  (not used)
SPRINGGREEN                         2031  0x000007ef (const dword)  (not used)
SQRT                                 -62  0xffffffc2 (PmmC func) args[1] r=1  (not used)
SSD1963_ENTER_IDLE_MODE               57  0x00000039 (const dword)  (not used)
SSD1963_ENTER_INVERT_MODE             33  0x00000021 (const dword)  (not used)
SSD1963_ENTER_NORMAL_MODE             19  0x00000013 (const dword)  (not used)
SSD1963_ENTER_PARTIAL_MODE            18  0x00000012 (const dword)  (not used)
SSD1963_ENTER_SLEEP_MODE              16  0x00000010 (const dword)  (not used)
SSD1963_EXIT_IDLE_MODE                56  0x00000038 (const dword)  (not used)
SSD1963_EXIT_INVERT_MODE              32  0x00000020 (const dword)  (not used)
SSD1963_EXIT_SLEEP_MODE               17  0x00000011 (const dword)  (not used)
SSD1963_GET_ADDRESS_MODE              11  0x0000000b (const dword)  (not used)
SSD1963_GET_DBC_CONF                 209  0x000000d1 (const dword)  (not used)
SSD1963_GET_DBC_TH                   213  0x000000d5 (const dword)  (not used)
SSD1963_GET_DISPLAY_MODE              13  0x0000000d (const dword)  (not used)
SSD1963_GET_GPIO0_ROP                201  0x000000c9 (const dword)  (not used)
SSD1963_GET_GPIO1_ROP                203  0x000000cb (const dword)  (not used)
SSD1963_GET_GPIO2_ROP                205  0x000000cd (const dword)  (not used)
SSD1963_GET_GPIO3_ROP                207  0x000000cf (const dword)  (not used)
SSD1963_GET_GPIO_CONFIG              185  0x000000b9 (const dword)  (not used)
SSD1963_GET_GPIO_STATUS              187  0x000000bb (const dword)  (not used)
SSD1963_GET_HORZ_PERIOD              181  0x000000b5 (const dword)  (not used)
SSD1963_GET_LCD_GEN0                 192  0x000000c0 (const dword)  (not used)
SSD1963_GET_LCD_GEN1                 194  0x000000c2 (const dword)  (not used)
SSD1963_GET_LCD_GEN2                 196  0x000000c4 (const dword)  (not used)
SSD1963_GET_LCD_GEN3                 198  0x000000c6 (const dword)  (not used)
SSD1963_GET_LCD_MODE                 177  0x000000b1 (const dword)  (not used)
SSD1963_GET_LSHIFT_FREQ              231  0x000000e7 (const dword)  (not used)
SSD1963_GET_PIXEL_DATA_INTERFACE     241  0x000000f1 (const dword)  (not used)
SSD1963_GET_PLL_MN                   227  0x000000e3 (const dword)  (not used)
SSD1963_GET_PLL_STATUS               228  0x000000e4 (const dword)  (not used)
SSD1963_GET_POST_PROC                189  0x000000bd (const dword)  (not used)
SSD1963_GET_POWER_MODE                10  0x0000000a (const dword)  (not used)
SSD1963_GET_PWM_CONFIG               191  0x000000bf (const dword)  (not used)
SSD1963_GET_SCANLINE                  69  0x00000045 (const dword)  (not used)
SSD1963_GET_TEAR_EFFECT_STATUS        14  0x0000000e (const dword)  (not used)
SSD1963_GET_VERT_PERIOD              183  0x000000b7 (const dword)  (not used)
SSD1963_NOP                            0  0x00000000 (const dword)  (not used)
SSD1963_READ_DDB                     161  0x000000a1 (const dword)  (not used)
SSD1963_READ_MEMORY_CONTINUE          62  0x0000003e (const dword)  (not used)
SSD1963_READ_MEMORY_START             46  0x0000002e (const dword)  (not used)
SSD1963_SET_ADDRESS_MODE              54  0x00000036 (const dword)  (not used)
SSD1963_SET_COLUMN_ADDRESS            42  0x0000002a (const dword)  (not used)
SSD1963_SET_DBC_CONF                 208  0x000000d0 (const dword)  (not used)
SSD1963_SET_DBC_TH                   212  0x000000d4 (const dword)  (not used)
SSD1963_SET_DEEP_SLEEP               229  0x000000e5 (const dword)  (not used)
SSD1963_SET_DISPLAY_OFF               40  0x00000028 (const dword)  (not used)
SSD1963_SET_DISPLAY_ON                41  0x00000029 (const dword)  (not used)
SSD1963_SET_GAMMA_CURVE               38  0x00000026 (const dword)  (not used)
SSD1963_SET_GPIO0_ROP                200  0x000000c8 (const dword)  (not used)
SSD1963_SET_GPIO1_ROP                202  0x000000ca (const dword)  (not used)
SSD1963_SET_GPIO2_ROP                204  0x000000cc (const dword)  (not used)
SSD1963_SET_GPIO3_ROP                206  0x000000ce (const dword)  (not used)
SSD1963_SET_GPIO_CONFIG              184  0x000000b8 (const dword)  (not used)
SSD1963_SET_GPIO_VALUE               186  0x000000ba (const dword)  (not used)
SSD1963_SET_HORZ_PERIOD              180  0x000000b4 (const dword)  (not used)
SSD1963_SET_LCD_GEN0                 193  0x000000c1 (const dword)  (not used)
SSD1963_SET_LCD_GEN1                 195  0x000000c3 (const dword)  (not used)
SSD1963_SET_LCD_GEN2                 197  0x000000c5 (const dword)  (not used)
SSD1963_SET_LCD_GEN3                 199  0x000000c7 (const dword)  (not used)
SSD1963_SET_LCD_MODE                 176  0x000000b0 (const dword)  (not used)
SSD1963_SET_LSHIFT_FREQ              230  0x000000e6 (const dword)  (not used)
SSD1963_SET_PAGE_ADDRESS              43  0x0000002b (const dword)  (not used)
SSD1963_SET_PARTIAL_AREA              48  0x00000030 (const dword)  (not used)
SSD1963_SET_PLL                      224  0x000000e0 (const dword)  (not used)
SSD1963_SET_PLL_MN                   226  0x000000e2 (const dword)  (not used)
SSD1963_SET_POST_PROC                188  0x000000bc (const dword)  (not used)
SSD1963_SET_PWM_CONFIG               190  0x000000be (const dword)  (not used)
SSD1963_SET_REAR_ON                   53  0x00000035 (const dword)  (not used)
SSD1963_SET_SCROLL_AREA               51  0x00000033 (const dword)  (not used)
SSD1963_SET_SCROLL_START              55  0x00000037 (const dword)  (not used)
SSD1963_SET_TEAR_OFF                  52  0x00000034 (const dword)  (not used)
SSD1963_SET_TEAR_SCANLINE             68  0x00000044 (const dword)  (not used)
SSD1963_SET_VERT_PERIOD              182  0x000000b6 (const dword)  (not used)
SSD1963_SOFT_RESET                     1  0x00000001 (const dword)  (not used)
SSD1963_WRITE_MEMORY_CONTINUE         60  0x0000003c (const dword)  (not used)
SSD1963_WRITE_MEMORY_START            44  0x0000002c (const dword)  (not used)
STEELBLUE                          17430  0x00004416 (const dword)  (not used)
STR                                  128  0x00000080 (const dword)  (not used)
str_ByteMove                        -487  0xfffffe19 (PmmC func) args[3] r=1  (not used)
str_Cat                             -485  0xfffffe1b (PmmC func) args[2] r=1  (not used)
str_CatN                            -486  0xfffffe1a (PmmC func) args[3] r=1  (not used)
str_Copy                            -488  0xfffffe18 (PmmC func) args[2] r=1  (not used)
str_CopyN                           -489  0xfffffe17 (PmmC func) args[3] r=1  (not used)
str_Find                            -481  0xfffffe1f (PmmC func) args[2] r=1  (not used)
str_FindI                           -482  0xfffffe1e (PmmC func) args[2] r=1  (not used)
str_GetByte                         -475  0xfffffe25 (PmmC func) args[1] r=1  (not used)
str_GetC                            -474  0xfffffe26 (PmmC func) args[2] r=1  (not used)
str_GetD                            -471  0xfffffe29 (PmmC func) args[2] r=1  (not used)
str_GetHexW                         -473  0xfffffe27 (PmmC func) args[2] r=1  (not used)
str_GetW                            -472  0xfffffe28 (PmmC func) args[2] r=1  (not used)
str_GetWord                         -476  0xfffffe24 (PmmC func) args[1] r=1  (not used)
str_Length                          -483  0xfffffe1d (PmmC func) args[1] r=1  (not used)
str_Match                           -479  0xfffffe21 (PmmC func) args[2] r=1  (not used)
str_MatchI                          -480  0xfffffe20 (PmmC func) args[2] r=1  (not used)
str_Printf                          -484  0xfffffe1c (PmmC func) args[2] r=1  (not used)
str_Ptr                             -470  0xfffffe2a (PmmC func) args[1] r=1  (not used)
str_PutByte                         -477  0xfffffe23 (PmmC func) args[2] r=0  (not used)
str_PutWord                         -478  0xfffffe22 (PmmC func) args[2] r=0  (not used)
strheight                            -14  0xfffffff2 (PmmC func) args[0] r=1  (not used)
strlen                               -10  0xfffffff6 (PmmC func) args[1] r=1  (not used)
strwidth                             -13  0xfffffff3 (PmmC func) args[1] r=1  (not used)
STYLE1                                 2  0x00000002 (const dword)  (not used)
STYLE2                                 3  0x00000003 (const dword)  (not used)
SWAP                                 -56  0xffffffc8 (PmmC func) args[2] r=0  (usage 3)
sys_DeepSleep                       -405  0xfffffe6b (PmmC func) args[1] r=1  (not used)
sys_Driver                          -531  0xfffffded (PmmC func) args[0] r=0  (not used)
sys_ErrorMessage                    -534  0xfffffdea (PmmC func) args[1] r=1  (not used)
sys_EventQueue                      -396  0xfffffe74 (PmmC func) args[0] r=1  (not used)
sys_EventsPostpone                  -397  0xfffffe73 (PmmC func) args[0] r=0  (not used)
sys_EventsResume                    -398  0xfffffe72 (PmmC func) args[0] r=0  (usage 3)
sys_GetDate                         -401  0xfffffe6f (PmmC func) args[0] r=0  (not used)
sys_GetDateVar                      -528  0xfffffdf0 (PmmC func) args[3] r=0  (not used)
sys_GetTime                         -399  0xfffffe71 (PmmC func) args[0] r=0  (not used)
sys_GetTimer                        -394  0xfffffe76 (PmmC func) args[1] r=1  (not used)
sys_GetTimeVar                      -529  0xfffffdef (PmmC func) args[4] r=0  (not used)
sys_PmmC                            -530  0xfffffdee (PmmC func) args[0] r=0  (not used)
sys_SetDate                         -402  0xfffffe6e (PmmC func) args[3] r=1  (not used)
sys_SetTime                         -400  0xfffffe70 (PmmC func) args[3] r=1  (not used)
sys_SetTimer                        -393  0xfffffe77 (PmmC func) args[2] r=0  (not used)
sys_SetTimerEvent                   -395  0xfffffe75 (PmmC func) args[2] r=1  (not used)
sys_Sleep                           -403  0xfffffe6d (PmmC func) args[1] r=1  (not used)
sys_StoreTouchCalibration           -368  0xfffffe90 (PmmC func) args[0] r=1  (not used)
sys_T                               -391  0xfffffe79 (PmmC func) args[0] r=1  (not used)
sys_T_HI                            -392  0xfffffe78 (PmmC func) args[0] r=1  (not used)
SYS_X_MAX                             44  0x0000002c (const dword)  (not used)
SYS_Y_MAX                             45  0x0000002d (const dword)  (not used)
SYSTEM_TIMER_HI                       35  0x00000023 (const dword)  (not used)
SYSTEM_TIMER_LO                       34  0x00000022 (const dword)  (not used)
t4Dbutton                             30  0x0000001e (const dword)  (usage 33)
TAN                                54705  0x0000d5b1 (const dword)  (not used)
tAngularmeter                          7  0x00000007 (const dword)  (usage 3)
tAniButton                            31  0x0000001f (const dword)  (usage 6)
TB1                                  100  0x00000064 (const dword)  (not used)
TB2                                  101  0x00000065 (const dword)  (not used)
TB3                                  102  0x00000066 (const dword)  (not used)
TB4                                  103  0x00000067 (const dword)  (not used)
tColorPicker                          32  0x00000020 (const dword)  (usage 18)
tCoolgauge                             8  0x00000008 (const dword)  (usage 3)
tCustomdigits                          9  0x00000009 (const dword)  (usage 6)
tDipSwitch                             0  0x00000000 (const dword)  (usage 3)
TEAL                                1040  0x00000410 (const dword)  (not used)
TEXT                               63489  0x0000f801 (const dword)  (not used)
TEXT_ANGLE                            15  0x0000000f (const dword)  (not used)
TEXT_ATTRIBUTES                       13  0x0000000d (const dword)  (not used)
TEXT_BACKGROUND                        1  0x00000001 (const dword)  (not used)
TEXT_BOLD                              9  0x00000009 (const dword)  (not used)
TEXT_COLOUR                            0  0x00000000 (const dword)  (not used)
TEXT_HEIGHT                            4  0x00000004 (const dword)  (not used)
TEXT_HIGHLIGHT                         1  0x00000001 (const dword)  (not used)
TEXT_INVERSE                          11  0x0000000b (const dword)  (not used)
TEXT_ITALIC                           10  0x0000000a (const dword)  (not used)
TEXT_MARGIN                           97  0x00000061 (const dword)  (not used)
TEXT_OPACITY                           8  0x00000008 (const dword)  (not used)
TEXT_PRINTDELAY                        7  0x00000007 (const dword)  (not used)
TEXT_UNDERLINED                       12  0x0000000c (const dword)  (not used)
TEXT_WIDTH                             3  0x00000003 (const dword)  (not used)
TEXT_WRAP                             14  0x0000000e (const dword)  (not used)
TEXT_XGAP                              5  0x00000005 (const dword)  (not used)
TEXT_XPOS                             95  0x0000005f (const dword)  (not used)
TEXT_YGAP                              6  0x00000006 (const dword)  (not used)
TEXT_YPOS                             96  0x00000060 (const dword)  (not used)
tForm                                 10  0x0000000a (const dword)  (usage 15)
tGauge                                11  0x0000000b (const dword)  (usage 3)
tGSlider                               4  0x00000004 (const dword)  (usage 9)
THISTLE                            56827  0x0000ddfb (const dword)  (not used)
tImage                                12  0x0000000c (const dword)  (usage 3)
TIMER0                                 0  0x00000000 (const dword)  (not used)
TIMER1                                 1  0x00000001 (const dword)  (not used)
TIMER2                                 2  0x00000002 (const dword)  (not used)
TIMER3                                 3  0x00000003 (const dword)  (not used)
TIMER4                                 4  0x00000004 (const dword)  (not used)
TIMER5                                 5  0x00000005 (const dword)  (not used)
TIMER6                                 6  0x00000006 (const dword)  (not used)
TIMER7                                 7  0x00000007 (const dword)  (not used)
tKeyboard                             13  0x0000000d (const dword)  (usage 3)
tKnob                                  1  0x00000001 (const dword)  (usage 6)
tLed                                  14  0x0000000e (const dword)  (usage 3)
tLeddigits                            15  0x0000000f (const dword)  (usage 12)
tMagicObject                          34  0x00000022 (const dword)  (not used)
tMeter                                16  0x00000010 (const dword)  (usage 3)
TMR0                                  36  0x00000024 (const dword)  (not used)
TMR1                                  37  0x00000025 (const dword)  (not used)
TMR2                                  38  0x00000026 (const dword)  (not used)
TMR3                                  39  0x00000027 (const dword)  (not used)
TMR4                                  40  0x00000028 (const dword)  (not used)
TMR5                                  41  0x00000029 (const dword)  (not used)
TMR6                                  42  0x0000002a (const dword)  (not used)
TMR7                                  43  0x0000002b (const dword)  (not used)
TMul                               13877  0x00003635 (User func) args[3] r=0  (usage 9)
tnew                                4676  0x00001244 (mem) word[4] (global)  (usage 21)
to                                    -1  0xffffffff (PmmC func) args[1] r=0  (not used)
told                                4668  0x0000123c (mem) word[4] (global)  (usage 21)
tolower                              -46  0xffffffd2 (PmmC func) args[1] r=1  (not used)
TOMATO                             64264  0x0000fb08 (const dword)  (not used)
TOP_POS                                3  0x00000003 (const dword)  (not used)
touch_DetectRegion                  -406  0xfffffe6a (PmmC func) args[4] r=0  (not used)
TOUCH_DISABLE                          1  0x00000001 (const dword)  (not used)
TOUCH_ENABLE                           0  0x00000000 (const dword)  (usage 3)
touch_Get                           -408  0xfffffe68 (PmmC func) args[1] r=1  (usage 9)
TOUCH_GETX                             1  0x00000001 (const dword)  (usage 3)
TOUCH_GETY                             2  0x00000002 (const dword)  (usage 3)
TOUCH_MOVING                           3  0x00000003 (const dword)  (usage 3)
TOUCH_PRESSED                          1  0x00000001 (const dword)  (usage 9)
TOUCH_RAW_X                          117  0x00000075 (const dword)  (not used)
TOUCH_RAW_Y                          118  0x00000076 (const dword)  (not used)
TOUCH_REGIONDEFAULT                    2  0x00000002 (const dword)  (not used)
TOUCH_RELEASED                         2  0x00000002 (const dword)  (usage 18)
touch_Set                           -407  0xfffffe69 (PmmC func) args[1] r=0  (usage 3)
TOUCH_STATUS                           0  0x00000000 (const dword)  (usage 3)
touch_TestArea                      -410  0xfffffe66 (PmmC func) args[1] r=1  (not used)
touch_TestBox                       -409  0xfffffe67 (PmmC func) args[1] r=1  (not used)
TOUCH_XMAXCAL                         80  0x00000050 (const dword)  (not used)
TOUCH_XMINCAL                         78  0x0000004e (const dword)  (not used)
TOUCH_YMAXCAL                         81  0x00000051 (const dword)  (not used)
TOUCH_YMINCAL                         79  0x0000004f (const dword)  (not used)
TouchState                          4418  0x00001142 (mem) word (global)  (usage 24)
TouchXpos                           4412  0x0000113c (mem) word (global)  (usage 33)
TouchYpos                           4414  0x0000113e (mem) word (global)  (usage 28)
toupper                              -45  0xffffffd3 (PmmC func) args[1] r=1  (not used)
tPinInput                             29  0x0000001d (const dword)  (usage 6)
tPinOutput                            28  0x0000001c (const dword)  (usage 6)
TRANSPARENCY                          21  0x00000015 (const dword)  (not used)
TRANSPARENT                            0  0x00000000 (const dword)  (not used)
TRANSPARENT_COLOUR                    20  0x00000014 (const dword)  (not used)
tRockerSwitch                          2  0x00000002 (const dword)  (usage 3)
tRotarySwitch                          3  0x00000003 (const dword)  (usage 3)
tScope                                25  0x00000019 (const dword)  (usage 3)
tSounds                               22  0x00000016 (const dword)  (usage 6)
tSpectrum                             24  0x00000018 (const dword)  (usage 3)
tStaticText                           21  0x00000015 (const dword)  (usage 3)
tStrings                              17  0x00000011 (const dword)  (usage 3)
tTank                                 26  0x0000001a (const dword)  (usage 3)
tThermometer                          18  0x00000012 (const dword)  (usage 3)
tTimer                                23  0x00000017 (const dword)  (usage 6)
tTrackbar                              5  0x00000005 (const dword)  (usage 3)
TurnOffButtons                     12395  0x0000306b (User func) args[1] r=0  (usage 6)
TURQUOISE                          18202  0x0000471a (const dword)  (not used)
tUserButton                           33  0x00000021 (const dword)  (usage 9)
tUserImages                           27  0x0000001b (const dword)  (usage 3)
tUserled                              19  0x00000013 (const dword)  (usage 9)
tVideo                                20  0x00000014 (const dword)  (usage 3)
tWinButton                             6  0x00000006 (const dword)  (usage 306)
txt_Angle                            -33  0xffffffdf (PmmC func) args[1] r=1  (not used)
txt_Attributes                       -31  0xffffffe1 (PmmC func) args[1] r=1  (not used)
txt_BGcolour                         -19  0xffffffed (PmmC func) args[1] r=1  (not used)
txt_Bold                             -27  0xffffffe5 (PmmC func) args[1] r=1  (not used)
txt_Delay                            -25  0xffffffe7 (PmmC func) args[1] r=1  (not used)
txt_FGcolour                         -18  0xffffffee (PmmC func) args[1] r=1  (not used)
TXT_FONT_HEIGHT                      102  0x00000066 (const dword)  (not used)
TXT_FONT_ID                           98  0x00000062 (const dword)  (not used)
TXT_FONT_MAX                          99  0x00000063 (const dword)  (not used)
TXT_FONT_OFFSET                      100  0x00000064 (const dword)  (not used)
TXT_FONT_WIDTH                       101  0x00000065 (const dword)  (not used)
txt_FontBank                         -52  0xffffffcc (PmmC func) args[2] r=1  (not used)
txt_FontID                           -20  0xffffffec (PmmC func) args[1] r=1  (not used)
txt_Height                           -22  0xffffffea (PmmC func) args[1] r=1  (not used)
txt_Inverse                          -29  0xffffffe3 (PmmC func) args[1] r=1  (not used)
txt_Italic                           -28  0xffffffe4 (PmmC func) args[1] r=1  (not used)
txt_MoveCursor                       -16  0xfffffff0 (PmmC func) args[2] r=0  (not used)
txt_Opacity                          -26  0xffffffe6 (PmmC func) args[1] r=1  (not used)
txt_Set                              -17  0xffffffef (PmmC func) args[2] r=0  (not used)
txt_Underline                        -30  0xffffffe2 (PmmC func) args[1] r=1  (not used)
txt_Width                            -21  0xffffffeb (PmmC func) args[1] r=1  (not used)
txt_Wrap                             -32  0xffffffe0 (PmmC func) args[1] r=1  (not used)
txt_Xgap                             -23  0xffffffe9 (PmmC func) args[1] r=1  (not used)
txt_Ygap                             -24  0xffffffe8 (PmmC func) args[1] r=1  (not used)
uadd_3232                            -71  0xffffffb9 (PmmC func) args[3] r=1  (not used)
ucmp_3232                            -75  0xffffffb5 (PmmC func) args[2] r=1  (not used)
UDEC                               17674  0x0000450a (const dword)  (not used)
UDEC1                              16650  0x0000410a (const dword)  (not used)
UDEC1Z                             20746  0x0000510a (const dword)  (not used)
UDEC1ZB                            24842  0x0000610a (const dword)  (not used)
UDEC2                              16906  0x0000420a (const dword)  (not used)
UDEC2Z                             21002  0x0000520a (const dword)  (not used)
UDEC2ZB                            25098  0x0000620a (const dword)  (not used)
UDEC3                              17162  0x0000430a (const dword)  (not used)
UDEC3Z                             21258  0x0000530a (const dword)  (not used)
UDEC3ZB                            25354  0x0000630a (const dword)  (not used)
UDEC4                              17418  0x0000440a (const dword)  (not used)
UDEC4Z                             21514  0x0000540a (const dword)  (not used)
UDEC4ZB                            25610  0x0000640a (const dword)  (not used)
UDEC5                              17674  0x0000450a (const dword)  (not used)
UDEC5Z                             21770  0x0000550a (const dword)  (not used)
UDEC5ZB                            25866  0x0000650a (const dword)  (not used)
UDECZ                              21770  0x0000550a (const dword)  (not used)
UDECZB                             25866  0x0000650a (const dword)  (not used)
udiv_3232                            -74  0xffffffb6 (PmmC func) args[3] r=1  (not used)
ULCD_70DT_DIABLO16_GFX                 0  0x00000000 (const ??? 0)  (not used)
umul_1616                            -73  0xffffffb7 (PmmC func) args[3] r=1  (usage 9)
UNCHECKED                              1  0x00000001 (const dword)  (not used)
UNDEFINED                             84  0x00000054 (const dword)  (usage 3)
UNDERLINED                           128  0x00000080 (const dword)  (not used)
unicode_page                         -15  0xfffffff1 (PmmC func) args[3] r=1  (not used)
UP                                     1  0x00000001 (const dword)  (not used)
UpdateObjects                      10916  0x00002aa4 (User func) args[1] r=0  (usage 9)
usub_3232                            -72  0xffffffb8 (PmmC func) args[3] r=1  (not used)
VIOLET                             60445  0x0000ec1d (const dword)  (not used)
WHEAT                              63222  0x0000f6f6 (const dword)  (not used)
WHITE                              65535  0x0000ffff (const dword)  (usage 54)
WHITESMOKE                         63422  0x0000f7be (const dword)  (not used)
WRITE_CONTRAST                         4  0x00000004 (const dword)  (usage 3)
WRITE_MAGIC_BYTES                      8  0x00000008 (const dword)  (not used)
WRITE_MAGIC_DBYTES                     9  0x00000009 (const dword)  (not used)
WRITE_OBJ                              1  0x00000001 (const dword)  (usage 3)
WRITE_STR                              2  0x00000002 (const dword)  (not used)
WRITE_STRU                             3  0x00000003 (const dword)  (not used)
WriteCmd                               0  0x00000000 (const dword)  (not used)
WriteObject                        12581  0x00003125 (User func) args[3] r=0  (usage 24)
X_MAX                                  0  0x00000000 (const dword)  (not used)
X_ORG                                  6  0x00000006 (const dword)  (not used)
X_ORIGIN                              30  0x0000001e (const dword)  (not used)
XYposToDegree                      15017  0x00003aa9 (User func) args[2] r=0  (usage 3)
Y_MAX                                  1  0x00000001 (const dword)  (not used)
Y_ORG                                  7  0x00000007 (const dword)  (not used)
Y_ORIGIN                              31  0x0000001f (const dword)  (not used)
YELLOW                             65504  0x0000ffe0 (const dword)  (usage 18)
YELLOWGREEN                        40550  0x00009e66 (const dword)  (not used)
